webpackJsonp([1],{

/***/ 1049:
/***/ function(module, exports, __webpack_require__) {

__webpack_require__("aurelia-binding");
__webpack_require__(24);
__webpack_require__("aurelia-event-aggregator");
__webpack_require__("aurelia-framework");
__webpack_require__(162);
__webpack_require__("aurelia-history-browser");
__webpack_require__(89);
__webpack_require__("aurelia-loader-webpack");
__webpack_require__(51);
__webpack_require__("aurelia-logging-console");
__webpack_require__(43);
__webpack_require__(52);
__webpack_require__("aurelia-route-recognizer");
__webpack_require__("aurelia-router");
__webpack_require__(105);
__webpack_require__(37);
__webpack_require__("aurelia-templating-binding");
__webpack_require__("aurelia-templating-router");
module.exports = __webpack_require__("aurelia-templating-resources");


/***/ },

/***/ 105:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__ = __webpack_require__(27);
/* harmony export (binding) */ __webpack_require__.d(exports, "TaskQueue", function() { return TaskQueue; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };





var stackSeparator = '\nEnqueued in TaskQueue by:\n';
var microStackSeparator = '\nEnqueued in MicroTaskQueue by:\n';

function makeRequestFlushFromMutationObserver(flush) {
  var observer = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createMutationObserver(flush);
  var val = 'a';
  var node = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createTextNode('a');
  var values = Object.create(null);
  values.a = 'b';
  values.b = 'a';
  observer.observe(node, { characterData: true });
  return function requestFlush() {
    node.data = val = values[val];
  };
}

function makeRequestFlushFromTimer(flush) {
  return function requestFlush() {
    var timeoutHandle = setTimeout(handleFlushTimer, 0);

    var intervalHandle = setInterval(handleFlushTimer, 50);
    function handleFlushTimer() {
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      flush();
    }
  };
}

function onError(error, task, longStacks) {
  if (longStacks && task.stack && (typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object' && error !== null) {
    error.stack = filterFlushStack(error.stack) + task.stack;
  }

  if ('onError' in task) {
    task.onError(error);
  } else {
    setTimeout(function () {
      throw error;
    }, 0);
  }
}

var TaskQueue = function () {
  function TaskQueue() {
    var _this = this;

    

    this.flushing = false;
    this.longStacks = false;

    this.microTaskQueue = [];
    this.microTaskQueueCapacity = 1024;
    this.taskQueue = [];

    if (__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["FEATURE"].mutationObserver) {
      this.requestFlushMicroTaskQueue = makeRequestFlushFromMutationObserver(function () {
        return _this.flushMicroTaskQueue();
      });
    } else {
      this.requestFlushMicroTaskQueue = makeRequestFlushFromTimer(function () {
        return _this.flushMicroTaskQueue();
      });
    }

    this.requestFlushTaskQueue = makeRequestFlushFromTimer(function () {
      return _this.flushTaskQueue();
    });
  }

  TaskQueue.prototype._flushQueue = function _flushQueue(queue, capacity) {
    var index = 0;
    var task = void 0;

    try {
      this.flushing = true;
      while (index < queue.length) {
        task = queue[index];
        if (this.longStacks) {
          this.stack = typeof task.stack === 'string' ? task.stack : undefined;
        }
        task.call();
        index++;

        if (index > capacity) {
          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
            queue[scan] = queue[scan + index];
          }

          queue.length -= index;
          index = 0;
        }
      }
    } catch (error) {
      onError(error, task, this.longStacks);
    } finally {
      this.flushing = false;
    }
  };

  TaskQueue.prototype.queueMicroTask = function queueMicroTask(task) {
    if (this.microTaskQueue.length < 1) {
      this.requestFlushMicroTaskQueue();
    }

    if (this.longStacks) {
      task.stack = this.prepareQueueStack(microStackSeparator);
    }

    this.microTaskQueue.push(task);
  };

  TaskQueue.prototype.queueTask = function queueTask(task) {
    if (this.taskQueue.length < 1) {
      this.requestFlushTaskQueue();
    }

    if (this.longStacks) {
      task.stack = this.prepareQueueStack(stackSeparator);
    }

    this.taskQueue.push(task);
  };

  TaskQueue.prototype.flushTaskQueue = function flushTaskQueue() {
    var queue = this.taskQueue;
    this.taskQueue = [];
    this._flushQueue(queue, Number.MAX_VALUE);
  };

  TaskQueue.prototype.flushMicroTaskQueue = function flushMicroTaskQueue() {
    var queue = this.microTaskQueue;
    this._flushQueue(queue, this.microTaskQueueCapacity);
    queue.length = 0;
  };

  TaskQueue.prototype.prepareQueueStack = function prepareQueueStack(separator) {
    var stack = separator + filterQueueStack(captureStack());

    if (typeof this.stack === 'string') {
      stack = filterFlushStack(stack) + this.stack;
    }

    return stack;
  };

  return TaskQueue;
}();

function captureStack() {
  var error = new Error();

  if (error.stack) {
    return error.stack;
  }

  try {
    throw error;
  } catch (e) {
    return e.stack;
  }
}

function filterQueueStack(stack) {
  return stack.replace(/^[\s\S]*?\bqueue(Micro)?Task\b[^\n]*\n/, '');
}

function filterFlushStack(stack) {
  var index = stack.lastIndexOf('flushMicroTaskQueue');

  if (index < 0) {
    index = stack.lastIndexOf('flushTaskQueue');
    if (index < 0) {
      return stack;
    }
  }

  index = stack.lastIndexOf('\n', index);

  return index < 0 ? stack : stack.substr(0, index);
}

/***/ },

/***/ 162:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "History", function() { return History; });


function mi(name) {
  throw new Error('History must implement ' + name + '().');
}

var History = function () {
  function History() {
    
  }

  History.prototype.activate = function activate(options) {
    mi('activate');
  };

  History.prototype.deactivate = function deactivate() {
    mi('deactivate');
  };

  History.prototype.getAbsoluteRoot = function getAbsoluteRoot() {
    mi('getAbsoluteRoot');
  };

  History.prototype.navigate = function navigate(fragment, options) {
    mi('navigate');
  };

  History.prototype.navigateBack = function navigateBack() {
    mi('navigateBack');
  };

  History.prototype.setTitle = function setTitle(title) {
    mi('setTitle');
  };

  History.prototype.setState = function setState(key, value) {
    mi('setState');
  };

  History.prototype.getState = function getState(key) {
    mi('getState');
  };

  History.prototype.getHistoryIndex = function getHistoryIndex() {
    mi('getHistoryIndex');
  };

  History.prototype.go = function go(movement) {
    mi('go');
  };

  return History;
}();

/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__ = __webpack_require__(27);
/* harmony export (binding) */ __webpack_require__.d(exports, "_emptyParameters", function() { return _emptyParameters; });
/* harmony export (binding) */ __webpack_require__.d(exports, "InvocationHandler", function() { return InvocationHandler; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Container", function() { return Container; });
/* harmony export (binding) */ __webpack_require__.d(exports, "autoinject", function() { return autoinject; });
/* harmony export (binding) */ __webpack_require__.d(exports, "inject", function() { return inject; });
/* harmony export (binding) */ __webpack_require__.d(exports, "invoker", function() { return invoker; });
/* harmony export (binding) */ __webpack_require__.d(exports, "invokeAsFactory", function() { return invokeAsFactory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "FactoryInvoker", function() { return FactoryInvoker; });
/* harmony export (binding) */ __webpack_require__.d(exports, "registration", function() { return registration; });
/* harmony export (binding) */ __webpack_require__.d(exports, "transient", function() { return transient; });
/* harmony export (binding) */ __webpack_require__.d(exports, "singleton", function() { return singleton; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TransientRegistration", function() { return TransientRegistration; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SingletonRegistration", function() { return SingletonRegistration; });
/* harmony export (binding) */ __webpack_require__.d(exports, "resolver", function() { return resolver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Strategy", function() { return Strategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "StrategyResolver", function() { return StrategyResolver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Lazy", function() { return Lazy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "All", function() { return All; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Optional", function() { return Optional; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Parent", function() { return Parent; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Factory", function() { return Factory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NewInstance", function() { return NewInstance; });
/* harmony export (binding) */ __webpack_require__.d(exports, "getDecoratorDependencies", function() { return getDecoratorDependencies; });
/* harmony export (binding) */ __webpack_require__.d(exports, "lazy", function() { return lazy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "all", function() { return all; });
/* harmony export (binding) */ __webpack_require__.d(exports, "optional", function() { return optional; });
/* harmony export (binding) */ __webpack_require__.d(exports, "parent", function() { return parent; });
/* harmony export (binding) */ __webpack_require__.d(exports, "factory", function() { return factory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "newInstance", function() { return newInstance; });



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function isInjectable(potentialTarget) {
    return !!potentialTarget;
}
function autoinject(potentialTarget) {
    var deco = function (target) {
        if (!target.hasOwnProperty('inject')) {
            target.inject = (__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].getOwn(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].paramTypes, target) ||
                _emptyParameters).slice();
            if (target.inject && target.inject.length > 0) {
                if (target.inject[target.inject.length - 1] === Object) {
                    target.inject.splice(-1, 1);
                }
            }
        }
    };
    if (isInjectable(potentialTarget)) {
        return deco(potentialTarget);
    }
    return deco;
}
function inject() {
    var rest = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return function (target, _key, descriptor) {
        if (typeof descriptor === 'number') {
            autoinject(target);
            if (rest.length === 1) {
                target.inject[descriptor] = rest[0];
            }
            return;
        }
        if (descriptor) {
            var fn = descriptor.value;
            fn.inject = rest;
        }
        else {
            target.inject = rest;
        }
    };
}

var resolver = __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["protocol"].create('aurelia:resolver', function (target) {
    if (!(typeof target.get === 'function')) {
        return 'Resolvers must implement: get(container: Container, key: any): any';
    }
    return true;
});
var Strategy;
(function (Strategy) {
    Strategy[Strategy["instance"] = 0] = "instance";
    Strategy[Strategy["singleton"] = 1] = "singleton";
    Strategy[Strategy["transient"] = 2] = "transient";
    Strategy[Strategy["function"] = 3] = "function";
    Strategy[Strategy["array"] = 4] = "array";
    Strategy[Strategy["alias"] = 5] = "alias";
})(Strategy || (Strategy = {}));
function isStrategy(actual, expected, state) {
    return actual === expected;
}
var StrategyResolver = (function () {
    function StrategyResolver(strategy, state) {
        this.strategy = strategy;
        this.state = state;
    }
    StrategyResolver.prototype.get = function (container, key) {
        if (isStrategy(this.strategy, Strategy.instance, this.state)) {
            return this.state;
        }
        if (isStrategy(this.strategy, Strategy.singleton, this.state)) {
            var singleton = container.invoke(this.state);
            this.state = singleton;
            this.strategy = 0;
            return singleton;
        }
        if (isStrategy(this.strategy, Strategy.transient, this.state)) {
            return container.invoke(this.state);
        }
        if (isStrategy(this.strategy, Strategy.function, this.state)) {
            return this.state(container, key, this);
        }
        if (isStrategy(this.strategy, Strategy.array, this.state)) {
            return this.state[0].get(container, key);
        }
        if (isStrategy(this.strategy, Strategy.alias, this.state)) {
            return container.get(this.state);
        }
        throw new Error('Invalid strategy: ' + this.strategy);
    };
    StrategyResolver = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Number, Object])
    ], StrategyResolver);
    return StrategyResolver;
}());
var Lazy = (function () {
    function Lazy(key) {
        this._key = key;
    }
    Lazy_1 = Lazy;
    Lazy.prototype.get = function (container) {
        var _this = this;
        return function () { return container.get(_this._key); };
    };
    Lazy.of = function (key) {
        return new Lazy_1(key);
    };
    var Lazy_1;
    Lazy = Lazy_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Lazy);
    return Lazy;
}());
var All = (function () {
    function All(key) {
        this._key = key;
    }
    All_1 = All;
    All.prototype.get = function (container) {
        return container.getAll(this._key);
    };
    All.of = function (key) {
        return new All_1(key);
    };
    var All_1;
    All = All_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], All);
    return All;
}());
var Optional = (function () {
    function Optional(key, checkParent) {
        if (checkParent === void 0) { checkParent = true; }
        this._key = key;
        this._checkParent = checkParent;
    }
    Optional_1 = Optional;
    Optional.prototype.get = function (container) {
        if (container.hasResolver(this._key, this._checkParent)) {
            return container.get(this._key);
        }
        return null;
    };
    Optional.of = function (key, checkParent) {
        if (checkParent === void 0) { checkParent = true; }
        return new Optional_1(key, checkParent);
    };
    var Optional_1;
    Optional = Optional_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object, Boolean])
    ], Optional);
    return Optional;
}());
var Parent = (function () {
    function Parent(key) {
        this._key = key;
    }
    Parent_1 = Parent;
    Parent.prototype.get = function (container) {
        return container.parent ? container.parent.get(this._key) : null;
    };
    Parent.of = function (key) {
        return new Parent_1(key);
    };
    var Parent_1;
    Parent = Parent_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Parent);
    return Parent;
}());
var Factory = (function () {
    function Factory(key) {
        this._key = key;
    }
    Factory_1 = Factory;
    Factory.prototype.get = function (container) {
        var fn = this._key;
        var resolver = container.getResolver(fn);
        if (resolver && resolver.strategy === Strategy.function) {
            fn = resolver.state;
        }
        return function () {
            var rest = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                rest[_i] = arguments[_i];
            }
            return container.invoke(fn, rest);
        };
    };
    Factory.of = function (key) {
        return new Factory_1(key);
    };
    var Factory_1;
    Factory = Factory_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object])
    ], Factory);
    return Factory;
}());
var NewInstance = (function () {
    function NewInstance(key) {
        var dynamicDependencies = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            dynamicDependencies[_i - 1] = arguments[_i];
        }
        this.key = key;
        this.asKey = key;
        this.dynamicDependencies = dynamicDependencies;
    }
    NewInstance_1 = NewInstance;
    NewInstance.prototype.get = function (container) {
        var dynamicDependencies = this.dynamicDependencies.length > 0
            ? this.dynamicDependencies.map(function (dependency) {
                return dependency['protocol:aurelia:resolver']
                    ? dependency.get(container)
                    : container.get(dependency);
            })
            : undefined;
        var fn = this.key;
        var resolver = container.getResolver(fn);
        if (resolver && resolver.strategy === 3) {
            fn = resolver.state;
        }
        var instance = container.invoke(fn, dynamicDependencies);
        container.registerInstance(this.asKey, instance);
        return instance;
    };
    NewInstance.prototype.as = function (key) {
        this.asKey = key;
        return this;
    };
    NewInstance.of = function (key) {
        var dynamicDependencies = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            dynamicDependencies[_i - 1] = arguments[_i];
        }
        return new (NewInstance_1.bind.apply(NewInstance_1, [void 0, key].concat(dynamicDependencies)))();
    };
    var NewInstance_1;
    NewInstance = NewInstance_1 = __decorate([
        resolver(),
        __metadata("design:paramtypes", [Object, Object])
    ], NewInstance);
    return NewInstance;
}());
function getDecoratorDependencies(target) {
    autoinject(target);
    return target.inject;
}
function lazy(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = Lazy.of(keyValue);
    };
}
function all(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = All.of(keyValue);
    };
}
function optional(checkParentOrTarget) {
    if (checkParentOrTarget === void 0) { checkParentOrTarget = true; }
    var deco = function (checkParent) {
        return function (target, _key, index) {
            var inject$$1 = getDecoratorDependencies(target);
            inject$$1[index] = Optional.of(inject$$1[index], checkParent);
        };
    };
    if (typeof checkParentOrTarget === 'boolean') {
        return deco(checkParentOrTarget);
    }
    return deco(true);
}
function parent(target, _key, index) {
    var inject$$1 = getDecoratorDependencies(target);
    inject$$1[index] = Parent.of(inject$$1[index]);
}
function factory(keyValue) {
    return function (target, _key, index) {
        var inject$$1 = getDecoratorDependencies(target);
        inject$$1[index] = Factory.of(keyValue);
    };
}
function newInstance(asKeyOrTarget) {
    var dynamicDependencies = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        dynamicDependencies[_i - 1] = arguments[_i];
    }
    var deco = function (asKey) {
        return function (target, _key, index) {
            var inject$$1 = getDecoratorDependencies(target);
            inject$$1[index] = NewInstance.of.apply(NewInstance, [inject$$1[index]].concat(dynamicDependencies));
            if (!!asKey) {
                inject$$1[index].as(asKey);
            }
        };
    };
    if (arguments.length >= 1) {
        return deco(asKeyOrTarget);
    }
    return deco();
}

function validateKey(key) {
    if (key === null || key === undefined) {
        throw new Error('key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?');
    }
}
var _emptyParameters = Object.freeze([]);
__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].registration = 'aurelia:registration';
__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].invoker = 'aurelia:invoker';
var resolverDecorates = resolver.decorates;
var InvocationHandler = (function () {
    function InvocationHandler(fn, invoker, dependencies) {
        this.fn = fn;
        this.invoker = invoker;
        this.dependencies = dependencies;
    }
    InvocationHandler.prototype.invoke = function (container, dynamicDependencies) {
        return dynamicDependencies !== undefined
            ? this.invoker.invokeWithDynamicDependencies(container, this.fn, this.dependencies, dynamicDependencies)
            : this.invoker.invoke(container, this.fn, this.dependencies);
    };
    return InvocationHandler;
}());
function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
    var i = staticDependencies.length;
    var args = new Array(i);
    var lookup;
    while (i--) {
        lookup = staticDependencies[i];
        if (lookup === null || lookup === undefined) {
            throw new Error('Constructor Parameter with index ' +
                i +
                ' cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?');
        }
        else {
            args[i] = container.get(lookup);
        }
    }
    if (dynamicDependencies !== undefined) {
        args = args.concat(dynamicDependencies);
    }
    return Reflect.construct(fn, args);
}
var classInvoker = {
    invoke: function (container, Type, deps) {
        var instances = deps.map(function (dep) { return container.get(dep); });
        return Reflect.construct(Type, instances);
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
};
function getDependencies(f) {
    if (!f.hasOwnProperty('inject')) {
        return [];
    }
    if (typeof f.inject === 'function') {
        return f.inject();
    }
    return f.inject;
}
var Container = (function () {
    function Container(configuration) {
        if (configuration === undefined) {
            configuration = {};
        }
        this._configuration = configuration;
        this._onHandlerCreated = configuration.onHandlerCreated;
        this._handlers =
            configuration.handlers || (configuration.handlers = new Map());
        this._resolvers = new Map();
        this.root = this;
        this.parent = null;
    }
    Container.prototype.makeGlobal = function () {
        Container.instance = this;
        return this;
    };
    Container.prototype.setHandlerCreatedCallback = function (onHandlerCreated) {
        this._onHandlerCreated = onHandlerCreated;
        this._configuration.onHandlerCreated = onHandlerCreated;
    };
    Container.prototype.registerInstance = function (key, instance) {
        return this.registerResolver(key, new StrategyResolver(0, instance === undefined ? key : instance));
    };
    Container.prototype.registerSingleton = function (key, fn) {
        return this.registerResolver(key, new StrategyResolver(1, fn === undefined ? key : fn));
    };
    Container.prototype.registerTransient = function (key, fn) {
        return this.registerResolver(key, new StrategyResolver(2, fn === undefined ? key : fn));
    };
    Container.prototype.registerHandler = function (key, handler) {
        return this.registerResolver(key, new StrategyResolver(3, handler));
    };
    Container.prototype.registerAlias = function (originalKey, aliasKey) {
        return this.registerResolver(aliasKey, new StrategyResolver(5, originalKey));
    };
    Container.prototype.registerResolver = function (key, resolver$$1) {
        validateKey(key);
        var allResolvers = this._resolvers;
        var result = allResolvers.get(key);
        if (result === undefined) {
            allResolvers.set(key, resolver$$1);
        }
        else if (result.strategy === 4) {
            result.state.push(resolver$$1);
        }
        else {
            allResolvers.set(key, new StrategyResolver(4, [result, resolver$$1]));
        }
        return resolver$$1;
    };
    Container.prototype.autoRegister = function (key, fn) {
        fn = fn === undefined ? key : fn;
        if (typeof fn === 'function') {
            var registration = __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].get(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].registration, fn);
            if (registration === undefined) {
                return this.registerResolver(key, new StrategyResolver(1, fn));
            }
            return registration.registerResolver(this, key, fn);
        }
        return this.registerResolver(key, new StrategyResolver(0, fn));
    };
    Container.prototype.autoRegisterAll = function (fns) {
        var i = fns.length;
        while (i--) {
            this.autoRegister(fns[i]);
        }
    };
    Container.prototype.unregister = function (key) {
        this._resolvers.delete(key);
    };
    Container.prototype.hasResolver = function (key, checkParent) {
        if (checkParent === void 0) { checkParent = false; }
        validateKey(key);
        return (this._resolvers.has(key) ||
            (checkParent &&
                this.parent !== null &&
                this.parent.hasResolver(key, checkParent)));
    };
    Container.prototype.getResolver = function (key) {
        return this._resolvers.get(key);
    };
    Container.prototype.get = function (key) {
        validateKey(key);
        if (key === Container) {
            return this;
        }
        if (resolverDecorates(key)) {
            return key.get(this, key);
        }
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return this.autoRegister(key).get(this, key);
            }
            var registration = __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].get(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].registration, key);
            if (registration === undefined) {
                return this.parent._get(key);
            }
            return registration.registerResolver(this, key, key).get(this, key);
        }
        return resolver$$1.get(this, key);
    };
    Container.prototype._get = function (key) {
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return this.autoRegister(key).get(this, key);
            }
            return this.parent._get(key);
        }
        return resolver$$1.get(this, key);
    };
    Container.prototype.getAll = function (key) {
        validateKey(key);
        var resolver$$1 = this._resolvers.get(key);
        if (resolver$$1 === undefined) {
            if (this.parent === null) {
                return _emptyParameters;
            }
            return this.parent.getAll(key);
        }
        if (resolver$$1.strategy === 4) {
            var state = resolver$$1.state;
            var i = state.length;
            var results = new Array(i);
            while (i--) {
                results[i] = state[i].get(this, key);
            }
            return results;
        }
        return [resolver$$1.get(this, key)];
    };
    Container.prototype.createChild = function () {
        var child = new Container(this._configuration);
        child.root = this.root;
        child.parent = this;
        return child;
    };
    Container.prototype.invoke = function (fn, dynamicDependencies) {
        try {
            var handler = this._handlers.get(fn);
            if (handler === undefined) {
                handler = this._createInvocationHandler(fn);
                this._handlers.set(fn, handler);
            }
            return handler.invoke(this, dynamicDependencies);
        }
        catch (e) {
            throw new __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["AggregateError"]("Error invoking " + fn.name + ". Check the inner error for details.", e, true);
        }
    };
    Container.prototype._createInvocationHandler = function (fn) {
        var dependencies;
        if (fn.inject === undefined) {
            dependencies =
                __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].getOwn(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].paramTypes, fn) || _emptyParameters;
        }
        else {
            dependencies = [];
            var ctor = fn;
            while (typeof ctor === 'function') {
                dependencies.push.apply(dependencies, getDependencies(ctor));
                ctor = Object.getPrototypeOf(ctor);
            }
        }
        var invoker = __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].getOwn(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].invoker, fn) || classInvoker;
        var handler = new InvocationHandler(fn, invoker, dependencies);
        return this._onHandlerCreated !== undefined
            ? this._onHandlerCreated(handler)
            : handler;
    };
    return Container;
}());

function invoker(value) {
    return function (target) {
        __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].invoker, value, target);
    };
}
function invokeAsFactory(potentialTarget) {
    var deco = function (target) {
        __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].invoker, FactoryInvoker.instance, target);
    };
    return potentialTarget ? deco(potentialTarget) : deco;
}
var FactoryInvoker = (function () {
    function FactoryInvoker() {
    }
    FactoryInvoker.prototype.invoke = function (container, fn, dependencies) {
        var i = dependencies.length;
        var args = new Array(i);
        while (i--) {
            args[i] = container.get(dependencies[i]);
        }
        return fn.apply(undefined, args);
    };
    FactoryInvoker.prototype.invokeWithDynamicDependencies = function (container, fn, staticDependencies, dynamicDependencies) {
        var i = staticDependencies.length;
        var args = new Array(i);
        while (i--) {
            args[i] = container.get(staticDependencies[i]);
        }
        if (dynamicDependencies !== undefined) {
            args = args.concat(dynamicDependencies);
        }
        return fn.apply(undefined, args);
    };
    return FactoryInvoker;
}());
FactoryInvoker.instance = new FactoryInvoker();

function registration(value) {
    return function (target) {
        __WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_0_aurelia_metadata__["metadata"].registration, value, target);
    };
}
function transient(key) {
    return registration(new TransientRegistration(key));
}
function singleton(keyOrRegisterInChild, registerInChild) {
    if (registerInChild === void 0) { registerInChild = false; }
    return registration(new SingletonRegistration(keyOrRegisterInChild, registerInChild));
}
var TransientRegistration = (function () {
    function TransientRegistration(key) {
        this._key = key;
    }
    TransientRegistration.prototype.registerResolver = function (container, key, fn) {
        var existingResolver = container.getResolver(this._key || key);
        return existingResolver === undefined
            ? container.registerTransient((this._key || key), fn)
            : existingResolver;
    };
    return TransientRegistration;
}());
var SingletonRegistration = (function () {
    function SingletonRegistration(keyOrRegisterInChild, registerInChild) {
        if (registerInChild === void 0) { registerInChild = false; }
        if (typeof keyOrRegisterInChild === 'boolean') {
            this._registerInChild = keyOrRegisterInChild;
        }
        else {
            this._key = keyOrRegisterInChild;
            this._registerInChild = registerInChild;
        }
    }
    SingletonRegistration.prototype.registerResolver = function (container, key, fn) {
        var targetContainer = this._registerInChild ? container : container.root;
        var existingResolver = targetContainer.getResolver(this._key || key);
        return existingResolver === undefined
            ? targetContainer.registerSingleton(this._key || key, fn)
            : existingResolver;
    };
    return SingletonRegistration;
}());




/***/ },

/***/ 37:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_loader__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_path__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_aurelia_logging__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__ = __webpack_require__("aurelia-binding");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_aurelia_task_queue__ = __webpack_require__(105);
/* harmony export (binding) */ __webpack_require__.d(exports, "Animator", function() { return Animator; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BehaviorInstruction", function() { return BehaviorInstruction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BehaviorPropertyObserver", function() { return BehaviorPropertyObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindableProperty", function() { return BindableProperty; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingLanguage", function() { return BindingLanguage; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BoundViewFactory", function() { return BoundViewFactory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CompositionEngine", function() { return CompositionEngine; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CompositionTransaction", function() { return CompositionTransaction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CompositionTransactionNotifier", function() { return CompositionTransactionNotifier; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CompositionTransactionOwnershipToken", function() { return CompositionTransactionOwnershipToken; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Controller", function() { return Controller; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ConventionalViewStrategy", function() { return ConventionalViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ElementConfigResource", function() { return ElementConfigResource; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ElementEvents", function() { return ElementEvents; });
/* harmony export (binding) */ __webpack_require__.d(exports, "HtmlBehaviorResource", function() { return HtmlBehaviorResource; });
/* harmony export (binding) */ __webpack_require__.d(exports, "InlineViewStrategy", function() { return InlineViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ModuleAnalyzer", function() { return ModuleAnalyzer; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NoViewStrategy", function() { return NoViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "PassThroughSlot", function() { return PassThroughSlot; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RelativeViewStrategy", function() { return RelativeViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ResourceDescription", function() { return ResourceDescription; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ResourceLoadContext", function() { return ResourceLoadContext; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ResourceModule", function() { return ResourceModule; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ShadowDOM", function() { return ShadowDOM; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ShadowSlot", function() { return ShadowSlot; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SlotCustomAttribute", function() { return SlotCustomAttribute; });
/* harmony export (binding) */ __webpack_require__.d(exports, "StaticViewStrategy", function() { return StaticViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SwapStrategies", function() { return SwapStrategies; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TargetInstruction", function() { return TargetInstruction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TemplateRegistryViewStrategy", function() { return TemplateRegistryViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TemplatingEngine", function() { return TemplatingEngine; });
/* harmony export (binding) */ __webpack_require__.d(exports, "View", function() { return View; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewCompileInstruction", function() { return ViewCompileInstruction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewCompiler", function() { return ViewCompiler; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewEngine", function() { return ViewEngine; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewEngineHooksResource", function() { return ViewEngineHooksResource; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewFactory", function() { return ViewFactory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewLocator", function() { return ViewLocator; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewResources", function() { return ViewResources; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ViewSlot", function() { return ViewSlot; });
/* harmony export (binding) */ __webpack_require__.d(exports, "_hyphenate", function() { return _hyphenate; });
/* harmony export (binding) */ __webpack_require__.d(exports, "_isAllWhitespace", function() { return _isAllWhitespace; });
/* harmony export (binding) */ __webpack_require__.d(exports, "animationEvent", function() { return animationEvent; });
/* harmony export (binding) */ __webpack_require__.d(exports, "behavior", function() { return behavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "bindable", function() { return bindable; });
/* harmony export (binding) */ __webpack_require__.d(exports, "child", function() { return child; });
/* harmony export (binding) */ __webpack_require__.d(exports, "children", function() { return children; });
/* harmony export (binding) */ __webpack_require__.d(exports, "containerless", function() { return containerless; });
/* harmony export (binding) */ __webpack_require__.d(exports, "customAttribute", function() { return customAttribute; });
/* harmony export (binding) */ __webpack_require__.d(exports, "customElement", function() { return customElement; });
/* harmony export (binding) */ __webpack_require__.d(exports, "dynamicOptions", function() { return dynamicOptions; });
/* harmony export (binding) */ __webpack_require__.d(exports, "elementConfig", function() { return elementConfig; });
/* harmony export (binding) */ __webpack_require__.d(exports, "inlineView", function() { return inlineView; });
/* harmony export (binding) */ __webpack_require__.d(exports, "noView", function() { return noView; });
/* harmony export (binding) */ __webpack_require__.d(exports, "processAttributes", function() { return processAttributes; });
/* harmony export (binding) */ __webpack_require__.d(exports, "processContent", function() { return processContent; });
/* harmony export (binding) */ __webpack_require__.d(exports, "resource", function() { return resource; });
/* harmony export (binding) */ __webpack_require__.d(exports, "templateController", function() { return templateController; });
/* harmony export (binding) */ __webpack_require__.d(exports, "useShadowDOM", function() { return useShadowDOM; });
/* harmony export (binding) */ __webpack_require__.d(exports, "useView", function() { return useView; });
/* harmony export (binding) */ __webpack_require__.d(exports, "useViewStrategy", function() { return useViewStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "validateBehaviorName", function() { return validateBehaviorName; });
/* harmony export (binding) */ __webpack_require__.d(exports, "view", function() { return view; });
/* harmony export (binding) */ __webpack_require__.d(exports, "viewEngineHooks", function() { return viewEngineHooks; });
/* harmony export (binding) */ __webpack_require__.d(exports, "viewResources", function() { return viewResources; });
/* harmony export (binding) */ __webpack_require__.d(exports, "viewStrategy", function() { return viewStrategy; });









var ElementEvents = (function () {
    function ElementEvents(element) {
        this.element = element;
        this.subscriptions = {};
    }
    ElementEvents.prototype._enqueueHandler = function (handler) {
        this.subscriptions[handler.eventName] = this.subscriptions[handler.eventName] || [];
        this.subscriptions[handler.eventName].push(handler);
    };
    ElementEvents.prototype._dequeueHandler = function (handler) {
        var index;
        var subscriptions = this.subscriptions[handler.eventName];
        if (subscriptions) {
            index = subscriptions.indexOf(handler);
            if (index > -1) {
                subscriptions.splice(index, 1);
            }
        }
        return handler;
    };
    ElementEvents.prototype.publish = function (eventName, detail, bubbles, cancelable) {
        if (detail === void 0) { detail = {}; }
        if (bubbles === void 0) { bubbles = true; }
        if (cancelable === void 0) { cancelable = true; }
        var event = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createCustomEvent(eventName, { cancelable: cancelable, bubbles: bubbles, detail: detail });
        this.element.dispatchEvent(event);
    };
    ElementEvents.prototype.subscribe = function (eventName, handler, captureOrOptions) {
        if (typeof handler === 'function') {
            if (captureOrOptions === undefined) {
                captureOrOptions = ElementEvents.defaultListenerOptions;
            }
            var eventHandler = new EventHandlerImpl(this, eventName, handler, captureOrOptions, false);
            return eventHandler;
        }
        return undefined;
    };
    ElementEvents.prototype.subscribeOnce = function (eventName, handler, captureOrOptions) {
        if (typeof handler === 'function') {
            if (captureOrOptions === undefined) {
                captureOrOptions = ElementEvents.defaultListenerOptions;
            }
            var eventHandler = new EventHandlerImpl(this, eventName, handler, captureOrOptions, true);
            return eventHandler;
        }
        return undefined;
    };
    ElementEvents.prototype.dispose = function (eventName) {
        if (eventName && typeof eventName === 'string') {
            var subscriptions = this.subscriptions[eventName];
            if (subscriptions) {
                while (subscriptions.length) {
                    var subscription = subscriptions.pop();
                    if (subscription) {
                        subscription.dispose();
                    }
                }
            }
        }
        else {
            this.disposeAll();
        }
    };
    ElementEvents.prototype.disposeAll = function () {
        for (var key in this.subscriptions) {
            this.dispose(key);
        }
    };
    ElementEvents.defaultListenerOptions = true;
    return ElementEvents;
}());
var EventHandlerImpl = (function () {
    function EventHandlerImpl(owner, eventName, handler, captureOrOptions, once) {
        this.owner = owner;
        this.eventName = eventName;
        this.handler = handler;
        this.capture = typeof captureOrOptions === 'boolean' ? captureOrOptions : captureOrOptions.capture;
        this.bubbles = !this.capture;
        this.captureOrOptions = captureOrOptions;
        this.once = once;
        owner.element.addEventListener(eventName, this, captureOrOptions);
        owner._enqueueHandler(this);
    }
    EventHandlerImpl.prototype.handleEvent = function (e) {
        var fn = this.handler;
        fn(e);
        if (this.once) {
            this.dispose();
        }
    };
    EventHandlerImpl.prototype.dispose = function () {
        this.owner.element.removeEventListener(this.eventName, this, this.captureOrOptions);
        this.owner._dequeueHandler(this);
        this.owner = this.handler = null;
    };
    return EventHandlerImpl;
}());

var ResourceLoadContext = (function () {
    function ResourceLoadContext() {
        this.dependencies = {};
    }
    ResourceLoadContext.prototype.addDependency = function (url) {
        this.dependencies[url] = true;
    };
    ResourceLoadContext.prototype.hasDependency = function (url) {
        return url in this.dependencies;
    };
    return ResourceLoadContext;
}());
var ViewCompileInstruction = (function () {
    function ViewCompileInstruction(targetShadowDOM, compileSurrogate) {
        if (targetShadowDOM === void 0) { targetShadowDOM = false; }
        if (compileSurrogate === void 0) { compileSurrogate = false; }
        this.targetShadowDOM = targetShadowDOM;
        this.compileSurrogate = compileSurrogate;
        this.associatedModuleId = null;
    }
    ViewCompileInstruction.normal = new ViewCompileInstruction();
    return ViewCompileInstruction;
}());
var BehaviorInstruction = (function () {
    function BehaviorInstruction() {
    }
    BehaviorInstruction.enhance = function () {
        var instruction = new BehaviorInstruction();
        instruction.enhance = true;
        return instruction;
    };
    BehaviorInstruction.unitTest = function (type, attributes) {
        var instruction = new BehaviorInstruction();
        instruction.type = type;
        instruction.attributes = attributes || {};
        return instruction;
    };
    BehaviorInstruction.element = function (node, type) {
        var instruction = new BehaviorInstruction();
        instruction.type = type;
        instruction.attributes = {};
        instruction.anchorIsContainer = !(node.hasAttribute('containerless') || type.containerless);
        instruction.initiatedByBehavior = true;
        return instruction;
    };
    BehaviorInstruction.attribute = function (attrName, type) {
        var instruction = new BehaviorInstruction();
        instruction.attrName = attrName;
        instruction.type = type || null;
        instruction.attributes = {};
        return instruction;
    };
    BehaviorInstruction.dynamic = function (host, viewModel, viewFactory) {
        var instruction = new BehaviorInstruction();
        instruction.host = host;
        instruction.viewModel = viewModel;
        instruction.viewFactory = viewFactory;
        instruction.inheritBindingContext = true;
        return instruction;
    };
    BehaviorInstruction.normal = new BehaviorInstruction();
    return BehaviorInstruction;
}());
var biProto = BehaviorInstruction.prototype;
biProto.initiatedByBehavior = false;
biProto.enhance = false;
biProto.partReplacements = null;
biProto.viewFactory = null;
biProto.originalAttrName = null;
biProto.skipContentProcessing = false;
biProto.contentFactory = null;
biProto.viewModel = null;
biProto.anchorIsContainer = false;
biProto.host = null;
biProto.attributes = null;
biProto.type = null;
biProto.attrName = null;
biProto.inheritBindingContext = false;
var TargetInstruction = (function () {
    function TargetInstruction() {
    }
    TargetInstruction.shadowSlot = function (parentInjectorId) {
        var instruction = new TargetInstruction();
        instruction.parentInjectorId = parentInjectorId;
        instruction.shadowSlot = true;
        return instruction;
    };
    TargetInstruction.contentExpression = function (expression) {
        var instruction = new TargetInstruction();
        instruction.contentExpression = expression;
        return instruction;
    };
    TargetInstruction.letElement = function (expressions) {
        var instruction = new TargetInstruction();
        instruction.expressions = expressions;
        instruction.letElement = true;
        return instruction;
    };
    TargetInstruction.lifting = function (parentInjectorId, liftingInstruction) {
        var instruction = new TargetInstruction();
        instruction.parentInjectorId = parentInjectorId;
        instruction.expressions = TargetInstruction.noExpressions;
        instruction.behaviorInstructions = [liftingInstruction];
        instruction.viewFactory = liftingInstruction.viewFactory;
        instruction.providers = [liftingInstruction.type.target];
        instruction.lifting = true;
        return instruction;
    };
    TargetInstruction.normal = function (injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction) {
        var instruction = new TargetInstruction();
        instruction.injectorId = injectorId;
        instruction.parentInjectorId = parentInjectorId;
        instruction.providers = providers;
        instruction.behaviorInstructions = behaviorInstructions;
        instruction.expressions = expressions;
        instruction.anchorIsContainer = elementInstruction ? elementInstruction.anchorIsContainer : true;
        instruction.elementInstruction = elementInstruction;
        return instruction;
    };
    TargetInstruction.surrogate = function (providers, behaviorInstructions, expressions, values) {
        var instruction = new TargetInstruction();
        instruction.expressions = expressions;
        instruction.behaviorInstructions = behaviorInstructions;
        instruction.providers = providers;
        instruction.values = values;
        return instruction;
    };
    TargetInstruction.noExpressions = Object.freeze([]);
    return TargetInstruction;
}());
var tiProto = TargetInstruction.prototype;
tiProto.injectorId = null;
tiProto.parentInjectorId = null;
tiProto.shadowSlot = false;
tiProto.slotName = null;
tiProto.slotFallbackFactory = null;
tiProto.contentExpression = null;
tiProto.letElement = false;
tiProto.expressions = null;
tiProto.expressions = null;
tiProto.providers = null;
tiProto.viewFactory = null;
tiProto.anchorIsContainer = false;
tiProto.elementInstruction = null;
tiProto.lifting = false;
tiProto.values = null;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var capitalMatcher = /([A-Z])/g;
function addHyphenAndLower(char) {
    return '-' + char.toLowerCase();
}
function _hyphenate(name) {
    return (name.charAt(0).toLowerCase() + name.slice(1)).replace(capitalMatcher, addHyphenAndLower);
}
function _isAllWhitespace(node) {
    return !(node.auInterpolationTarget || (/[^\t\n\r ]/.test(node.textContent)));
}

var BehaviorPropertyObserver = (function () {
    function BehaviorPropertyObserver(taskQueue, obj, propertyName, selfSubscriber, initialValue) {
        this.taskQueue = taskQueue;
        this.obj = obj;
        this.propertyName = propertyName;
        this.notqueued = true;
        this.publishing = false;
        this.selfSubscriber = selfSubscriber;
        this.currentValue = this.oldValue = initialValue;
    }
    BehaviorPropertyObserver.prototype.getValue = function () {
        return this.currentValue;
    };
    BehaviorPropertyObserver.prototype.setValue = function (newValue) {
        var oldValue = this.currentValue;
        if (!Object.is(newValue, oldValue)) {
            this.oldValue = oldValue;
            this.currentValue = newValue;
            if (this.publishing && this.notqueued) {
                if (this.taskQueue.flushing) {
                    this.call();
                }
                else {
                    this.notqueued = false;
                    this.taskQueue.queueMicroTask(this);
                }
            }
        }
    };
    BehaviorPropertyObserver.prototype.call = function () {
        var oldValue = this.oldValue;
        var newValue = this.currentValue;
        this.notqueued = true;
        if (Object.is(newValue, oldValue)) {
            return;
        }
        if (this.selfSubscriber) {
            this.selfSubscriber(newValue, oldValue);
        }
        this.callSubscribers(newValue, oldValue);
        this.oldValue = newValue;
    };
    BehaviorPropertyObserver.prototype.callSubscribers = function (newValue, oldValue) {
        throw new Error('Method not implemented.');
    };
    BehaviorPropertyObserver.prototype.subscribe = function (context, callable) {
        this.addSubscriber(context, callable);
    };
    BehaviorPropertyObserver.prototype.addSubscriber = function (context, callable) {
        throw new Error('Method not implemented.');
    };
    BehaviorPropertyObserver.prototype.unsubscribe = function (context, callable) {
        this.removeSubscriber(context, callable);
    };
    BehaviorPropertyObserver.prototype.removeSubscriber = function (context, callable) {
        throw new Error('Method not implemented.');
    };
    BehaviorPropertyObserver = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["subscriberCollection"])()
    ], BehaviorPropertyObserver);
    return BehaviorPropertyObserver;
}());

function getObserver(instance, name) {
    var lookup = instance.__observers__;
    if (lookup === undefined) {
        var ctor = Object.getPrototypeOf(instance).constructor;
        var behavior = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].get(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, ctor);
        if (!behavior.isInitialized) {
            behavior.initialize(__WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["Container"].instance || new __WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["Container"](), instance.constructor);
        }
        lookup = behavior.observerLocator.getOrCreateObserversLookup(instance);
        behavior._ensurePropertiesDefined(instance, lookup);
    }
    return lookup[name];
}
var BindableProperty = (function () {
    function BindableProperty(nameOrConfig) {
        if (typeof nameOrConfig === 'string') {
            this.name = nameOrConfig;
        }
        else {
            Object.assign(this, nameOrConfig);
        }
        this.attribute = this.attribute || _hyphenate(this.name);
        var defaultBindingMode = this.defaultBindingMode;
        if (defaultBindingMode === null || defaultBindingMode === undefined) {
            this.defaultBindingMode = __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["bindingMode"].oneWay;
        }
        else if (typeof defaultBindingMode === 'string') {
            this.defaultBindingMode = __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["bindingMode"][defaultBindingMode] || __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["bindingMode"].oneWay;
        }
        this.changeHandler = this.changeHandler || null;
        this.owner = null;
        this.descriptor = null;
    }
    BindableProperty.prototype.registerWith = function (target, behavior, descriptor) {
        behavior.properties.push(this);
        behavior.attributes[this.attribute] = this;
        this.owner = behavior;
        if (descriptor) {
            this.descriptor = descriptor;
            return this._configureDescriptor(descriptor);
        }
        return undefined;
    };
    BindableProperty.prototype._configureDescriptor = function (descriptor) {
        var name = this.name;
        descriptor.configurable = true;
        descriptor.enumerable = true;
        if ('initializer' in descriptor) {
            this.defaultValue = descriptor.initializer;
            delete descriptor.initializer;
            delete descriptor.writable;
        }
        if ('value' in descriptor) {
            this.defaultValue = descriptor.value;
            delete descriptor.value;
            delete descriptor.writable;
        }
        descriptor.get = function () {
            return getObserver(this, name).getValue();
        };
        descriptor.set = function (value) {
            getObserver(this, name).setValue(value);
        };
        descriptor.get.getObserver = function (obj) {
            return getObserver(obj, name);
        };
        return descriptor;
    };
    BindableProperty.prototype.defineOn = function (target, behavior) {
        var name = this.name;
        var handlerName;
        if (this.changeHandler === null) {
            handlerName = name + 'Changed';
            if (handlerName in target.prototype) {
                this.changeHandler = handlerName;
            }
        }
        if (this.descriptor === null) {
            Object.defineProperty(target.prototype, name, this._configureDescriptor({}));
        }
    };
    BindableProperty.prototype.createObserver = function (viewModel) {
        var selfSubscriber = null;
        var defaultValue = this.defaultValue;
        var changeHandlerName = this.changeHandler;
        var name = this.name;
        var initialValue;
        if (this.hasOptions) {
            return undefined;
        }
        if (changeHandlerName in viewModel) {
            if ('propertyChanged' in viewModel) {
                selfSubscriber = function (newValue, oldValue) {
                    viewModel[changeHandlerName](newValue, oldValue);
                    viewModel.propertyChanged(name, newValue, oldValue);
                };
            }
            else {
                selfSubscriber = function (newValue, oldValue) { return viewModel[changeHandlerName](newValue, oldValue); };
            }
        }
        else if ('propertyChanged' in viewModel) {
            selfSubscriber = function (newValue, oldValue) { return viewModel.propertyChanged(name, newValue, oldValue); };
        }
        else if (changeHandlerName !== null) {
            throw new Error("Change handler ".concat(changeHandlerName, " was specified but not declared on the class."));
        }
        if (defaultValue !== undefined) {
            initialValue = typeof defaultValue === 'function' ? defaultValue.call(viewModel) : defaultValue;
        }
        return new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, this.name, selfSubscriber, initialValue);
    };
    BindableProperty.prototype._initialize = function (viewModel, observerLookup, attributes, behaviorHandlesBind, boundProperties) {
        var selfSubscriber;
        var observer;
        var attribute;
        var defaultValue = this.defaultValue;
        if (this.isDynamic) {
            for (var key in attributes) {
                this._createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, key, attributes[key], boundProperties);
            }
        }
        else if (!this.hasOptions) {
            observer = observerLookup[this.name];
            if (attributes !== null) {
                selfSubscriber = observer.selfSubscriber;
                attribute = attributes[this.attribute];
                if (behaviorHandlesBind) {
                    observer.selfSubscriber = null;
                }
                if (typeof attribute === 'string') {
                    viewModel[this.name] = attribute;
                    observer.call();
                }
                else if (attribute) {
                    boundProperties.push({ observer: observer, binding: attribute.createBinding(viewModel) });
                }
                else if (defaultValue !== undefined) {
                    observer.call();
                }
                observer.selfSubscriber = selfSubscriber;
            }
            observer.publishing = true;
        }
    };
    BindableProperty.prototype._createDynamicProperty = function (viewModel, observerLookup, behaviorHandlesBind, name, attribute, boundProperties) {
        var changeHandlerName = name + 'Changed';
        var selfSubscriber = null;
        var observer;
        var info;
        if (changeHandlerName in viewModel) {
            if ('propertyChanged' in viewModel) {
                selfSubscriber = function (newValue, oldValue) {
                    viewModel[changeHandlerName](newValue, oldValue);
                    viewModel.propertyChanged(name, newValue, oldValue);
                };
            }
            else {
                selfSubscriber = function (newValue, oldValue) { return viewModel[changeHandlerName](newValue, oldValue); };
            }
        }
        else if ('propertyChanged' in viewModel) {
            selfSubscriber = function (newValue, oldValue) { return viewModel.propertyChanged(name, newValue, oldValue); };
        }
        observer = observerLookup[name] = new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, name, selfSubscriber);
        Object.defineProperty(viewModel, name, {
            configurable: true,
            enumerable: true,
            get: observer.getValue.bind(observer),
            set: observer.setValue.bind(observer)
        });
        if (behaviorHandlesBind) {
            observer.selfSubscriber = null;
        }
        if (typeof attribute === 'string') {
            viewModel[name] = attribute;
            observer.call();
        }
        else if (attribute) {
            info = { observer: observer, binding: attribute.createBinding(viewModel) };
            boundProperties.push(info);
        }
        observer.publishing = true;
        observer.selfSubscriber = selfSubscriber;
    };
    return BindableProperty;
}());

var ViewLocator = (function () {
    function ViewLocator() {
    }
    ViewLocator.prototype.getViewStrategy = function (value) {
        if (!value) {
            return null;
        }
        if (typeof value === 'object' && 'getViewStrategy' in value) {
            var origin_1 = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(value.constructor);
            value = value.getViewStrategy();
            if (typeof value === 'string') {
                value = new RelativeViewStrategy(value);
            }
            viewStrategy.assert(value);
            if (origin_1.moduleId) {
                value.makeRelativeTo(origin_1.moduleId);
            }
            return value;
        }
        if (typeof value === 'string') {
            value = new RelativeViewStrategy(value);
        }
        if (viewStrategy.validate(value)) {
            return value;
        }
        if (typeof value !== 'function') {
            value = value.constructor;
        }
        if ('$view' in value) {
            var c = value.$view;
            var view = void 0;
            c = typeof c === 'function' ? c.call(value) : c;
            if (c === null) {
                view = new NoViewStrategy();
            }
            else {
                view = c instanceof StaticViewStrategy ? c : new StaticViewStrategy(c);
            }
            __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(ViewLocator.viewStrategyMetadataKey, view, value);
            return view;
        }
        var origin = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(value);
        var strategy = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].get(ViewLocator.viewStrategyMetadataKey, value);
        if (!strategy) {
            if (!origin.moduleId) {
                throw new Error('Cannot determine default view strategy for object.\n' + value);
            }
            strategy = this.createFallbackViewStrategy(origin);
        }
        else if (origin.moduleId) {
            strategy.moduleId = origin.moduleId;
        }
        return strategy;
    };
    ViewLocator.prototype.createFallbackViewStrategy = function (origin) {
        return new ConventionalViewStrategy(this, origin);
    };
    ViewLocator.prototype.convertOriginToViewUrl = function (origin) {
        var moduleId = origin.moduleId;
        var id = (moduleId.endsWith('.js') || moduleId.endsWith('.ts')) ? moduleId.substring(0, moduleId.length - 3) : moduleId;
        return id + '.html';
    };
    ViewLocator.viewStrategyMetadataKey = 'aurelia:view-strategy';
    return ViewLocator;
}());

function mi(name) {
    throw new Error("BindingLanguage must implement ".concat(name, "()."));
}
var BindingLanguage = (function () {
    function BindingLanguage() {
    }
    BindingLanguage.prototype.inspectAttribute = function (resources, elementName, attrName, attrValue) {
        mi('inspectAttribute');
    };
    BindingLanguage.prototype.createAttributeInstruction = function (resources, element, info, existingInstruction, context) {
        mi('createAttributeInstruction');
    };
    BindingLanguage.prototype.createLetExpressions = function (resources, element) {
        mi('createLetExpressions');
    };
    BindingLanguage.prototype.inspectTextContent = function (resources, value) {
        mi('inspectTextContent');
    };
    return BindingLanguage;
}());

var noNodes = Object.freeze([]);
var SlotCustomAttribute = (function () {
    function SlotCustomAttribute(element) {
        this.element = element;
        this.element.auSlotAttribute = this;
    }
    SlotCustomAttribute.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element];
    };
    SlotCustomAttribute.prototype.valueChanged = function (newValue, oldValue) { };
    return SlotCustomAttribute;
}());
var PassThroughSlot = (function () {
    function PassThroughSlot(anchor, name, destinationName, fallbackFactory) {
        this.anchor = anchor;
        this.anchor.viewSlot = this;
        this.name = name;
        this.destinationName = destinationName;
        this.fallbackFactory = fallbackFactory;
        this.destinationSlot = null;
        this.projections = 0;
        this.contentView = null;
        var attr = new SlotCustomAttribute(this.anchor);
        attr.value = this.destinationName;
    }
    Object.defineProperty(PassThroughSlot.prototype, "needsFallbackRendering", {
        get: function () {
            return this.fallbackFactory && this.projections === 0;
        },
        enumerable: false,
        configurable: true
    });
    PassThroughSlot.prototype.renderFallbackContent = function (view, nodes, projectionSource, index) {
        if (this.contentView === null) {
            this.contentView = this.fallbackFactory.create(this.ownerView.container);
            this.contentView.bind(this.ownerView.bindingContext, this.ownerView.overrideContext);
            var slots = Object.create(null);
            slots[this.destinationSlot.name] = this.destinationSlot;
            ShadowDOM.distributeView(this.contentView, slots, projectionSource, index, this.destinationSlot.name);
        }
    };
    PassThroughSlot.prototype.passThroughTo = function (destinationSlot) {
        this.destinationSlot = destinationSlot;
    };
    PassThroughSlot.prototype.addNode = function (view, node, projectionSource, index) {
        if (this.contentView !== null) {
            this.contentView.removeNodes();
            this.contentView.detached();
            this.contentView.unbind();
            this.contentView = null;
        }
        if (node.viewSlot instanceof PassThroughSlot) {
            node.viewSlot.passThroughTo(this);
            return;
        }
        this.projections++;
        this.destinationSlot.addNode(view, node, projectionSource, index);
    };
    PassThroughSlot.prototype.removeView = function (view, projectionSource) {
        this.projections--;
        this.destinationSlot.removeView(view, projectionSource);
        if (this.needsFallbackRendering) {
            this.renderFallbackContent(null, noNodes, projectionSource);
        }
    };
    PassThroughSlot.prototype.removeAll = function (projectionSource) {
        this.projections = 0;
        this.destinationSlot.removeAll(projectionSource);
        if (this.needsFallbackRendering) {
            this.renderFallbackContent(null, noNodes, projectionSource);
        }
    };
    PassThroughSlot.prototype.projectFrom = function (view, projectionSource) {
        this.destinationSlot.projectFrom(view, projectionSource);
    };
    PassThroughSlot.prototype.created = function (ownerView) {
        this.ownerView = ownerView;
    };
    PassThroughSlot.prototype.bind = function (view) {
        if (this.contentView) {
            this.contentView.bind(view.bindingContext, view.overrideContext);
        }
    };
    PassThroughSlot.prototype.attached = function () {
        if (this.contentView) {
            this.contentView.attached();
        }
    };
    PassThroughSlot.prototype.detached = function () {
        if (this.contentView) {
            this.contentView.detached();
        }
    };
    PassThroughSlot.prototype.unbind = function () {
        if (this.contentView) {
            this.contentView.unbind();
        }
    };
    return PassThroughSlot;
}());
var ShadowSlot = (function () {
    function ShadowSlot(anchor, name, fallbackFactory) {
        this.anchor = anchor;
        this.anchor.isContentProjectionSource = true;
        this.anchor.viewSlot = this;
        this.name = name;
        this.fallbackFactory = fallbackFactory;
        this.contentView = null;
        this.projections = 0;
        this.children = [];
        this.projectFromAnchors = null;
        this.destinationSlots = null;
    }
    Object.defineProperty(ShadowSlot.prototype, "needsFallbackRendering", {
        get: function () {
            return this.fallbackFactory && this.projections === 0;
        },
        enumerable: false,
        configurable: true
    });
    ShadowSlot.prototype.addNode = function (view, node, projectionSource, index, destination) {
        var $node = node;
        if (this.contentView !== null) {
            this.contentView.removeNodes();
            this.contentView.detached();
            this.contentView.unbind();
            this.contentView = null;
        }
        if ($node.viewSlot instanceof PassThroughSlot) {
            $node.viewSlot.passThroughTo(this);
            return;
        }
        if (this.destinationSlots !== null) {
            ShadowDOM.distributeNodes(view, [$node], this.destinationSlots, this, index);
        }
        else {
            $node.auOwnerView = view;
            $node.auProjectionSource = projectionSource;
            $node.auAssignedSlot = this;
            var anchor = this._findAnchor(view, $node, projectionSource, index);
            var parent_1 = anchor.parentNode;
            parent_1.insertBefore($node, anchor);
            this.children.push($node);
            this.projections++;
        }
    };
    ShadowSlot.prototype.removeView = function (view, projectionSource) {
        if (this.destinationSlots !== null) {
            ShadowDOM.undistributeView(view, this.destinationSlots, this);
        }
        else if (this.contentView && this.contentView.hasSlots) {
            ShadowDOM.undistributeView(view, this.contentView.slots, projectionSource);
        }
        else {
            var found = this.children.find(function (x) { return x.auSlotProjectFrom === projectionSource; });
            if (found) {
                var children = found.auProjectionChildren;
                var ownChildren = this.children;
                for (var i = 0, ii = children.length; i < ii; ++i) {
                    var child = children[i];
                    if (child.auOwnerView === view) {
                        children.splice(i, 1);
                        view.fragment.appendChild(child);
                        i--;
                        ii--;
                        this.projections--;
                        var idx = ownChildren.indexOf(child);
                        if (idx > -1) {
                            ownChildren.splice(idx, 1);
                        }
                    }
                }
                if (this.needsFallbackRendering) {
                    this.renderFallbackContent(view, noNodes, projectionSource);
                }
            }
        }
    };
    ShadowSlot.prototype.removeAll = function (projectionSource) {
        if (this.destinationSlots !== null) {
            ShadowDOM.undistributeAll(this.destinationSlots, this);
        }
        else if (this.contentView && this.contentView.hasSlots) {
            ShadowDOM.undistributeAll(this.contentView.slots, projectionSource);
        }
        else {
            var found = this.children.find(function (x) { return x.auSlotProjectFrom === projectionSource; });
            if (found) {
                var children = found.auProjectionChildren;
                var ownChildren = this.children;
                for (var i = 0, ii = children.length; i < ii; ++i) {
                    var child = children[i];
                    child.auOwnerView.fragment.appendChild(child);
                    this.projections--;
                    var idx = ownChildren.indexOf(child);
                    if (idx > -1) {
                        ownChildren.splice(idx, 1);
                    }
                }
                found.auProjectionChildren = [];
                if (this.needsFallbackRendering) {
                    this.renderFallbackContent(null, noNodes, projectionSource);
                }
            }
        }
    };
    ShadowSlot.prototype._findAnchor = function (view, node, projectionSource, index) {
        if (projectionSource) {
            var found = this.children.find(function (x) { return x.auSlotProjectFrom === projectionSource; });
            if (found) {
                if (index !== undefined) {
                    var children = found.auProjectionChildren;
                    var viewIndex = -1;
                    var lastView = void 0;
                    for (var i = 0, ii = children.length; i < ii; ++i) {
                        var current = children[i];
                        if (current.auOwnerView !== lastView) {
                            viewIndex++;
                            lastView = current.auOwnerView;
                            if (viewIndex >= index && lastView !== view) {
                                children.splice(i, 0, node);
                                return current;
                            }
                        }
                    }
                }
                found.auProjectionChildren.push(node);
                return found;
            }
        }
        return this.anchor;
    };
    ShadowSlot.prototype.projectTo = function (slots) {
        this.destinationSlots = slots;
    };
    ShadowSlot.prototype.projectFrom = function (view, projectionSource) {
        var anchor = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createComment('anchor');
        var parent = this.anchor.parentNode;
        anchor.auSlotProjectFrom = projectionSource;
        anchor.auOwnerView = view;
        anchor.auProjectionChildren = [];
        parent.insertBefore(anchor, this.anchor);
        this.children.push(anchor);
        if (this.projectFromAnchors === null) {
            this.projectFromAnchors = [];
        }
        this.projectFromAnchors.push(anchor);
    };
    ShadowSlot.prototype.renderFallbackContent = function (view, nodes, projectionSource, index) {
        if (this.contentView === null) {
            this.contentView = this.fallbackFactory.create(this.ownerView.container);
            this.contentView.bind(this.ownerView.bindingContext, this.ownerView.overrideContext);
            this.contentView.insertNodesBefore(this.anchor);
        }
        if (this.contentView.hasSlots) {
            var slots = this.contentView.slots;
            var projectFromAnchors = this.projectFromAnchors;
            if (projectFromAnchors !== null) {
                for (var slotName in slots) {
                    var slot = slots[slotName];
                    for (var i = 0, ii = projectFromAnchors.length; i < ii; ++i) {
                        var anchor = projectFromAnchors[i];
                        slot.projectFrom(anchor.auOwnerView, anchor.auSlotProjectFrom);
                    }
                }
            }
            this.fallbackSlots = slots;
            ShadowDOM.distributeNodes(view, nodes, slots, projectionSource, index);
        }
    };
    ShadowSlot.prototype.created = function (ownerView) {
        this.ownerView = ownerView;
    };
    ShadowSlot.prototype.bind = function (view) {
        if (this.contentView) {
            this.contentView.bind(view.bindingContext, view.overrideContext);
        }
    };
    ShadowSlot.prototype.attached = function () {
        if (this.contentView) {
            this.contentView.attached();
        }
    };
    ShadowSlot.prototype.detached = function () {
        if (this.contentView) {
            this.contentView.detached();
        }
    };
    ShadowSlot.prototype.unbind = function () {
        if (this.contentView) {
            this.contentView.unbind();
        }
    };
    return ShadowSlot;
}());
var ShadowDOM = (function () {
    function ShadowDOM() {
    }
    ShadowDOM.getSlotName = function (node) {
        if (node.auSlotAttribute === undefined) {
            return ShadowDOM.defaultSlotKey;
        }
        return node.auSlotAttribute.value;
    };
    ShadowDOM.distributeView = function (view, slots, projectionSource, index, destinationOverride) {
        var nodes;
        if (view === null) {
            nodes = noNodes;
        }
        else {
            var childNodes = view.fragment.childNodes;
            var ii = childNodes.length;
            nodes = new Array(ii);
            for (var i = 0; i < ii; ++i) {
                nodes[i] = childNodes[i];
            }
        }
        ShadowDOM.distributeNodes(view, nodes, slots, projectionSource, index, destinationOverride);
    };
    ShadowDOM.undistributeView = function (view, slots, projectionSource) {
        for (var slotName in slots) {
            slots[slotName].removeView(view, projectionSource);
        }
    };
    ShadowDOM.undistributeAll = function (slots, projectionSource) {
        for (var slotName in slots) {
            slots[slotName].removeAll(projectionSource);
        }
    };
    ShadowDOM.distributeNodes = function (view, nodes, slots, projectionSource, index, destinationOverride) {
        for (var i = 0, ii = nodes.length; i < ii; ++i) {
            var currentNode = nodes[i];
            var nodeType = currentNode.nodeType;
            if (currentNode.isContentProjectionSource) {
                currentNode.viewSlot.projectTo(slots);
                for (var slotName in slots) {
                    slots[slotName].projectFrom(view, currentNode.viewSlot);
                }
                nodes.splice(i, 1);
                ii--;
                i--;
            }
            else if (nodeType === 1 || nodeType === 3 || currentNode.viewSlot instanceof PassThroughSlot) {
                if (nodeType === 3 && _isAllWhitespace(currentNode)) {
                    nodes.splice(i, 1);
                    ii--;
                    i--;
                }
                else {
                    var found = slots[destinationOverride || ShadowDOM.getSlotName(currentNode)];
                    if (found) {
                        found.addNode(view, currentNode, projectionSource, index);
                        nodes.splice(i, 1);
                        ii--;
                        i--;
                    }
                }
            }
            else {
                nodes.splice(i, 1);
                ii--;
                i--;
            }
        }
        for (var slotName in slots) {
            var slot = slots[slotName];
            if (slot.needsFallbackRendering) {
                slot.renderFallbackContent(view, nodes, projectionSource, index);
            }
        }
    };
    ShadowDOM.defaultSlotKey = '__au-default-slot-key__';
    return ShadowDOM;
}());

var CompositionTransactionNotifier = (function () {
    function CompositionTransactionNotifier(owner) {
        this.owner = owner;
        this.owner._compositionCount++;
    }
    CompositionTransactionNotifier.prototype.done = function () {
        this.owner._compositionCount--;
        this.owner._tryCompleteTransaction();
    };
    return CompositionTransactionNotifier;
}());
var CompositionTransactionOwnershipToken = (function () {
    function CompositionTransactionOwnershipToken(owner) {
        this.owner = owner;
        this.owner._ownershipToken = this;
        this.thenable = this._createThenable();
    }
    CompositionTransactionOwnershipToken.prototype.waitForCompositionComplete = function () {
        this.owner._tryCompleteTransaction();
        return this.thenable;
    };
    CompositionTransactionOwnershipToken.prototype.resolve = function () {
        this._resolveCallback();
    };
    CompositionTransactionOwnershipToken.prototype._resolveCallback = function () {
        throw new Error("Method not implemented.");
    };
    CompositionTransactionOwnershipToken.prototype._createThenable = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this._resolveCallback = resolve;
        });
    };
    return CompositionTransactionOwnershipToken;
}());
var CompositionTransaction = (function () {
    function CompositionTransaction() {
        this._ownershipToken = null;
        this._compositionCount = 0;
    }
    CompositionTransaction.prototype.tryCapture = function () {
        return this._ownershipToken === null
            ? new CompositionTransactionOwnershipToken(this)
            : null;
    };
    CompositionTransaction.prototype.enlist = function () {
        return new CompositionTransactionNotifier(this);
    };
    CompositionTransaction.prototype._tryCompleteTransaction = function () {
        if (this._compositionCount <= 0) {
            this._compositionCount = 0;
            if (this._ownershipToken !== null) {
                var token = this._ownershipToken;
                this._ownershipToken = null;
                token.resolve();
            }
        }
    };
    return CompositionTransaction;
}());

var View = (function () {
    function View(container, viewFactory, fragment, controllers, bindings, children, slots) {
        this.container = container;
        this.viewFactory = viewFactory;
        this.resources = viewFactory.resources;
        this.fragment = fragment;
        this.firstChild = fragment.firstChild;
        this.lastChild = fragment.lastChild;
        this.controllers = controllers;
        this.bindings = bindings;
        this.children = children;
        this.slots = slots;
        this.hasSlots = false;
        this.fromCache = false;
        this.isBound = false;
        this.isAttached = false;
        this.bindingContext = null;
        this.overrideContext = null;
        this.controller = null;
        this.viewModelScope = null;
        this.animatableElement = undefined;
        this._isUserControlled = false;
        this.contentView = null;
        for (var _ in slots) {
            this.hasSlots = true;
            break;
        }
    }
    View.prototype.returnToCache = function () {
        this.viewFactory.returnViewToCache(this);
    };
    View.prototype.created = function () {
        var i;
        var ii;
        var controllers = this.controllers;
        for (i = 0, ii = controllers.length; i < ii; ++i) {
            controllers[i].created(this);
        }
    };
    View.prototype.bind = function (bindingContext, overrideContext, _systemUpdate) {
        var controllers;
        var bindings;
        var children;
        var i;
        var ii;
        if (_systemUpdate && this._isUserControlled) {
            return;
        }
        if (this.isBound) {
            if (this.bindingContext === bindingContext) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["createOverrideContext"])(bindingContext);
        this.resources._invokeHook('beforeBind', this);
        bindings = this.bindings;
        for (i = 0, ii = bindings.length; i < ii; ++i) {
            bindings[i].bind(this);
        }
        if (this.viewModelScope !== null) {
            bindingContext.bind(this.viewModelScope.bindingContext, this.viewModelScope.overrideContext);
            this.viewModelScope = null;
        }
        controllers = this.controllers;
        for (i = 0, ii = controllers.length; i < ii; ++i) {
            controllers[i].bind(this);
        }
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
            children[i].bind(bindingContext, overrideContext, true);
        }
        if (this.hasSlots) {
            ShadowDOM.distributeView(this.contentView, this.slots);
        }
    };
    View.prototype.addBinding = function (binding) {
        this.bindings.push(binding);
        if (this.isBound) {
            binding.bind(this);
        }
    };
    View.prototype.unbind = function () {
        var controllers;
        var bindings;
        var children;
        var i;
        var ii;
        if (this.isBound) {
            this.isBound = false;
            this.resources._invokeHook('beforeUnbind', this);
            if (this.controller !== null) {
                this.controller.unbind();
            }
            bindings = this.bindings;
            for (i = 0, ii = bindings.length; i < ii; ++i) {
                bindings[i].unbind();
            }
            controllers = this.controllers;
            for (i = 0, ii = controllers.length; i < ii; ++i) {
                controllers[i].unbind();
            }
            children = this.children;
            for (i = 0, ii = children.length; i < ii; ++i) {
                children[i].unbind();
            }
            this.bindingContext = null;
            this.overrideContext = null;
        }
    };
    View.prototype.insertNodesBefore = function (refNode) {
        refNode.parentNode.insertBefore(this.fragment, refNode);
    };
    View.prototype.appendNodesTo = function (parent) {
        parent.appendChild(this.fragment);
    };
    View.prototype.removeNodes = function () {
        var fragment = this.fragment;
        var current = this.firstChild;
        var end = this.lastChild;
        var next;
        while (current) {
            next = current.nextSibling;
            fragment.appendChild(current);
            if (current === end) {
                break;
            }
            current = next;
        }
    };
    View.prototype.attached = function () {
        var controllers;
        var children;
        var i;
        var ii;
        if (this.isAttached) {
            return;
        }
        this.isAttached = true;
        if (this.controller !== null) {
            this.controller.attached();
        }
        controllers = this.controllers;
        for (i = 0, ii = controllers.length; i < ii; ++i) {
            controllers[i].attached();
        }
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
            children[i].attached();
        }
    };
    View.prototype.detached = function () {
        var controllers;
        var children;
        var i;
        var ii;
        if (this.isAttached) {
            this.isAttached = false;
            if (this.controller !== null) {
                this.controller.detached();
            }
            controllers = this.controllers;
            for (i = 0, ii = controllers.length; i < ii; ++i) {
                controllers[i].detached();
            }
            children = this.children;
            for (i = 0, ii = children.length; i < ii; ++i) {
                children[i].detached();
            }
        }
    };
    return View;
}());

var Animator = (function () {
    function Animator() {
    }
    Animator.prototype.enter = function (element) {
        return Promise.resolve(false);
    };
    Animator.prototype.leave = function (element) {
        return Promise.resolve(false);
    };
    Animator.prototype.removeClass = function (element, className) {
        element.classList.remove(className);
        return Promise.resolve(false);
    };
    Animator.prototype.addClass = function (element, className) {
        element.classList.add(className);
        return Promise.resolve(false);
    };
    Animator.prototype.animate = function (element, className) {
        return Promise.resolve(false);
    };
    Animator.prototype.runSequence = function (animations) {
        return Promise.resolve(false);
    };
    Animator.prototype.registerEffect = function (effectName, properties) { };
    Animator.prototype.unregisterEffect = function (effectName) { };
    return Animator;
}());

function getAnimatableElement(view) {
    if (view.animatableElement !== undefined) {
        return view.animatableElement;
    }
    var current = view.firstChild;
    while (current && current.nodeType !== 1) {
        current = current.nextSibling;
    }
    if (current && current.nodeType === 1) {
        return (view.animatableElement = current.classList.contains('au-animate') ? current : null);
    }
    return (view.animatableElement = null);
}
var ViewSlot = (function () {
    function ViewSlot(anchor, anchorIsContainer, animator) {
        if (animator === void 0) { animator = Animator.instance; }
        this.anchor = anchor;
        this.anchorIsContainer = anchorIsContainer;
        this.bindingContext = null;
        this.overrideContext = null;
        this.animator = animator;
        this.children = [];
        this.isBound = false;
        this.isAttached = false;
        this.contentSelectors = null;
        anchor.viewSlot = this;
        anchor.isContentProjectionSource = false;
    }
    ViewSlot.prototype.animateView = function (view, direction) {
        if (direction === void 0) { direction = 'enter'; }
        var animatableElement = getAnimatableElement(view);
        if (animatableElement !== null) {
            switch (direction) {
                case 'enter':
                    return this.animator.enter(animatableElement);
                case 'leave':
                    return this.animator.leave(animatableElement);
                default:
                    throw new Error('Invalid animation direction: ' + direction);
            }
        }
    };
    ViewSlot.prototype.transformChildNodesIntoView = function () {
        var parent = this.anchor;
        this.children.push({
            fragment: parent,
            firstChild: parent.firstChild,
            lastChild: parent.lastChild,
            returnToCache: function () { },
            removeNodes: function () {
                var last;
                while (last = parent.lastChild) {
                    parent.removeChild(last);
                }
            },
            created: function () { },
            bind: function () { },
            unbind: function () { },
            attached: function () { },
            detached: function () { }
        });
    };
    ViewSlot.prototype.bind = function (bindingContext, overrideContext) {
        var i;
        var ii;
        var children;
        if (this.isBound) {
            if (this.bindingContext === bindingContext) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.bindingContext = bindingContext = bindingContext || this.bindingContext;
        this.overrideContext = overrideContext = overrideContext || this.overrideContext;
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
            children[i].bind(bindingContext, overrideContext, true);
        }
    };
    ViewSlot.prototype.unbind = function () {
        if (this.isBound) {
            var i = void 0;
            var ii = void 0;
            var children = this.children;
            this.isBound = false;
            this.bindingContext = null;
            this.overrideContext = null;
            for (i = 0, ii = children.length; i < ii; ++i) {
                children[i].unbind();
            }
        }
    };
    ViewSlot.prototype.add = function (view) {
        if (this.anchorIsContainer) {
            view.appendNodesTo(this.anchor);
        }
        else {
            view.insertNodesBefore(this.anchor);
        }
        this.children.push(view);
        if (this.isAttached) {
            view.attached();
            return this.animateView(view, 'enter');
        }
    };
    ViewSlot.prototype.insert = function (index, view) {
        var children = this.children;
        var length = children.length;
        if ((index === 0 && length === 0) || index >= length) {
            return this.add(view);
        }
        view.insertNodesBefore(children[index].firstChild);
        children.splice(index, 0, view);
        if (this.isAttached) {
            view.attached();
            return this.animateView(view, 'enter');
        }
    };
    ViewSlot.prototype.move = function (sourceIndex, targetIndex) {
        if (sourceIndex === targetIndex) {
            return;
        }
        var children = this.children;
        var view = children[sourceIndex];
        view.removeNodes();
        view.insertNodesBefore(children[targetIndex].firstChild);
        children.splice(sourceIndex, 1);
        children.splice(targetIndex, 0, view);
    };
    ViewSlot.prototype.remove = function (view, returnToCache, skipAnimation) {
        return this.removeAt(this.children.indexOf(view), returnToCache, skipAnimation);
    };
    ViewSlot.prototype.removeMany = function (viewsToRemove, returnToCache, skipAnimation) {
        var _this = this;
        var children = this.children;
        var ii = viewsToRemove.length;
        var i;
        var rmPromises = [];
        viewsToRemove.forEach(function (child) {
            if (skipAnimation) {
                child.removeNodes();
                return;
            }
            var animation = _this.animateView(child, 'leave');
            if (animation) {
                rmPromises.push(animation.then(function () { return child.removeNodes(); }));
            }
            else {
                child.removeNodes();
            }
        });
        var removeAction = function () {
            if (_this.isAttached) {
                for (i = 0; i < ii; ++i) {
                    viewsToRemove[i].detached();
                }
            }
            if (returnToCache) {
                for (i = 0; i < ii; ++i) {
                    viewsToRemove[i].returnToCache();
                }
            }
            for (i = 0; i < ii; ++i) {
                var index = children.indexOf(viewsToRemove[i]);
                if (index >= 0) {
                    children.splice(index, 1);
                }
            }
        };
        if (rmPromises.length > 0) {
            return Promise.all(rmPromises).then(function () { return removeAction(); });
        }
        return removeAction();
    };
    ViewSlot.prototype.removeAt = function (index, returnToCache, skipAnimation) {
        var _this = this;
        var view = this.children[index];
        var removeAction = function () {
            index = _this.children.indexOf(view);
            view.removeNodes();
            _this.children.splice(index, 1);
            if (_this.isAttached) {
                view.detached();
            }
            if (returnToCache) {
                view.returnToCache();
            }
            return view;
        };
        if (!skipAnimation) {
            var animation = this.animateView(view, 'leave');
            if (animation) {
                return animation.then(function () { return removeAction(); });
            }
        }
        return removeAction();
    };
    ViewSlot.prototype.removeAll = function (returnToCache, skipAnimation) {
        var _this = this;
        var children = this.children;
        var ii = children.length;
        var i;
        var rmPromises = [];
        children.forEach(function (child) {
            if (skipAnimation) {
                child.removeNodes();
                return;
            }
            var animation = _this.animateView(child, 'leave');
            if (animation) {
                rmPromises.push(animation.then(function () { return child.removeNodes(); }));
            }
            else {
                child.removeNodes();
            }
        });
        var removeAction = function () {
            if (_this.isAttached) {
                for (i = 0; i < ii; ++i) {
                    children[i].detached();
                }
            }
            if (returnToCache) {
                for (i = 0; i < ii; ++i) {
                    var child = children[i];
                    if (child) {
                        child.returnToCache();
                    }
                }
            }
            _this.children = [];
        };
        if (rmPromises.length > 0) {
            return Promise.all(rmPromises).then(function () { return removeAction(); });
        }
        return removeAction();
    };
    ViewSlot.prototype.attached = function () {
        var i;
        var ii;
        var children;
        var child;
        if (this.isAttached) {
            return;
        }
        this.isAttached = true;
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
            child = children[i];
            child.attached();
            this.animateView(child, 'enter');
        }
    };
    ViewSlot.prototype.detached = function () {
        var i;
        var ii;
        var children;
        if (this.isAttached) {
            this.isAttached = false;
            children = this.children;
            for (i = 0, ii = children.length; i < ii; ++i) {
                children[i].detached();
            }
        }
    };
    ViewSlot.prototype.projectTo = function (slots) {
        var _this = this;
        this.projectToSlots = slots;
        this.add = this._projectionAdd;
        this.insert = this._projectionInsert;
        this.move = this._projectionMove;
        this.remove = this._projectionRemove;
        this.removeAt = this._projectionRemoveAt;
        this.removeMany = this._projectionRemoveMany;
        this.removeAll = this._projectionRemoveAll;
        this.children.forEach(function (view) { return ShadowDOM.distributeView(view, slots, _this); });
    };
    ViewSlot.prototype._projectionAdd = function (view) {
        ShadowDOM.distributeView(view, this.projectToSlots, this);
        this.children.push(view);
        if (this.isAttached) {
            view.attached();
        }
    };
    ViewSlot.prototype._projectionInsert = function (index, view) {
        if ((index === 0 && !this.children.length) || index >= this.children.length) {
            this.add(view);
        }
        else {
            ShadowDOM.distributeView(view, this.projectToSlots, this, index);
            this.children.splice(index, 0, view);
            if (this.isAttached) {
                view.attached();
            }
        }
    };
    ViewSlot.prototype._projectionMove = function (sourceIndex, targetIndex) {
        if (sourceIndex === targetIndex) {
            return;
        }
        var children = this.children;
        var view = children[sourceIndex];
        ShadowDOM.undistributeView(view, this.projectToSlots, this);
        ShadowDOM.distributeView(view, this.projectToSlots, this, targetIndex);
        children.splice(sourceIndex, 1);
        children.splice(targetIndex, 0, view);
    };
    ViewSlot.prototype._projectionRemove = function (view, returnToCache) {
        ShadowDOM.undistributeView(view, this.projectToSlots, this);
        this.children.splice(this.children.indexOf(view), 1);
        if (this.isAttached) {
            view.detached();
        }
        if (returnToCache) {
            view.returnToCache();
        }
    };
    ViewSlot.prototype._projectionRemoveAt = function (index, returnToCache) {
        var view = this.children[index];
        ShadowDOM.undistributeView(view, this.projectToSlots, this);
        this.children.splice(index, 1);
        if (this.isAttached) {
            view.detached();
        }
        if (returnToCache) {
            view.returnToCache();
        }
    };
    ViewSlot.prototype._projectionRemoveMany = function (viewsToRemove, returnToCache) {
        var _this = this;
        viewsToRemove.forEach(function (view) { return _this.remove(view, returnToCache); });
    };
    ViewSlot.prototype._projectionRemoveAll = function (returnToCache) {
        ShadowDOM.undistributeAll(this.projectToSlots, this);
        var children = this.children;
        var ii = children.length;
        for (var i = 0; i < ii; ++i) {
            if (returnToCache) {
                children[i].returnToCache();
            }
            else if (this.isAttached) {
                children[i].detached();
            }
        }
        this.children = [];
    };
    return ViewSlot;
}());

var $resolver = __WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["resolver"];
var ProviderResolver = (function () {
    function ProviderResolver() {
    }
    ProviderResolver.prototype.get = function (container, key) {
        var id = key.__providerId__;
        return id in container ? container[id] : (container[id] = container.invoke(key));
    };
    ProviderResolver = __decorate([
        $resolver
    ], ProviderResolver);
    return ProviderResolver;
}());
var providerResolverInstance = new ProviderResolver();
function elementContainerGet(key) {
    if (key === __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element) {
        return this.element;
    }
    if (key === BoundViewFactory) {
        if (this.boundViewFactory) {
            return this.boundViewFactory;
        }
        var factory = this.instruction.viewFactory;
        var partReplacements = this.partReplacements;
        if (partReplacements) {
            factory = partReplacements[factory.part] || factory;
        }
        this.boundViewFactory = new BoundViewFactory(this, factory, partReplacements);
        return this.boundViewFactory;
    }
    if (key === ViewSlot) {
        if (this.viewSlot === undefined) {
            this.viewSlot = new ViewSlot(this.element, this.instruction.anchorIsContainer);
            this.element.isContentProjectionSource = this.instruction.lifting;
            this.children.push(this.viewSlot);
        }
        return this.viewSlot;
    }
    if (key === ElementEvents) {
        return this.elementEvents || (this.elementEvents = new ElementEvents(this.element));
    }
    if (key === CompositionTransaction) {
        return this.compositionTransaction || (this.compositionTransaction = this.parent.get(key));
    }
    if (key === ViewResources) {
        return this.viewResources;
    }
    if (key === TargetInstruction) {
        return this.instruction;
    }
    return this.superGet(key);
}
function createElementContainer(parent, element, instruction, children, partReplacements, resources) {
    var container = parent.createChild();
    var providers;
    var i;
    container.element = element;
    container.instruction = instruction;
    container.children = children;
    container.viewResources = resources;
    container.partReplacements = partReplacements;
    providers = instruction.providers;
    i = providers.length;
    while (i--) {
        container._resolvers.set(providers[i], providerResolverInstance);
    }
    container.superGet = container.get;
    container.get = elementContainerGet;
    return container;
}
function hasAttribute(name) {
    return this._element.hasAttribute(name);
}
function getAttribute(name) {
    return this._element.getAttribute(name);
}
function setAttribute(name, value) {
    this._element.setAttribute(name, value);
}
function makeElementIntoAnchor(element, elementInstruction) {
    var anchor = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createComment('anchor');
    if (elementInstruction) {
        var firstChild = element.firstChild;
        if (firstChild && firstChild.tagName === 'AU-CONTENT') {
            anchor.contentElement = firstChild;
        }
        anchor._element = element;
        anchor.hasAttribute = hasAttribute;
        anchor.getAttribute = getAttribute;
        anchor.setAttribute = setAttribute;
    }
    __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].replaceNode(anchor, element);
    return anchor;
}
function applyInstructions(containers, element, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources) {
    var behaviorInstructions = instruction.behaviorInstructions;
    var expressions = instruction.expressions;
    var elementContainer;
    var i;
    var ii;
    var current;
    var instance;
    if (instruction.contentExpression) {
        bindings.push(instruction.contentExpression.createBinding(element.nextSibling));
        element.nextSibling.auInterpolationTarget = true;
        element.parentNode.removeChild(element);
        return;
    }
    if (instruction.shadowSlot) {
        var commentAnchor = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createComment('slot');
        var slot = void 0;
        if (instruction.slotDestination) {
            slot = new PassThroughSlot(commentAnchor, instruction.slotName, instruction.slotDestination, instruction.slotFallbackFactory);
        }
        else {
            slot = new ShadowSlot(commentAnchor, instruction.slotName, instruction.slotFallbackFactory);
        }
        __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].replaceNode(commentAnchor, element);
        shadowSlots[instruction.slotName] = slot;
        controllers.push(slot);
        return;
    }
    if (instruction.letElement) {
        for (i = 0, ii = expressions.length; i < ii; ++i) {
            bindings.push(expressions[i].createBinding());
        }
        element.parentNode.removeChild(element);
        return;
    }
    if (behaviorInstructions.length) {
        if (!instruction.anchorIsContainer) {
            element = makeElementIntoAnchor(element, instruction.elementInstruction);
        }
        containers[instruction.injectorId] = elementContainer =
            createElementContainer(containers[instruction.parentInjectorId], element, instruction, children, partReplacements, resources);
        for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
            current = behaviorInstructions[i];
            instance = current.type.create(elementContainer, current, element, bindings);
            controllers.push(instance);
        }
    }
    for (i = 0, ii = expressions.length; i < ii; ++i) {
        bindings.push(expressions[i].createBinding(element));
    }
}
function styleStringToObject(style, target) {
    var attributes = style.split(';');
    var firstIndexOfColon;
    var i;
    var current;
    var key;
    var value;
    target = target || {};
    for (i = 0; i < attributes.length; i++) {
        current = attributes[i];
        firstIndexOfColon = current.indexOf(':');
        key = current.substring(0, firstIndexOfColon).trim();
        value = current.substring(firstIndexOfColon + 1).trim();
        target[key] = value;
    }
    return target;
}
function styleObjectToString(obj) {
    var result = '';
    for (var key in obj) {
        result += key + ':' + obj[key] + ';';
    }
    return result;
}
function applySurrogateInstruction(container, element, instruction, controllers, bindings, children) {
    var behaviorInstructions = instruction.behaviorInstructions;
    var expressions = instruction.expressions;
    var providers = instruction.providers;
    var values = instruction.values;
    var i;
    var ii;
    var current;
    var instance;
    var currentAttributeValue;
    i = providers.length;
    while (i--) {
        container._resolvers.set(providers[i], providerResolverInstance);
    }
    for (var key in values) {
        currentAttributeValue = element.getAttribute(key);
        if (currentAttributeValue) {
            if (key === 'class') {
                element.setAttribute('class', currentAttributeValue + ' ' + values[key]);
            }
            else if (key === 'style') {
                var styleObject = styleStringToObject(values[key]);
                styleStringToObject(currentAttributeValue, styleObject);
                element.setAttribute('style', styleObjectToString(styleObject));
            }
        }
        else {
            element.setAttribute(key, values[key]);
        }
    }
    if (behaviorInstructions.length) {
        for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
            current = behaviorInstructions[i];
            instance = current.type.create(container, current, element, bindings);
            if (instance.contentView) {
                children.push(instance.contentView);
            }
            controllers.push(instance);
        }
    }
    for (i = 0, ii = expressions.length; i < ii; ++i) {
        bindings.push(expressions[i].createBinding(element));
    }
}
var BoundViewFactory = (function () {
    function BoundViewFactory(parentContainer, viewFactory, partReplacements) {
        this.parentContainer = parentContainer;
        this.viewFactory = viewFactory;
        this.factoryCreateInstruction = { partReplacements: partReplacements };
    }
    BoundViewFactory.prototype.create = function () {
        var view = this.viewFactory.create(this.parentContainer.createChild(), this.factoryCreateInstruction);
        view._isUserControlled = true;
        return view;
    };
    Object.defineProperty(BoundViewFactory.prototype, "isCaching", {
        get: function () {
            return this.viewFactory.isCaching;
        },
        enumerable: false,
        configurable: true
    });
    BoundViewFactory.prototype.setCacheSize = function (size, doNotOverrideIfAlreadySet) {
        this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
    };
    BoundViewFactory.prototype.getCachedView = function () {
        return this.viewFactory.getCachedView();
    };
    BoundViewFactory.prototype.returnViewToCache = function (view) {
        this.viewFactory.returnViewToCache(view);
    };
    return BoundViewFactory;
}());
var ViewFactory = (function () {
    function ViewFactory(template, instructions, resources) {
        this.isCaching = false;
        this.template = template;
        this.instructions = instructions;
        this.resources = resources;
        this.cacheSize = -1;
        this.cache = null;
    }
    ViewFactory.prototype.setCacheSize = function (size, doNotOverrideIfAlreadySet) {
        if (size) {
            if (size === '*') {
                size = Number.MAX_VALUE;
            }
            else if (typeof size === 'string') {
                size = parseInt(size, 10);
            }
        }
        if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
            this.cacheSize = Number(size);
        }
        if (this.cacheSize > 0) {
            this.cache = [];
        }
        else {
            this.cache = null;
        }
        this.isCaching = this.cacheSize > 0;
    };
    ViewFactory.prototype.getCachedView = function () {
        return this.cache !== null ? (this.cache.pop() || null) : null;
    };
    ViewFactory.prototype.returnViewToCache = function (view) {
        if (view.isAttached) {
            view.detached();
        }
        if (view.isBound) {
            view.unbind();
        }
        if (this.cache !== null && this.cache.length < this.cacheSize) {
            view.fromCache = true;
            this.cache.push(view);
        }
    };
    ViewFactory.prototype.create = function (container, createInstruction, element) {
        createInstruction = createInstruction || BehaviorInstruction.normal;
        var cachedView = this.getCachedView();
        if (cachedView !== null) {
            return cachedView;
        }
        var fragment = createInstruction.enhance ? this.template : this.template.cloneNode(true);
        var instructables = fragment.querySelectorAll('.au-target');
        var instructions = this.instructions;
        var resources = this.resources;
        var controllers = [];
        var bindings = [];
        var children = [];
        var shadowSlots = Object.create(null);
        var containers = { root: container };
        var partReplacements = createInstruction.partReplacements;
        var i;
        var ii;
        var view;
        var instructable;
        var instruction;
        this.resources._invokeHook('beforeCreate', this, container, fragment, createInstruction);
        if (element && this.surrogateInstruction !== null) {
            applySurrogateInstruction(container, element, this.surrogateInstruction, controllers, bindings, children);
        }
        if (createInstruction.enhance && fragment.hasAttribute('au-target-id')) {
            instructable = fragment;
            instruction = instructions[instructable.getAttribute('au-target-id')];
            applyInstructions(containers, instructable, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources);
        }
        for (i = 0, ii = instructables.length; i < ii; ++i) {
            instructable = instructables[i];
            instruction = instructions[instructable.getAttribute('au-target-id')];
            applyInstructions(containers, instructable, instruction, controllers, bindings, children, shadowSlots, partReplacements, resources);
        }
        view = new View(container, this, fragment, controllers, bindings, children, shadowSlots);
        if (!createInstruction.initiatedByBehavior) {
            view.created();
        }
        this.resources._invokeHook('afterCreate', view);
        return view;
    };
    return ViewFactory;
}());

var nextInjectorId = 0;
function getNextInjectorId() {
    return ++nextInjectorId;
}
var lastAUTargetID = 0;
function getNextAUTargetID() {
    return (++lastAUTargetID).toString();
}
function makeIntoInstructionTarget(element) {
    var value = element.getAttribute('class');
    var auTargetID = getNextAUTargetID();
    element.setAttribute('class', (value ? value + ' au-target' : 'au-target'));
    element.setAttribute('au-target-id', auTargetID);
    return auTargetID;
}
function makeShadowSlot(compiler, resources, node, instructions, parentInjectorId) {
    var auShadowSlot = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createElement('au-shadow-slot');
    __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].replaceNode(auShadowSlot, node);
    var auTargetID = makeIntoInstructionTarget(auShadowSlot);
    var instruction = TargetInstruction.shadowSlot(parentInjectorId);
    instruction.slotName = node.getAttribute('name') || ShadowDOM.defaultSlotKey;
    instruction.slotDestination = node.getAttribute('slot');
    if (node.innerHTML.trim()) {
        var fragment = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createDocumentFragment();
        var child = void 0;
        while (child = node.firstChild) {
            fragment.appendChild(child);
        }
        instruction.slotFallbackFactory = compiler.compile(fragment, resources);
    }
    instructions[auTargetID] = instruction;
    return auShadowSlot;
}
var defaultLetHandler = BindingLanguage.prototype.createLetExpressions;
var ViewCompiler = (function () {
    function ViewCompiler(bindingLanguage, resources) {
        this.bindingLanguage = bindingLanguage;
        this.resources = resources;
    }
    ViewCompiler.inject = function () {
        return [BindingLanguage, ViewResources];
    };
    ViewCompiler.prototype.compile = function (source, resources, compileInstruction) {
        resources = resources || this.resources;
        compileInstruction = compileInstruction || ViewCompileInstruction.normal;
        source = typeof source === 'string' ? __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createTemplateFromMarkup(source) : source;
        var content;
        var part;
        var cacheSize;
        if (source.content) {
            part = source.getAttribute('part');
            cacheSize = source.getAttribute('view-cache');
            content = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].adoptNode(source.content);
        }
        else {
            content = source;
        }
        compileInstruction.targetShadowDOM = compileInstruction.targetShadowDOM && __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["FEATURE"].shadowDOM;
        resources._invokeHook('beforeCompile', content, resources, compileInstruction);
        var instructions = {};
        this._compileNode(content, resources, instructions, source, 'root', !compileInstruction.targetShadowDOM);
        var firstChild = content.firstChild;
        if (firstChild && firstChild.nodeType === 1) {
            var targetId = firstChild.getAttribute('au-target-id');
            if (targetId) {
                var ins = instructions[targetId];
                if (ins.shadowSlot || ins.lifting || (ins.elementInstruction && !ins.elementInstruction.anchorIsContainer)) {
                    content.insertBefore(__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createComment('view'), firstChild);
                }
            }
        }
        var factory = new ViewFactory(content, instructions, resources);
        factory.surrogateInstruction = compileInstruction.compileSurrogate ? this._compileSurrogate(source, resources) : null;
        factory.part = part;
        if (cacheSize) {
            factory.setCacheSize(cacheSize);
        }
        resources._invokeHook('afterCompile', factory);
        return factory;
    };
    ViewCompiler.prototype._compileNode = function (node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
        switch (node.nodeType) {
            case 1:
                return this._compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM);
            case 3:
                var expression = resources.getBindingLanguage(this.bindingLanguage).inspectTextContent(resources, node.wholeText);
                if (expression) {
                    var marker = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createElement('au-marker');
                    var auTargetID = makeIntoInstructionTarget(marker);
                    (node.parentNode || parentNode).insertBefore(marker, node);
                    node.textContent = ' ';
                    instructions[auTargetID] = TargetInstruction.contentExpression(expression);
                    while (node.nextSibling && node.nextSibling.nodeType === 3) {
                        (node.parentNode || parentNode).removeChild(node.nextSibling);
                    }
                }
                else {
                    while (node.nextSibling && node.nextSibling.nodeType === 3) {
                        node = node.nextSibling;
                    }
                }
                return node.nextSibling;
            case 11:
                var currentChild = node.firstChild;
                while (currentChild) {
                    currentChild = this._compileNode(currentChild, resources, instructions, node, parentInjectorId, targetLightDOM);
                }
                break;
        }
        return node.nextSibling;
    };
    ViewCompiler.prototype._compileSurrogate = function (node, resources) {
        var tagName = node.tagName.toLowerCase();
        var attributes = node.attributes;
        var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
        var knownAttribute;
        var property;
        var instruction;
        var i;
        var ii;
        var attr;
        var attrName;
        var attrValue;
        var info;
        var type;
        var expressions = [];
        var expression;
        var behaviorInstructions = [];
        var values = {};
        var hasValues = false;
        var providers = [];
        for (i = 0, ii = attributes.length; i < ii; ++i) {
            attr = attributes[i];
            attrName = attr.name;
            attrValue = attr.value;
            info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);
            type = resources.getAttribute(info.attrName);
            if (type) {
                knownAttribute = resources.mapAttribute(info.attrName);
                if (knownAttribute) {
                    property = type.attributes[knownAttribute];
                    if (property) {
                        info.defaultBindingMode = property.defaultBindingMode;
                        if (!info.command && !info.expression) {
                            info.command = property.hasOptions ? 'options' : null;
                        }
                        if (info.command && (info.command !== 'options') && type.primaryProperty) {
                            var primaryProperty = type.primaryProperty;
                            attrName = info.attrName = primaryProperty.attribute;
                            info.defaultBindingMode = primaryProperty.defaultBindingMode;
                        }
                    }
                }
            }
            instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
            if (instruction) {
                if (instruction.alteredAttr) {
                    type = resources.getAttribute(instruction.attrName);
                }
                if (instruction.discrete) {
                    expressions.push(instruction);
                }
                else {
                    if (type) {
                        instruction.type = type;
                        this._configureProperties(instruction, resources);
                        if (type.liftsContent) {
                            throw new Error('You cannot place a template controller on a surrogate element.');
                        }
                        else {
                            behaviorInstructions.push(instruction);
                        }
                    }
                    else {
                        expressions.push(instruction.attributes[instruction.attrName]);
                    }
                }
            }
            else {
                if (type) {
                    instruction = BehaviorInstruction.attribute(attrName, type);
                    instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
                    if (type.liftsContent) {
                        throw new Error('You cannot place a template controller on a surrogate element.');
                    }
                    else {
                        behaviorInstructions.push(instruction);
                    }
                }
                else if (attrName !== 'id' && attrName !== 'part' && attrName !== 'replace-part') {
                    hasValues = true;
                    values[attrName] = attrValue;
                }
            }
        }
        if (expressions.length || behaviorInstructions.length || hasValues) {
            for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
                instruction = behaviorInstructions[i];
                instruction.type.compile(this, resources, node, instruction);
                providers.push(instruction.type.target);
            }
            for (i = 0, ii = expressions.length; i < ii; ++i) {
                expression = expressions[i];
                if (expression.attrToRemove !== undefined) {
                    node.removeAttribute(expression.attrToRemove);
                }
            }
            return TargetInstruction.surrogate(providers, behaviorInstructions, expressions, values);
        }
        return null;
    };
    ViewCompiler.prototype._compileElement = function (node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
        var tagName = node.tagName.toLowerCase();
        var attributes = node.attributes;
        var expressions = [];
        var expression;
        var behaviorInstructions = [];
        var providers = [];
        var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
        var liftingInstruction;
        var viewFactory;
        var type;
        var elementInstruction;
        var elementProperty;
        var i;
        var ii;
        var attr;
        var attrName;
        var attrValue;
        var originalAttrName;
        var instruction;
        var info;
        var property;
        var knownAttribute;
        var auTargetID;
        var injectorId;
        if (tagName === 'slot') {
            if (targetLightDOM) {
                node = makeShadowSlot(this, resources, node, instructions, parentInjectorId);
            }
            return node.nextSibling;
        }
        else if (tagName === 'template') {
            if (!('content' in node)) {
                throw new Error('You cannot place a template element within ' + node.namespaceURI + ' namespace');
            }
            viewFactory = this.compile(node, resources);
            viewFactory.part = node.getAttribute('part');
        }
        else {
            type = resources.getElement(node.getAttribute('as-element') || tagName);
            if (tagName === 'let' && !type && bindingLanguage.createLetExpressions !== defaultLetHandler) {
                expressions = bindingLanguage.createLetExpressions(resources, node);
                auTargetID = makeIntoInstructionTarget(node);
                instructions[auTargetID] = TargetInstruction.letElement(expressions);
                return node.nextSibling;
            }
            if (type) {
                elementInstruction = BehaviorInstruction.element(node, type);
                type.processAttributes(this, resources, node, attributes, elementInstruction);
                behaviorInstructions.push(elementInstruction);
            }
        }
        for (i = 0, ii = attributes.length; i < ii; ++i) {
            attr = attributes[i];
            originalAttrName = attrName = attr.name;
            attrValue = attr.value;
            info = bindingLanguage.inspectAttribute(resources, tagName, attrName, attrValue);
            if (targetLightDOM && info.attrName === 'slot') {
                info.attrName = attrName = 'au-slot';
            }
            type = resources.getAttribute(info.attrName);
            elementProperty = null;
            if (type) {
                knownAttribute = resources.mapAttribute(info.attrName);
                if (knownAttribute) {
                    property = type.attributes[knownAttribute];
                    if (property) {
                        info.defaultBindingMode = property.defaultBindingMode;
                        if (!info.command && !info.expression) {
                            info.command = property.hasOptions ? 'options' : null;
                        }
                        if (info.command && (info.command !== 'options') && type.primaryProperty) {
                            var primaryProperty = type.primaryProperty;
                            attrName = info.attrName = primaryProperty.attribute;
                            info.defaultBindingMode = primaryProperty.defaultBindingMode;
                        }
                    }
                }
            }
            else if (elementInstruction) {
                elementProperty = elementInstruction.type.attributes[info.attrName];
                if (elementProperty) {
                    info.defaultBindingMode = elementProperty.defaultBindingMode;
                }
            }
            if (elementProperty) {
                instruction = bindingLanguage.createAttributeInstruction(resources, node, info, elementInstruction);
            }
            else {
                instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
            }
            if (instruction) {
                if (instruction.alteredAttr) {
                    type = resources.getAttribute(instruction.attrName);
                }
                if (instruction.discrete) {
                    expressions.push(instruction);
                }
                else {
                    if (type) {
                        instruction.type = type;
                        this._configureProperties(instruction, resources);
                        if (type.liftsContent) {
                            instruction.originalAttrName = originalAttrName;
                            liftingInstruction = instruction;
                            break;
                        }
                        else {
                            behaviorInstructions.push(instruction);
                        }
                    }
                    else if (elementProperty) {
                        elementInstruction.attributes[info.attrName].targetProperty = elementProperty.name;
                    }
                    else {
                        expressions.push(instruction.attributes[instruction.attrName]);
                    }
                }
            }
            else {
                if (type) {
                    instruction = BehaviorInstruction.attribute(attrName, type);
                    instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
                    if (type.liftsContent) {
                        instruction.originalAttrName = originalAttrName;
                        liftingInstruction = instruction;
                        break;
                    }
                    else {
                        behaviorInstructions.push(instruction);
                    }
                }
                else if (elementProperty) {
                    elementInstruction.attributes[attrName] = attrValue;
                }
            }
        }
        if (liftingInstruction) {
            liftingInstruction.viewFactory = viewFactory;
            node = liftingInstruction.type.compile(this, resources, node, liftingInstruction, parentNode);
            auTargetID = makeIntoInstructionTarget(node);
            instructions[auTargetID] = TargetInstruction.lifting(parentInjectorId, liftingInstruction);
        }
        else {
            var skipContentProcessing = false;
            if (expressions.length || behaviorInstructions.length) {
                injectorId = behaviorInstructions.length ? getNextInjectorId() : false;
                for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
                    instruction = behaviorInstructions[i];
                    instruction.type.compile(this, resources, node, instruction, parentNode);
                    providers.push(instruction.type.target);
                    skipContentProcessing = skipContentProcessing || instruction.skipContentProcessing;
                }
                for (i = 0, ii = expressions.length; i < ii; ++i) {
                    expression = expressions[i];
                    if (expression.attrToRemove !== undefined) {
                        node.removeAttribute(expression.attrToRemove);
                    }
                }
                auTargetID = makeIntoInstructionTarget(node);
                instructions[auTargetID] = TargetInstruction.normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction);
            }
            if (skipContentProcessing) {
                return node.nextSibling;
            }
            var currentChild = node.firstChild;
            while (currentChild) {
                currentChild = this._compileNode(currentChild, resources, instructions, node, injectorId || parentInjectorId, targetLightDOM);
            }
        }
        return node.nextSibling;
    };
    ViewCompiler.prototype._configureProperties = function (instruction, resources) {
        var type = instruction.type;
        var attrName = instruction.attrName;
        var attributes = instruction.attributes;
        var property;
        var key;
        var value;
        var knownAttribute = resources.mapAttribute(attrName);
        if (knownAttribute && attrName in attributes && knownAttribute !== attrName) {
            attributes[knownAttribute] = attributes[attrName];
            delete attributes[attrName];
        }
        for (key in attributes) {
            value = attributes[key];
            if (value !== null && typeof value === 'object') {
                property = type.attributes[key];
                if (property !== undefined) {
                    value.targetProperty = property.name;
                }
                else {
                    value.targetProperty = key;
                }
            }
        }
    };
    return ViewCompiler;
}());

var ViewEngineHooksResource = (function () {
    function ViewEngineHooksResource() {
    }
    ViewEngineHooksResource.prototype.initialize = function (container, target) {
        this.instance = container.get(target);
    };
    ViewEngineHooksResource.prototype.register = function (registry, name) {
        registry.registerViewEngineHooks(this.instance);
    };
    ViewEngineHooksResource.prototype.load = function (container, target) { };
    ViewEngineHooksResource.convention = function (name) {
        if (name.endsWith('ViewEngineHooks')) {
            return new ViewEngineHooksResource();
        }
    };
    return ViewEngineHooksResource;
}());
function viewEngineHooks(target) {
    var deco = function (t) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, new ViewEngineHooksResource(), t);
    };
    return target ? deco(target) : deco;
}

var ResourceModule = (function () {
    function ResourceModule(moduleId) {
        this.id = moduleId;
        this.moduleInstance = null;
        this.mainResource = null;
        this.resources = null;
        this.viewStrategy = null;
        this.isInitialized = false;
        this.onLoaded = null;
        this.loadContext = null;
    }
    ResourceModule.prototype.initialize = function (container) {
        var current = this.mainResource;
        var resources = this.resources;
        var vs = this.viewStrategy;
        if (this.isInitialized) {
            return;
        }
        this.isInitialized = true;
        if (current !== undefined) {
            current.metadata.viewStrategy = vs;
            current.initialize(container);
        }
        for (var i = 0, ii = resources.length; i < ii; ++i) {
            current = resources[i];
            current.metadata.viewStrategy = vs;
            current.initialize(container);
        }
    };
    ResourceModule.prototype.register = function (registry, name) {
        var main = this.mainResource;
        var resources = this.resources;
        if (main !== undefined) {
            main.register(registry, name);
            name = null;
        }
        for (var i = 0, ii = resources.length; i < ii; ++i) {
            resources[i].register(registry, name);
            name = null;
        }
    };
    ResourceModule.prototype.load = function (container, loadContext) {
        if (this.onLoaded !== null) {
            return this.loadContext === loadContext ? Promise.resolve() : this.onLoaded;
        }
        var main = this.mainResource;
        var resources = this.resources;
        var loads;
        if (main !== undefined) {
            loads = new Array(resources.length + 1);
            loads[0] = main.load(container, loadContext);
            for (var i = 0, ii = resources.length; i < ii; ++i) {
                loads[i + 1] = resources[i].load(container, loadContext);
            }
        }
        else {
            loads = new Array(resources.length);
            for (var i = 0, ii = resources.length; i < ii; ++i) {
                loads[i] = resources[i].load(container, loadContext);
            }
        }
        this.loadContext = loadContext;
        this.onLoaded = Promise.all(loads);
        return this.onLoaded;
    };
    return ResourceModule;
}());
var ResourceDescription = (function () {
    function ResourceDescription(key, exportedValue, resourceTypeMeta) {
        if (!resourceTypeMeta) {
            resourceTypeMeta = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].get(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, exportedValue);
            if (!resourceTypeMeta) {
                resourceTypeMeta = new HtmlBehaviorResource();
                resourceTypeMeta.elementName = _hyphenate(key);
                __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, resourceTypeMeta, exportedValue);
            }
        }
        if (resourceTypeMeta instanceof HtmlBehaviorResource) {
            if (resourceTypeMeta.elementName === undefined) {
                resourceTypeMeta.elementName = _hyphenate(key);
            }
            else if (resourceTypeMeta.attributeName === undefined) {
                resourceTypeMeta.attributeName = _hyphenate(key);
            }
            else if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
                HtmlBehaviorResource.convention(key, resourceTypeMeta);
            }
        }
        else if (!resourceTypeMeta.name) {
            resourceTypeMeta.name = _hyphenate(key);
        }
        this.metadata = resourceTypeMeta;
        this.value = exportedValue;
    }
    ResourceDescription.prototype.initialize = function (container) {
        this.metadata.initialize(container, this.value);
    };
    ResourceDescription.prototype.register = function (registry, name) {
        this.metadata.register(registry, name);
    };
    ResourceDescription.prototype.load = function (container, loadContext) {
        return this.metadata.load(container, this.value, loadContext);
    };
    return ResourceDescription;
}());
var ModuleAnalyzer = (function () {
    function ModuleAnalyzer() {
        this.cache = Object.create(null);
    }
    ModuleAnalyzer.prototype.getAnalysis = function (moduleId) {
        return this.cache[moduleId];
    };
    ModuleAnalyzer.prototype.analyze = function (moduleId, moduleInstance, mainResourceKey) {
        var mainResource;
        var fallbackValue;
        var fallbackKey;
        var resourceTypeMeta;
        var key;
        var exportedValue;
        var resources = [];
        var conventional;
        var vs;
        var resourceModule;
        resourceModule = this.cache[moduleId];
        if (resourceModule) {
            return resourceModule;
        }
        resourceModule = new ResourceModule(moduleId);
        this.cache[moduleId] = resourceModule;
        if (typeof moduleInstance === 'function') {
            moduleInstance = { 'default': moduleInstance };
        }
        if (mainResourceKey) {
            mainResource = new ResourceDescription(mainResourceKey, moduleInstance[mainResourceKey]);
        }
        for (key in moduleInstance) {
            exportedValue = moduleInstance[key];
            if (key === mainResourceKey || typeof exportedValue !== 'function') {
                continue;
            }
            resourceTypeMeta = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].get(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, exportedValue);
            if (resourceTypeMeta) {
                if (resourceTypeMeta instanceof HtmlBehaviorResource) {
                    ViewResources.convention(exportedValue, resourceTypeMeta);
                    if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
                        HtmlBehaviorResource.convention(key, resourceTypeMeta);
                    }
                    if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
                        resourceTypeMeta.elementName = _hyphenate(key);
                    }
                }
                if (!mainResource && resourceTypeMeta instanceof HtmlBehaviorResource && resourceTypeMeta.elementName !== null) {
                    mainResource = new ResourceDescription(key, exportedValue, resourceTypeMeta);
                }
                else {
                    resources.push(new ResourceDescription(key, exportedValue, resourceTypeMeta));
                }
            }
            else if (viewStrategy.decorates(exportedValue)) {
                vs = exportedValue;
            }
            else if (exportedValue instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_loader__["TemplateRegistryEntry"]) {
                vs = new TemplateRegistryViewStrategy(moduleId, exportedValue);
            }
            else {
                if (conventional = ViewResources.convention(exportedValue)) {
                    if (conventional.elementName !== null && !mainResource) {
                        mainResource = new ResourceDescription(key, exportedValue, conventional);
                    }
                    else {
                        resources.push(new ResourceDescription(key, exportedValue, conventional));
                    }
                    __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, conventional, exportedValue);
                }
                else if (conventional = HtmlBehaviorResource.convention(key)) {
                    if (conventional.elementName !== null && !mainResource) {
                        mainResource = new ResourceDescription(key, exportedValue, conventional);
                    }
                    else {
                        resources.push(new ResourceDescription(key, exportedValue, conventional));
                    }
                    __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, conventional, exportedValue);
                }
                else if (conventional = __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["ValueConverterResource"].convention(key)
                    || __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["BindingBehaviorResource"].convention(key)
                    || ViewEngineHooksResource.convention(key)) {
                    resources.push(new ResourceDescription(key, exportedValue, conventional));
                    __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, conventional, exportedValue);
                }
                else if (!fallbackValue) {
                    fallbackValue = exportedValue;
                    fallbackKey = key;
                }
            }
        }
        if (!mainResource && fallbackValue) {
            mainResource = new ResourceDescription(fallbackKey, fallbackValue);
        }
        resourceModule.moduleInstance = moduleInstance;
        resourceModule.mainResource = mainResource;
        resourceModule.resources = resources;
        resourceModule.viewStrategy = vs;
        return resourceModule;
    };
    return ModuleAnalyzer;
}());

var logger = __WEBPACK_IMPORTED_MODULE_4_aurelia_logging__["getLogger"]('templating');
function ensureRegistryEntry(loader, urlOrRegistryEntry) {
    if (urlOrRegistryEntry instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_loader__["TemplateRegistryEntry"]) {
        return Promise.resolve(urlOrRegistryEntry);
    }
    return loader.loadTemplate(urlOrRegistryEntry);
}
var ProxyViewFactory = (function () {
    function ProxyViewFactory(promise) {
        var _this = this;
        promise.then(function (x) { return _this.viewFactory = x; });
    }
    ProxyViewFactory.prototype.create = function (container, bindingContext, createInstruction, element) {
        return this.viewFactory.create(container, bindingContext, createInstruction, element);
    };
    Object.defineProperty(ProxyViewFactory.prototype, "isCaching", {
        get: function () {
            return this.viewFactory.isCaching;
        },
        enumerable: false,
        configurable: true
    });
    ProxyViewFactory.prototype.setCacheSize = function (size, doNotOverrideIfAlreadySet) {
        this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
    };
    ProxyViewFactory.prototype.getCachedView = function () {
        return this.viewFactory.getCachedView();
    };
    ProxyViewFactory.prototype.returnViewToCache = function (view) {
        this.viewFactory.returnViewToCache(view);
    };
    return ProxyViewFactory;
}());
var auSlotBehavior = null;
var ViewEngine = (function () {
    function ViewEngine(loader, container, viewCompiler, moduleAnalyzer, appResources) {
        this.loader = loader;
        this.container = container;
        this.viewCompiler = viewCompiler;
        this.moduleAnalyzer = moduleAnalyzer;
        this.appResources = appResources;
        this._pluginMap = {};
        if (auSlotBehavior === null) {
            auSlotBehavior = new HtmlBehaviorResource();
            auSlotBehavior.attributeName = 'au-slot';
            __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, auSlotBehavior, SlotCustomAttribute);
        }
        auSlotBehavior.initialize(container, SlotCustomAttribute);
        auSlotBehavior.register(appResources);
    }
    ViewEngine.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_1_aurelia_loader__["Loader"], __WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["Container"], ViewCompiler, ModuleAnalyzer, ViewResources];
    };
    ViewEngine.prototype.addResourcePlugin = function (extension, implementation) {
        var name = extension.replace('.', '') + '-resource-plugin';
        this._pluginMap[extension] = name;
        this.loader.addPlugin(name, implementation);
    };
    ViewEngine.prototype.loadViewFactory = function (urlOrRegistryEntry, compileInstruction, loadContext, target) {
        var _this = this;
        loadContext = loadContext || new ResourceLoadContext();
        return ensureRegistryEntry(this.loader, urlOrRegistryEntry).then(function (registryEntry) {
            var url = registryEntry.address;
            if (registryEntry.onReady) {
                if (!loadContext.hasDependency(url)) {
                    loadContext.addDependency(url);
                    return registryEntry.onReady;
                }
                if (registryEntry.template === null) {
                    return registryEntry.onReady;
                }
                return Promise.resolve(new ProxyViewFactory(registryEntry.onReady));
            }
            loadContext.addDependency(url);
            registryEntry.onReady = _this.loadTemplateResources(registryEntry, compileInstruction, loadContext, target).then(function (resources) {
                registryEntry.resources = resources;
                if (registryEntry.template === null) {
                    return registryEntry.factory = null;
                }
                var viewFactory = _this.viewCompiler.compile(registryEntry.template, resources, compileInstruction);
                return registryEntry.factory = viewFactory;
            });
            return registryEntry.onReady;
        });
    };
    ViewEngine.prototype.loadTemplateResources = function (registryEntry, compileInstruction, loadContext, target) {
        var resources = new ViewResources(this.appResources, registryEntry.address);
        var dependencies = registryEntry.dependencies;
        var importIds;
        var names;
        compileInstruction = compileInstruction || ViewCompileInstruction.normal;
        if (dependencies.length === 0 && !compileInstruction.associatedModuleId) {
            return Promise.resolve(resources);
        }
        importIds = dependencies.map(function (x) { return x.src; });
        names = dependencies.map(function (x) { return x.name; });
        logger.debug("importing resources for ".concat(registryEntry.address), importIds);
        if (target) {
            var viewModelRequires = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].get(ViewEngine.viewModelRequireMetadataKey, target);
            if (viewModelRequires) {
                var templateImportCount = importIds.length;
                for (var i = 0, ii = viewModelRequires.length; i < ii; ++i) {
                    var req = viewModelRequires[i];
                    var importId = typeof req === 'function'
                        ? __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(req).moduleId
                        : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"])(req.src || req, registryEntry.address);
                    if (importIds.indexOf(importId) === -1) {
                        importIds.push(importId);
                        names.push(req.as);
                    }
                }
                logger.debug("importing ViewModel resources for ".concat(compileInstruction.associatedModuleId), importIds.slice(templateImportCount));
            }
        }
        return this.importViewResources(importIds, names, resources, compileInstruction, loadContext);
    };
    ViewEngine.prototype.importViewModelResource = function (moduleImport, moduleMember) {
        var _this = this;
        return this.loader.loadModule(moduleImport).then(function (viewModelModule) {
            var normalizedId = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(viewModelModule).moduleId;
            var resourceModule = _this.moduleAnalyzer.analyze(normalizedId, viewModelModule, moduleMember);
            if (!resourceModule.mainResource) {
                throw new Error("No view model found in module \"".concat(moduleImport, "\"."));
            }
            resourceModule.initialize(_this.container);
            return resourceModule.mainResource;
        });
    };
    ViewEngine.prototype.importViewResources = function (moduleIds, names, resources, compileInstruction, loadContext) {
        var _this = this;
        loadContext = loadContext || new ResourceLoadContext();
        compileInstruction = compileInstruction || ViewCompileInstruction.normal;
        moduleIds = moduleIds.map(function (x) { return _this._applyLoaderPlugin(x); });
        return this.loader.loadAllModules(moduleIds).then(function (imports) {
            var i;
            var ii;
            var analysis;
            var normalizedId;
            var current;
            var associatedModule;
            var container = _this.container;
            var moduleAnalyzer = _this.moduleAnalyzer;
            var allAnalysis = new Array(imports.length);
            for (i = 0, ii = imports.length; i < ii; ++i) {
                current = imports[i];
                normalizedId = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(current).moduleId;
                analysis = moduleAnalyzer.analyze(normalizedId, current);
                analysis.initialize(container);
                analysis.register(resources, names[i]);
                allAnalysis[i] = analysis;
            }
            if (compileInstruction.associatedModuleId) {
                associatedModule = moduleAnalyzer.getAnalysis(compileInstruction.associatedModuleId);
                if (associatedModule) {
                    associatedModule.register(resources);
                }
            }
            for (i = 0, ii = allAnalysis.length; i < ii; ++i) {
                allAnalysis[i] = allAnalysis[i].load(container, loadContext);
            }
            return Promise.all(allAnalysis).then(function () { return resources; });
        });
    };
    ViewEngine.prototype._applyLoaderPlugin = function (id) {
        var index = id.lastIndexOf('.');
        if (index !== -1) {
            var ext = id.substring(index);
            var pluginName = this._pluginMap[ext];
            if (pluginName === undefined) {
                return id;
            }
            return this.loader.applyPluginToUrl(id, pluginName);
        }
        return id;
    };
    ViewEngine.viewModelRequireMetadataKey = 'aurelia:view-model-require';
    return ViewEngine;
}());

var Controller = (function () {
    function Controller(behavior, instruction, viewModel, container) {
        this.behavior = behavior;
        this.instruction = instruction;
        this.viewModel = viewModel;
        this.isAttached = false;
        this.view = null;
        this.isBound = false;
        this.scope = null;
        this.container = container;
        this.elementEvents = container.elementEvents || null;
        var observerLookup = behavior.observerLocator.getOrCreateObserversLookup(viewModel);
        var handlesBind = behavior.handlesBind;
        var attributes = instruction.attributes;
        var boundProperties = this.boundProperties = [];
        var properties = behavior.properties;
        var i;
        var ii;
        behavior._ensurePropertiesDefined(viewModel, observerLookup);
        for (i = 0, ii = properties.length; i < ii; ++i) {
            properties[i]._initialize(viewModel, observerLookup, attributes, handlesBind, boundProperties);
        }
    }
    Controller.prototype.created = function (owningView) {
        if (this.behavior.handlesCreated) {
            this.viewModel.created(owningView, this.view);
        }
    };
    Controller.prototype.automate = function (overrideContext, owningView) {
        this.view.bindingContext = this.viewModel;
        this.view.overrideContext = overrideContext || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["createOverrideContext"])(this.viewModel);
        this.view._isUserControlled = true;
        if (this.behavior.handlesCreated) {
            this.viewModel.created(owningView || null, this.view);
        }
        this.bind(this.view);
    };
    Controller.prototype.bind = function (scope) {
        var skipSelfSubscriber = this.behavior.handlesBind;
        var boundProperties = this.boundProperties;
        var i;
        var ii;
        var x;
        var observer;
        var selfSubscriber;
        if (this.isBound) {
            if (this.scope === scope) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.scope = scope;
        for (i = 0, ii = boundProperties.length; i < ii; ++i) {
            x = boundProperties[i];
            observer = x.observer;
            selfSubscriber = observer.selfSubscriber;
            observer.publishing = false;
            if (skipSelfSubscriber) {
                observer.selfSubscriber = null;
            }
            x.binding.bind(scope);
            observer.call();
            observer.publishing = true;
            observer.selfSubscriber = selfSubscriber;
        }
        var overrideContext;
        if (this.view !== null) {
            if (skipSelfSubscriber) {
                this.view.viewModelScope = scope;
            }
            if (this.viewModel === scope.overrideContext.bindingContext) {
                overrideContext = scope.overrideContext;
            }
            else if (this.instruction.inheritBindingContext) {
                overrideContext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["createOverrideContext"])(this.viewModel, scope.overrideContext);
            }
            else {
                overrideContext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["createOverrideContext"])(this.viewModel);
                overrideContext.__parentOverrideContext = scope.overrideContext;
            }
            this.view.bind(this.viewModel, overrideContext);
        }
        else if (skipSelfSubscriber) {
            overrideContext = scope.overrideContext;
            if (scope.overrideContext.__parentOverrideContext !== undefined
                && this.viewModel.viewFactory && this.viewModel.viewFactory.factoryCreateInstruction.partReplacements) {
                overrideContext = Object.assign({}, scope.overrideContext);
                overrideContext.parentOverrideContext = scope.overrideContext.__parentOverrideContext;
            }
            this.viewModel.bind(scope.bindingContext, overrideContext);
        }
    };
    Controller.prototype.unbind = function () {
        if (this.isBound) {
            var boundProperties = this.boundProperties;
            var i = void 0;
            var ii = void 0;
            this.isBound = false;
            this.scope = null;
            if (this.view !== null) {
                this.view.unbind();
            }
            if (this.behavior.handlesUnbind) {
                this.viewModel.unbind();
            }
            if (this.elementEvents !== null) {
                this.elementEvents.disposeAll();
            }
            for (i = 0, ii = boundProperties.length; i < ii; ++i) {
                boundProperties[i].binding.unbind();
            }
        }
    };
    Controller.prototype.attached = function () {
        if (this.isAttached) {
            return;
        }
        this.isAttached = true;
        if (this.behavior.handlesAttached) {
            this.viewModel.attached();
        }
        if (this.view !== null) {
            this.view.attached();
        }
    };
    Controller.prototype.detached = function () {
        if (this.isAttached) {
            this.isAttached = false;
            if (this.view !== null) {
                this.view.detached();
            }
            if (this.behavior.handlesDetached) {
                this.viewModel.detached();
            }
        }
    };
    return Controller;
}());

var lastProviderId = 0;
function nextProviderId() {
    return ++lastProviderId;
}
function doProcessContent() { return true; }
function doProcessAttributes() { }
var HtmlBehaviorResource = (function () {
    function HtmlBehaviorResource() {
        this.elementName = null;
        this.attributeName = null;
        this.attributeDefaultBindingMode = undefined;
        this.liftsContent = false;
        this.targetShadowDOM = false;
        this.shadowDOMOptions = null;
        this.processAttributes = doProcessAttributes;
        this.processContent = doProcessContent;
        this.usesShadowDOM = false;
        this.childBindings = null;
        this.hasDynamicOptions = false;
        this.containerless = false;
        this.properties = [];
        this.attributes = {};
        this.isInitialized = false;
        this.primaryProperty = null;
    }
    HtmlBehaviorResource.convention = function (name, existing) {
        var behavior;
        if (name.endsWith('CustomAttribute')) {
            behavior = existing || new HtmlBehaviorResource();
            behavior.attributeName = _hyphenate(name.substring(0, name.length - 15));
        }
        if (name.endsWith('CustomElement')) {
            behavior = existing || new HtmlBehaviorResource();
            behavior.elementName = _hyphenate(name.substring(0, name.length - 13));
        }
        return behavior;
    };
    HtmlBehaviorResource.prototype.addChildBinding = function (behavior) {
        if (this.childBindings === null) {
            this.childBindings = [];
        }
        this.childBindings.push(behavior);
    };
    HtmlBehaviorResource.prototype.initialize = function (container, target) {
        var proto = target.prototype;
        var properties = this.properties;
        var attributeName = this.attributeName;
        var attributeDefaultBindingMode = this.attributeDefaultBindingMode;
        var i;
        var ii;
        var current;
        if (this.isInitialized) {
            return;
        }
        this.isInitialized = true;
        target.__providerId__ = nextProviderId();
        this.observerLocator = container.get(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["ObserverLocator"]);
        this.taskQueue = container.get(__WEBPACK_IMPORTED_MODULE_7_aurelia_task_queue__["TaskQueue"]);
        this.target = target;
        this.usesShadowDOM = this.targetShadowDOM && __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["FEATURE"].shadowDOM;
        this.handlesCreated = ('created' in proto);
        this.handlesBind = ('bind' in proto);
        this.handlesUnbind = ('unbind' in proto);
        this.handlesAttached = ('attached' in proto);
        this.handlesDetached = ('detached' in proto);
        this.htmlName = this.elementName || this.attributeName;
        if (attributeName !== null) {
            if (properties.length === 0) {
                new BindableProperty({
                    name: 'value',
                    changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
                    attribute: attributeName,
                    defaultBindingMode: attributeDefaultBindingMode
                }).registerWith(target, this);
            }
            current = properties[0];
            if (properties.length === 1 && current.name === 'value') {
                current.isDynamic = current.hasOptions = this.hasDynamicOptions;
                current.defineOn(target, this);
            }
            else {
                for (i = 0, ii = properties.length; i < ii; ++i) {
                    properties[i].defineOn(target, this);
                    if (properties[i].primaryProperty) {
                        if (this.primaryProperty) {
                            throw new Error('Only one bindable property on a custom element can be defined as the default');
                        }
                        this.primaryProperty = properties[i];
                    }
                }
                current = new BindableProperty({
                    name: 'value',
                    changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
                    attribute: attributeName,
                    defaultBindingMode: attributeDefaultBindingMode
                });
                current.hasOptions = true;
                current.registerWith(target, this);
            }
        }
        else {
            for (i = 0, ii = properties.length; i < ii; ++i) {
                properties[i].defineOn(target, this);
            }
            this._copyInheritedProperties(container, target);
        }
    };
    HtmlBehaviorResource.prototype.register = function (registry, name) {
        var _this = this;
        if (this.attributeName !== null) {
            registry.registerAttribute(name || this.attributeName, this, this.attributeName);
            if (Array.isArray(this.aliases)) {
                this.aliases
                    .forEach(function (alias) {
                    registry.registerAttribute(alias, _this, _this.attributeName);
                });
            }
        }
        if (this.elementName !== null) {
            registry.registerElement(name || this.elementName, this);
        }
    };
    HtmlBehaviorResource.prototype.aliases = function (aliases) {
        throw new Error('Method not implemented.');
    };
    HtmlBehaviorResource.prototype.load = function (container, target, loadContext, viewStrategy, transientView) {
        var _this = this;
        var options;
        if (this.elementName !== null) {
            viewStrategy = container.get(ViewLocator).getViewStrategy(viewStrategy || this.viewStrategy || target);
            options = new ViewCompileInstruction(this.targetShadowDOM, true);
            if (!viewStrategy.moduleId) {
                viewStrategy.moduleId = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["Origin"].get(target).moduleId;
            }
            return viewStrategy
                .loadViewFactory(container.get(ViewEngine), options, loadContext, target)
                .then(function (viewFactory) {
                if (!transientView || !_this.viewFactory) {
                    _this.viewFactory = viewFactory;
                }
                return viewFactory;
            });
        }
        return Promise.resolve(this);
    };
    HtmlBehaviorResource.prototype.compile = function (compiler, resources, node, instruction, parentNode) {
        if (this.liftsContent) {
            if (!instruction.viewFactory) {
                var template = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createElement('template');
                var fragment = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createDocumentFragment();
                var cacheSize = node.getAttribute('view-cache');
                var part = node.getAttribute('part');
                node.removeAttribute(instruction.originalAttrName);
                __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].replaceNode(template, node, parentNode);
                fragment.appendChild(node);
                instruction.viewFactory = compiler.compile(fragment, resources);
                if (part) {
                    instruction.viewFactory.part = part;
                    node.removeAttribute('part');
                }
                if (cacheSize) {
                    instruction.viewFactory.setCacheSize(cacheSize);
                    node.removeAttribute('view-cache');
                }
                node = template;
            }
        }
        else if (this.elementName !== null) {
            var partReplacements = {};
            if (this.processContent(compiler, resources, node, instruction) && node.hasChildNodes()) {
                var currentChild = node.firstChild;
                var contentElement = this.usesShadowDOM ? null : __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createElement('au-content');
                var nextSibling = void 0;
                var toReplace = void 0;
                while (currentChild) {
                    nextSibling = currentChild.nextSibling;
                    if (currentChild.tagName === 'TEMPLATE' && (toReplace = currentChild.getAttribute('replace-part'))) {
                        partReplacements[toReplace] = compiler.compile(currentChild, resources);
                        __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].removeNode(currentChild, parentNode);
                        instruction.partReplacements = partReplacements;
                    }
                    else if (contentElement !== null) {
                        if (currentChild.nodeType === 3 && _isAllWhitespace(currentChild)) {
                            __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].removeNode(currentChild, parentNode);
                        }
                        else {
                            contentElement.appendChild(currentChild);
                        }
                    }
                    currentChild = nextSibling;
                }
                if (contentElement !== null && contentElement.hasChildNodes()) {
                    node.appendChild(contentElement);
                }
                instruction.skipContentProcessing = false;
            }
            else {
                instruction.skipContentProcessing = true;
            }
        }
        else if (!this.processContent(compiler, resources, node, instruction)) {
            instruction.skipContentProcessing = true;
        }
        return node;
    };
    HtmlBehaviorResource.prototype.create = function (container, instruction, element, bindings) {
        var viewHost;
        var au = null;
        instruction = instruction || BehaviorInstruction.normal;
        element = element || null;
        bindings = bindings || null;
        if (this.elementName !== null && element) {
            if (this.usesShadowDOM) {
                viewHost = element.attachShadow(this.shadowDOMOptions);
                container.registerInstance(__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].boundary, viewHost);
            }
            else {
                viewHost = element;
                if (this.targetShadowDOM) {
                    container.registerInstance(__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].boundary, viewHost);
                }
            }
        }
        if (element !== null) {
            element.au = au = element.au || {};
        }
        var viewModel = instruction.viewModel || container.get(this.target);
        var controller = new Controller(this, instruction, viewModel, container);
        var childBindings = this.childBindings;
        var viewFactory;
        if (this.liftsContent) {
            au.controller = controller;
        }
        else if (this.elementName !== null) {
            viewFactory = instruction.viewFactory || this.viewFactory;
            container.viewModel = viewModel;
            if (viewFactory) {
                controller.view = viewFactory.create(container, instruction, element);
            }
            if (element !== null) {
                au.controller = controller;
                if (controller.view) {
                    if (!this.usesShadowDOM && (element.childNodes.length === 1 || element.contentElement)) {
                        var contentElement = element.childNodes[0] || element.contentElement;
                        controller.view.contentView = { fragment: contentElement };
                        contentElement.parentNode && __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].removeNode(contentElement);
                    }
                    if (instruction.anchorIsContainer) {
                        if (childBindings !== null) {
                            for (var i = 0, ii = childBindings.length; i < ii; ++i) {
                                controller.view.addBinding(childBindings[i].create(element, viewModel, controller));
                            }
                        }
                        controller.view.appendNodesTo(viewHost);
                    }
                    else {
                        controller.view.insertNodesBefore(viewHost);
                    }
                }
                else if (childBindings !== null) {
                    for (var i = 0, ii = childBindings.length; i < ii; ++i) {
                        bindings.push(childBindings[i].create(element, viewModel, controller));
                    }
                }
            }
            else if (controller.view) {
                controller.view.controller = controller;
                if (childBindings !== null) {
                    for (var i = 0, ii = childBindings.length; i < ii; ++i) {
                        controller.view.addBinding(childBindings[i].create(instruction.host, viewModel, controller));
                    }
                }
            }
            else if (childBindings !== null) {
                for (var i = 0, ii = childBindings.length; i < ii; ++i) {
                    bindings.push(childBindings[i].create(instruction.host, viewModel, controller));
                }
            }
        }
        else if (childBindings !== null) {
            for (var i = 0, ii = childBindings.length; i < ii; ++i) {
                bindings.push(childBindings[i].create(element, viewModel, controller));
            }
        }
        if (au !== null) {
            au[this.htmlName] = controller;
        }
        if (instruction.initiatedByBehavior && viewFactory) {
            controller.view.created();
        }
        return controller;
    };
    HtmlBehaviorResource.prototype._ensurePropertiesDefined = function (instance, lookup) {
        var properties;
        var i;
        var ii;
        var observer;
        if ('__propertiesDefined__' in lookup) {
            return;
        }
        lookup.__propertiesDefined__ = true;
        properties = this.properties;
        for (i = 0, ii = properties.length; i < ii; ++i) {
            observer = properties[i].createObserver(instance);
            if (observer !== undefined) {
                lookup[observer.propertyName] = observer;
            }
        }
    };
    HtmlBehaviorResource.prototype._copyInheritedProperties = function (container, target) {
        var behavior;
        var derived = target;
        while (true) {
            var proto = Object.getPrototypeOf(target.prototype);
            target = proto && proto.constructor;
            if (!target) {
                return;
            }
            behavior = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, target);
            if (behavior) {
                break;
            }
        }
        behavior.initialize(container, target);
        var _loop_1 = function (i, ii) {
            var prop = behavior.properties[i];
            if (this_1.properties.some(function (p) { return p.name === prop.name; })) {
                return "continue";
            }
            new BindableProperty(prop).registerWith(derived, this_1);
        };
        var this_1 = this;
        for (var i = 0, ii = behavior.properties.length; i < ii; ++i) {
            _loop_1(i);
        }
    };
    return HtmlBehaviorResource;
}());

function register(lookup, name, resource, type) {
    if (!name) {
        return;
    }
    var existing = lookup[name];
    if (existing) {
        if (existing !== resource) {
            throw new Error("Attempted to register ".concat(type, " when one with the same name already exists. Name: ").concat(name, "."));
        }
        return;
    }
    lookup[name] = resource;
}
function validateBehaviorName(name, type) {
    if (/[A-Z]/.test(name)) {
        var newName = _hyphenate(name);
        __WEBPACK_IMPORTED_MODULE_4_aurelia_logging__["getLogger"]('templating')
            .warn("'".concat(name, "' is not a valid ").concat(type, " name and has been converted to '").concat(newName, "'. Upper-case letters are not allowed because the DOM is not case-sensitive."));
        return newName;
    }
    return name;
}
var conventionMark = '__au_resource__';
var ViewResources = (function () {
    function ViewResources(parent, viewUrl) {
        this.bindingLanguage = null;
        this.parent = parent || null;
        this.hasParent = this.parent !== null;
        this.viewUrl = viewUrl || '';
        this.lookupFunctions = {
            valueConverters: this.getValueConverter.bind(this),
            bindingBehaviors: this.getBindingBehavior.bind(this)
        };
        this.attributes = Object.create(null);
        this.elements = Object.create(null);
        this.valueConverters = Object.create(null);
        this.bindingBehaviors = Object.create(null);
        this.attributeMap = Object.create(null);
        this.values = Object.create(null);
        this.beforeCompile = this.afterCompile = this.beforeCreate = this.afterCreate = this.beforeBind = this.beforeUnbind = false;
    }
    ViewResources.convention = function (target, existing) {
        var resource;
        if (existing && conventionMark in existing) {
            return existing;
        }
        if ('$resource' in target) {
            var config = target.$resource;
            if (typeof config === 'string') {
                resource = existing || new HtmlBehaviorResource();
                resource[conventionMark] = true;
                if (!resource.elementName) {
                    resource.elementName = validateBehaviorName(config, 'custom element');
                }
            }
            else {
                if (typeof config === 'function') {
                    config = config.call(target);
                }
                if (typeof config === 'string') {
                    config = { name: config };
                }
                config = Object.assign({}, config);
                var resourceType = config.type || 'element';
                var name_1 = config.name;
                switch (resourceType) {
                    case 'element':
                    case 'attribute':
                        resource = existing || new HtmlBehaviorResource();
                        resource[conventionMark] = true;
                        if (resourceType === 'element') {
                            if (!resource.elementName) {
                                resource.elementName = name_1
                                    ? validateBehaviorName(name_1, 'custom element')
                                    : _hyphenate(target.name);
                            }
                        }
                        else {
                            if (!resource.attributeName) {
                                resource.attributeName = name_1
                                    ? validateBehaviorName(name_1, 'custom attribute')
                                    : _hyphenate(target.name);
                            }
                        }
                        if ('templateController' in config) {
                            config.liftsContent = config.templateController;
                            delete config.templateController;
                        }
                        if ('defaultBindingMode' in config && resource.attributeDefaultBindingMode !== undefined) {
                            config.attributeDefaultBindingMode = config.defaultBindingMode;
                            delete config.defaultBindingMode;
                        }
                        delete config.name;
                        Object.assign(resource, config);
                        break;
                    case 'valueConverter':
                        resource = new __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["ValueConverterResource"](__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["camelCase"])(name_1 || target.name));
                        break;
                    case 'bindingBehavior':
                        resource = new __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["BindingBehaviorResource"](__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["camelCase"])(name_1 || target.name));
                        break;
                    case 'viewEngineHooks':
                        resource = new ViewEngineHooksResource();
                        break;
                }
            }
            if (resource instanceof HtmlBehaviorResource) {
                var bindables = typeof config === 'string' ? undefined : config.bindables;
                var currentProps = resource.properties;
                if (Array.isArray(bindables)) {
                    for (var i = 0, ii = bindables.length; ii > i; ++i) {
                        var prop = bindables[i];
                        if (!prop || (typeof prop !== 'string' && !prop.name)) {
                            throw new Error("Invalid bindable property at \"".concat(i, "\" for class \"").concat(target.name, "\". Expected either a string or an object with \"name\" property."));
                        }
                        var newProp = new BindableProperty(prop);
                        var existed = false;
                        for (var j = 0, jj = currentProps.length; jj > j; ++j) {
                            if (currentProps[j].name === newProp.name) {
                                existed = true;
                                break;
                            }
                        }
                        if (existed) {
                            continue;
                        }
                        newProp.registerWith(target, resource);
                    }
                }
            }
        }
        return resource;
    };
    ViewResources.prototype._tryAddHook = function (obj, name) {
        if (typeof obj[name] === 'function') {
            var func = obj[name].bind(obj);
            var counter = 1;
            var callbackName = void 0;
            while (this[callbackName = name + counter.toString()] !== undefined) {
                counter++;
            }
            this[name] = true;
            this[callbackName] = func;
        }
    };
    ViewResources.prototype._invokeHook = function (name, one, two, three, four) {
        if (this.hasParent) {
            this.parent._invokeHook(name, one, two, three, four);
        }
        if (this[name]) {
            this[name + '1'](one, two, three, four);
            var callbackName = name + '2';
            if (this[callbackName]) {
                this[callbackName](one, two, three, four);
                callbackName = name + '3';
                if (this[callbackName]) {
                    this[callbackName](one, two, three, four);
                    var counter = 4;
                    while (this[callbackName = name + counter.toString()] !== undefined) {
                        this[callbackName](one, two, three, four);
                        counter++;
                    }
                }
            }
        }
    };
    ViewResources.prototype.registerViewEngineHooks = function (hooks) {
        this._tryAddHook(hooks, 'beforeCompile');
        this._tryAddHook(hooks, 'afterCompile');
        this._tryAddHook(hooks, 'beforeCreate');
        this._tryAddHook(hooks, 'afterCreate');
        this._tryAddHook(hooks, 'beforeBind');
        this._tryAddHook(hooks, 'beforeUnbind');
    };
    ViewResources.prototype.getBindingLanguage = function (bindingLanguageFallback) {
        return this.bindingLanguage || (this.bindingLanguage = bindingLanguageFallback);
    };
    ViewResources.prototype.patchInParent = function (newParent) {
        var originalParent = this.parent;
        this.parent = newParent || null;
        this.hasParent = this.parent !== null;
        if (newParent.parent === null) {
            newParent.parent = originalParent;
            newParent.hasParent = originalParent !== null;
        }
    };
    ViewResources.prototype.relativeToView = function (path) {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"])(path, this.viewUrl);
    };
    ViewResources.prototype.registerElement = function (tagName, behavior) {
        register(this.elements, tagName, behavior, 'an Element');
    };
    ViewResources.prototype.getElement = function (tagName) {
        return this.elements[tagName] || (this.hasParent ? this.parent.getElement(tagName) : null);
    };
    ViewResources.prototype.mapAttribute = function (attribute) {
        return this.attributeMap[attribute] || (this.hasParent ? this.parent.mapAttribute(attribute) : null);
    };
    ViewResources.prototype.registerAttribute = function (attribute, behavior, knownAttribute) {
        this.attributeMap[attribute] = knownAttribute;
        register(this.attributes, attribute, behavior, 'an Attribute');
    };
    ViewResources.prototype.getAttribute = function (attribute) {
        return this.attributes[attribute] || (this.hasParent ? this.parent.getAttribute(attribute) : null);
    };
    ViewResources.prototype.registerValueConverter = function (name, valueConverter) {
        register(this.valueConverters, name, valueConverter, 'a ValueConverter');
    };
    ViewResources.prototype.getValueConverter = function (name) {
        return this.valueConverters[name] || (this.hasParent ? this.parent.getValueConverter(name) : null);
    };
    ViewResources.prototype.registerBindingBehavior = function (name, bindingBehavior) {
        register(this.bindingBehaviors, name, bindingBehavior, 'a BindingBehavior');
    };
    ViewResources.prototype.getBindingBehavior = function (name) {
        return this.bindingBehaviors[name] || (this.hasParent ? this.parent.getBindingBehavior(name) : null);
    };
    ViewResources.prototype.registerValue = function (name, value) {
        register(this.values, name, value, 'a value');
    };
    ViewResources.prototype.getValue = function (name) {
        return this.values[name] || (this.hasParent ? this.parent.getValue(name) : null);
    };
    ViewResources.prototype.autoRegister = function (container, impl) {
        var resourceTypeMeta = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, impl);
        if (resourceTypeMeta) {
            if (resourceTypeMeta instanceof HtmlBehaviorResource) {
                ViewResources.convention(impl, resourceTypeMeta);
                if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
                    HtmlBehaviorResource.convention(impl.name, resourceTypeMeta);
                }
                if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
                    resourceTypeMeta.elementName = _hyphenate(impl.name);
                }
            }
        }
        else {
            resourceTypeMeta = ViewResources.convention(impl)
                || HtmlBehaviorResource.convention(impl.name)
                || __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["ValueConverterResource"].convention(impl.name)
                || __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["BindingBehaviorResource"].convention(impl.name)
                || ViewEngineHooksResource.convention(impl.name);
            if (!resourceTypeMeta) {
                resourceTypeMeta = new HtmlBehaviorResource();
                resourceTypeMeta.elementName = _hyphenate(impl.name);
            }
            __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, resourceTypeMeta, impl);
        }
        resourceTypeMeta.initialize(container, impl);
        resourceTypeMeta.register(this, undefined);
        return resourceTypeMeta;
    };
    return ViewResources;
}());

var viewStrategy = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["protocol"].create('aurelia:view-strategy', {
    validate: function (target) {
        if (!(typeof target.loadViewFactory === 'function')) {
            return 'View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>';
        }
        return true;
    },
    compose: function (target) {
        if (!(typeof target.makeRelativeTo === 'function')) {
            target.makeRelativeTo = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["PLATFORM"].noop;
        }
    }
});
var RelativeViewStrategy = (function () {
    function RelativeViewStrategy(path) {
        this.path = path;
        this.absolutePath = null;
    }
    RelativeViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        if (this.absolutePath === null && this.moduleId) {
            this.absolutePath = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"])(this.path, this.moduleId);
        }
        compileInstruction.associatedModuleId = this.moduleId;
        return viewEngine.loadViewFactory(this.absolutePath || this.path, compileInstruction, loadContext, target);
    };
    RelativeViewStrategy.prototype.makeRelativeTo = function (file) {
        if (this.absolutePath === null) {
            this.absolutePath = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"])(this.path, file);
        }
    };
    RelativeViewStrategy = __decorate([
        viewStrategy()
    ], RelativeViewStrategy);
    return RelativeViewStrategy;
}());
var ConventionalViewStrategy = (function () {
    function ConventionalViewStrategy(viewLocator, origin) {
        this.moduleId = origin.moduleId;
        this.viewUrl = viewLocator.convertOriginToViewUrl(origin);
    }
    ConventionalViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        compileInstruction.associatedModuleId = this.moduleId;
        return viewEngine.loadViewFactory(this.viewUrl, compileInstruction, loadContext, target);
    };
    ConventionalViewStrategy = __decorate([
        viewStrategy()
    ], ConventionalViewStrategy);
    return ConventionalViewStrategy;
}());
var NoViewStrategy = (function () {
    function NoViewStrategy(dependencies, dependencyBaseUrl) {
        this.dependencies = dependencies || null;
        this.dependencyBaseUrl = dependencyBaseUrl || '';
    }
    NoViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        var entry = this.entry;
        var dependencies = this.dependencies;
        if (entry && entry.factoryIsReady) {
            return Promise.resolve(null);
        }
        this.entry = entry = new __WEBPACK_IMPORTED_MODULE_1_aurelia_loader__["TemplateRegistryEntry"](this.moduleId || this.dependencyBaseUrl);
        entry.dependencies = [];
        entry.templateIsLoaded = true;
        if (dependencies !== null) {
            for (var i = 0, ii = dependencies.length; i < ii; ++i) {
                var current = dependencies[i];
                if (typeof current === 'string' || typeof current === 'function') {
                    entry.addDependency(current);
                }
                else {
                    entry.addDependency(current.from, current.as);
                }
            }
        }
        compileInstruction.associatedModuleId = this.moduleId;
        return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
    };
    NoViewStrategy = __decorate([
        viewStrategy()
    ], NoViewStrategy);
    return NoViewStrategy;
}());
var TemplateRegistryViewStrategy = (function () {
    function TemplateRegistryViewStrategy(moduleId, entry) {
        this.moduleId = moduleId;
        this.entry = entry;
    }
    TemplateRegistryViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        var entry = this.entry;
        if (entry.factoryIsReady) {
            return Promise.resolve(entry.factory);
        }
        compileInstruction.associatedModuleId = this.moduleId;
        return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
    };
    TemplateRegistryViewStrategy = __decorate([
        viewStrategy()
    ], TemplateRegistryViewStrategy);
    return TemplateRegistryViewStrategy;
}());
var InlineViewStrategy = (function () {
    function InlineViewStrategy(markup, dependencies, dependencyBaseUrl) {
        this.markup = markup;
        this.dependencies = dependencies || null;
        this.dependencyBaseUrl = dependencyBaseUrl || '';
    }
    InlineViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        var entry = this.entry;
        var dependencies = this.dependencies;
        if (entry && entry.factoryIsReady) {
            return Promise.resolve(entry.factory);
        }
        this.entry = entry = new __WEBPACK_IMPORTED_MODULE_1_aurelia_loader__["TemplateRegistryEntry"](this.moduleId || this.dependencyBaseUrl);
        entry.template = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createTemplateFromMarkup(this.markup);
        if (dependencies !== null) {
            for (var i = 0, ii = dependencies.length; i < ii; ++i) {
                var current = dependencies[i];
                if (typeof current === 'string' || typeof current === 'function') {
                    entry.addDependency(current);
                }
                else {
                    entry.addDependency(current.from, current.as);
                }
            }
        }
        compileInstruction.associatedModuleId = this.moduleId;
        return viewEngine.loadViewFactory(entry, compileInstruction, loadContext, target);
    };
    InlineViewStrategy = __decorate([
        viewStrategy()
    ], InlineViewStrategy);
    return InlineViewStrategy;
}());
var StaticViewStrategy = (function () {
    function StaticViewStrategy(config) {
        if (typeof config === 'string' || (config instanceof __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element && config.tagName === 'TEMPLATE')) {
            config = {
                template: config
            };
        }
        this.template = config.template;
        this.dependencies = config.dependencies || [];
        this.factoryIsReady = false;
        this.onReady = null;
        this.moduleId = 'undefined';
    }
    StaticViewStrategy.prototype.loadViewFactory = function (viewEngine, compileInstruction, loadContext, target) {
        var _this = this;
        if (this.factoryIsReady) {
            return Promise.resolve(this.factory);
        }
        var $deps = this.dependencies;
        var deps = typeof $deps === 'function' ? $deps() : $deps;
        deps = deps ? deps : [];
        deps = Array.isArray(deps) ? deps : [deps];
        return Promise.all(deps).then(function (dependencies) {
            var container = viewEngine.container;
            var appResources = viewEngine.appResources;
            var viewCompiler = viewEngine.viewCompiler;
            var viewResources = new ViewResources(appResources);
            var resource;
            var elDeps = [];
            if (target) {
                viewResources.autoRegister(container, target);
            }
            for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
                var dep = dependencies_1[_i];
                if (typeof dep === 'function') {
                    resource = viewResources.autoRegister(container, dep);
                    if (resource.elementName !== null) {
                        elDeps.push(resource);
                    }
                }
                else if (dep && typeof dep === 'object') {
                    for (var key in dep) {
                        var exported = dep[key];
                        if (typeof exported === 'function') {
                            resource = viewResources.autoRegister(container, exported);
                            if (resource.elementName !== null) {
                                elDeps.push(resource);
                            }
                        }
                    }
                }
                else {
                    throw new Error("dependency neither function nor object. Received: \"".concat(typeof dep, "\""));
                }
            }
            return Promise.all(elDeps.map(function (el) { return el.load(container, el.target); })).then(function () {
                var factory = _this.template !== null
                    ? viewCompiler.compile(_this.template, viewResources, compileInstruction)
                    : null;
                _this.factoryIsReady = true;
                _this.factory = factory;
                return factory;
            });
        });
    };
    StaticViewStrategy = __decorate([
        viewStrategy()
    ], StaticViewStrategy);
    return StaticViewStrategy;
}());

function remove(viewSlot, previous) {
    return Array.isArray(previous)
        ? viewSlot.removeMany(previous, true)
        : viewSlot.remove(previous, true);
}
var SwapStrategies = {
    before: function (viewSlot, previous, callback) {
        return (previous === undefined)
            ? callback()
            : callback().then(function () { return remove(viewSlot, previous); });
    },
    with: function (viewSlot, previous, callback) {
        return (previous === undefined)
            ? callback()
            : Promise.all([remove(viewSlot, previous), callback()]);
    },
    after: function (viewSlot, previous, callback) {
        return Promise.resolve(viewSlot.removeAll(true)).then(callback);
    }
};

function tryActivateViewModel(context) {
    if (context.skipActivation || typeof context.viewModel.activate !== 'function') {
        return Promise.resolve();
    }
    return context.viewModel.activate(context.model) || Promise.resolve();
}
var CompositionEngine = (function () {
    function CompositionEngine(viewEngine, viewLocator) {
        this.viewEngine = viewEngine;
        this.viewLocator = viewLocator;
    }
    CompositionEngine.prototype._swap = function (context, view) {
        var swapStrategy = SwapStrategies[context.swapOrder] || SwapStrategies.after;
        var previousViews = context.viewSlot.children.slice();
        return swapStrategy(context.viewSlot, previousViews, function () {
            return Promise.resolve(context.viewSlot.add(view)).then(function () {
                if (context.currentController) {
                    context.currentController.unbind();
                }
            });
        }).then(function () {
            if (context.compositionTransactionNotifier) {
                context.compositionTransactionNotifier.done();
            }
        });
    };
    CompositionEngine.prototype._createControllerAndSwap = function (context) {
        var _this = this;
        return this.createController(context).then(function (controller) {
            if (context.compositionTransactionOwnershipToken) {
                return context.compositionTransactionOwnershipToken
                    .waitForCompositionComplete()
                    .then(function () {
                    controller.automate(context.overrideContext, context.owningView);
                    return _this._swap(context, controller.view);
                })
                    .then(function () { return controller; });
            }
            controller.automate(context.overrideContext, context.owningView);
            return _this._swap(context, controller.view).then(function () { return controller; });
        });
    };
    CompositionEngine.prototype.createController = function (context) {
        var _this = this;
        var childContainer;
        var viewModel;
        var viewModelResource;
        var m;
        return this
            .ensureViewModel(context)
            .then(tryActivateViewModel)
            .then(function () {
            childContainer = context.childContainer;
            viewModel = context.viewModel;
            viewModelResource = context.viewModelResource;
            m = viewModelResource.metadata;
            var viewStrategy = _this.viewLocator.getViewStrategy(context.view || viewModel);
            if (context.viewResources) {
                viewStrategy.makeRelativeTo(context.viewResources.viewUrl);
            }
            return m.load(childContainer, viewModelResource.value, null, viewStrategy, true);
        }).then(function (viewFactory) { return m.create(childContainer, BehaviorInstruction.dynamic(context.host, viewModel, viewFactory)); });
    };
    CompositionEngine.prototype.ensureViewModel = function (context) {
        var childContainer = context.childContainer = (context.childContainer || context.container.createChild());
        if (typeof context.viewModel === 'string') {
            context.viewModel = context.viewResources
                ? context.viewResources.relativeToView(context.viewModel)
                : context.viewModel;
            return this.viewEngine.importViewModelResource(context.viewModel).then(function (viewModelResource) {
                childContainer.autoRegister(viewModelResource.value);
                if (context.host) {
                    childContainer.registerInstance(__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element, context.host);
                }
                context.viewModel = childContainer.viewModel = childContainer.get(viewModelResource.value);
                context.viewModelResource = viewModelResource;
                return context;
            });
        }
        var ctor = context.viewModel.constructor;
        var isClass = typeof context.viewModel === 'function';
        if (isClass) {
            ctor = context.viewModel;
            childContainer.autoRegister(ctor);
        }
        var m = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, ctor);
        m.elementName = m.elementName || 'dynamic-element';
        m.initialize(isClass ? childContainer : (context.container || childContainer), ctor);
        context.viewModelResource = { metadata: m, value: ctor };
        if (context.host) {
            childContainer.registerInstance(__WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element, context.host);
        }
        childContainer.viewModel = context.viewModel = isClass ? childContainer.get(ctor) : context.viewModel;
        return Promise.resolve(context);
    };
    CompositionEngine.prototype.compose = function (context) {
        var _this = this;
        context.childContainer = context.childContainer || context.container.createChild();
        context.view = this.viewLocator.getViewStrategy(context.view);
        var transaction = context.childContainer.get(CompositionTransaction);
        var compositionTransactionOwnershipToken = transaction.tryCapture();
        if (compositionTransactionOwnershipToken) {
            context.compositionTransactionOwnershipToken = compositionTransactionOwnershipToken;
        }
        else {
            context.compositionTransactionNotifier = transaction.enlist();
        }
        if (context.viewModel) {
            return this._createControllerAndSwap(context);
        }
        else if (context.view) {
            if (context.viewResources) {
                context.view.makeRelativeTo(context.viewResources.viewUrl);
            }
            return context.view.loadViewFactory(this.viewEngine, new ViewCompileInstruction()).then(function (viewFactory) {
                var result = viewFactory.create(context.childContainer);
                result.bind(context.bindingContext, context.overrideContext);
                if (context.compositionTransactionOwnershipToken) {
                    return context.compositionTransactionOwnershipToken.waitForCompositionComplete()
                        .then(function () { return _this._swap(context, result); })
                        .then(function () { return result; });
                }
                return _this._swap(context, result).then(function () { return result; });
            });
        }
        else if (context.viewSlot) {
            context.viewSlot.removeAll();
            if (context.compositionTransactionNotifier) {
                context.compositionTransactionNotifier.done();
            }
            return Promise.resolve(null);
        }
        return Promise.resolve(null);
    };
    CompositionEngine = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["inject"])(ViewEngine, ViewLocator)
    ], CompositionEngine);
    return CompositionEngine;
}());

var animationEvent = {
    enterBegin: 'animation:enter:begin',
    enterActive: 'animation:enter:active',
    enterDone: 'animation:enter:done',
    enterTimeout: 'animation:enter:timeout',
    leaveBegin: 'animation:leave:begin',
    leaveActive: 'animation:leave:active',
    leaveDone: 'animation:leave:done',
    leaveTimeout: 'animation:leave:timeout',
    staggerNext: 'animation:stagger:next',
    removeClassBegin: 'animation:remove-class:begin',
    removeClassActive: 'animation:remove-class:active',
    removeClassDone: 'animation:remove-class:done',
    removeClassTimeout: 'animation:remove-class:timeout',
    addClassBegin: 'animation:add-class:begin',
    addClassActive: 'animation:add-class:active',
    addClassDone: 'animation:add-class:done',
    addClassTimeout: 'animation:add-class:timeout',
    animateBegin: 'animation:animate:begin',
    animateActive: 'animation:animate:active',
    animateDone: 'animation:animate:done',
    animateTimeout: 'animation:animate:timeout',
    sequenceBegin: 'animation:sequence:begin',
    sequenceDone: 'animation:sequence:done'
};

function createChildObserverDecorator(selectorOrConfig, all) {
    return function (target, key, descriptor) {
        var actualTarget = typeof key === 'string' ? target.constructor : target;
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, actualTarget);
        if (typeof selectorOrConfig === 'string') {
            selectorOrConfig = {
                selector: selectorOrConfig,
                name: key
            };
        }
        if (descriptor) {
            descriptor.writable = true;
            descriptor.configurable = true;
        }
        selectorOrConfig.all = all;
        r.addChildBinding(new ChildObserver(selectorOrConfig));
    };
}
function children(selectorOrConfig) {
    return createChildObserverDecorator(selectorOrConfig, true);
}
function child(selectorOrConfig) {
    return createChildObserverDecorator(selectorOrConfig, false);
}
var ChildObserver = (function () {
    function ChildObserver(config) {
        this.name = config.name;
        this.changeHandler = config.changeHandler || this.name + 'Changed';
        this.selector = config.selector;
        this.all = config.all;
    }
    ChildObserver.prototype.create = function (viewHost, viewModel, controller) {
        return new ChildObserverBinder(this.selector, viewHost, this.name, viewModel, controller, this.changeHandler, this.all);
    };
    return ChildObserver;
}());
var noMutations = [];
function trackMutation(groupedMutations, binder, record) {
    var mutations = groupedMutations.get(binder);
    if (!mutations) {
        mutations = [];
        groupedMutations.set(binder, mutations);
    }
    mutations.push(record);
}
function onChildChange(mutations, observer) {
    var binders = observer.binders;
    var bindersLength = binders.length;
    var groupedMutations = new Map();
    for (var i = 0, ii = mutations.length; i < ii; ++i) {
        var record = mutations[i];
        var added = record.addedNodes;
        var removed = record.removedNodes;
        for (var j = 0, jj = removed.length; j < jj; ++j) {
            var node = removed[j];
            if (node.nodeType === 1) {
                for (var k = 0; k < bindersLength; ++k) {
                    var binder = binders[k];
                    if (binder.onRemove(node)) {
                        trackMutation(groupedMutations, binder, record);
                    }
                }
            }
        }
        for (var j = 0, jj = added.length; j < jj; ++j) {
            var node = added[j];
            if (node.nodeType === 1) {
                for (var k = 0; k < bindersLength; ++k) {
                    var binder = binders[k];
                    if (binder.onAdd(node)) {
                        trackMutation(groupedMutations, binder, record);
                    }
                }
            }
        }
    }
    groupedMutations.forEach(function (mutationRecords, binder) {
        if (binder.isBound && binder.changeHandler !== null) {
            binder.viewModel[binder.changeHandler](mutationRecords);
        }
    });
}
var ChildObserverBinder = (function () {
    function ChildObserverBinder(selector, viewHost, property, viewModel, controller, changeHandler, all) {
        this.selector = selector;
        this.viewHost = viewHost;
        this.property = property;
        this.viewModel = viewModel;
        this.controller = controller;
        this.changeHandler = changeHandler in viewModel ? changeHandler : null;
        this.usesShadowDOM = controller.behavior.usesShadowDOM;
        this.all = all;
        if (!this.usesShadowDOM && controller.view && controller.view.contentView) {
            this.contentView = controller.view.contentView;
        }
        else {
            this.contentView = null;
        }
        this.source = null;
        this.isBound = false;
    }
    ChildObserverBinder.prototype.matches = function (element) {
        if (element.matches(this.selector)) {
            if (this.contentView === null) {
                return true;
            }
            var contentView = this.contentView;
            var assignedSlot = element.auAssignedSlot;
            if (assignedSlot && assignedSlot.projectFromAnchors) {
                var anchors = assignedSlot.projectFromAnchors;
                for (var i = 0, ii = anchors.length; i < ii; ++i) {
                    if (anchors[i].auOwnerView === contentView) {
                        return true;
                    }
                }
                return false;
            }
            return element.auOwnerView === contentView;
        }
        return false;
    };
    ChildObserverBinder.prototype.bind = function (source) {
        if (this.isBound) {
            if (this.source === source) {
                return;
            }
            this.source = source;
        }
        this.isBound = true;
        var viewHost = this.viewHost;
        var viewModel = this.viewModel;
        var observer = viewHost.__childObserver__;
        if (!observer) {
            observer = viewHost.__childObserver__ = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createMutationObserver(onChildChange);
            var options = {
                childList: true,
                subtree: !this.usesShadowDOM
            };
            observer.observe(viewHost, options);
            observer.binders = [];
        }
        observer.binders.push(this);
        if (this.usesShadowDOM) {
            var current = viewHost.firstElementChild;
            if (this.all) {
                var items = viewModel[this.property];
                if (!items) {
                    items = viewModel[this.property] = [];
                }
                else {
                    items.splice(0);
                }
                while (current) {
                    if (this.matches(current)) {
                        items.push(current.au && current.au.controller ? current.au.controller.viewModel : current);
                    }
                    current = current.nextElementSibling;
                }
                if (this.changeHandler !== null) {
                    this.viewModel[this.changeHandler](noMutations);
                }
            }
            else {
                while (current) {
                    if (this.matches(current)) {
                        var value = current.au && current.au.controller ? current.au.controller.viewModel : current;
                        this.viewModel[this.property] = value;
                        if (this.changeHandler !== null) {
                            this.viewModel[this.changeHandler](value);
                        }
                        break;
                    }
                    current = current.nextElementSibling;
                }
            }
        }
    };
    ChildObserverBinder.prototype.onRemove = function (element) {
        if (this.matches(element)) {
            var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
            if (this.all) {
                var items = (this.viewModel[this.property] || (this.viewModel[this.property] = []));
                var index = items.indexOf(value);
                if (index !== -1) {
                    items.splice(index, 1);
                }
                return true;
            }
            var currentValue = this.viewModel[this.property];
            if (currentValue === value) {
                this.viewModel[this.property] = null;
                if (this.isBound && this.changeHandler !== null) {
                    this.viewModel[this.changeHandler](value);
                }
            }
        }
        return false;
    };
    ChildObserverBinder.prototype.onAdd = function (element) {
        if (this.matches(element)) {
            var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
            if (this.all) {
                var items = (this.viewModel[this.property] || (this.viewModel[this.property] = []));
                if (this.selector === '*') {
                    items.push(value);
                    return true;
                }
                var index = 0;
                var prev = element.previousElementSibling;
                while (prev) {
                    if (this.matches(prev)) {
                        index++;
                    }
                    prev = prev.previousElementSibling;
                }
                items.splice(index, 0, value);
                return true;
            }
            this.viewModel[this.property] = value;
            if (this.isBound && this.changeHandler !== null) {
                this.viewModel[this.changeHandler](value);
            }
        }
        return false;
    };
    ChildObserverBinder.prototype.unbind = function () {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.source = null;
        var childObserver = this.viewHost.__childObserver__;
        if (childObserver) {
            var binders = childObserver.binders;
            if (binders && binders.length) {
                var idx = binders.indexOf(this);
                if (idx !== -1) {
                    binders.splice(idx, 1);
                }
                if (binders.length === 0) {
                    childObserver.disconnect();
                    this.viewHost.__childObserver__ = null;
                }
            }
            if (this.usesShadowDOM) {
                this.viewModel[this.property] = null;
            }
        }
    };
    return ChildObserverBinder;
}());

var ElementConfigResource = (function () {
    function ElementConfigResource() {
    }
    ElementConfigResource.prototype.initialize = function (container, target) { };
    ElementConfigResource.prototype.register = function (registry, name) { };
    ElementConfigResource.prototype.load = function (container, target) {
        var config = new target();
        var eventManager = container.get(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["EventManager"]);
        eventManager.registerElementConfig(config);
    };
    return ElementConfigResource;
}());

function resource(instanceOrConfig) {
    return function (target) {
        var isConfig = typeof instanceOrConfig === 'string' || Object.getPrototypeOf(instanceOrConfig) === Object.prototype;
        if (isConfig) {
            target.$resource = instanceOrConfig;
        }
        else {
            __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, instanceOrConfig, target);
        }
    };
}
function behavior(override) {
    return function (target) {
        if (override instanceof HtmlBehaviorResource) {
            __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, override, target);
        }
        else {
            var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, target);
            Object.assign(r, override);
        }
    };
}
function customElement(name) {
    return function (target) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, target);
        r.elementName = validateBehaviorName(name, 'custom element');
    };
}
function customAttribute(name, defaultBindingMode, aliases) {
    return function (target) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, target);
        r.attributeName = validateBehaviorName(name, 'custom attribute');
        r.attributeDefaultBindingMode = defaultBindingMode;
        r.aliases = aliases;
    };
}
function templateController(target) {
    var deco = function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.liftsContent = true;
    };
    return target ? deco(target) : deco;
}
function bindable(nameOrConfigOrTarget, key, descriptor) {
    var deco = function (target, key2, descriptor2) {
        var actualTarget = key2 ? target.constructor : target;
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, actualTarget);
        var prop;
        if (key2) {
            nameOrConfigOrTarget = nameOrConfigOrTarget || {};
            nameOrConfigOrTarget.name = key2;
        }
        prop = new BindableProperty(nameOrConfigOrTarget);
        return prop.registerWith(actualTarget, r, descriptor2);
    };
    if (!nameOrConfigOrTarget) {
        return deco;
    }
    if (key) {
        var target = nameOrConfigOrTarget;
        nameOrConfigOrTarget = null;
        return deco(target, key, descriptor);
    }
    return deco;
}
function dynamicOptions(target) {
    var deco = function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.hasDynamicOptions = true;
    };
    return target ? deco(target) : deco;
}
var defaultShadowDOMOptions = { mode: 'open' };
function useShadowDOM(targetOrOptions) {
    var options = typeof targetOrOptions === 'function' || !targetOrOptions
        ? defaultShadowDOMOptions
        : targetOrOptions;
    var deco = function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.targetShadowDOM = true;
        r.shadowDOMOptions = options;
    };
    return typeof targetOrOptions === 'function' ? deco(targetOrOptions) : deco;
}
function processAttributes(processor) {
    return function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.processAttributes = function (compiler, resources, node, attributes, elementInstruction) {
            try {
                processor(compiler, resources, node, attributes, elementInstruction);
            }
            catch (error) {
                __WEBPACK_IMPORTED_MODULE_4_aurelia_logging__["getLogger"]('templating').error(error);
            }
        };
    };
}
function doNotProcessContent() { return false; }
function processContent(processor) {
    return function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.processContent = processor ? function (compiler, resources, node, instruction) {
            try {
                return processor(compiler, resources, node, instruction);
            }
            catch (error) {
                __WEBPACK_IMPORTED_MODULE_4_aurelia_logging__["getLogger"]('templating').error(error);
                return false;
            }
        } : doNotProcessContent;
    };
}
function containerless(target) {
    var deco = function (t) {
        var r = __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].getOrCreateOwn(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, HtmlBehaviorResource, t);
        r.containerless = true;
    };
    return target ? deco(target) : deco;
}
function useViewStrategy(strategy) {
    return function (target) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(ViewLocator.viewStrategyMetadataKey, strategy, target);
    };
}
function useView(path) {
    return useViewStrategy(new RelativeViewStrategy(path));
}
function inlineView(markup, dependencies, dependencyBaseUrl) {
    return useViewStrategy(new InlineViewStrategy(markup, dependencies, dependencyBaseUrl));
}
function noView(targetOrDependencies, dependencyBaseUrl) {
    var target;
    var dependencies;
    if (typeof targetOrDependencies === 'function') {
        target = targetOrDependencies;
    }
    else {
        dependencies = targetOrDependencies;
        target = undefined;
    }
    var deco = function (t) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(ViewLocator.viewStrategyMetadataKey, new NoViewStrategy(dependencies, dependencyBaseUrl), t);
    };
    return target ? deco(target) : deco;
}
function view(templateOrConfig) {
    return function (target) {
        target.$view = templateOrConfig;
    };
}
function elementConfig(target) {
    var deco = function (t) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].resource, new ElementConfigResource(), t);
    };
    return target ? deco(target) : deco;
}
function viewResources() {
    var resources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        resources[_i] = arguments[_i];
    }
    return function (target) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_metadata__["metadata"].define(ViewEngine.viewModelRequireMetadataKey, resources, target);
    };
}

var TemplatingEngine = (function () {
    function TemplatingEngine(container, moduleAnalyzer, viewCompiler, compositionEngine) {
        this._container = container;
        this._moduleAnalyzer = moduleAnalyzer;
        this._viewCompiler = viewCompiler;
        this._compositionEngine = compositionEngine;
        container.registerInstance(Animator, Animator.instance = new Animator());
    }
    TemplatingEngine.prototype.configureAnimator = function (animator) {
        this._container.unregister(Animator);
        this._container.registerInstance(Animator, Animator.instance = animator);
    };
    TemplatingEngine.prototype.compose = function (context) {
        return this._compositionEngine.compose(context);
    };
    TemplatingEngine.prototype.enhance = function (instruction) {
        if (instruction instanceof __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].Element) {
            instruction = { element: instruction };
        }
        var compilerInstructions = { letExpressions: [] };
        var resources = instruction.resources || this._container.get(ViewResources);
        this._viewCompiler._compileNode(instruction.element, resources, compilerInstructions, instruction.element.parentNode, 'root', true);
        var factory = new ViewFactory(instruction.element, compilerInstructions, resources);
        var container = instruction.container || this._container.createChild();
        var view = factory.create(container, BehaviorInstruction.enhance());
        view.bind(instruction.bindingContext || {}, instruction.overrideContext);
        view.firstChild = view.lastChild = view.fragment;
        view.fragment = __WEBPACK_IMPORTED_MODULE_0_aurelia_pal__["DOM"].createDocumentFragment();
        view.attached();
        return view;
    };
    TemplatingEngine.inject = [__WEBPACK_IMPORTED_MODULE_6_aurelia_dependency_injection__["Container"], ModuleAnalyzer, ViewCompiler, CompositionEngine];
    return TemplatingEngine;
}());


//# sourceMappingURL=aurelia-templating.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("bluebird")))

/***/ },

/***/ 51:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "logLevel", function() { return logLevel; });
/* harmony export (immutable) */ exports["getLogger"] = getLogger;
/* harmony export (immutable) */ exports["addAppender"] = addAppender;
/* harmony export (immutable) */ exports["removeAppender"] = removeAppender;
/* harmony export (immutable) */ exports["getAppenders"] = getAppenders;
/* harmony export (immutable) */ exports["clearAppenders"] = clearAppenders;
/* harmony export (immutable) */ exports["addCustomLevel"] = addCustomLevel;
/* harmony export (immutable) */ exports["removeCustomLevel"] = removeCustomLevel;
/* harmony export (immutable) */ exports["setLevel"] = setLevel;
/* harmony export (immutable) */ exports["getLevel"] = getLevel;
/* harmony export (binding) */ __webpack_require__.d(exports, "Logger", function() { return Logger; });


var logLevel = {
  none: 0,
  error: 10,
  warn: 20,
  info: 30,
  debug: 40
};

var loggers = {};
var appenders = [];
var globalDefaultLevel = logLevel.none;

var standardLevels = ['none', 'error', 'warn', 'info', 'debug'];
function isStandardLevel(level) {
  return standardLevels.filter(function (l) {
    return l === level;
  }).length > 0;
}

function appendArgs() {
  return [this].concat(Array.prototype.slice.call(arguments));
}

function logFactory(level) {
  var threshold = logLevel[level];
  return function () {
    if (this.level < threshold) {
      return;
    }

    var args = appendArgs.apply(this, arguments);
    var i = appenders.length;
    while (i--) {
      var _appenders$i;

      (_appenders$i = appenders[i])[level].apply(_appenders$i, args);
    }
  };
}

function logFactoryCustom(level) {
  var threshold = logLevel[level];
  return function () {
    if (this.level < threshold) {
      return;
    }

    var args = appendArgs.apply(this, arguments);
    var i = appenders.length;
    while (i--) {
      var appender = appenders[i];
      if (appender[level] !== undefined) {
        appender[level].apply(appender, args);
      }
    }
  };
}

function connectLoggers() {
  var proto = Logger.prototype;
  for (var _level in logLevel) {
    if (isStandardLevel(_level)) {
      if (_level !== 'none') {
        proto[_level] = logFactory(_level);
      }
    } else {
      proto[_level] = logFactoryCustom(_level);
    }
  }
}

function disconnectLoggers() {
  var proto = Logger.prototype;
  for (var _level2 in logLevel) {
    if (_level2 !== 'none') {
      proto[_level2] = function () {};
    }
  }
}

function getLogger(id) {
  return loggers[id] || new Logger(id);
}

function addAppender(appender) {
  if (appenders.push(appender) === 1) {
    connectLoggers();
  }
}

function removeAppender(appender) {
  appenders = appenders.filter(function (a) {
    return a !== appender;
  });
}

function getAppenders() {
  return [].concat(appenders);
}

function clearAppenders() {
  appenders = [];
  disconnectLoggers();
}

function addCustomLevel(name, value) {
  if (logLevel[name] !== undefined) {
    throw Error('Log level "' + name + '" already exists.');
  }

  if (isNaN(value)) {
    throw Error('Value must be a number.');
  }

  logLevel[name] = value;

  if (appenders.length > 0) {
    connectLoggers();
  } else {
    Logger.prototype[name] = function () {};
  }
}

function removeCustomLevel(name) {
  if (logLevel[name] === undefined) {
    return;
  }

  if (isStandardLevel(name)) {
    throw Error('Built-in log level "' + name + '" cannot be removed.');
  }

  delete logLevel[name];
  delete Logger.prototype[name];
}

function setLevel(level) {
  globalDefaultLevel = level;
  for (var key in loggers) {
    loggers[key].setLevel(level);
  }
}

function getLevel() {
  return globalDefaultLevel;
}

var Logger = function () {
  function Logger(id) {
    

    var cached = loggers[id];
    if (cached) {
      return cached;
    }

    loggers[id] = this;
    this.id = id;
    this.level = globalDefaultLevel;
  }

  Logger.prototype.debug = function debug(message) {};

  Logger.prototype.info = function info(message) {};

  Logger.prototype.warn = function warn(message) {};

  Logger.prototype.error = function error(message) {};

  Logger.prototype.setLevel = function setLevel(level) {
    this.level = level;
  };

  Logger.prototype.isDebugEnabled = function isDebugEnabled() {
    return this.level === logLevel.debug;
  };

  return Logger;
}();

/***/ },

/***/ "aurelia-binding":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_task_queue__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__ = __webpack_require__(43);
/* harmony export (binding) */ __webpack_require__.d(exports, "getArrayObserver", function() { return _getArrayObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "getMapObserver", function() { return _getMapObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "getSetObserver", function() { return _getSetObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "targetContext", function() { return targetContext; });
/* harmony export (binding) */ __webpack_require__.d(exports, "sourceContext", function() { return sourceContext; });
/* harmony export (immutable) */ exports["camelCase"] = camelCase;
/* harmony export (immutable) */ exports["createOverrideContext"] = createOverrideContext;
/* harmony export (immutable) */ exports["getContextFor"] = getContextFor;
/* harmony export (immutable) */ exports["createScopeForTest"] = createScopeForTest;
/* harmony export (immutable) */ exports["connectable"] = connectable;
/* harmony export (immutable) */ exports["enqueueBindingConnect"] = enqueueBindingConnect;
/* harmony export (immutable) */ exports["setConnectQueueThreshold"] = setConnectQueueThreshold;
/* harmony export (immutable) */ exports["enableConnectQueue"] = enableConnectQueue;
/* harmony export (immutable) */ exports["disableConnectQueue"] = disableConnectQueue;
/* harmony export (immutable) */ exports["getConnectQueueSize"] = getConnectQueueSize;
/* harmony export (immutable) */ exports["subscriberCollection"] = subscriberCollection;
/* harmony export (binding) */ __webpack_require__.d(exports, "ExpressionObserver", function() { return ExpressionObserver; });
/* harmony export (immutable) */ exports["calcSplices"] = calcSplices;
/* harmony export (immutable) */ exports["mergeSplice"] = mergeSplice;
/* harmony export (immutable) */ exports["projectArraySplices"] = projectArraySplices;
/* harmony export (immutable) */ exports["getChangeRecords"] = getChangeRecords;
/* harmony export (binding) */ __webpack_require__.d(exports, "ModifyCollectionObserver", function() { return ModifyCollectionObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CollectionLengthObserver", function() { return CollectionLengthObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Expression", function() { return Expression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingBehavior", function() { return BindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ValueConverter", function() { return ValueConverter; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Assign", function() { return Assign; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Conditional", function() { return Conditional; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AccessThis", function() { return AccessThis; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AccessScope", function() { return AccessScope; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AccessMember", function() { return AccessMember; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AccessKeyed", function() { return AccessKeyed; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CallScope", function() { return CallScope; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CallMember", function() { return CallMember; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CallFunction", function() { return CallFunction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Binary", function() { return Binary; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Unary", function() { return Unary; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LiteralPrimitive", function() { return LiteralPrimitive; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LiteralString", function() { return LiteralString; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LiteralTemplate", function() { return LiteralTemplate; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LiteralArray", function() { return LiteralArray; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LiteralObject", function() { return LiteralObject; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Unparser", function() { return _Unparser; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ExpressionCloner", function() { return ExpressionCloner; });
/* harmony export (immutable) */ exports["cloneExpression"] = cloneExpression;
/* harmony export (binding) */ __webpack_require__.d(exports, "bindingMode", function() { return bindingMode; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Parser", function() { return Parser; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ParserImplementation", function() { return ParserImplementation; });
/* harmony export (binding) */ __webpack_require__.d(exports, "delegationStrategy", function() { return delegationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "EventManager", function() { return EventManager; });
/* harmony export (binding) */ __webpack_require__.d(exports, "EventSubscriber", function() { return EventSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DirtyChecker", function() { return DirtyChecker; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DirtyCheckProperty", function() { return DirtyCheckProperty; });
/* harmony export (binding) */ __webpack_require__.d(exports, "propertyAccessor", function() { return propertyAccessor; });
/* harmony export (binding) */ __webpack_require__.d(exports, "PrimitiveObserver", function() { return PrimitiveObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SetterObserver", function() { return SetterObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "XLinkAttributeObserver", function() { return XLinkAttributeObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "dataAttributeAccessor", function() { return dataAttributeAccessor; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DataAttributeObserver", function() { return DataAttributeObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "StyleObserver", function() { return StyleObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ValueAttributeObserver", function() { return ValueAttributeObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CheckedObserver", function() { return CheckedObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SelectValueObserver", function() { return SelectValueObserver; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ClassObserver", function() { return ClassObserver; });
/* harmony export (immutable) */ exports["hasDeclaredDependencies"] = hasDeclaredDependencies;
/* harmony export (immutable) */ exports["declarePropertyDependencies"] = declarePropertyDependencies;
/* harmony export (immutable) */ exports["computedFrom"] = computedFrom;
/* harmony export (binding) */ __webpack_require__.d(exports, "ComputedExpression", function() { return ComputedExpression; });
/* harmony export (immutable) */ exports["createComputedObserver"] = createComputedObserver;
/* harmony export (binding) */ __webpack_require__.d(exports, "elements", function() { return elements; });
/* harmony export (binding) */ __webpack_require__.d(exports, "presentationElements", function() { return presentationElements; });
/* harmony export (binding) */ __webpack_require__.d(exports, "presentationAttributes", function() { return presentationAttributes; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SVGAnalyzer", function() { return SVGAnalyzer; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ObserverLocator", function() { return ObserverLocator; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ObjectObservationAdapter", function() { return ObjectObservationAdapter; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingExpression", function() { return BindingExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Binding", function() { return Binding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CallExpression", function() { return CallExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Call", function() { return Call; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ValueConverterResource", function() { return ValueConverterResource; });
/* harmony export (immutable) */ exports["valueConverter"] = valueConverter;
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingBehaviorResource", function() { return BindingBehaviorResource; });
/* harmony export (immutable) */ exports["bindingBehavior"] = bindingBehavior;
/* harmony export (binding) */ __webpack_require__.d(exports, "ListenerExpression", function() { return ListenerExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Listener", function() { return Listener; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NameExpression", function() { return NameExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingEngine", function() { return BindingEngine; });
/* harmony export (immutable) */ exports["observable"] = observable;
/* harmony export (immutable) */ exports["connectBindingToSignal"] = connectBindingToSignal;
/* harmony export (immutable) */ exports["signalBindings"] = signalBindings;




var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _dec, _dec2, _class, _dec3, _class2, _dec4, _class3, _dec5, _class5, _dec6, _class7, _dec7, _class8, _dec8, _class9, _dec9, _class10, _class12, _temp, _dec10, _class13, _class14, _temp2;

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








var targetContext = 'Binding:target';
var sourceContext = 'Binding:source';

var map = Object.create(null);

function camelCase(name) {
  if (name in map) {
    return map[name];
  }
  var result = name.charAt(0).toLowerCase() + name.slice(1).replace(/[_.-](\w|$)/g, function (_, x) {
    return x.toUpperCase();
  });
  map[name] = result;
  return result;
}

function createOverrideContext(bindingContext, parentOverrideContext) {
  return {
    bindingContext: bindingContext,
    parentOverrideContext: parentOverrideContext || null
  };
}

function getContextFor(name, scope, ancestor) {
  var oc = scope.overrideContext;

  if (ancestor) {
    while (ancestor && oc) {
      ancestor--;
      oc = oc.parentOverrideContext;
    }
    if (ancestor || !oc) {
      return undefined;
    }
    return name in oc ? oc : oc.bindingContext;
  }

  while (oc && !(name in oc) && !(oc.bindingContext && name in oc.bindingContext)) {
    oc = oc.parentOverrideContext;
  }
  if (oc) {
    return name in oc ? oc : oc.bindingContext;
  }

  return scope.bindingContext || scope.overrideContext;
}

function createScopeForTest(bindingContext, parentBindingContext) {
  if (parentBindingContext) {
    return {
      bindingContext: bindingContext,
      overrideContext: createOverrideContext(bindingContext, createOverrideContext(parentBindingContext))
    };
  }
  return {
    bindingContext: bindingContext,
    overrideContext: createOverrideContext(bindingContext)
  };
}

var slotNames = [];
var versionSlotNames = [];
var lastSlot = -1;
function ensureEnoughSlotNames(currentSlot) {
  if (currentSlot === lastSlot) {
    lastSlot += 5;
    var ii = slotNames.length = versionSlotNames.length = lastSlot + 1;
    for (var i = currentSlot + 1; i < ii; ++i) {
      slotNames[i] = '_observer' + i;
      versionSlotNames[i] = '_observerVersion' + i;
    }
  }
}
ensureEnoughSlotNames(-1);

function addObserver(observer) {
  var observerSlots = this._observerSlots === undefined ? 0 : this._observerSlots;
  var i = observerSlots;
  while (i-- && this[slotNames[i]] !== observer) {}

  if (i === -1) {
    i = 0;
    while (this[slotNames[i]]) {
      i++;
    }
    this[slotNames[i]] = observer;
    observer.subscribe(sourceContext, this);

    if (i === observerSlots) {
      this._observerSlots = i + 1;
    }
  }

  if (this._version === undefined) {
    this._version = 0;
  }
  this[versionSlotNames[i]] = this._version;
  ensureEnoughSlotNames(i);
}

function observeProperty(obj, propertyName) {
  var observer = this.observerLocator.getObserver(obj, propertyName);
  addObserver.call(this, observer);
}

function observeArray(array) {
  var observer = this.observerLocator.getArrayObserver(array);
  addObserver.call(this, observer);
}

function unobserve(all) {
  var i = this._observerSlots;
  while (i--) {
    if (all || this[versionSlotNames[i]] !== this._version) {
      var observer = this[slotNames[i]];
      this[slotNames[i]] = null;
      if (observer) {
        observer.unsubscribe(sourceContext, this);
      }
    }
  }
}

function connectable() {
  return function (target) {
    target.prototype.observeProperty = observeProperty;
    target.prototype.observeArray = observeArray;
    target.prototype.unobserve = unobserve;
    target.prototype.addObserver = addObserver;
  };
}

var queue = [];
var queued = {};
var nextId = 0;
var minimumImmediate = 100;
var frameBudget = 15;

var isFlushRequested = false;
var immediate = 0;

function flush(animationFrameStart) {
  var length = queue.length;
  var i = 0;
  while (i < length) {
    var binding = queue[i];
    queued[binding.__connectQueueId] = false;
    binding.connect(true);
    i++;

    if (i % 100 === 0 && __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].performance.now() - animationFrameStart > frameBudget) {
      break;
    }
  }
  queue.splice(0, i);

  if (queue.length) {
    __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].requestAnimationFrame(flush);
  } else {
    isFlushRequested = false;
    immediate = 0;
  }
}

function enqueueBindingConnect(binding) {
  if (immediate < minimumImmediate) {
    immediate++;
    binding.connect(false);
  } else {
    var id = binding.__connectQueueId;
    if (id === undefined) {
      id = nextId;
      nextId++;
      binding.__connectQueueId = id;
    }

    if (!queued[id]) {
      queue.push(binding);
      queued[id] = true;
    }
  }
  if (!isFlushRequested) {
    isFlushRequested = true;
    __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].requestAnimationFrame(flush);
  }
}

function setConnectQueueThreshold(value) {
  minimumImmediate = value;
}

function enableConnectQueue() {
  setConnectQueueThreshold(100);
}

function disableConnectQueue() {
  setConnectQueueThreshold(Number.MAX_SAFE_INTEGER);
}

function getConnectQueueSize() {
  return queue.length;
}

function addSubscriber(context, callable) {
  if (this.hasSubscriber(context, callable)) {
    return false;
  }
  if (!this._context0) {
    this._context0 = context;
    this._callable0 = callable;
    return true;
  }
  if (!this._context1) {
    this._context1 = context;
    this._callable1 = callable;
    return true;
  }
  if (!this._context2) {
    this._context2 = context;
    this._callable2 = callable;
    return true;
  }
  if (!this._contextsRest) {
    this._contextsRest = [context];
    this._callablesRest = [callable];
    return true;
  }
  this._contextsRest.push(context);
  this._callablesRest.push(callable);
  return true;
}

function removeSubscriber(context, callable) {
  if (this._context0 === context && this._callable0 === callable) {
    this._context0 = null;
    this._callable0 = null;
    return true;
  }
  if (this._context1 === context && this._callable1 === callable) {
    this._context1 = null;
    this._callable1 = null;
    return true;
  }
  if (this._context2 === context && this._callable2 === callable) {
    this._context2 = null;
    this._callable2 = null;
    return true;
  }
  var callables = this._callablesRest;
  if (callables === undefined || callables.length === 0) {
    return false;
  }
  var contexts = this._contextsRest;
  var i = 0;
  while (!(callables[i] === callable && contexts[i] === context) && callables.length > i) {
    i++;
  }
  if (i >= callables.length) {
    return false;
  }
  contexts.splice(i, 1);
  callables.splice(i, 1);
  return true;
}

var arrayPool1 = [];
var arrayPool2 = [];
var poolUtilization = [];

function callSubscribers(newValue, oldValue) {
  var context0 = this._context0;
  var callable0 = this._callable0;
  var context1 = this._context1;
  var callable1 = this._callable1;
  var context2 = this._context2;
  var callable2 = this._callable2;
  var length = this._contextsRest ? this._contextsRest.length : 0;
  var contextsRest = void 0;
  var callablesRest = void 0;
  var poolIndex = void 0;
  var i = void 0;
  if (length) {
    poolIndex = poolUtilization.length;
    while (poolIndex-- && poolUtilization[poolIndex]) {}
    if (poolIndex < 0) {
      poolIndex = poolUtilization.length;
      contextsRest = [];
      callablesRest = [];
      poolUtilization.push(true);
      arrayPool1.push(contextsRest);
      arrayPool2.push(callablesRest);
    } else {
      poolUtilization[poolIndex] = true;
      contextsRest = arrayPool1[poolIndex];
      callablesRest = arrayPool2[poolIndex];
    }

    i = length;
    while (i--) {
      contextsRest[i] = this._contextsRest[i];
      callablesRest[i] = this._callablesRest[i];
    }
  }

  if (context0) {
    if (callable0) {
      callable0.call(context0, newValue, oldValue);
    } else {
      context0(newValue, oldValue);
    }
  }
  if (context1) {
    if (callable1) {
      callable1.call(context1, newValue, oldValue);
    } else {
      context1(newValue, oldValue);
    }
  }
  if (context2) {
    if (callable2) {
      callable2.call(context2, newValue, oldValue);
    } else {
      context2(newValue, oldValue);
    }
  }
  if (length) {
    for (i = 0; i < length; i++) {
      var callable = callablesRest[i];
      var context = contextsRest[i];
      if (callable) {
        callable.call(context, newValue, oldValue);
      } else {
        context(newValue, oldValue);
      }
      contextsRest[i] = null;
      callablesRest[i] = null;
    }
    poolUtilization[poolIndex] = false;
  }
}

function hasSubscribers() {
  return !!(this._context0 || this._context1 || this._context2 || this._contextsRest && this._contextsRest.length);
}

function hasSubscriber(context, callable) {
  var has = this._context0 === context && this._callable0 === callable || this._context1 === context && this._callable1 === callable || this._context2 === context && this._callable2 === callable;
  if (has) {
    return true;
  }
  var index = void 0;
  var contexts = this._contextsRest;
  if (!contexts || (index = contexts.length) === 0) {
    return false;
  }
  var callables = this._callablesRest;
  while (index--) {
    if (contexts[index] === context && callables[index] === callable) {
      return true;
    }
  }
  return false;
}

function subscriberCollection() {
  return function (target) {
    target.prototype.addSubscriber = addSubscriber;
    target.prototype.removeSubscriber = removeSubscriber;
    target.prototype.callSubscribers = callSubscribers;
    target.prototype.hasSubscribers = hasSubscribers;
    target.prototype.hasSubscriber = hasSubscriber;
  };
}

var ExpressionObserver = (_dec = connectable(), _dec2 = subscriberCollection(), _dec(_class = _dec2(_class = function () {
  function ExpressionObserver(scope, expression, observerLocator, lookupFunctions) {
    

    this.scope = scope;
    this.expression = expression;
    this.observerLocator = observerLocator;
    this.lookupFunctions = lookupFunctions;
  }

  ExpressionObserver.prototype.getValue = function getValue() {
    return this.expression.evaluate(this.scope, this.lookupFunctions);
  };

  ExpressionObserver.prototype.setValue = function setValue(newValue) {
    this.expression.assign(this.scope, newValue);
  };

  ExpressionObserver.prototype.subscribe = function subscribe(context, callable) {
    var _this = this;

    if (!this.hasSubscribers()) {
      this.oldValue = this.expression.evaluate(this.scope, this.lookupFunctions);
      this.expression.connect(this, this.scope);
    }
    this.addSubscriber(context, callable);
    if (arguments.length === 1 && context instanceof Function) {
      return {
        dispose: function dispose() {
          _this.unsubscribe(context, callable);
        }
      };
    }
  };

  ExpressionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.unobserve(true);
      this.oldValue = undefined;
    }
  };

  ExpressionObserver.prototype.call = function call() {
    var newValue = this.expression.evaluate(this.scope, this.lookupFunctions);
    var oldValue = this.oldValue;
    if (newValue !== oldValue) {
      this.oldValue = newValue;
      this.callSubscribers(newValue, oldValue);
    }
    this._version++;
    this.expression.connect(this, this.scope);
    this.unobserve(false);
  };

  return ExpressionObserver;
}()) || _class) || _class);

function isIndex(s) {
  return +s === s >>> 0;
}

function toNumber(s) {
  return +s;
}

function newSplice(index, removed, addedCount) {
  return {
    index: index,
    removed: removed,
    addedCount: addedCount
  };
}

var EDIT_LEAVE = 0;
var EDIT_UPDATE = 1;
var EDIT_ADD = 2;
var EDIT_DELETE = 3;

function ArraySplice() {}

ArraySplice.prototype = {
  calcEditDistances: function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var rowCount = oldEnd - oldStart + 1;
    var columnCount = currentEnd - currentStart + 1;
    var distances = new Array(rowCount);
    var north = void 0;
    var west = void 0;

    for (var i = 0; i < rowCount; ++i) {
      distances[i] = new Array(columnCount);
      distances[i][0] = i;
    }

    for (var j = 0; j < columnCount; ++j) {
      distances[0][j] = j;
    }

    for (var _i = 1; _i < rowCount; ++_i) {
      for (var _j = 1; _j < columnCount; ++_j) {
        if (this.equals(current[currentStart + _j - 1], old[oldStart + _i - 1])) {
          distances[_i][_j] = distances[_i - 1][_j - 1];
        } else {
          north = distances[_i - 1][_j] + 1;
          west = distances[_i][_j - 1] + 1;
          distances[_i][_j] = north < west ? north : west;
        }
      }
    }

    return distances;
  },

  spliceOperationsFromEditDistances: function spliceOperationsFromEditDistances(distances) {
    var i = distances.length - 1;
    var j = distances[0].length - 1;
    var current = distances[i][j];
    var edits = [];
    while (i > 0 || j > 0) {
      if (i === 0) {
        edits.push(EDIT_ADD);
        j--;
        continue;
      }
      if (j === 0) {
        edits.push(EDIT_DELETE);
        i--;
        continue;
      }
      var northWest = distances[i - 1][j - 1];
      var west = distances[i - 1][j];
      var north = distances[i][j - 1];

      var min = void 0;
      if (west < north) {
        min = west < northWest ? west : northWest;
      } else {
        min = north < northWest ? north : northWest;
      }

      if (min === northWest) {
        if (northWest === current) {
          edits.push(EDIT_LEAVE);
        } else {
          edits.push(EDIT_UPDATE);
          current = northWest;
        }
        i--;
        j--;
      } else if (min === west) {
        edits.push(EDIT_DELETE);
        i--;
        current = west;
      } else {
        edits.push(EDIT_ADD);
        j--;
        current = north;
      }
    }

    edits.reverse();
    return edits;
  },

  calcSplices: function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var prefixCount = 0;
    var suffixCount = 0;

    var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
    if (currentStart === 0 && oldStart === 0) {
      prefixCount = this.sharedPrefix(current, old, minLength);
    }

    if (currentEnd === current.length && oldEnd === old.length) {
      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
    }

    currentStart += prefixCount;
    oldStart += prefixCount;
    currentEnd -= suffixCount;
    oldEnd -= suffixCount;

    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
      return [];
    }

    if (currentStart === currentEnd) {
      var _splice = newSplice(currentStart, [], 0);
      while (oldStart < oldEnd) {
        _splice.removed.push(old[oldStart++]);
      }

      return [_splice];
    } else if (oldStart === oldEnd) {
      return [newSplice(currentStart, [], currentEnd - currentStart)];
    }

    var ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));

    var splice = undefined;
    var splices = [];
    var index = currentStart;
    var oldIndex = oldStart;
    for (var i = 0; i < ops.length; ++i) {
      switch (ops[i]) {
        case EDIT_LEAVE:
          if (splice) {
            splices.push(splice);
            splice = undefined;
          }

          index++;
          oldIndex++;
          break;
        case EDIT_UPDATE:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.addedCount++;
          index++;

          splice.removed.push(old[oldIndex]);
          oldIndex++;
          break;
        case EDIT_ADD:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.addedCount++;
          index++;
          break;
        case EDIT_DELETE:
          if (!splice) {
            splice = newSplice(index, [], 0);
          }

          splice.removed.push(old[oldIndex]);
          oldIndex++;
          break;
      }
    }

    if (splice) {
      splices.push(splice);
    }
    return splices;
  },

  sharedPrefix: function sharedPrefix(current, old, searchLength) {
    for (var i = 0; i < searchLength; ++i) {
      if (!this.equals(current[i], old[i])) {
        return i;
      }
    }

    return searchLength;
  },

  sharedSuffix: function sharedSuffix(current, old, searchLength) {
    var index1 = current.length;
    var index2 = old.length;
    var count = 0;
    while (count < searchLength && this.equals(current[--index1], old[--index2])) {
      count++;
    }

    return count;
  },

  calculateSplices: function calculateSplices(current, previous) {
    return this.calcSplices(current, 0, current.length, previous, 0, previous.length);
  },

  equals: function equals(currentValue, previousValue) {
    return currentValue === previousValue;
  }
};

var arraySplice = new ArraySplice();

function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
  return arraySplice.calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd);
}

function intersect(start1, end1, start2, end2) {
  if (end1 < start2 || end2 < start1) {
    return -1;
  }

  if (end1 === start2 || end2 === start1) {
    return 0;
  }

  if (start1 < start2) {
    if (end1 < end2) {
      return end1 - start2;
    }

    return end2 - start2;
  }

  if (end2 < end1) {
    return end2 - start1;
  }

  return end1 - start1;
}

function mergeSplice(splices, index, removed, addedCount) {
  var splice = newSplice(index, removed, addedCount);

  var inserted = false;
  var insertionOffset = 0;

  for (var i = 0; i < splices.length; i++) {
    var current = splices[i];
    current.index += insertionOffset;

    if (inserted) {
      continue;
    }

    var intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);

    if (intersectCount >= 0) {

      splices.splice(i, 1);
      i--;

      insertionOffset -= current.addedCount - current.removed.length;

      splice.addedCount += current.addedCount - intersectCount;
      var deleteCount = splice.removed.length + current.removed.length - intersectCount;

      if (!splice.addedCount && !deleteCount) {
        inserted = true;
      } else {
        var currentRemoved = current.removed;

        if (splice.index < current.index) {
          var prepend = splice.removed.slice(0, current.index - splice.index);
          Array.prototype.push.apply(prepend, currentRemoved);
          currentRemoved = prepend;
        }

        if (splice.index + splice.removed.length > current.index + current.addedCount) {
          var append = splice.removed.slice(current.index + current.addedCount - splice.index);
          Array.prototype.push.apply(currentRemoved, append);
        }

        splice.removed = currentRemoved;
        if (current.index < splice.index) {
          splice.index = current.index;
        }
      }
    } else if (splice.index < current.index) {

      inserted = true;

      splices.splice(i, 0, splice);
      i++;

      var offset = splice.addedCount - splice.removed.length;
      current.index += offset;
      insertionOffset += offset;
    }
  }

  if (!inserted) {
    splices.push(splice);
  }
}

function createInitialSplices(array, changeRecords) {
  var splices = [];

  for (var i = 0; i < changeRecords.length; i++) {
    var record = changeRecords[i];
    switch (record.type) {
      case 'splice':
        mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
        break;
      case 'add':
      case 'update':
      case 'delete':
        if (!isIndex(record.name)) {
          continue;
        }

        var index = toNumber(record.name);
        if (index < 0) {
          continue;
        }

        mergeSplice(splices, index, [record.oldValue], record.type === 'delete' ? 0 : 1);
        break;
      default:
        console.error('Unexpected record type: ' + JSON.stringify(record));
        break;
    }
  }

  return splices;
}

function projectArraySplices(array, changeRecords) {
  var splices = [];

  createInitialSplices(array, changeRecords).forEach(function (splice) {
    if (splice.addedCount === 1 && splice.removed.length === 1) {
      if (splice.removed[0] !== array[splice.index]) {
        splices.push(splice);
      }

      return;
    }

    splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));
  });

  return splices;
}

function newRecord(type, object, key, oldValue) {
  return {
    type: type,
    object: object,
    key: key,
    oldValue: oldValue
  };
}

function getChangeRecords(map) {
  var entries = new Array(map.size);
  var keys = map.keys();
  var i = 0;
  var item = void 0;

  while (item = keys.next()) {
    if (item.done) {
      break;
    }

    entries[i] = newRecord('added', map, item.value);
    i++;
  }

  return entries;
}

var ModifyCollectionObserver = (_dec3 = subscriberCollection(), _dec3(_class2 = function () {
  function ModifyCollectionObserver(taskQueue, collection) {
    

    this.taskQueue = taskQueue;
    this.queued = false;
    this.changeRecords = null;
    this.oldCollection = null;
    this.collection = collection;
    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
  }

  ModifyCollectionObserver.prototype.subscribe = function subscribe(context, callable) {
    this.addSubscriber(context, callable);
  };

  ModifyCollectionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  ModifyCollectionObserver.prototype.addChangeRecord = function addChangeRecord(changeRecord) {
    if (!this.hasSubscribers() && !this.lengthObserver) {
      return;
    }

    if (changeRecord.type === 'splice') {
      var index = changeRecord.index;
      var arrayLength = changeRecord.object.length;
      if (index > arrayLength) {
        index = arrayLength - changeRecord.addedCount;
      } else if (index < 0) {
        index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
      }
      if (index < 0) {
        index = 0;
      }
      changeRecord.index = index;
    }

    if (this.changeRecords === null) {
      this.changeRecords = [changeRecord];
    } else {
      this.changeRecords.push(changeRecord);
    }

    if (!this.queued) {
      this.queued = true;
      this.taskQueue.queueMicroTask(this);
    }
  };

  ModifyCollectionObserver.prototype.flushChangeRecords = function flushChangeRecords() {
    if (this.changeRecords && this.changeRecords.length || this.oldCollection) {
      this.call();
    }
  };

  ModifyCollectionObserver.prototype.reset = function reset(oldCollection) {
    this.oldCollection = oldCollection;

    if (this.hasSubscribers() && !this.queued) {
      this.queued = true;
      this.taskQueue.queueMicroTask(this);
    }
  };

  ModifyCollectionObserver.prototype.getLengthObserver = function getLengthObserver() {
    return this.lengthObserver || (this.lengthObserver = new CollectionLengthObserver(this.collection));
  };

  ModifyCollectionObserver.prototype.call = function call() {
    var changeRecords = this.changeRecords;
    var oldCollection = this.oldCollection;
    var records = void 0;

    this.queued = false;
    this.changeRecords = [];
    this.oldCollection = null;

    if (this.hasSubscribers()) {
      if (oldCollection) {
        if (this.collection instanceof Map || this.collection instanceof Set) {
          records = getChangeRecords(oldCollection);
        } else {
          records = calcSplices(this.collection, 0, this.collection.length, oldCollection, 0, oldCollection.length);
        }
      } else {
        if (this.collection instanceof Map || this.collection instanceof Set) {
          records = changeRecords;
        } else {
          records = projectArraySplices(this.collection, changeRecords);
        }
      }

      this.callSubscribers(records);
    }

    if (this.lengthObserver) {
      this.lengthObserver.call(this.collection[this.lengthPropertyName]);
    }
  };

  return ModifyCollectionObserver;
}()) || _class2);

var CollectionLengthObserver = (_dec4 = subscriberCollection(), _dec4(_class3 = function () {
  function CollectionLengthObserver(collection) {
    

    this.collection = collection;
    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
    this.currentValue = collection[this.lengthPropertyName];
  }

  CollectionLengthObserver.prototype.getValue = function getValue() {
    return this.collection[this.lengthPropertyName];
  };

  CollectionLengthObserver.prototype.setValue = function setValue(newValue) {
    this.collection[this.lengthPropertyName] = newValue;
  };

  CollectionLengthObserver.prototype.subscribe = function subscribe(context, callable) {
    this.addSubscriber(context, callable);
  };

  CollectionLengthObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  CollectionLengthObserver.prototype.call = function call(newValue) {
    var oldValue = this.currentValue;
    this.callSubscribers(newValue, oldValue);
    this.currentValue = newValue;
  };

  return CollectionLengthObserver;
}()) || _class3);

var arrayProto = Array.prototype;
var pop = arrayProto.pop;
var push = arrayProto.push;
var reverse = arrayProto.reverse;
var shift = arrayProto.shift;
var sort = arrayProto.sort;
var splice = arrayProto.splice;
var unshift = arrayProto.unshift;

if (arrayProto.__au_patched__) {
  __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"]('array-observation').warn('Detected 2nd attempt of patching array from Aurelia binding.' + ' This is probably caused by dependency mismatch between core modules and a 3rd party plugin.' + ' Please see https://github.com/aurelia/cli/pull/906 if you are using webpack.');
} else {
  Reflect.defineProperty(arrayProto, '__au_patched__', { value: 1 });
  arrayProto.pop = function () {
    var notEmpty = this.length > 0;
    var methodCallResult = pop.apply(this, arguments);
    if (notEmpty && this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: this.length,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };

  arrayProto.push = function () {
    var methodCallResult = push.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: this.length - arguments.length,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };

  arrayProto.reverse = function () {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = reverse.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };

  arrayProto.shift = function () {
    var notEmpty = this.length > 0;
    var methodCallResult = shift.apply(this, arguments);
    if (notEmpty && this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: 0,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };

  arrayProto.sort = function () {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = sort.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };

  arrayProto.splice = function () {
    var methodCallResult = splice.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: +arguments[0],
        removed: methodCallResult,
        addedCount: arguments.length > 2 ? arguments.length - 2 : 0
      });
    }
    return methodCallResult;
  };

  arrayProto.unshift = function () {
    var methodCallResult = unshift.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: 0,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };
}

function _getArrayObserver(taskQueue, array) {
  return ModifyArrayObserver.for(taskQueue, array);
}

var ModifyArrayObserver = function (_ModifyCollectionObse) {
  _inherits(ModifyArrayObserver, _ModifyCollectionObse);

  function ModifyArrayObserver(taskQueue, array) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse.call(this, taskQueue, array));
  }

  ModifyArrayObserver.for = function _for(taskQueue, array) {
    if (!('__array_observer__' in array)) {
      Reflect.defineProperty(array, '__array_observer__', {
        value: ModifyArrayObserver.create(taskQueue, array),
        enumerable: false, configurable: false
      });
    }
    return array.__array_observer__;
  };

  ModifyArrayObserver.create = function create(taskQueue, array) {
    return new ModifyArrayObserver(taskQueue, array);
  };

  return ModifyArrayObserver;
}(ModifyCollectionObserver);

var Expression = function () {
  function Expression() {
    

    this.isAssignable = false;
  }

  Expression.prototype.evaluate = function evaluate(scope, lookupFunctions, args) {
    throw new Error('Binding expression "' + this + '" cannot be evaluated.');
  };

  Expression.prototype.assign = function assign(scope, value, lookupFunctions) {
    throw new Error('Binding expression "' + this + '" cannot be assigned to.');
  };

  Expression.prototype.toString = function toString() {
    return typeof FEATURE_NO_UNPARSER === 'undefined' ? _Unparser.unparse(this) : Function.prototype.toString.call(this);
  };

  return Expression;
}();

var BindingBehavior = function (_Expression) {
  _inherits(BindingBehavior, _Expression);

  function BindingBehavior(expression, name, args) {
    

    var _this3 = _possibleConstructorReturn(this, _Expression.call(this));

    _this3.expression = expression;
    _this3.name = name;
    _this3.args = args;
    return _this3;
  }

  BindingBehavior.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.expression.evaluate(scope, lookupFunctions);
  };

  BindingBehavior.prototype.assign = function assign(scope, value, lookupFunctions) {
    return this.expression.assign(scope, value, lookupFunctions);
  };

  BindingBehavior.prototype.accept = function accept(visitor) {
    return visitor.visitBindingBehavior(this);
  };

  BindingBehavior.prototype.connect = function connect(binding, scope) {
    this.expression.connect(binding, scope);
  };

  BindingBehavior.prototype.bind = function bind(binding, scope, lookupFunctions) {
    if (this.expression.expression && this.expression.bind) {
      this.expression.bind(binding, scope, lookupFunctions);
    }
    var behavior = lookupFunctions.bindingBehaviors(this.name);
    if (!behavior) {
      throw new Error('No BindingBehavior named "' + this.name + '" was found!');
    }
    var behaviorKey = 'behavior-' + this.name;
    if (binding[behaviorKey]) {
      throw new Error('A binding behavior named "' + this.name + '" has already been applied to "' + this.expression + '"');
    }
    binding[behaviorKey] = behavior;
    behavior.bind.apply(behavior, [binding, scope].concat(evalList(scope, this.args, binding.lookupFunctions)));
  };

  BindingBehavior.prototype.unbind = function unbind(binding, scope) {
    var behaviorKey = 'behavior-' + this.name;
    binding[behaviorKey].unbind(binding, scope);
    binding[behaviorKey] = null;
    if (this.expression.expression && this.expression.unbind) {
      this.expression.unbind(binding, scope);
    }
  };

  return BindingBehavior;
}(Expression);

var ValueConverter = function (_Expression2) {
  _inherits(ValueConverter, _Expression2);

  function ValueConverter(expression, name, args) {
    

    var _this4 = _possibleConstructorReturn(this, _Expression2.call(this));

    _this4.expression = expression;
    _this4.name = name;
    _this4.args = args;
    _this4.allArgs = [expression].concat(args);
    return _this4;
  }

  ValueConverter.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var converter = lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }

    if ('toView' in converter) {
      return converter.toView.apply(converter, evalList(scope, this.allArgs, lookupFunctions));
    }

    return this.allArgs[0].evaluate(scope, lookupFunctions);
  };

  ValueConverter.prototype.assign = function assign(scope, value, lookupFunctions) {
    var converter = lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }

    if ('fromView' in converter) {
      value = converter.fromView.apply(converter, [value].concat(evalList(scope, this.args, lookupFunctions)));
    }

    return this.allArgs[0].assign(scope, value, lookupFunctions);
  };

  ValueConverter.prototype.accept = function accept(visitor) {
    return visitor.visitValueConverter(this);
  };

  ValueConverter.prototype.connect = function connect(binding, scope) {
    var expressions = this.allArgs;
    var i = expressions.length;
    while (i--) {
      expressions[i].connect(binding, scope);
    }
    var converter = binding.lookupFunctions.valueConverters(this.name);
    if (!converter) {
      throw new Error('No ValueConverter named "' + this.name + '" was found!');
    }
    var signals = converter.signals;
    if (signals === undefined) {
      return;
    }
    i = signals.length;
    while (i--) {
      connectBindingToSignal(binding, signals[i]);
    }
  };

  return ValueConverter;
}(Expression);

var Assign = function (_Expression3) {
  _inherits(Assign, _Expression3);

  function Assign(target, value) {
    

    var _this5 = _possibleConstructorReturn(this, _Expression3.call(this));

    _this5.target = target;
    _this5.value = value;
    _this5.isAssignable = true;
    return _this5;
  }

  Assign.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.target.assign(scope, this.value.evaluate(scope, lookupFunctions));
  };

  Assign.prototype.accept = function accept(vistor) {
    vistor.visitAssign(this);
  };

  Assign.prototype.connect = function connect(binding, scope) {};

  Assign.prototype.assign = function assign(scope, value) {
    this.value.assign(scope, value);
    this.target.assign(scope, value);
  };

  return Assign;
}(Expression);

var Conditional = function (_Expression4) {
  _inherits(Conditional, _Expression4);

  function Conditional(condition, yes, no) {
    

    var _this6 = _possibleConstructorReturn(this, _Expression4.call(this));

    _this6.condition = condition;
    _this6.yes = yes;
    _this6.no = no;
    return _this6;
  }

  Conditional.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return !!this.condition.evaluate(scope, lookupFunctions) ? this.yes.evaluate(scope, lookupFunctions) : this.no.evaluate(scope, lookupFunctions);
  };

  Conditional.prototype.accept = function accept(visitor) {
    return visitor.visitConditional(this);
  };

  Conditional.prototype.connect = function connect(binding, scope) {
    this.condition.connect(binding, scope);
    if (this.condition.evaluate(scope)) {
      this.yes.connect(binding, scope);
    } else {
      this.no.connect(binding, scope);
    }
  };

  return Conditional;
}(Expression);

var AccessThis = function (_Expression5) {
  _inherits(AccessThis, _Expression5);

  function AccessThis(ancestor) {
    

    var _this7 = _possibleConstructorReturn(this, _Expression5.call(this));

    _this7.ancestor = ancestor;
    return _this7;
  }

  AccessThis.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var oc = scope.overrideContext;
    var i = this.ancestor;
    while (i-- && oc) {
      oc = oc.parentOverrideContext;
    }
    return i < 1 && oc ? oc.bindingContext : undefined;
  };

  AccessThis.prototype.accept = function accept(visitor) {
    return visitor.visitAccessThis(this);
  };

  AccessThis.prototype.connect = function connect(binding, scope) {};

  return AccessThis;
}(Expression);

var AccessScope = function (_Expression6) {
  _inherits(AccessScope, _Expression6);

  function AccessScope(name, ancestor) {
    

    var _this8 = _possibleConstructorReturn(this, _Expression6.call(this));

    _this8.name = name;
    _this8.ancestor = ancestor;
    _this8.isAssignable = true;
    return _this8;
  }

  AccessScope.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var context = getContextFor(this.name, scope, this.ancestor);
    return context[this.name];
  };

  AccessScope.prototype.assign = function assign(scope, value) {
    var context = getContextFor(this.name, scope, this.ancestor);
    return context ? context[this.name] = value : undefined;
  };

  AccessScope.prototype.accept = function accept(visitor) {
    return visitor.visitAccessScope(this);
  };

  AccessScope.prototype.connect = function connect(binding, scope) {
    var context = getContextFor(this.name, scope, this.ancestor);
    binding.observeProperty(context, this.name);
  };

  return AccessScope;
}(Expression);

var AccessMember = function (_Expression7) {
  _inherits(AccessMember, _Expression7);

  function AccessMember(object, name) {
    

    var _this9 = _possibleConstructorReturn(this, _Expression7.call(this));

    _this9.object = object;
    _this9.name = name;
    _this9.isAssignable = true;
    return _this9;
  }

  AccessMember.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    return instance === null || instance === undefined ? instance : instance[this.name];
  };

  AccessMember.prototype.assign = function assign(scope, value) {
    var instance = this.object.evaluate(scope);

    if (instance === null || instance === undefined) {
      instance = {};
      this.object.assign(scope, instance);
    }

    instance[this.name] = value;
    return value;
  };

  AccessMember.prototype.accept = function accept(visitor) {
    return visitor.visitAccessMember(this);
  };

  AccessMember.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (obj) {
      binding.observeProperty(obj, this.name);
    }
  };

  return AccessMember;
}(Expression);

var AccessKeyed = function (_Expression8) {
  _inherits(AccessKeyed, _Expression8);

  function AccessKeyed(object, key) {
    

    var _this10 = _possibleConstructorReturn(this, _Expression8.call(this));

    _this10.object = object;
    _this10.key = key;
    _this10.isAssignable = true;
    return _this10;
  }

  AccessKeyed.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    var lookup = this.key.evaluate(scope, lookupFunctions);
    return getKeyed(instance, lookup);
  };

  AccessKeyed.prototype.assign = function assign(scope, value) {
    var instance = this.object.evaluate(scope);
    var lookup = this.key.evaluate(scope);
    return setKeyed(instance, lookup, value);
  };

  AccessKeyed.prototype.accept = function accept(visitor) {
    return visitor.visitAccessKeyed(this);
  };

  AccessKeyed.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (obj instanceof Object) {
      this.key.connect(binding, scope);
      var key = this.key.evaluate(scope);

      if (key !== null && key !== undefined && !(Array.isArray(obj) && typeof key === 'number')) {
        binding.observeProperty(obj, key);
      }
    }
  };

  return AccessKeyed;
}(Expression);

var CallScope = function (_Expression9) {
  _inherits(CallScope, _Expression9);

  function CallScope(name, args, ancestor) {
    

    var _this11 = _possibleConstructorReturn(this, _Expression9.call(this));

    _this11.name = name;
    _this11.args = args;
    _this11.ancestor = ancestor;
    return _this11;
  }

  CallScope.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var args = evalList(scope, this.args, lookupFunctions);
    var context = getContextFor(this.name, scope, this.ancestor);
    var func = getFunction(context, this.name, mustEvaluate);
    if (func) {
      return func.apply(context, args);
    }
    return undefined;
  };

  CallScope.prototype.accept = function accept(visitor) {
    return visitor.visitCallScope(this);
  };

  CallScope.prototype.connect = function connect(binding, scope) {
    var args = this.args;
    var i = args.length;
    while (i--) {
      args[i].connect(binding, scope);
    }
  };

  return CallScope;
}(Expression);

var CallMember = function (_Expression10) {
  _inherits(CallMember, _Expression10);

  function CallMember(object, name, args) {
    

    var _this12 = _possibleConstructorReturn(this, _Expression10.call(this));

    _this12.object = object;
    _this12.name = name;
    _this12.args = args;
    return _this12;
  }

  CallMember.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var instance = this.object.evaluate(scope, lookupFunctions);
    var args = evalList(scope, this.args, lookupFunctions);
    var func = getFunction(instance, this.name, mustEvaluate);
    if (func) {
      return func.apply(instance, args);
    }
    return undefined;
  };

  CallMember.prototype.accept = function accept(visitor) {
    return visitor.visitCallMember(this);
  };

  CallMember.prototype.connect = function connect(binding, scope) {
    this.object.connect(binding, scope);
    var obj = this.object.evaluate(scope);
    if (getFunction(obj, this.name, false)) {
      var args = this.args;
      var i = args.length;
      while (i--) {
        args[i].connect(binding, scope);
      }
    }
  };

  return CallMember;
}(Expression);

var CallFunction = function (_Expression11) {
  _inherits(CallFunction, _Expression11);

  function CallFunction(func, args) {
    

    var _this13 = _possibleConstructorReturn(this, _Expression11.call(this));

    _this13.func = func;
    _this13.args = args;
    return _this13;
  }

  CallFunction.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var func = this.func.evaluate(scope, lookupFunctions);
    if (typeof func === 'function') {
      return func.apply(null, evalList(scope, this.args, lookupFunctions));
    }
    if (!mustEvaluate && (func === null || func === undefined)) {
      return undefined;
    }
    throw new Error(this.func + ' is not a function');
  };

  CallFunction.prototype.accept = function accept(visitor) {
    return visitor.visitCallFunction(this);
  };

  CallFunction.prototype.connect = function connect(binding, scope) {
    this.func.connect(binding, scope);
    var func = this.func.evaluate(scope);
    if (typeof func === 'function') {
      var args = this.args;
      var i = args.length;
      while (i--) {
        args[i].connect(binding, scope);
      }
    }
  };

  return CallFunction;
}(Expression);

var Binary = function (_Expression12) {
  _inherits(Binary, _Expression12);

  function Binary(operation, left, right) {
    

    var _this14 = _possibleConstructorReturn(this, _Expression12.call(this));

    _this14.operation = operation;
    _this14.left = left;
    _this14.right = right;
    return _this14;
  }

  Binary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var left = this.left.evaluate(scope, lookupFunctions);

    switch (this.operation) {
      case '&&':
        return left && this.right.evaluate(scope, lookupFunctions);
      case '||':
        return left || this.right.evaluate(scope, lookupFunctions);
    }

    var right = this.right.evaluate(scope, lookupFunctions);

    switch (this.operation) {
      case '==':
        return left == right;
      case '===':
        return left === right;
      case '!=':
        return left != right;
      case '!==':
        return left !== right;
      case 'instanceof':
        return typeof right === 'function' && left instanceof right;
      case 'in':
        return (typeof right === 'undefined' ? 'undefined' : _typeof(right)) === 'object' && right !== null && left in right;
    }

    if (left === null || right === null || left === undefined || right === undefined) {
      switch (this.operation) {
        case '+':
          if (left !== null && left !== undefined) return left;
          if (right !== null && right !== undefined) return right;
          return 0;
        case '-':
          if (left !== null && left !== undefined) return left;
          if (right !== null && right !== undefined) return 0 - right;
          return 0;
      }

      return null;
    }

    switch (this.operation) {
      case '+':
        return autoConvertAdd(left, right);
      case '-':
        return left - right;
      case '*':
        return left * right;
      case '/':
        return left / right;
      case '%':
        return left % right;
      case '<':
        return left < right;
      case '>':
        return left > right;
      case '<=':
        return left <= right;
      case '>=':
        return left >= right;
      case '^':
        return left ^ right;
    }

    throw new Error('Internal error [' + this.operation + '] not handled');
  };

  Binary.prototype.accept = function accept(visitor) {
    return visitor.visitBinary(this);
  };

  Binary.prototype.connect = function connect(binding, scope) {
    this.left.connect(binding, scope);
    var left = this.left.evaluate(scope);
    if (this.operation === '&&' && !left || this.operation === '||' && left) {
      return;
    }
    this.right.connect(binding, scope);
  };

  return Binary;
}(Expression);

var Unary = function (_Expression13) {
  _inherits(Unary, _Expression13);

  function Unary(operation, expression) {
    

    var _this15 = _possibleConstructorReturn(this, _Expression13.call(this));

    _this15.operation = operation;
    _this15.expression = expression;
    return _this15;
  }

  Unary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    switch (this.operation) {
      case '!':
        return !this.expression.evaluate(scope, lookupFunctions);
      case 'typeof':
        return _typeof(this.expression.evaluate(scope, lookupFunctions));
      case 'void':
        return void this.expression.evaluate(scope, lookupFunctions);
    }

    throw new Error('Internal error [' + this.operation + '] not handled');
  };

  Unary.prototype.accept = function accept(visitor) {
    return visitor.visitPrefix(this);
  };

  Unary.prototype.connect = function connect(binding, scope) {
    this.expression.connect(binding, scope);
  };

  return Unary;
}(Expression);

var LiteralPrimitive = function (_Expression14) {
  _inherits(LiteralPrimitive, _Expression14);

  function LiteralPrimitive(value) {
    

    var _this16 = _possibleConstructorReturn(this, _Expression14.call(this));

    _this16.value = value;
    return _this16;
  }

  LiteralPrimitive.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.value;
  };

  LiteralPrimitive.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralPrimitive(this);
  };

  LiteralPrimitive.prototype.connect = function connect(binding, scope) {};

  return LiteralPrimitive;
}(Expression);

var LiteralString = function (_Expression15) {
  _inherits(LiteralString, _Expression15);

  function LiteralString(value) {
    

    var _this17 = _possibleConstructorReturn(this, _Expression15.call(this));

    _this17.value = value;
    return _this17;
  }

  LiteralString.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return this.value;
  };

  LiteralString.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralString(this);
  };

  LiteralString.prototype.connect = function connect(binding, scope) {};

  return LiteralString;
}(Expression);

var LiteralTemplate = function (_Expression16) {
  _inherits(LiteralTemplate, _Expression16);

  function LiteralTemplate(cooked, expressions, raw, tag) {
    

    var _this18 = _possibleConstructorReturn(this, _Expression16.call(this));

    _this18.cooked = cooked;
    _this18.expressions = expressions || [];
    _this18.length = _this18.expressions.length;
    _this18.tagged = tag !== undefined;
    if (_this18.tagged) {
      _this18.cooked.raw = raw;
      _this18.tag = tag;
      if (tag instanceof AccessScope) {
        _this18.contextType = 'Scope';
      } else if (tag instanceof AccessMember || tag instanceof AccessKeyed) {
        _this18.contextType = 'Object';
      } else {
        throw new Error(_this18.tag + ' is not a valid template tag');
      }
    }
    return _this18;
  }

  LiteralTemplate.prototype.getScopeContext = function getScopeContext(scope, lookupFunctions) {
    return getContextFor(this.tag.name, scope, this.tag.ancestor);
  };

  LiteralTemplate.prototype.getObjectContext = function getObjectContext(scope, lookupFunctions) {
    return this.tag.object.evaluate(scope, lookupFunctions);
  };

  LiteralTemplate.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
    var results = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      results[i] = this.expressions[i].evaluate(scope, lookupFunctions);
    }
    if (this.tagged) {
      var func = this.tag.evaluate(scope, lookupFunctions);
      if (typeof func === 'function') {
        var context = this['get' + this.contextType + 'Context'](scope, lookupFunctions);
        return func.call.apply(func, [context, this.cooked].concat(results));
      }
      if (!mustEvaluate) {
        return null;
      }
      throw new Error(this.tag + ' is not a function');
    }
    var result = this.cooked[0];
    for (var _i2 = 0; _i2 < this.length; _i2++) {
      result = String.prototype.concat(result, results[_i2], this.cooked[_i2 + 1]);
    }
    return result;
  };

  LiteralTemplate.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralTemplate(this);
  };

  LiteralTemplate.prototype.connect = function connect(binding, scope) {
    for (var i = 0; i < this.length; i++) {
      this.expressions[i].connect(binding, scope);
    }
    if (this.tagged) {
      this.tag.connect(binding, scope);
    }
  };

  return LiteralTemplate;
}(Expression);

var LiteralArray = function (_Expression17) {
  _inherits(LiteralArray, _Expression17);

  function LiteralArray(elements) {
    

    var _this19 = _possibleConstructorReturn(this, _Expression17.call(this));

    _this19.elements = elements;
    return _this19;
  }

  LiteralArray.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var elements = this.elements;
    var result = [];

    for (var i = 0, length = elements.length; i < length; ++i) {
      result[i] = elements[i].evaluate(scope, lookupFunctions);
    }

    return result;
  };

  LiteralArray.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralArray(this);
  };

  LiteralArray.prototype.connect = function connect(binding, scope) {
    var length = this.elements.length;
    for (var i = 0; i < length; i++) {
      this.elements[i].connect(binding, scope);
    }
  };

  return LiteralArray;
}(Expression);

var LiteralObject = function (_Expression18) {
  _inherits(LiteralObject, _Expression18);

  function LiteralObject(keys, values) {
    

    var _this20 = _possibleConstructorReturn(this, _Expression18.call(this));

    _this20.keys = keys;
    _this20.values = values;
    return _this20;
  }

  LiteralObject.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    var instance = {};
    var keys = this.keys;
    var values = this.values;

    for (var i = 0, length = keys.length; i < length; ++i) {
      instance[keys[i]] = values[i].evaluate(scope, lookupFunctions);
    }

    return instance;
  };

  LiteralObject.prototype.accept = function accept(visitor) {
    return visitor.visitLiteralObject(this);
  };

  LiteralObject.prototype.connect = function connect(binding, scope) {
    var length = this.keys.length;
    for (var i = 0; i < length; i++) {
      this.values[i].connect(binding, scope);
    }
  };

  return LiteralObject;
}(Expression);

function evalList(scope, list, lookupFunctions) {
  var length = list.length;
  var result = [];
  for (var i = 0; i < length; i++) {
    result[i] = list[i].evaluate(scope, lookupFunctions);
  }
  return result;
}

function autoConvertAdd(a, b) {
  if (a !== null && b !== null) {
    if (typeof a === 'string' && typeof b !== 'string') {
      return a + b.toString();
    }

    if (typeof a !== 'string' && typeof b === 'string') {
      return a.toString() + b;
    }

    return a + b;
  }

  if (a !== null) {
    return a;
  }

  if (b !== null) {
    return b;
  }

  return 0;
}

function getFunction(obj, name, mustExist) {
  var func = obj === null || obj === undefined ? null : obj[name];
  if (typeof func === 'function') {
    return func;
  }
  if (!mustExist && (func === null || func === undefined)) {
    return null;
  }
  throw new Error(name + ' is not a function');
}

function getKeyed(obj, key) {
  if (Array.isArray(obj)) {
    return obj[parseInt(key, 10)];
  } else if (obj) {
    return obj[key];
  } else if (obj === null || obj === undefined) {
    return undefined;
  }

  return obj[key];
}

function setKeyed(obj, key, value) {
  if (Array.isArray(obj)) {
    var index = parseInt(key, 10);

    if (obj.length <= index) {
      obj.length = index + 1;
    }

    obj[index] = value;
  } else {
    obj[key] = value;
  }

  return value;
}

var _Unparser = null;


if (typeof FEATURE_NO_UNPARSER === 'undefined') {
  _Unparser = function () {
    function Unparser(buffer) {
      

      this.buffer = buffer;
    }

    Unparser.unparse = function unparse(expression) {
      var buffer = [];
      var visitor = new _Unparser(buffer);

      expression.accept(visitor);

      return buffer.join('');
    };

    Unparser.prototype.write = function write(text) {
      this.buffer.push(text);
    };

    Unparser.prototype.writeArgs = function writeArgs(args) {
      this.write('(');

      for (var i = 0, length = args.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        args[i].accept(this);
      }

      this.write(')');
    };

    Unparser.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
      var args = behavior.args;

      behavior.expression.accept(this);
      this.write('&' + behavior.name);

      for (var i = 0, length = args.length; i < length; ++i) {
        this.write(':');
        args[i].accept(this);
      }
    };

    Unparser.prototype.visitValueConverter = function visitValueConverter(converter) {
      var args = converter.args;

      converter.expression.accept(this);
      this.write('|' + converter.name);

      for (var i = 0, length = args.length; i < length; ++i) {
        this.write(':');
        args[i].accept(this);
      }
    };

    Unparser.prototype.visitAssign = function visitAssign(assign) {
      assign.target.accept(this);
      this.write('=');
      assign.value.accept(this);
    };

    Unparser.prototype.visitConditional = function visitConditional(conditional) {
      conditional.condition.accept(this);
      this.write('?');
      conditional.yes.accept(this);
      this.write(':');
      conditional.no.accept(this);
    };

    Unparser.prototype.visitAccessThis = function visitAccessThis(access) {
      if (access.ancestor === 0) {
        this.write('$this');
        return;
      }
      this.write('$parent');
      var i = access.ancestor - 1;
      while (i--) {
        this.write('.$parent');
      }
    };

    Unparser.prototype.visitAccessScope = function visitAccessScope(access) {
      var i = access.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(access.name);
    };

    Unparser.prototype.visitAccessMember = function visitAccessMember(access) {
      access.object.accept(this);
      this.write('.' + access.name);
    };

    Unparser.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
      access.object.accept(this);
      this.write('[');
      access.key.accept(this);
      this.write(']');
    };

    Unparser.prototype.visitCallScope = function visitCallScope(call) {
      var i = call.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(call.name);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitCallFunction = function visitCallFunction(call) {
      call.func.accept(this);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitCallMember = function visitCallMember(call) {
      call.object.accept(this);
      this.write('.' + call.name);
      this.writeArgs(call.args);
    };

    Unparser.prototype.visitPrefix = function visitPrefix(prefix) {
      this.write('(' + prefix.operation);
      if (prefix.operation.charCodeAt(0) >= 97) {
        this.write(' ');
      }
      prefix.expression.accept(this);
      this.write(')');
    };

    Unparser.prototype.visitBinary = function visitBinary(binary) {
      binary.left.accept(this);
      if (binary.operation.charCodeAt(0) === 105) {
        this.write(' ' + binary.operation + ' ');
      } else {
        this.write(binary.operation);
      }
      binary.right.accept(this);
    };

    Unparser.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
      this.write('' + literal.value);
    };

    Unparser.prototype.visitLiteralArray = function visitLiteralArray(literal) {
      var elements = literal.elements;

      this.write('[');

      for (var i = 0, length = elements.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        elements[i].accept(this);
      }

      this.write(']');
    };

    Unparser.prototype.visitLiteralObject = function visitLiteralObject(literal) {
      var keys = literal.keys;
      var values = literal.values;

      this.write('{');

      for (var i = 0, length = keys.length; i < length; ++i) {
        if (i !== 0) {
          this.write(',');
        }

        this.write('\'' + keys[i] + '\':');
        values[i].accept(this);
      }

      this.write('}');
    };

    Unparser.prototype.visitLiteralString = function visitLiteralString(literal) {
      var escaped = literal.value.replace(/'/g, "\'");
      this.write('\'' + escaped + '\'');
    };

    Unparser.prototype.visitLiteralTemplate = function visitLiteralTemplate(literal) {
      var cooked = literal.cooked,
          expressions = literal.expressions;

      var length = expressions.length;
      this.write('`');
      this.write(cooked[0]);
      for (var i = 0; i < length; i++) {
        expressions[i].accept(this);
        this.write(cooked[i + 1]);
      }
      this.write('`');
    };

    return Unparser;
  }();
}

var ExpressionCloner = function () {
  function ExpressionCloner() {
    
  }

  ExpressionCloner.prototype.cloneExpressionArray = function cloneExpressionArray(array) {
    var clonedArray = [];
    var i = array.length;
    while (i--) {
      clonedArray[i] = array[i].accept(this);
    }
    return clonedArray;
  };

  ExpressionCloner.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
    return new BindingBehavior(behavior.expression.accept(this), behavior.name, this.cloneExpressionArray(behavior.args));
  };

  ExpressionCloner.prototype.visitValueConverter = function visitValueConverter(converter) {
    return new ValueConverter(converter.expression.accept(this), converter.name, this.cloneExpressionArray(converter.args));
  };

  ExpressionCloner.prototype.visitAssign = function visitAssign(assign) {
    return new Assign(assign.target.accept(this), assign.value.accept(this));
  };

  ExpressionCloner.prototype.visitConditional = function visitConditional(conditional) {
    return new Conditional(conditional.condition.accept(this), conditional.yes.accept(this), conditional.no.accept(this));
  };

  ExpressionCloner.prototype.visitAccessThis = function visitAccessThis(access) {
    return new AccessThis(access.ancestor);
  };

  ExpressionCloner.prototype.visitAccessScope = function visitAccessScope(access) {
    return new AccessScope(access.name, access.ancestor);
  };

  ExpressionCloner.prototype.visitAccessMember = function visitAccessMember(access) {
    return new AccessMember(access.object.accept(this), access.name);
  };

  ExpressionCloner.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
    return new AccessKeyed(access.object.accept(this), access.key.accept(this));
  };

  ExpressionCloner.prototype.visitCallScope = function visitCallScope(call) {
    return new CallScope(call.name, this.cloneExpressionArray(call.args), call.ancestor);
  };

  ExpressionCloner.prototype.visitCallFunction = function visitCallFunction(call) {
    return new CallFunction(call.func.accept(this), this.cloneExpressionArray(call.args));
  };

  ExpressionCloner.prototype.visitCallMember = function visitCallMember(call) {
    return new CallMember(call.object.accept(this), call.name, this.cloneExpressionArray(call.args));
  };

  ExpressionCloner.prototype.visitUnary = function visitUnary(unary) {
    return new Unary(prefix.operation, prefix.expression.accept(this));
  };

  ExpressionCloner.prototype.visitBinary = function visitBinary(binary) {
    return new Binary(binary.operation, binary.left.accept(this), binary.right.accept(this));
  };

  ExpressionCloner.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
    return new LiteralPrimitive(literal);
  };

  ExpressionCloner.prototype.visitLiteralArray = function visitLiteralArray(literal) {
    return new LiteralArray(this.cloneExpressionArray(literal.elements));
  };

  ExpressionCloner.prototype.visitLiteralObject = function visitLiteralObject(literal) {
    return new LiteralObject(literal.keys, this.cloneExpressionArray(literal.values));
  };

  ExpressionCloner.prototype.visitLiteralString = function visitLiteralString(literal) {
    return new LiteralString(literal.value);
  };

  ExpressionCloner.prototype.visitLiteralTemplate = function visitLiteralTemplate(literal) {
    return new LiteralTemplate(literal.cooked, this.cloneExpressionArray(literal.expressions), literal.raw, literal.tag && literal.tag.accept(this));
  };

  return ExpressionCloner;
}();

function cloneExpression(expression) {
  var visitor = new ExpressionCloner();
  return expression.accept(visitor);
}

var bindingMode = {
  oneTime: 0,
  toView: 1,
  oneWay: 1,
  twoWay: 2,
  fromView: 3
};

var Parser = function () {
  function Parser() {
    

    this.cache = Object.create(null);
  }

  Parser.prototype.parse = function parse(src) {
    src = src || '';

    return this.cache[src] || (this.cache[src] = new ParserImplementation(src).parseBindingBehavior());
  };

  return Parser;
}();

var fromCharCode = String.fromCharCode;

var ParserImplementation = function () {
  _createClass(ParserImplementation, [{
    key: 'raw',
    get: function get() {
      return this.src.slice(this.start, this.idx);
    }
  }]);

  function ParserImplementation(src) {
    

    this.idx = 0;

    this.start = 0;

    this.src = src;
    this.len = src.length;

    this.tkn = T$EOF;

    this.val = undefined;

    this.ch = src.charCodeAt(0);
  }

  ParserImplementation.prototype.parseBindingBehavior = function parseBindingBehavior() {
    this.nextToken();
    if (this.tkn & T$ExpressionTerminal) {
      this.err('Invalid start of expression');
    }
    var result = this.parseValueConverter();
    while (this.opt(T$Ampersand)) {
      result = new BindingBehavior(result, this.val, this.parseVariadicArgs());
    }
    if (this.tkn !== T$EOF) {
      this.err('Unconsumed token ' + this.raw);
    }
    return result;
  };

  ParserImplementation.prototype.parseValueConverter = function parseValueConverter() {
    var result = this.parseExpression();
    while (this.opt(T$Bar)) {
      result = new ValueConverter(result, this.val, this.parseVariadicArgs());
    }
    return result;
  };

  ParserImplementation.prototype.parseVariadicArgs = function parseVariadicArgs() {
    this.nextToken();
    var result = [];
    while (this.opt(T$Colon)) {
      result.push(this.parseExpression());
    }
    return result;
  };

  ParserImplementation.prototype.parseExpression = function parseExpression() {
    var exprStart = this.idx;
    var result = this.parseConditional();

    while (this.tkn === T$Eq) {
      if (!result.isAssignable) {
        this.err('Expression ' + this.src.slice(exprStart, this.start) + ' is not assignable');
      }
      this.nextToken();
      exprStart = this.idx;
      result = new Assign(result, this.parseConditional());
    }
    return result;
  };

  ParserImplementation.prototype.parseConditional = function parseConditional() {
    var result = this.parseBinary(0);

    if (this.opt(T$Question)) {
      var yes = this.parseExpression();
      this.expect(T$Colon);
      result = new Conditional(result, yes, this.parseExpression());
    }
    return result;
  };

  ParserImplementation.prototype.parseBinary = function parseBinary(minPrecedence) {
    var left = this.parseLeftHandSide(0);

    while (this.tkn & T$BinaryOp) {
      var opToken = this.tkn;
      if ((opToken & T$Precedence) <= minPrecedence) {
        break;
      }
      this.nextToken();
      left = new Binary(TokenValues[opToken & T$TokenMask], left, this.parseBinary(opToken & T$Precedence));
    }
    return left;
  };

  ParserImplementation.prototype.parseLeftHandSide = function parseLeftHandSide(context) {
    var result = void 0;

    primary: switch (this.tkn) {
      case T$Plus:
        this.nextToken();
        return this.parseLeftHandSide(0);
      case T$Minus:
        this.nextToken();
        return new Binary('-', new LiteralPrimitive(0), this.parseLeftHandSide(0));
      case T$Bang:
      case T$TypeofKeyword:
      case T$VoidKeyword:
        var op = TokenValues[this.tkn & T$TokenMask];
        this.nextToken();
        return new Unary(op, this.parseLeftHandSide(0));
      case T$ParentScope:
        {
          do {
            this.nextToken();
            context++;
            if (this.opt(T$Period)) {
              if (this.tkn === T$Period) {
                this.err();
              }
              continue;
            } else if (this.tkn & T$AccessScopeTerminal) {
              result = new AccessThis(context & C$Ancestor);

              context = context & C$ShorthandProp | C$This;
              break primary;
            } else {
              this.err();
            }
          } while (this.tkn === T$ParentScope);
        }

      case T$Identifier:
        {
          result = new AccessScope(this.val, context & C$Ancestor);
          this.nextToken();
          context = context & C$ShorthandProp | C$Scope;
          break;
        }
      case T$ThisScope:
        this.nextToken();
        result = new AccessThis(0);
        context = context & C$ShorthandProp | C$This;
        break;
      case T$LParen:
        this.nextToken();
        result = this.parseExpression();
        this.expect(T$RParen);
        context = C$Primary;
        break;
      case T$LBracket:
        {
          this.nextToken();
          var _elements = [];
          if (this.tkn !== T$RBracket) {
            do {
              _elements.push(this.parseExpression());
            } while (this.opt(T$Comma));
          }
          this.expect(T$RBracket);
          result = new LiteralArray(_elements);
          context = C$Primary;
          break;
        }
      case T$LBrace:
        {
          var keys = [];
          var values = [];
          this.nextToken();
          while (this.tkn !== T$RBrace) {
            if (this.tkn & T$IdentifierOrKeyword) {
              var ch = this.ch,
                  tkn = this.tkn,
                  idx = this.idx;

              keys.push(this.val);
              this.nextToken();
              if (this.opt(T$Colon)) {
                values.push(this.parseExpression());
              } else {
                this.ch = ch;
                this.tkn = tkn;
                this.idx = idx;
                values.push(this.parseLeftHandSide(C$ShorthandProp));
              }
            } else if (this.tkn & T$Literal) {
              keys.push(this.val);
              this.nextToken();
              this.expect(T$Colon);
              values.push(this.parseExpression());
            } else {
              this.err();
            }
            if (this.tkn !== T$RBrace) {
              this.expect(T$Comma);
            }
          }
          this.expect(T$RBrace);
          result = new LiteralObject(keys, values);
          context = C$Primary;
          break;
        }
      case T$StringLiteral:
        result = new LiteralString(this.val);
        this.nextToken();
        context = C$Primary;
        break;
      case T$TemplateTail:
        result = new LiteralTemplate([this.val]);
        this.nextToken();
        context = C$Primary;
        break;
      case T$TemplateContinuation:
        result = this.parseTemplate(0);
        context = C$Primary;
        break;
      case T$NumericLiteral:
        {
          result = new LiteralPrimitive(this.val);
          this.nextToken();

          break;
        }
      case T$NullKeyword:
      case T$UndefinedKeyword:
      case T$TrueKeyword:
      case T$FalseKeyword:
        result = new LiteralPrimitive(TokenValues[this.tkn & T$TokenMask]);
        this.nextToken();
        context = C$Primary;
        break;
      default:
        if (this.idx >= this.len) {
          this.err('Unexpected end of expression');
        } else {
          this.err();
        }
    }

    if (context & C$ShorthandProp) {
      return result;
    }

    var name = this.val;
    while (this.tkn & T$MemberOrCallExpression) {
      switch (this.tkn) {
        case T$Period:
          this.nextToken();
          if (!(this.tkn & T$IdentifierOrKeyword)) {
            this.err();
          }
          name = this.val;
          this.nextToken();

          context = context & C$Primary | (context & (C$This | C$Scope)) << 1 | context & C$Member | (context & C$Keyed) >> 1 | (context & C$Call) >> 2;
          if (this.tkn === T$LParen) {
            continue;
          }
          if (context & C$Scope) {
            result = new AccessScope(name, result.ancestor);
          } else {
            result = new AccessMember(result, name);
          }
          continue;
        case T$LBracket:
          this.nextToken();
          context = C$Keyed;
          result = new AccessKeyed(result, this.parseExpression());
          this.expect(T$RBracket);
          break;
        case T$LParen:
          this.nextToken();
          var args = [];
          while (this.tkn !== T$RParen) {
            args.push(this.parseExpression());
            if (!this.opt(T$Comma)) {
              break;
            }
          }
          this.expect(T$RParen);
          if (context & C$Scope) {
            result = new CallScope(name, args, result.ancestor);
          } else if (context & (C$Member | C$Primary)) {
            result = new CallMember(result, name, args);
          } else {
            result = new CallFunction(result, args);
          }
          context = C$Call;
          break;
        case T$TemplateTail:
          result = new LiteralTemplate([this.val], [], [this.raw], result);
          this.nextToken();
          break;
        case T$TemplateContinuation:
          result = this.parseTemplate(context | C$Tagged, result);
      }
    }

    return result;
  };

  ParserImplementation.prototype.parseTemplate = function parseTemplate(context, func) {
    var cooked = [this.val];
    var raw = context & C$Tagged ? [this.raw] : undefined;
    this.expect(T$TemplateContinuation);
    var expressions = [this.parseExpression()];

    while ((this.tkn = this.scanTemplateTail()) !== T$TemplateTail) {
      cooked.push(this.val);
      if (context & C$Tagged) {
        raw.push(this.raw);
      }
      this.expect(T$TemplateContinuation);
      expressions.push(this.parseExpression());
    }

    cooked.push(this.val);
    if (context & C$Tagged) {
      raw.push(this.raw);
    }
    this.nextToken();
    return new LiteralTemplate(cooked, expressions, raw, func);
  };

  ParserImplementation.prototype.nextToken = function nextToken() {
    while (this.idx < this.len) {
      if (this.ch <= 0x20) {
        this.next();
        continue;
      }
      this.start = this.idx;
      if (this.ch === 0x24 || this.ch >= 0x61 && this.ch <= 0x7A) {
        this.tkn = this.scanIdentifier();
        return;
      }

      if ((this.tkn = CharScanners[this.ch](this)) !== null) {
        return;
      }
    }
    this.tkn = T$EOF;
  };

  ParserImplementation.prototype.next = function next() {
    return this.ch = this.src.charCodeAt(++this.idx);
  };

  ParserImplementation.prototype.scanIdentifier = function scanIdentifier() {
    while (AsciiIdParts.has(this.next()) || this.ch > 0x7F && IdParts[this.ch]) {}

    return KeywordLookup[this.val = this.raw] || T$Identifier;
  };

  ParserImplementation.prototype.scanNumber = function scanNumber(isFloat) {
    if (isFloat) {
      this.val = 0;
    } else {
      this.val = this.ch - 0x30;
      while (this.next() <= 0x39 && this.ch >= 0x30) {
        this.val = this.val * 10 + this.ch - 0x30;
      }
    }

    if (isFloat || this.ch === 0x2E) {
      if (!isFloat) {
        this.next();
      }
      var start = this.idx;
      var value = this.ch - 0x30;
      while (this.next() <= 0x39 && this.ch >= 0x30) {
        value = value * 10 + this.ch - 0x30;
      }
      this.val = this.val + value / Math.pow(10, this.idx - start);
    }

    if (this.ch === 0x65 || this.ch === 0x45) {
      var _start = this.idx;

      this.next();
      if (this.ch === 0x2D || this.ch === 0x2B) {
        this.next();
      }

      if (!(this.ch >= 0x30 && this.ch <= 0x39)) {
        this.idx = _start;
        this.err('Invalid exponent');
      }
      while (this.next() <= 0x39 && this.ch >= 0x30) {}
      this.val = parseFloat(this.src.slice(this.start, this.idx));
    }

    return T$NumericLiteral;
  };

  ParserImplementation.prototype.scanString = function scanString() {
    var quote = this.ch;
    this.next();

    var buffer = void 0;
    var marker = this.idx;

    while (this.ch !== quote) {
      if (this.ch === 0x5C) {
        if (!buffer) {
          buffer = [];
        }

        buffer.push(this.src.slice(marker, this.idx));

        this.next();

        var _unescaped = void 0;

        if (this.ch === 0x75) {
          this.next();

          if (this.idx + 4 < this.len) {
            var hex = this.src.slice(this.idx, this.idx + 4);

            if (!/[A-Z0-9]{4}/i.test(hex)) {
              this.err('Invalid unicode escape [\\u' + hex + ']');
            }

            _unescaped = parseInt(hex, 16);
            this.idx += 4;
            this.ch = this.src.charCodeAt(this.idx);
          } else {
            this.err();
          }
        } else {
          _unescaped = unescape(this.ch);
          this.next();
        }

        buffer.push(fromCharCode(_unescaped));
        marker = this.idx;
      } else if (this.ch === 0 || this.idx >= this.len) {
        this.err('Unterminated quote');
      } else {
        this.next();
      }
    }

    var last = this.src.slice(marker, this.idx);
    this.next();
    var unescaped = last;

    if (buffer !== null && buffer !== undefined) {
      buffer.push(last);
      unescaped = buffer.join('');
    }

    this.val = unescaped;
    return T$StringLiteral;
  };

  ParserImplementation.prototype.scanTemplate = function scanTemplate() {
    var tail = true;
    var result = '';

    while (this.next() !== 0x60) {
      if (this.ch === 0x24) {
        if (this.idx + 1 < this.len && this.src.charCodeAt(this.idx + 1) === 0x7B) {
          this.idx++;
          tail = false;
          break;
        } else {
          result += '$';
        }
      } else if (this.ch === 0x5C) {
        result += fromCharCode(unescape(this.next()));
      } else if (this.ch === 0 || this.idx >= this.len) {
        this.err('Unterminated template literal');
      } else {
        result += fromCharCode(this.ch);
      }
    }

    this.next();
    this.val = result;
    if (tail) {
      return T$TemplateTail;
    }
    return T$TemplateContinuation;
  };

  ParserImplementation.prototype.scanTemplateTail = function scanTemplateTail() {
    if (this.idx >= this.len) {
      this.err('Unterminated template');
    }
    this.idx--;
    return this.scanTemplate();
  };

  ParserImplementation.prototype.err = function err() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Unexpected token ' + this.raw;
    var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.start;

    throw new Error('Parser Error: ' + message + ' at column ' + column + ' in expression [' + this.src + ']');
  };

  ParserImplementation.prototype.opt = function opt(token) {
    if (this.tkn === token) {
      this.nextToken();
      return true;
    }

    return false;
  };

  ParserImplementation.prototype.expect = function expect(token) {
    if (this.tkn === token) {
      this.nextToken();
    } else {
      this.err('Missing expected token ' + TokenValues[token & T$TokenMask], this.idx);
    }
  };

  return ParserImplementation;
}();

function unescape(code) {
  switch (code) {
    case 0x66:
      return 0xC;
    case 0x6E:
      return 0xA;
    case 0x72:
      return 0xD;
    case 0x74:
      return 0x9;
    case 0x76:
      return 0xB;
    default:
      return code;
  }
}

var C$This = 1 << 10;
var C$Scope = 1 << 11;
var C$Member = 1 << 12;
var C$Keyed = 1 << 13;
var C$Call = 1 << 14;
var C$Primary = 1 << 15;
var C$ShorthandProp = 1 << 16;
var C$Tagged = 1 << 17;

var C$Ancestor = (1 << 9) - 1;

var T$TokenMask = (1 << 6) - 1;

var T$PrecShift = 6;

var T$Precedence = 7 << T$PrecShift;

var T$ExpressionTerminal = 1 << 11;

var T$ClosingToken = 1 << 12;

var T$OpeningToken = 1 << 13;

var T$AccessScopeTerminal = 1 << 14;
var T$Keyword = 1 << 15;
var T$EOF = 1 << 16 | T$AccessScopeTerminal | T$ExpressionTerminal;
var T$Identifier = 1 << 17;
var T$IdentifierOrKeyword = T$Identifier | T$Keyword;
var T$Literal = 1 << 18;
var T$NumericLiteral = 1 << 19 | T$Literal;
var T$StringLiteral = 1 << 20 | T$Literal;
var T$BinaryOp = 1 << 21;

var T$UnaryOp = 1 << 22;

var T$MemberExpression = 1 << 23;

var T$MemberOrCallExpression = 1 << 24;
var T$TemplateTail = 1 << 25 | T$MemberOrCallExpression;
var T$TemplateContinuation = 1 << 26 | T$MemberOrCallExpression;

var T$FalseKeyword = 0 | T$Keyword | T$Literal;
var T$TrueKeyword = 1 | T$Keyword | T$Literal;
var T$NullKeyword = 2 | T$Keyword | T$Literal;
var T$UndefinedKeyword = 3 | T$Keyword | T$Literal;
var T$ThisScope = 4 | T$IdentifierOrKeyword;
var T$ParentScope = 5 | T$IdentifierOrKeyword;

var T$LParen = 6 | T$OpeningToken | T$AccessScopeTerminal | T$MemberOrCallExpression;
var T$LBrace = 7 | T$OpeningToken;
var T$Period = 8 | T$MemberExpression | T$MemberOrCallExpression;
var T$RBrace = 9 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;
var T$RParen = 10 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;
var T$Comma = 11 | T$AccessScopeTerminal;
var T$LBracket = 12 | T$OpeningToken | T$AccessScopeTerminal | T$MemberExpression | T$MemberOrCallExpression;
var T$RBracket = 13 | T$ClosingToken | T$ExpressionTerminal;
var T$Colon = 14 | T$AccessScopeTerminal;
var T$Question = 15;

var T$Ampersand = 18 | T$AccessScopeTerminal;
var T$Bar = 19 | T$AccessScopeTerminal;
var T$BarBar = 20 | 1 << T$PrecShift | T$BinaryOp;
var T$AmpersandAmpersand = 21 | 2 << T$PrecShift | T$BinaryOp;
var T$Caret = 22 | 3 << T$PrecShift | T$BinaryOp;
var T$EqEq = 23 | 4 << T$PrecShift | T$BinaryOp;
var T$BangEq = 24 | 4 << T$PrecShift | T$BinaryOp;
var T$EqEqEq = 25 | 4 << T$PrecShift | T$BinaryOp;
var T$BangEqEq = 26 | 4 << T$PrecShift | T$BinaryOp;
var T$Lt = 27 | 5 << T$PrecShift | T$BinaryOp;
var T$Gt = 28 | 5 << T$PrecShift | T$BinaryOp;
var T$LtEq = 29 | 5 << T$PrecShift | T$BinaryOp;
var T$GtEq = 30 | 5 << T$PrecShift | T$BinaryOp;
var T$InKeyword = 31 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;
var T$InstanceOfKeyword = 32 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;
var T$Plus = 33 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;
var T$Minus = 34 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;
var T$TypeofKeyword = 35 | T$UnaryOp | T$Keyword;
var T$VoidKeyword = 36 | T$UnaryOp | T$Keyword;
var T$Star = 37 | 7 << T$PrecShift | T$BinaryOp;
var T$Percent = 38 | 7 << T$PrecShift | T$BinaryOp;
var T$Slash = 39 | 7 << T$PrecShift | T$BinaryOp;
var T$Eq = 40;
var T$Bang = 41 | T$UnaryOp;

var KeywordLookup = Object.create(null);
KeywordLookup.true = T$TrueKeyword;
KeywordLookup.null = T$NullKeyword;
KeywordLookup.false = T$FalseKeyword;
KeywordLookup.undefined = T$UndefinedKeyword;
KeywordLookup.$this = T$ThisScope;
KeywordLookup.$parent = T$ParentScope;
KeywordLookup.in = T$InKeyword;
KeywordLookup.instanceof = T$InstanceOfKeyword;
KeywordLookup.typeof = T$TypeofKeyword;
KeywordLookup.void = T$VoidKeyword;

var TokenValues = [false, true, null, undefined, '$this', '$parent', '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\'', '"', '&', '|', '||', '&&', '^', '==', '!=', '===', '!==', '<', '>', '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!'];

var codes = {
  AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],
  IdStart: [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],
  Digit: [0x30, 0x3A],
  Skip: [0, 0x21, 0x7F, 0xA1]
};

function decompress(lookup, set, compressed, value) {
  var rangeCount = compressed.length;
  for (var i = 0; i < rangeCount; i += 2) {
    var start = compressed[i];
    var end = compressed[i + 1];
    end = end > 0 ? end : start + 1;
    if (lookup) {
      var j = start;
      while (j < end) {
        lookup[j] = value;
        j++;
      }
    }
    if (set) {
      for (var ch = start; ch < end; ch++) {
        set.add(ch);
      }
    }
  }
}

function returnToken(token) {
  return function (p) {
    p.next();
    return token;
  };
}
function unexpectedCharacter(p) {
  p.err('Unexpected character [' + fromCharCode(p.ch) + ']');
  return null;
}

var AsciiIdParts = new Set();
decompress(null, AsciiIdParts, codes.AsciiIdPart, true);

var IdParts = new Uint8Array(0xFFFF);
decompress(IdParts, null, codes.IdStart, 1);
decompress(IdParts, null, codes.Digit, 1);

var CharScanners = new Array(0xFFFF);
var ci = 0;
while (ci < 0xFFFF) {
  CharScanners[ci] = unexpectedCharacter;
  ci++;
}

decompress(CharScanners, null, codes.Skip, function (p) {
  p.next();
  return null;
});
decompress(CharScanners, null, codes.IdStart, function (p) {
  return p.scanIdentifier();
});
decompress(CharScanners, null, codes.Digit, function (p) {
  return p.scanNumber(false);
});

CharScanners[0x22] = CharScanners[0x27] = function (p) {
  return p.scanString();
};
CharScanners[0x60] = function (p) {
  return p.scanTemplate();
};

CharScanners[0x21] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Bang;
  }
  if (p.next() !== 0x3D) {
    return T$BangEq;
  }
  p.next();
  return T$BangEqEq;
};

CharScanners[0x3D] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Eq;
  }
  if (p.next() !== 0x3D) {
    return T$EqEq;
  }
  p.next();
  return T$EqEqEq;
};

CharScanners[0x26] = function (p) {
  if (p.next() !== 0x26) {
    return T$Ampersand;
  }
  p.next();
  return T$AmpersandAmpersand;
};

CharScanners[0x7C] = function (p) {
  if (p.next() !== 0x7C) {
    return T$Bar;
  }
  p.next();
  return T$BarBar;
};

CharScanners[0x2E] = function (p) {
  if (p.next() <= 0x39 && p.ch >= 0x30) {
    return p.scanNumber(true);
  }
  return T$Period;
};

CharScanners[0x3C] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Lt;
  }
  p.next();
  return T$LtEq;
};

CharScanners[0x3E] = function (p) {
  if (p.next() !== 0x3D) {
    return T$Gt;
  }
  p.next();
  return T$GtEq;
};

CharScanners[0x25] = returnToken(T$Percent);
CharScanners[0x28] = returnToken(T$LParen);
CharScanners[0x29] = returnToken(T$RParen);
CharScanners[0x2A] = returnToken(T$Star);
CharScanners[0x2B] = returnToken(T$Plus);
CharScanners[0x2C] = returnToken(T$Comma);
CharScanners[0x2D] = returnToken(T$Minus);
CharScanners[0x2F] = returnToken(T$Slash);
CharScanners[0x3A] = returnToken(T$Colon);
CharScanners[0x3F] = returnToken(T$Question);
CharScanners[0x5B] = returnToken(T$LBracket);
CharScanners[0x5D] = returnToken(T$RBracket);
CharScanners[0x5E] = returnToken(T$Caret);
CharScanners[0x7B] = returnToken(T$LBrace);
CharScanners[0x7D] = returnToken(T$RBrace);

var mapProto = Map.prototype;

function _getMapObserver(taskQueue, map) {
  return ModifyMapObserver.for(taskQueue, map);
}

var ModifyMapObserver = function (_ModifyCollectionObse2) {
  _inherits(ModifyMapObserver, _ModifyCollectionObse2);

  function ModifyMapObserver(taskQueue, map) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse2.call(this, taskQueue, map));
  }

  ModifyMapObserver.for = function _for(taskQueue, map) {
    if (!('__map_observer__' in map)) {
      Reflect.defineProperty(map, '__map_observer__', {
        value: ModifyMapObserver.create(taskQueue, map),
        enumerable: false, configurable: false
      });
    }
    return map.__map_observer__;
  };

  ModifyMapObserver.create = function create(taskQueue, map) {
    var observer = new ModifyMapObserver(taskQueue, map);

    var proto = mapProto;
    if (proto.set !== map.set || proto.delete !== map.delete || proto.clear !== map.clear) {
      proto = {
        set: map.set,
        delete: map.delete,
        clear: map.clear
      };
    }

    map.set = function () {
      var hasValue = map.has(arguments[0]);
      var type = hasValue ? 'update' : 'add';
      var oldValue = map.get(arguments[0]);
      var methodCallResult = proto.set.apply(map, arguments);
      if (!hasValue || oldValue !== map.get(arguments[0])) {
        observer.addChangeRecord({
          type: type,
          object: map,
          key: arguments[0],
          oldValue: oldValue
        });
      }
      return methodCallResult;
    };

    map.delete = function () {
      var hasValue = map.has(arguments[0]);
      var oldValue = map.get(arguments[0]);
      var methodCallResult = proto.delete.apply(map, arguments);
      if (hasValue) {
        observer.addChangeRecord({
          type: 'delete',
          object: map,
          key: arguments[0],
          oldValue: oldValue
        });
      }
      return methodCallResult;
    };

    map.clear = function () {
      var methodCallResult = proto.clear.apply(map, arguments);
      observer.addChangeRecord({
        type: 'clear',
        object: map
      });
      return methodCallResult;
    };

    return observer;
  };

  return ModifyMapObserver;
}(ModifyCollectionObserver);

var emLogger = __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"]('event-manager');

function findOriginalEventTarget(event) {
  return event.composedPath && event.composedPath()[0] || event.deepPath && event.deepPath()[0] || event.path && event.path[0] || event.target;
}

function stopPropagation() {
  this.standardStopPropagation();
  this.propagationStopped = true;
}

function handleCapturedEvent(event) {
  event.propagationStopped = false;
  var target = findOriginalEventTarget(event);

  var orderedCallbacks = [];

  while (target) {
    if (target.capturedCallbacks) {
      var callback = target.capturedCallbacks[event.type];
      if (callback) {
        if (event.stopPropagation !== stopPropagation) {
          event.standardStopPropagation = event.stopPropagation;
          event.stopPropagation = stopPropagation;
        }
        orderedCallbacks.push(callback);
      }
    }
    target = target.parentNode;
  }
  for (var i = orderedCallbacks.length - 1; i >= 0 && !event.propagationStopped; i--) {
    var orderedCallback = orderedCallbacks[i];
    if ('handleEvent' in orderedCallback) {
      orderedCallback.handleEvent(event);
    } else {
      orderedCallback(event);
    }
  }
}

var CapturedHandlerEntry = function () {
  function CapturedHandlerEntry(eventName) {
    

    this.eventName = eventName;
    this.count = 0;
  }

  CapturedHandlerEntry.prototype.increment = function increment() {
    this.count++;

    if (this.count === 1) {
      __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].addEventListener(this.eventName, handleCapturedEvent, true);
    }
  };

  CapturedHandlerEntry.prototype.decrement = function decrement() {
    if (this.count === 0) {
      emLogger.warn('The same EventListener was disposed multiple times.');
    } else if (--this.count === 0) {
      __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].removeEventListener(this.eventName, handleCapturedEvent, true);
    }
  };

  return CapturedHandlerEntry;
}();

var DelegateHandlerEntry = function () {
  function DelegateHandlerEntry(eventName, eventManager) {
    

    this.eventName = eventName;
    this.count = 0;
    this.eventManager = eventManager;
  }

  DelegateHandlerEntry.prototype.handleEvent = function handleEvent(event) {
    event.propagationStopped = false;
    var target = findOriginalEventTarget(event);

    while (target && !event.propagationStopped) {
      if (target.delegatedCallbacks) {
        var callback = target.delegatedCallbacks[event.type];
        if (callback) {
          if (event.stopPropagation !== stopPropagation) {
            event.standardStopPropagation = event.stopPropagation;
            event.stopPropagation = stopPropagation;
          }
          if ('handleEvent' in callback) {
            callback.handleEvent(event);
          } else {
            callback(event);
          }
        }
      }

      var parent = target.parentNode;
      var shouldEscapeShadowRoot = this.eventManager.escapeShadowRoot && parent instanceof ShadowRoot;

      target = shouldEscapeShadowRoot ? parent.host : parent;
    }
  };

  DelegateHandlerEntry.prototype.increment = function increment() {
    this.count++;

    if (this.count === 1) {
      __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].addEventListener(this.eventName, this, false);
    }
  };

  DelegateHandlerEntry.prototype.decrement = function decrement() {
    if (this.count === 0) {
      emLogger.warn('The same EventListener was disposed multiple times.');
    } else if (--this.count === 0) {
      __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].removeEventListener(this.eventName, this, false);
    }
  };

  return DelegateHandlerEntry;
}();

var DelegationEntryHandler = function () {
  function DelegationEntryHandler(entry, lookup, targetEvent) {
    

    this.entry = entry;
    this.lookup = lookup;
    this.targetEvent = targetEvent;
  }

  DelegationEntryHandler.prototype.dispose = function dispose() {
    if (this.lookup[this.targetEvent]) {
      this.entry.decrement();
      this.lookup[this.targetEvent] = null;
    } else {
      emLogger.warn('Calling .dispose() on already disposed eventListener');
    }
  };

  return DelegationEntryHandler;
}();

var EventHandler = function () {
  function EventHandler(target, targetEvent, callback) {
    

    this.target = target;
    this.targetEvent = targetEvent;
    this.callback = callback;
  }

  EventHandler.prototype.dispose = function dispose() {
    this.target.removeEventListener(this.targetEvent, this.callback);
  };

  return EventHandler;
}();

var DefaultEventStrategy = function () {
  function DefaultEventStrategy(eventManager) {
    

    this.delegatedHandlers = {};
    this.capturedHandlers = {};

    this.eventManager = eventManager;
  }

  DefaultEventStrategy.prototype.subscribe = function subscribe(target, targetEvent, callback, strategy, disposable) {
    var delegatedHandlers = void 0;
    var capturedHandlers = void 0;
    var handlerEntry = void 0;

    if (strategy === delegationStrategy.bubbling) {
      delegatedHandlers = this.delegatedHandlers;
      handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new DelegateHandlerEntry(targetEvent, this.eventManager));
      var delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});
      if (!delegatedCallbacks[targetEvent]) {
        handlerEntry.increment();
      } else {
        emLogger.warn('Overriding previous callback for event listener', { event: targetEvent, callback: callback, previousCallback: delegatedCallbacks[targetEvent] });
      }
      delegatedCallbacks[targetEvent] = callback;

      if (disposable === true) {
        return new DelegationEntryHandler(handlerEntry, delegatedCallbacks, targetEvent);
      }

      return function () {
        handlerEntry.decrement();
        delegatedCallbacks[targetEvent] = null;
      };
    }
    if (strategy === delegationStrategy.capturing) {
      capturedHandlers = this.capturedHandlers;
      handlerEntry = capturedHandlers[targetEvent] || (capturedHandlers[targetEvent] = new CapturedHandlerEntry(targetEvent));
      var capturedCallbacks = target.capturedCallbacks || (target.capturedCallbacks = {});
      if (!capturedCallbacks[targetEvent]) {
        handlerEntry.increment();
      } else {
        emLogger.error('already have a callback for event', { event: targetEvent, callback: callback });
      }
      capturedCallbacks[targetEvent] = callback;

      if (disposable === true) {
        return new DelegationEntryHandler(handlerEntry, capturedCallbacks, targetEvent);
      }

      return function () {
        handlerEntry.decrement();
        capturedCallbacks[targetEvent] = null;
      };
    }

    target.addEventListener(targetEvent, callback);

    if (disposable === true) {
      return new EventHandler(target, targetEvent, callback);
    }

    return function () {
      target.removeEventListener(targetEvent, callback);
    };
  };

  return DefaultEventStrategy;
}();

var delegationStrategy = {
  none: 0,
  capturing: 1,
  bubbling: 2
};

var EventManager = function () {
  function EventManager() {
    var escapeShadowRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    

    this.elementHandlerLookup = {};
    this.eventStrategyLookup = {};
    this.escapeShadowRoot = escapeShadowRoot;

    this.registerElementConfig({
      tagName: 'input',
      properties: {
        value: ['change', 'input'],
        checked: ['change', 'input'],
        files: ['change', 'input']
      }
    });

    this.registerElementConfig({
      tagName: 'textarea',
      properties: {
        value: ['change', 'input']
      }
    });

    this.registerElementConfig({
      tagName: 'select',
      properties: {
        value: ['change']
      }
    });

    this.registerElementConfig({
      tagName: 'content editable',
      properties: {
        value: ['change', 'input', 'blur', 'keyup', 'paste']
      }
    });

    this.registerElementConfig({
      tagName: 'scrollable element',
      properties: {
        scrollTop: ['scroll'],
        scrollLeft: ['scroll']
      }
    });

    this.defaultEventStrategy = new DefaultEventStrategy(this);
  }

  EventManager.prototype.registerElementConfig = function registerElementConfig(config) {
    var tagName = config.tagName.toLowerCase();
    var properties = config.properties;
    var propertyName = void 0;

    var lookup = this.elementHandlerLookup[tagName] = {};

    for (propertyName in properties) {
      if (properties.hasOwnProperty(propertyName)) {
        lookup[propertyName] = properties[propertyName];
      }
    }
  };

  EventManager.prototype.registerEventStrategy = function registerEventStrategy(eventName, strategy) {
    this.eventStrategyLookup[eventName] = strategy;
  };

  EventManager.prototype.getElementHandler = function getElementHandler(target, propertyName) {
    var tagName = void 0;
    var lookup = this.elementHandlerLookup;

    if (target.tagName) {
      tagName = target.tagName.toLowerCase();

      if (lookup[tagName] && lookup[tagName][propertyName]) {
        return new EventSubscriber(lookup[tagName][propertyName]);
      }

      if (propertyName === 'textContent' || propertyName === 'innerHTML') {
        return new EventSubscriber(lookup['content editable'].value);
      }

      if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {
        return new EventSubscriber(lookup['scrollable element'][propertyName]);
      }
    }

    return null;
  };

  EventManager.prototype.addEventListener = function addEventListener(target, targetEvent, callbackOrListener, delegate, disposable) {
    return (this.eventStrategyLookup[targetEvent] || this.defaultEventStrategy).subscribe(target, targetEvent, callbackOrListener, delegate, disposable);
  };

  return EventManager;
}();

var EventSubscriber = function () {
  function EventSubscriber(events) {
    

    this.events = events;
    this.element = null;
    this.handler = null;
  }

  EventSubscriber.prototype.subscribe = function subscribe(element, callbackOrListener) {
    this.element = element;
    this.handler = callbackOrListener;

    var events = this.events;
    for (var i = 0, ii = events.length; ii > i; ++i) {
      element.addEventListener(events[i], callbackOrListener);
    }
  };

  EventSubscriber.prototype.dispose = function dispose() {
    if (this.element === null) {
      return;
    }
    var element = this.element;
    var callbackOrListener = this.handler;
    var events = this.events;
    for (var i = 0, ii = events.length; ii > i; ++i) {
      element.removeEventListener(events[i], callbackOrListener);
    }
    this.element = this.handler = null;
  };

  return EventSubscriber;
}();

var DirtyChecker = function () {
  function DirtyChecker() {
    

    this.tracked = [];
    this.checkDelay = 120;
  }

  DirtyChecker.prototype.addProperty = function addProperty(property) {
    var tracked = this.tracked;

    tracked.push(property);

    if (tracked.length === 1) {
      this.scheduleDirtyCheck();
    }
  };

  DirtyChecker.prototype.removeProperty = function removeProperty(property) {
    var tracked = this.tracked;
    tracked.splice(tracked.indexOf(property), 1);
  };

  DirtyChecker.prototype.scheduleDirtyCheck = function scheduleDirtyCheck() {
    var _this22 = this;

    setTimeout(function () {
      return _this22.check();
    }, this.checkDelay);
  };

  DirtyChecker.prototype.check = function check() {
    var tracked = this.tracked;
    var i = tracked.length;

    while (i--) {
      var current = tracked[i];

      if (current.isDirty()) {
        current.call();
      }
    }

    if (tracked.length) {
      this.scheduleDirtyCheck();
    }
  };

  return DirtyChecker;
}();

var DirtyCheckProperty = (_dec5 = subscriberCollection(), _dec5(_class5 = function () {
  function DirtyCheckProperty(dirtyChecker, obj, propertyName) {
    

    this.dirtyChecker = dirtyChecker;
    this.obj = obj;
    this.propertyName = propertyName;
  }

  DirtyCheckProperty.prototype.getValue = function getValue() {
    return this.obj[this.propertyName];
  };

  DirtyCheckProperty.prototype.setValue = function setValue(newValue) {
    this.obj[this.propertyName] = newValue;
  };

  DirtyCheckProperty.prototype.call = function call() {
    var oldValue = this.oldValue;
    var newValue = this.getValue();

    this.callSubscribers(newValue, oldValue);

    this.oldValue = newValue;
  };

  DirtyCheckProperty.prototype.isDirty = function isDirty() {
    return this.oldValue !== this.obj[this.propertyName];
  };

  DirtyCheckProperty.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.oldValue = this.getValue();
      this.dirtyChecker.addProperty(this);
    }
    this.addSubscriber(context, callable);
  };

  DirtyCheckProperty.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.dirtyChecker.removeProperty(this);
    }
  };

  return DirtyCheckProperty;
}()) || _class5);

var logger = __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"]('property-observation');

var propertyAccessor = {
  getValue: function getValue(obj, propertyName) {
    return obj[propertyName];
  },
  setValue: function setValue(value, obj, propertyName) {
    obj[propertyName] = value;
  }
};

var PrimitiveObserver = function () {
  function PrimitiveObserver(primitive, propertyName) {
    

    this.doNotCache = true;

    this.primitive = primitive;
    this.propertyName = propertyName;
  }

  PrimitiveObserver.prototype.getValue = function getValue() {
    return this.primitive[this.propertyName];
  };

  PrimitiveObserver.prototype.setValue = function setValue() {
    var type = _typeof(this.primitive);
    throw new Error('The ' + this.propertyName + ' property of a ' + type + ' (' + this.primitive + ') cannot be assigned.');
  };

  PrimitiveObserver.prototype.subscribe = function subscribe() {};

  PrimitiveObserver.prototype.unsubscribe = function unsubscribe() {};

  return PrimitiveObserver;
}();

var SetterObserver = (_dec6 = subscriberCollection(), _dec6(_class7 = function () {
  function SetterObserver(taskQueue, obj, propertyName) {
    

    this.taskQueue = taskQueue;
    this.obj = obj;
    this.propertyName = propertyName;
    this.queued = false;
    this.observing = false;
  }

  SetterObserver.prototype.getValue = function getValue() {
    return this.obj[this.propertyName];
  };

  SetterObserver.prototype.setValue = function setValue(newValue) {
    this.obj[this.propertyName] = newValue;
  };

  SetterObserver.prototype.getterValue = function getterValue() {
    return this.currentValue;
  };

  SetterObserver.prototype.setterValue = function setterValue(newValue) {
    var oldValue = this.currentValue;

    if (oldValue !== newValue) {
      if (!this.queued) {
        this.oldValue = oldValue;
        this.queued = true;
        this.taskQueue.queueMicroTask(this);
      }

      this.currentValue = newValue;
    }
  };

  SetterObserver.prototype.call = function call() {
    var oldValue = this.oldValue;
    var newValue = this.oldValue = this.currentValue;

    this.queued = false;

    this.callSubscribers(newValue, oldValue);
  };

  SetterObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.observing) {
      this.convertProperty();
    }
    this.addSubscriber(context, callable);
  };

  SetterObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    this.removeSubscriber(context, callable);
  };

  SetterObserver.prototype.convertProperty = function convertProperty() {
    this.observing = true;
    this.currentValue = this.obj[this.propertyName];
    this.setValue = this.setterValue;
    this.getValue = this.getterValue;

    if (!Reflect.defineProperty(this.obj, this.propertyName, {
      configurable: true,
      enumerable: this.propertyName in this.obj ? this.obj.propertyIsEnumerable(this.propertyName) : true,
      get: this.getValue.bind(this),
      set: this.setValue.bind(this)
    })) {
      logger.warn('Cannot observe property \'' + this.propertyName + '\' of object', this.obj);
    }
  };

  return SetterObserver;
}()) || _class7);

var XLinkAttributeObserver = function () {
  function XLinkAttributeObserver(element, propertyName, attributeName) {
    

    this.element = element;
    this.propertyName = propertyName;
    this.attributeName = attributeName;
  }

  XLinkAttributeObserver.prototype.getValue = function getValue() {
    return this.element.getAttributeNS('http://www.w3.org/1999/xlink', this.attributeName);
  };

  XLinkAttributeObserver.prototype.setValue = function setValue(newValue) {
    return this.element.setAttributeNS('http://www.w3.org/1999/xlink', this.attributeName, newValue);
  };

  XLinkAttributeObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return XLinkAttributeObserver;
}();

var dataAttributeAccessor = {
  getValue: function getValue(obj, propertyName) {
    return obj.getAttribute(propertyName);
  },
  setValue: function setValue(value, obj, propertyName) {
    if (value === null || value === undefined) {
      obj.removeAttribute(propertyName);
    } else {
      obj.setAttribute(propertyName, value);
    }
  }
};

var DataAttributeObserver = function () {
  function DataAttributeObserver(element, propertyName) {
    

    this.element = element;
    this.propertyName = propertyName;
  }

  DataAttributeObserver.prototype.getValue = function getValue() {
    return this.element.getAttribute(this.propertyName);
  };

  DataAttributeObserver.prototype.setValue = function setValue(newValue) {
    if (newValue === null || newValue === undefined) {
      return this.element.removeAttribute(this.propertyName);
    }
    return this.element.setAttribute(this.propertyName, newValue);
  };

  DataAttributeObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return DataAttributeObserver;
}();

var StyleObserver = function () {
  function StyleObserver(element, propertyName) {
    

    this.element = element;
    this.propertyName = propertyName;

    this.styles = null;
    this.version = 0;
  }

  StyleObserver.prototype.getValue = function getValue() {
    return this.element.style.cssText;
  };

  StyleObserver.prototype._setProperty = function _setProperty(style, value) {
    var priority = '';

    if (value !== null && value !== undefined && typeof value.indexOf === 'function' && value.indexOf('!important') !== -1) {
      priority = 'important';
      value = value.replace('!important', '');
    }
    this.element.style.setProperty(style, value, priority);
  };

  StyleObserver.prototype.setValue = function setValue(newValue) {
    var styles = this.styles || {};
    var style = void 0;
    var version = this.version;

    if (newValue !== null && newValue !== undefined) {
      if (newValue instanceof Object) {
        var value = void 0;
        for (style in newValue) {
          if (newValue.hasOwnProperty(style)) {
            value = newValue[style];
            style = style.replace(/([A-Z])/g, function (m) {
              return '-' + m.toLowerCase();
            });
            styles[style] = version;
            this._setProperty(style, value);
          }
        }
      } else if (newValue.length) {
        var rx = /\s*([\w\-]+)\s*:\s*((?:(?:[\w\-]+\(\s*(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[\w\-]+\(\s*(?:^"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^\)]*)\),?|[^\)]*)\),?|"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^;]*),?\s*)+);?/g;
        var pair = void 0;
        while ((pair = rx.exec(newValue)) !== null) {
          style = pair[1];
          if (!style) {
            continue;
          }

          styles[style] = version;
          this._setProperty(style, pair[2]);
        }
      }
    }

    this.styles = styles;
    this.version += 1;

    if (version === 0) {
      return;
    }

    version -= 1;
    for (style in styles) {
      if (!styles.hasOwnProperty(style) || styles[style] !== version) {
        continue;
      }

      this.element.style.removeProperty(style);
    }
  };

  StyleObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
  };

  return StyleObserver;
}();

var ValueAttributeObserver = (_dec7 = subscriberCollection(), _dec7(_class8 = function () {
  function ValueAttributeObserver(element, propertyName, handler) {
    

    this.element = element;
    this.propertyName = propertyName;
    this.handler = handler;
    if (propertyName === 'files') {
      this.setValue = function () {};
    }
  }

  ValueAttributeObserver.prototype.getValue = function getValue() {
    return this.element[this.propertyName];
  };

  ValueAttributeObserver.prototype.setValue = function setValue(newValue) {
    newValue = newValue === undefined || newValue === null ? '' : newValue;
    if (this.element[this.propertyName] !== newValue) {
      this.element[this.propertyName] = newValue;
      this.notify();
    }
  };

  ValueAttributeObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.getValue();

    this.callSubscribers(newValue, oldValue);

    this.oldValue = newValue;
  };

  ValueAttributeObserver.prototype.handleEvent = function handleEvent() {
    this.notify();
  };

  ValueAttributeObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.oldValue = this.getValue();
      this.handler.subscribe(this.element, this);
    }

    this.addSubscriber(context, callable);
  };

  ValueAttributeObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  return ValueAttributeObserver;
}()) || _class8);

var checkedArrayContext = 'CheckedObserver:array';
var checkedValueContext = 'CheckedObserver:value';

var CheckedObserver = (_dec8 = subscriberCollection(), _dec8(_class9 = function () {
  function CheckedObserver(element, handler, observerLocator) {
    

    this.element = element;
    this.handler = handler;
    this.observerLocator = observerLocator;
  }

  CheckedObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  CheckedObserver.prototype.setValue = function setValue(newValue) {
    if (this.initialSync && this.value === newValue) {
      return;
    }

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(checkedArrayContext, this);
      this.arrayObserver = null;
    }

    if (this.element.type === 'checkbox' && Array.isArray(newValue)) {
      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
      this.arrayObserver.subscribe(checkedArrayContext, this);
    }

    this.oldValue = this.value;
    this.value = newValue;
    this.synchronizeElement();
    this.notify();

    if (!this.initialSync) {
      this.initialSync = true;
      this.observerLocator.taskQueue.queueMicroTask(this);
    }
  };

  CheckedObserver.prototype.call = function call(context, splices) {
    this.synchronizeElement();

    if (!this.valueObserver) {
      this.valueObserver = this.element.__observers__.model || this.element.__observers__.value;
      if (this.valueObserver) {
        this.valueObserver.subscribe(checkedValueContext, this);
      }
    }
  };

  CheckedObserver.prototype.synchronizeElement = function synchronizeElement() {
    var value = this.value;
    var element = this.element;
    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
    var isRadio = element.type === 'radio';
    var matcher = element.matcher || function (a, b) {
      return a === b;
    };

    element.checked = isRadio && !!matcher(value, elementValue) || !isRadio && value === true || !isRadio && Array.isArray(value) && value.findIndex(function (item) {
      return !!matcher(item, elementValue);
    }) !== -1;
  };

  CheckedObserver.prototype.synchronizeValue = function synchronizeValue() {
    var value = this.value;
    var element = this.element;
    var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
    var index = void 0;
    var matcher = element.matcher || function (a, b) {
      return a === b;
    };

    if (element.type === 'checkbox') {
      if (Array.isArray(value)) {
        index = value.findIndex(function (item) {
          return !!matcher(item, elementValue);
        });
        if (element.checked && index === -1) {
          value.push(elementValue);
        } else if (!element.checked && index !== -1) {
          value.splice(index, 1);
        }

        return;
      }

      value = element.checked;
    } else if (element.checked) {
      value = elementValue;
    } else {
      return;
    }

    this.oldValue = this.value;
    this.value = value;
    this.notify();
  };

  CheckedObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.value;

    if (newValue === oldValue) {
      return;
    }

    this.callSubscribers(newValue, oldValue);
  };

  CheckedObserver.prototype.handleEvent = function handleEvent() {
    this.synchronizeValue();
  };

  CheckedObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.handler.subscribe(this.element, this);
    }
    this.addSubscriber(context, callable);
  };

  CheckedObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  CheckedObserver.prototype.unbind = function unbind() {
    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(checkedArrayContext, this);
      this.arrayObserver = null;
    }
    if (this.valueObserver) {
      this.valueObserver.unsubscribe(checkedValueContext, this);
    }
  };

  return CheckedObserver;
}()) || _class9);

var selectArrayContext = 'SelectValueObserver:array';

var SelectValueObserver = (_dec9 = subscriberCollection(), _dec9(_class10 = function () {
  function SelectValueObserver(element, handler, observerLocator) {
    

    this.element = element;
    this.handler = handler;
    this.observerLocator = observerLocator;
  }

  SelectValueObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  SelectValueObserver.prototype.setValue = function setValue(newValue) {
    if (newValue !== null && newValue !== undefined && this.element.multiple && !Array.isArray(newValue)) {
      throw new Error('Only null or Array instances can be bound to a multi-select.');
    }
    if (this.value === newValue) {
      return;
    }

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(selectArrayContext, this);
      this.arrayObserver = null;
    }

    if (Array.isArray(newValue)) {
      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
      this.arrayObserver.subscribe(selectArrayContext, this);
    }

    this.oldValue = this.value;
    this.value = newValue;
    this.synchronizeOptions();
    this.notify();

    if (!this.initialSync) {
      this.initialSync = true;
      this.observerLocator.taskQueue.queueMicroTask(this);
    }
  };

  SelectValueObserver.prototype.call = function call(context, splices) {
    this.synchronizeOptions();
  };

  SelectValueObserver.prototype.synchronizeOptions = function synchronizeOptions() {
    var value = this.value;
    var isArray = void 0;

    if (Array.isArray(value)) {
      isArray = true;
    }

    var options = this.element.options;
    var i = options.length;
    var matcher = this.element.matcher || function (a, b) {
      return a === b;
    };

    var _loop = function _loop() {
      var option = options.item(i);
      var optionValue = option.hasOwnProperty('model') ? option.model : option.value;
      if (isArray) {
        option.selected = value.findIndex(function (item) {
          return !!matcher(optionValue, item);
        }) !== -1;
        return 'continue';
      }
      option.selected = !!matcher(optionValue, value);
    };

    while (i--) {
      var _ret = _loop();

      if (_ret === 'continue') continue;
    }
  };

  SelectValueObserver.prototype.synchronizeValue = function synchronizeValue() {
    var _this23 = this;

    var options = this.element.options;
    var count = 0;
    var value = [];

    for (var i = 0, ii = options.length; i < ii; i++) {
      var _option = options.item(i);
      if (!_option.selected) {
        continue;
      }
      value.push(_option.hasOwnProperty('model') ? _option.model : _option.value);
      count++;
    }

    if (this.element.multiple) {
      if (Array.isArray(this.value)) {
        var _ret2 = function () {
          var matcher = _this23.element.matcher || function (a, b) {
            return a === b;
          };

          var i = 0;

          var _loop2 = function _loop2() {
            var a = _this23.value[i];
            if (value.findIndex(function (b) {
              return matcher(a, b);
            }) === -1) {
              _this23.value.splice(i, 1);
            } else {
              i++;
            }
          };

          while (i < _this23.value.length) {
            _loop2();
          }

          i = 0;

          var _loop3 = function _loop3() {
            var a = value[i];
            if (_this23.value.findIndex(function (b) {
              return matcher(a, b);
            }) === -1) {
              _this23.value.push(a);
            }
            i++;
          };

          while (i < value.length) {
            _loop3();
          }
          return {
            v: void 0
          };
        }();

        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
      }
    } else {
      if (count === 0) {
        value = null;
      } else {
        value = value[0];
      }
    }

    if (value !== this.value) {
      this.oldValue = this.value;
      this.value = value;
      this.notify();
    }
  };

  SelectValueObserver.prototype.notify = function notify() {
    var oldValue = this.oldValue;
    var newValue = this.value;

    this.callSubscribers(newValue, oldValue);
  };

  SelectValueObserver.prototype.handleEvent = function handleEvent() {
    this.synchronizeValue();
  };

  SelectValueObserver.prototype.subscribe = function subscribe(context, callable) {
    if (!this.hasSubscribers()) {
      this.handler.subscribe(this.element, this);
    }
    this.addSubscriber(context, callable);
  };

  SelectValueObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
      this.handler.dispose();
    }
  };

  SelectValueObserver.prototype.bind = function bind() {
    var _this24 = this;

    this.domObserver = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].createMutationObserver(function () {
      _this24.synchronizeOptions();
      _this24.synchronizeValue();
    });
    this.domObserver.observe(this.element, { childList: true, subtree: true, characterData: true });
  };

  SelectValueObserver.prototype.unbind = function unbind() {
    this.domObserver.disconnect();
    this.domObserver = null;

    if (this.arrayObserver) {
      this.arrayObserver.unsubscribe(selectArrayContext, this);
      this.arrayObserver = null;
    }
  };

  return SelectValueObserver;
}()) || _class10);

var ClassObserver = function () {
  function ClassObserver(element) {
    

    this.element = element;
    this.doNotCache = true;
    this.value = '';
    this.version = 0;
  }

  ClassObserver.prototype.getValue = function getValue() {
    return this.value;
  };

  ClassObserver.prototype.setValue = function setValue(newValue) {
    var nameIndex = this.nameIndex || {};
    var version = this.version;
    var names = void 0;
    var name = void 0;

    if (newValue !== null && newValue !== undefined && newValue.length) {
      names = newValue.split(/\s+/);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];
        if (name === '') {
          continue;
        }
        nameIndex[name] = version;
        this.element.classList.add(name);
      }
    }

    this.value = newValue;
    this.nameIndex = nameIndex;
    this.version += 1;

    if (version === 0) {
      return;
    }

    version -= 1;
    for (name in nameIndex) {
      if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {
        continue;
      }
      this.element.classList.remove(name);
    }
  };

  ClassObserver.prototype.subscribe = function subscribe() {
    throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "class" property is not supported.');
  };

  return ClassObserver;
}();

function hasDeclaredDependencies(descriptor) {
  return !!(descriptor && descriptor.get && descriptor.get.dependencies);
}

function declarePropertyDependencies(ctor, propertyName, dependencies) {
  var descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, propertyName);
  descriptor.get.dependencies = dependencies;
}

function computedFrom() {
  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
    rest[_key] = arguments[_key];
  }

  return function (target, key, descriptor) {
    descriptor.get.dependencies = rest;
    return descriptor;
  };
}

var ComputedExpression = function (_Expression19) {
  _inherits(ComputedExpression, _Expression19);

  function ComputedExpression(name, dependencies) {
    

    var _this25 = _possibleConstructorReturn(this, _Expression19.call(this));

    _this25.name = name;
    _this25.dependencies = dependencies;
    _this25.isAssignable = true;
    return _this25;
  }

  ComputedExpression.prototype.evaluate = function evaluate(scope, lookupFunctions) {
    return scope.bindingContext[this.name];
  };

  ComputedExpression.prototype.assign = function assign(scope, value) {
    scope.bindingContext[this.name] = value;
  };

  ComputedExpression.prototype.accept = function accept(visitor) {
    throw new Error('not implemented');
  };

  ComputedExpression.prototype.connect = function connect(binding, scope) {
    var dependencies = this.dependencies;
    var i = dependencies.length;
    while (i--) {
      dependencies[i].connect(binding, scope);
    }
  };

  return ComputedExpression;
}(Expression);

function createComputedObserver(obj, propertyName, descriptor, observerLocator) {
  var dependencies = descriptor.get.dependencies;
  if (!(dependencies instanceof ComputedExpression)) {
    var i = dependencies.length;
    while (i--) {
      dependencies[i] = observerLocator.parser.parse(dependencies[i]);
    }
    dependencies = descriptor.get.dependencies = new ComputedExpression(propertyName, dependencies);
  }

  var scope = { bindingContext: obj, overrideContext: createOverrideContext(obj) };
  return new ExpressionObserver(scope, dependencies, observerLocator);
}

var svgElements = void 0;
var svgPresentationElements = void 0;
var svgPresentationAttributes = void 0;
var svgAnalyzer = void 0;

if (typeof FEATURE_NO_SVG === 'undefined') {
  svgElements = {
    a: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'target', 'transform', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyph: ['class', 'dx', 'dy', 'externalResourcesRequired', 'format', 'glyphRef', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    altGlyphDef: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyphItem: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    animate: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateColor: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateMotion: ['accumulate', 'additive', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keyPoints', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'origin', 'path', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'rotate', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateTransform: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'type', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    circle: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'r', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    clipPath: ['class', 'clipPathUnits', 'externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    'color-profile': ['id', 'local', 'name', 'rendering-intent', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    cursor: ['externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    defs: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    desc: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    ellipse: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    feBlend: ['class', 'height', 'id', 'in', 'in2', 'mode', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feColorMatrix: ['class', 'height', 'id', 'in', 'result', 'style', 'type', 'values', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComponentTransfer: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComposite: ['class', 'height', 'id', 'in', 'in2', 'k1', 'k2', 'k3', 'k4', 'operator', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feConvolveMatrix: ['bias', 'class', 'divisor', 'edgeMode', 'height', 'id', 'in', 'kernelMatrix', 'kernelUnitLength', 'order', 'preserveAlpha', 'result', 'style', 'targetX', 'targetY', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDiffuseLighting: ['class', 'diffuseConstant', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDisplacementMap: ['class', 'height', 'id', 'in', 'in2', 'result', 'scale', 'style', 'width', 'x', 'xChannelSelector', 'xml:base', 'xml:lang', 'xml:space', 'y', 'yChannelSelector'],
    feDistantLight: ['azimuth', 'elevation', 'id', 'xml:base', 'xml:lang', 'xml:space'],
    feFlood: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feFuncA: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncB: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncG: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncR: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feGaussianBlur: ['class', 'height', 'id', 'in', 'result', 'stdDeviation', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feImage: ['class', 'externalResourcesRequired', 'height', 'id', 'preserveAspectRatio', 'result', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMerge: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMergeNode: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    feMorphology: ['class', 'height', 'id', 'in', 'operator', 'radius', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feOffset: ['class', 'dx', 'dy', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    fePointLight: ['id', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feSpecularLighting: ['class', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'specularConstant', 'specularExponent', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feSpotLight: ['id', 'limitingConeAngle', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'specularExponent', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feTile: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feTurbulence: ['baseFrequency', 'class', 'height', 'id', 'numOctaves', 'result', 'seed', 'stitchTiles', 'style', 'type', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    filter: ['class', 'externalResourcesRequired', 'filterRes', 'filterUnits', 'height', 'id', 'primitiveUnits', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    font: ['class', 'externalResourcesRequired', 'horiz-adv-x', 'horiz-origin-x', 'horiz-origin-y', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face': ['accent-height', 'alphabetic', 'ascent', 'bbox', 'cap-height', 'descent', 'font-family', 'font-size', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'hanging', 'id', 'ideographic', 'mathematical', 'overline-position', 'overline-thickness', 'panose-1', 'slope', 'stemh', 'stemv', 'strikethrough-position', 'strikethrough-thickness', 'underline-position', 'underline-thickness', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'widths', 'x-height', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-format': ['id', 'string', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-name': ['id', 'name', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-src': ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-uri': ['id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    foreignObject: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    g: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    glyph: ['arabic-form', 'class', 'd', 'glyph-name', 'horiz-adv-x', 'id', 'lang', 'orientation', 'style', 'unicode', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    glyphRef: ['class', 'dx', 'dy', 'format', 'glyphRef', 'id', 'style', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    hkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space'],
    image: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    line: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'x1', 'x2', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    linearGradient: ['class', 'externalResourcesRequired', 'gradientTransform', 'gradientUnits', 'id', 'spreadMethod', 'style', 'x1', 'x2', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    marker: ['class', 'externalResourcesRequired', 'id', 'markerHeight', 'markerUnits', 'markerWidth', 'orient', 'preserveAspectRatio', 'refX', 'refY', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    mask: ['class', 'externalResourcesRequired', 'height', 'id', 'maskContentUnits', 'maskUnits', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    metadata: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'missing-glyph': ['class', 'd', 'horiz-adv-x', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    mpath: ['externalResourcesRequired', 'id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    path: ['class', 'd', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'pathLength', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    pattern: ['class', 'externalResourcesRequired', 'height', 'id', 'patternContentUnits', 'patternTransform', 'patternUnits', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'viewBox', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    polygon: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    polyline: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    radialGradient: ['class', 'cx', 'cy', 'externalResourcesRequired', 'fx', 'fy', 'gradientTransform', 'gradientUnits', 'id', 'r', 'spreadMethod', 'style', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    rect: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    script: ['externalResourcesRequired', 'id', 'type', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    set: ['attributeName', 'attributeType', 'begin', 'dur', 'end', 'externalResourcesRequired', 'fill', 'id', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    stop: ['class', 'id', 'offset', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    style: ['id', 'media', 'title', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    svg: ['baseProfile', 'class', 'contentScriptType', 'contentStyleType', 'externalResourcesRequired', 'height', 'id', 'onabort', 'onactivate', 'onclick', 'onerror', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onresize', 'onscroll', 'onunload', 'onzoom', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'version', 'viewBox', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'zoomAndPan'],
    switch: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    symbol: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    text: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'transform', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    textPath: ['class', 'externalResourcesRequired', 'id', 'lengthAdjust', 'method', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'spacing', 'startOffset', 'style', 'systemLanguage', 'textLength', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    title: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    tref: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    tspan: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    use: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    view: ['externalResourcesRequired', 'id', 'preserveAspectRatio', 'viewBox', 'viewTarget', 'xml:base', 'xml:lang', 'xml:space', 'zoomAndPan'],
    vkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']
  };


  svgPresentationElements = {
    'a': true,
    'altGlyph': true,
    'animate': true,
    'animateColor': true,
    'circle': true,
    'clipPath': true,
    'defs': true,
    'ellipse': true,
    'feBlend': true,
    'feColorMatrix': true,
    'feComponentTransfer': true,
    'feComposite': true,
    'feConvolveMatrix': true,
    'feDiffuseLighting': true,
    'feDisplacementMap': true,
    'feFlood': true,
    'feGaussianBlur': true,
    'feImage': true,
    'feMerge': true,
    'feMorphology': true,
    'feOffset': true,
    'feSpecularLighting': true,
    'feTile': true,
    'feTurbulence': true,
    'filter': true,
    'font': true,
    'foreignObject': true,
    'g': true,
    'glyph': true,
    'glyphRef': true,
    'image': true,
    'line': true,
    'linearGradient': true,
    'marker': true,
    'mask': true,
    'missing-glyph': true,
    'path': true,
    'pattern': true,
    'polygon': true,
    'polyline': true,
    'radialGradient': true,
    'rect': true,
    'stop': true,
    'svg': true,
    'switch': true,
    'symbol': true,
    'text': true,
    'textPath': true,
    'tref': true,
    'tspan': true,
    'use': true
  };

  svgPresentationAttributes = {
    'alignment-baseline': true,
    'baseline-shift': true,
    'clip-path': true,
    'clip-rule': true,
    'clip': true,
    'color-interpolation-filters': true,
    'color-interpolation': true,
    'color-profile': true,
    'color-rendering': true,
    'color': true,
    'cursor': true,
    'direction': true,
    'display': true,
    'dominant-baseline': true,
    'enable-background': true,
    'fill-opacity': true,
    'fill-rule': true,
    'fill': true,
    'filter': true,
    'flood-color': true,
    'flood-opacity': true,
    'font-family': true,
    'font-size-adjust': true,
    'font-size': true,
    'font-stretch': true,
    'font-style': true,
    'font-variant': true,
    'font-weight': true,
    'glyph-orientation-horizontal': true,
    'glyph-orientation-vertical': true,
    'image-rendering': true,
    'kerning': true,
    'letter-spacing': true,
    'lighting-color': true,
    'marker-end': true,
    'marker-mid': true,
    'marker-start': true,
    'mask': true,
    'opacity': true,
    'overflow': true,
    'pointer-events': true,
    'shape-rendering': true,
    'stop-color': true,
    'stop-opacity': true,
    'stroke-dasharray': true,
    'stroke-dashoffset': true,
    'stroke-linecap': true,
    'stroke-linejoin': true,
    'stroke-miterlimit': true,
    'stroke-opacity': true,
    'stroke-width': true,
    'stroke': true,
    'text-anchor': true,
    'text-decoration': true,
    'text-rendering': true,
    'unicode-bidi': true,
    'visibility': true,
    'word-spacing': true,
    'writing-mode': true
  };

  var createElement = function createElement(html) {
    var div = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].createElement('div');
    div.innerHTML = html;
    return div.firstChild;
  };

  svgAnalyzer = function () {
    function SVGAnalyzer() {
      

      if (createElement('<svg><altGlyph /></svg>').firstElementChild.nodeName === 'altglyph' && elements.altGlyph) {
        elements.altglyph = elements.altGlyph;
        delete elements.altGlyph;
        elements.altglyphdef = elements.altGlyphDef;
        delete elements.altGlyphDef;
        elements.altglyphitem = elements.altGlyphItem;
        delete elements.altGlyphItem;
        elements.glyphref = elements.glyphRef;
        delete elements.glyphRef;
      }
    }

    SVGAnalyzer.prototype.isStandardSvgAttribute = function isStandardSvgAttribute(nodeName, attributeName) {
      return presentationElements[nodeName] && presentationAttributes[attributeName] || elements[nodeName] && elements[nodeName].indexOf(attributeName) !== -1;
    };

    return SVGAnalyzer;
  }();
}

var elements = svgElements;
var presentationElements = svgPresentationElements;
var presentationAttributes = svgPresentationAttributes;
var SVGAnalyzer = svgAnalyzer || function () {
  function _class11() {
    
  }

  _class11.prototype.isStandardSvgAttribute = function isStandardSvgAttribute() {
    return false;
  };

  return _class11;
}();

var ObserverLocator = (_temp = _class12 = function () {
  function ObserverLocator(taskQueue, eventManager, dirtyChecker, svgAnalyzer, parser) {
    

    this.taskQueue = taskQueue;
    this.eventManager = eventManager;
    this.dirtyChecker = dirtyChecker;
    this.svgAnalyzer = svgAnalyzer;
    this.parser = parser;

    this.adapters = [];
    this.logger = __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"]('observer-locator');
  }

  ObserverLocator.prototype.getObserver = function getObserver(obj, propertyName) {
    var observersLookup = obj.__observers__;
    var observer = void 0;

    if (observersLookup && propertyName in observersLookup) {
      return observersLookup[propertyName];
    }

    observer = this.createPropertyObserver(obj, propertyName);

    if (!observer.doNotCache) {
      if (observersLookup === undefined) {
        observersLookup = this.getOrCreateObserversLookup(obj);
      }

      observersLookup[propertyName] = observer;
    }

    return observer;
  };

  ObserverLocator.prototype.getOrCreateObserversLookup = function getOrCreateObserversLookup(obj) {
    return obj.__observers__ || this.createObserversLookup(obj);
  };

  ObserverLocator.prototype.createObserversLookup = function createObserversLookup(obj) {
    var value = {};

    if (!Reflect.defineProperty(obj, '__observers__', {
      enumerable: false,
      configurable: false,
      writable: false,
      value: value
    })) {
      this.logger.warn('Cannot add observers to object', obj);
    }

    return value;
  };

  ObserverLocator.prototype.addAdapter = function addAdapter(adapter) {
    this.adapters.push(adapter);
  };

  ObserverLocator.prototype.getAdapterObserver = function getAdapterObserver(obj, propertyName, descriptor) {
    for (var i = 0, ii = this.adapters.length; i < ii; i++) {
      var adapter = this.adapters[i];
      var observer = adapter.getObserver(obj, propertyName, descriptor);
      if (observer) {
        return observer;
      }
    }
    return null;
  };

  ObserverLocator.prototype.createPropertyObserver = function createPropertyObserver(obj, propertyName) {
    var descriptor = void 0;
    var handler = void 0;
    var xlinkResult = void 0;

    if (!(obj instanceof Object)) {
      return new PrimitiveObserver(obj, propertyName);
    }

    if (obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element) {
      if (propertyName === 'class') {
        return new ClassObserver(obj);
      }
      if (propertyName === 'style' || propertyName === 'css') {
        return new StyleObserver(obj, propertyName);
      }
      handler = this.eventManager.getElementHandler(obj, propertyName);
      if (propertyName === 'value' && obj.tagName.toLowerCase() === 'select') {
        return new SelectValueObserver(obj, handler, this);
      }
      if (propertyName === 'checked' && obj.tagName.toLowerCase() === 'input') {
        return new CheckedObserver(obj, handler, this);
      }
      if (handler) {
        return new ValueAttributeObserver(obj, propertyName, handler);
      }
      xlinkResult = /^xlink:(.+)$/.exec(propertyName);
      if (xlinkResult) {
        return new XLinkAttributeObserver(obj, propertyName, xlinkResult[1]);
      }
      if (propertyName === 'role' && (obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element || obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].SVGElement) || /^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
        return new DataAttributeObserver(obj, propertyName);
      }
    }

    descriptor = Object.getPropertyDescriptor(obj, propertyName);

    if (hasDeclaredDependencies(descriptor)) {
      return createComputedObserver(obj, propertyName, descriptor, this);
    }

    if (descriptor) {
      var existingGetterOrSetter = descriptor.get || descriptor.set;
      if (existingGetterOrSetter) {
        if (existingGetterOrSetter.getObserver) {
          return existingGetterOrSetter.getObserver(obj);
        }

        var adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);
        if (adapterObserver) {
          return adapterObserver;
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      }
    }

    if (obj instanceof Array) {
      if (propertyName === 'length') {
        return this.getArrayObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    } else if (obj instanceof Map) {
      if (propertyName === 'size') {
        return this.getMapObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    } else if (obj instanceof Set) {
      if (propertyName === 'size') {
        return this.getSetObserver(obj).getLengthObserver();
      }

      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
    }

    return new SetterObserver(this.taskQueue, obj, propertyName);
  };

  ObserverLocator.prototype.getAccessor = function getAccessor(obj, propertyName) {
    if (obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element) {
      if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css' || propertyName === 'value' && (obj.tagName.toLowerCase() === 'input' || obj.tagName.toLowerCase() === 'select') || propertyName === 'checked' && obj.tagName.toLowerCase() === 'input' || propertyName === 'model' && obj.tagName.toLowerCase() === 'input' || /^xlink:.+$/.exec(propertyName)) {
        return this.getObserver(obj, propertyName);
      }
      if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName) || obj.tagName.toLowerCase() === 'img' && propertyName === 'src' || obj.tagName.toLowerCase() === 'a' && propertyName === 'href') {
        return dataAttributeAccessor;
      }
    }
    return propertyAccessor;
  };

  ObserverLocator.prototype.getArrayObserver = function getArrayObserver(array) {
    return _getArrayObserver(this.taskQueue, array);
  };

  ObserverLocator.prototype.getMapObserver = function getMapObserver(map) {
    return _getMapObserver(this.taskQueue, map);
  };

  ObserverLocator.prototype.getSetObserver = function getSetObserver(set) {
    return _getSetObserver(this.taskQueue, set);
  };

  return ObserverLocator;
}(), _class12.inject = [__WEBPACK_IMPORTED_MODULE_2_aurelia_task_queue__["TaskQueue"], EventManager, DirtyChecker, SVGAnalyzer, Parser], _temp);

var ObjectObservationAdapter = function () {
  function ObjectObservationAdapter() {
    
  }

  ObjectObservationAdapter.prototype.getObserver = function getObserver(object, propertyName, descriptor) {
    throw new Error('BindingAdapters must implement getObserver(object, propertyName).');
  };

  return ObjectObservationAdapter;
}();

var BindingExpression = function () {
  function BindingExpression(observerLocator, targetProperty, sourceExpression, mode, lookupFunctions, attribute) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.sourceExpression = sourceExpression;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
    this.attribute = attribute;
    this.discrete = false;
  }

  BindingExpression.prototype.createBinding = function createBinding(target) {
    return new Binding(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.mode, this.lookupFunctions);
  };

  return BindingExpression;
}();

var Binding = (_dec10 = connectable(), _dec10(_class13 = function () {
  function Binding(observerLocator, sourceExpression, target, targetProperty, mode, lookupFunctions) {
    

    this.observerLocator = observerLocator;
    this.sourceExpression = sourceExpression;
    this.target = target;
    this.targetProperty = targetProperty;
    this.mode = mode;
    this.lookupFunctions = lookupFunctions;
  }

  Binding.prototype.updateTarget = function updateTarget(value) {
    this.targetObserver.setValue(value, this.target, this.targetProperty);
  };

  Binding.prototype.updateSource = function updateSource(value) {
    this.sourceExpression.assign(this.source, value, this.lookupFunctions);
  };

  Binding.prototype.call = function call(context, newValue, oldValue) {
    if (!this.isBound) {
      return;
    }
    if (context === sourceContext) {
      oldValue = this.targetObserver.getValue(this.target, this.targetProperty);
      newValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      if (newValue !== oldValue) {
        this.updateTarget(newValue);
      }
      if (this.mode !== bindingMode.oneTime) {
        this._version++;
        this.sourceExpression.connect(this, this.source);
        this.unobserve(false);
      }
      return;
    }
    if (context === targetContext) {
      if (newValue !== this.sourceExpression.evaluate(this.source, this.lookupFunctions)) {
        this.updateSource(newValue);
      }
      return;
    }
    throw new Error('Unexpected call context ' + context);
  };

  Binding.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }

    var mode = this.mode;
    if (!this.targetObserver) {
      var method = mode === bindingMode.twoWay || mode === bindingMode.fromView ? 'getObserver' : 'getAccessor';
      this.targetObserver = this.observerLocator[method](this.target, this.targetProperty);
    }

    if ('bind' in this.targetObserver) {
      this.targetObserver.bind();
    }
    if (this.mode !== bindingMode.fromView) {
      var value = this.sourceExpression.evaluate(source, this.lookupFunctions);
      this.updateTarget(value);
    }

    if (mode === bindingMode.oneTime) {
      return;
    } else if (mode === bindingMode.toView) {
      enqueueBindingConnect(this);
    } else if (mode === bindingMode.twoWay) {
      this.sourceExpression.connect(this, source);
      this.targetObserver.subscribe(targetContext, this);
    } else if (mode === bindingMode.fromView) {
      this.targetObserver.subscribe(targetContext, this);
    }
  };

  Binding.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    if ('unbind' in this.targetObserver) {
      this.targetObserver.unbind();
    }
    if (this.targetObserver.unsubscribe) {
      this.targetObserver.unsubscribe(targetContext, this);
    }
    this.unobserve(true);
  };

  Binding.prototype.connect = function connect(evaluate) {
    if (!this.isBound) {
      return;
    }
    if (evaluate) {
      var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      this.updateTarget(value);
    }
    this.sourceExpression.connect(this, this.source);
  };

  return Binding;
}()) || _class13);

var CallExpression = function () {
  function CallExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions) {
    

    this.observerLocator = observerLocator;
    this.targetProperty = targetProperty;
    this.sourceExpression = sourceExpression;
    this.lookupFunctions = lookupFunctions;
  }

  CallExpression.prototype.createBinding = function createBinding(target) {
    return new Call(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.lookupFunctions);
  };

  return CallExpression;
}();

var Call = function () {
  function Call(observerLocator, sourceExpression, target, targetProperty, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.target = target;
    this.targetProperty = observerLocator.getObserver(target, targetProperty);
    this.lookupFunctions = lookupFunctions;
  }

  Call.prototype.callSource = function callSource($event) {
    var overrideContext = this.source.overrideContext;
    Object.assign(overrideContext, $event);
    overrideContext.$event = $event;
    var mustEvaluate = true;
    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
    delete overrideContext.$event;
    for (var prop in $event) {
      delete overrideContext[prop];
    }
    return result;
  };

  Call.prototype.bind = function bind(source) {
    var _this26 = this;

    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this.targetProperty.setValue(function ($event) {
      return _this26.callSource($event);
    });
  };

  Call.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this.targetProperty.setValue(null);
  };

  return Call;
}();

var ValueConverterResource = function () {
  function ValueConverterResource(name) {
    

    this.name = name;
  }

  ValueConverterResource.convention = function convention(name) {
    if (name.endsWith('ValueConverter')) {
      return new ValueConverterResource(camelCase(name.substring(0, name.length - 14)));
    }
  };

  ValueConverterResource.prototype.initialize = function initialize(container, target) {
    this.instance = container.get(target);
  };

  ValueConverterResource.prototype.register = function register(registry, name) {
    registry.registerValueConverter(name || this.name, this.instance);
  };

  ValueConverterResource.prototype.load = function load(container, target) {};

  return ValueConverterResource;
}();

function valueConverter(nameOrTarget) {
  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
    return function (target) {
      __WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].resource, new ValueConverterResource(nameOrTarget), target);
    };
  }

  __WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].resource, new ValueConverterResource(), nameOrTarget);
}

var BindingBehaviorResource = function () {
  function BindingBehaviorResource(name) {
    

    this.name = name;
  }

  BindingBehaviorResource.convention = function convention(name) {
    if (name.endsWith('BindingBehavior')) {
      return new BindingBehaviorResource(camelCase(name.substring(0, name.length - 15)));
    }
  };

  BindingBehaviorResource.prototype.initialize = function initialize(container, target) {
    this.instance = container.get(target);
  };

  BindingBehaviorResource.prototype.register = function register(registry, name) {
    registry.registerBindingBehavior(name || this.name, this.instance);
  };

  BindingBehaviorResource.prototype.load = function load(container, target) {};

  return BindingBehaviorResource;
}();

function bindingBehavior(nameOrTarget) {
  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
    return function (target) {
      __WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].resource, new BindingBehaviorResource(nameOrTarget), target);
    };
  }

  __WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].define(__WEBPACK_IMPORTED_MODULE_3_aurelia_metadata__["metadata"].resource, new BindingBehaviorResource(), nameOrTarget);
}

var ListenerExpression = function () {
  function ListenerExpression(eventManager, targetEvent, sourceExpression, delegationStrategy, preventDefault, lookupFunctions) {
    

    this.eventManager = eventManager;
    this.targetEvent = targetEvent;
    this.sourceExpression = sourceExpression;
    this.delegationStrategy = delegationStrategy;
    this.discrete = true;
    this.preventDefault = preventDefault;
    this.lookupFunctions = lookupFunctions;
  }

  ListenerExpression.prototype.createBinding = function createBinding(target) {
    return new Listener(this.eventManager, this.targetEvent, this.delegationStrategy, this.sourceExpression, target, this.preventDefault, this.lookupFunctions);
  };

  return ListenerExpression;
}();

var Listener = function () {
  function Listener(eventManager, targetEvent, delegationStrategy, sourceExpression, target, preventDefault, lookupFunctions) {
    

    this.eventManager = eventManager;
    this.targetEvent = targetEvent;
    this.delegationStrategy = delegationStrategy;
    this.sourceExpression = sourceExpression;
    this.target = target;
    this.preventDefault = preventDefault;
    this.lookupFunctions = lookupFunctions;
  }

  Listener.prototype.callSource = function callSource(event) {
    var overrideContext = this.source.overrideContext;
    overrideContext.$event = event;
    var mustEvaluate = true;
    var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
    delete overrideContext.$event;
    if (result !== true && this.preventDefault) {
      event.preventDefault();
    }
    return result;
  };

  Listener.prototype.handleEvent = function handleEvent(event) {
    this.callSource(event);
  };

  Listener.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;

    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this._handler = this.eventManager.addEventListener(this.target, this.targetEvent, this, this.delegationStrategy, true);
  };

  Listener.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
    this._handler.dispose();
    this._handler = null;
  };

  return Listener;
}();

function getAU(element) {
  var au = element.au;

  if (au === undefined) {
    throw new Error('No Aurelia APIs are defined for the element: "' + element.tagName + '".');
  }

  return au;
}

var NameExpression = function () {
  function NameExpression(sourceExpression, apiName, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.apiName = apiName;
    this.lookupFunctions = lookupFunctions;
    this.discrete = true;
  }

  NameExpression.prototype.createBinding = function createBinding(target) {
    return new NameBinder(this.sourceExpression, NameExpression.locateAPI(target, this.apiName), this.lookupFunctions);
  };

  NameExpression.locateAPI = function locateAPI(element, apiName) {
    switch (apiName) {
      case 'element':
        return element;
      case 'controller':
        return getAU(element).controller;
      case 'view-model':
        return getAU(element).controller.viewModel;
      case 'view':
        return getAU(element).controller.view;
      default:
        var target = getAU(element)[apiName];

        if (target === undefined) {
          throw new Error('Attempted to reference "' + apiName + '", but it was not found amongst the target\'s API.');
        }

        return target.viewModel;
    }
  };

  return NameExpression;
}();

var NameBinder = function () {
  function NameBinder(sourceExpression, target, lookupFunctions) {
    

    this.sourceExpression = sourceExpression;
    this.target = target;
    this.lookupFunctions = lookupFunctions;
  }

  NameBinder.prototype.bind = function bind(source) {
    if (this.isBound) {
      if (this.source === source) {
        return;
      }
      this.unbind();
    }
    this.isBound = true;
    this.source = source;
    if (this.sourceExpression.bind) {
      this.sourceExpression.bind(this, source, this.lookupFunctions);
    }
    this.sourceExpression.assign(this.source, this.target, this.lookupFunctions);
  };

  NameBinder.prototype.unbind = function unbind() {
    if (!this.isBound) {
      return;
    }
    this.isBound = false;
    if (this.sourceExpression.evaluate(this.source, this.lookupFunctions) === this.target) {
      this.sourceExpression.assign(this.source, null, this.lookupFunctions);
    }
    if (this.sourceExpression.unbind) {
      this.sourceExpression.unbind(this, this.source);
    }
    this.source = null;
  };

  return NameBinder;
}();

var LookupFunctions = {
  bindingBehaviors: function bindingBehaviors(name) {
    return null;
  },
  valueConverters: function valueConverters(name) {
    return null;
  }
};

var BindingEngine = (_temp2 = _class14 = function () {
  function BindingEngine(observerLocator, parser) {
    

    this.observerLocator = observerLocator;
    this.parser = parser;
  }

  BindingEngine.prototype.createBindingExpression = function createBindingExpression(targetProperty, sourceExpression) {
    var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : bindingMode.toView;
    var lookupFunctions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : LookupFunctions;

    return new BindingExpression(this.observerLocator, targetProperty, this.parser.parse(sourceExpression), mode, lookupFunctions);
  };

  BindingEngine.prototype.propertyObserver = function propertyObserver(obj, propertyName) {
    var _this27 = this;

    return {
      subscribe: function subscribe(callback) {
        var observer = _this27.observerLocator.getObserver(obj, propertyName);
        observer.subscribe(callback);
        return {
          dispose: function dispose() {
            return observer.unsubscribe(callback);
          }
        };
      }
    };
  };

  BindingEngine.prototype.collectionObserver = function collectionObserver(collection) {
    var _this28 = this;

    return {
      subscribe: function subscribe(callback) {
        var observer = void 0;
        if (collection instanceof Array) {
          observer = _this28.observerLocator.getArrayObserver(collection);
        } else if (collection instanceof Map) {
          observer = _this28.observerLocator.getMapObserver(collection);
        } else if (collection instanceof Set) {
          observer = _this28.observerLocator.getSetObserver(collection);
        } else {
          throw new Error('collection must be an instance of Array, Map or Set.');
        }
        observer.subscribe(callback);
        return {
          dispose: function dispose() {
            return observer.unsubscribe(callback);
          }
        };
      }
    };
  };

  BindingEngine.prototype.expressionObserver = function expressionObserver(bindingContext, expression) {
    var scope = { bindingContext: bindingContext, overrideContext: createOverrideContext(bindingContext) };
    return new ExpressionObserver(scope, this.parser.parse(expression), this.observerLocator, LookupFunctions);
  };

  BindingEngine.prototype.parseExpression = function parseExpression(expression) {
    return this.parser.parse(expression);
  };

  BindingEngine.prototype.registerAdapter = function registerAdapter(adapter) {
    this.observerLocator.addAdapter(adapter);
  };

  return BindingEngine;
}(), _class14.inject = [ObserverLocator, Parser], _temp2);

var setProto = Set.prototype;

function _getSetObserver(taskQueue, set) {
  return ModifySetObserver.for(taskQueue, set);
}

var ModifySetObserver = function (_ModifyCollectionObse3) {
  _inherits(ModifySetObserver, _ModifyCollectionObse3);

  function ModifySetObserver(taskQueue, set) {
    

    return _possibleConstructorReturn(this, _ModifyCollectionObse3.call(this, taskQueue, set));
  }

  ModifySetObserver.for = function _for(taskQueue, set) {
    if (!('__set_observer__' in set)) {
      Reflect.defineProperty(set, '__set_observer__', {
        value: ModifySetObserver.create(taskQueue, set),
        enumerable: false, configurable: false
      });
    }
    return set.__set_observer__;
  };

  ModifySetObserver.create = function create(taskQueue, set) {
    var observer = new ModifySetObserver(taskQueue, set);

    var proto = setProto;
    if (proto.add !== set.add || proto.delete !== set.delete || proto.clear !== set.clear) {
      proto = {
        add: set.add,
        delete: set.delete,
        clear: set.clear
      };
    }

    set.add = function () {
      var type = 'add';
      var oldSize = set.size;
      var methodCallResult = proto.add.apply(set, arguments);
      var hasValue = set.size === oldSize;
      if (!hasValue) {
        observer.addChangeRecord({
          type: type,
          object: set,
          value: Array.from(set).pop()
        });
      }
      return methodCallResult;
    };

    set.delete = function () {
      var hasValue = set.has(arguments[0]);
      var methodCallResult = proto.delete.apply(set, arguments);
      if (hasValue) {
        observer.addChangeRecord({
          type: 'delete',
          object: set,
          value: arguments[0]
        });
      }
      return methodCallResult;
    };

    set.clear = function () {
      var methodCallResult = proto.clear.apply(set, arguments);
      observer.addChangeRecord({
        type: 'clear',
        object: set
      });
      return methodCallResult;
    };

    return observer;
  };

  return ModifySetObserver;
}(ModifyCollectionObserver);

function observable(targetOrConfig, key, descriptor) {
  function deco(target, key, descriptor, config) {
    var isClassDecorator = key === undefined;
    if (isClassDecorator) {
      target = target.prototype;
      key = typeof config === 'string' ? config : config.name;
    }

    var innerPropertyName = '_' + key;
    var innerPropertyDescriptor = {
      configurable: true,
      enumerable: false,
      writable: true
    };

    var callbackName = config && config.changeHandler || key + 'Changed';

    if (descriptor) {
      if (typeof descriptor.initializer === 'function') {
        innerPropertyDescriptor.value = descriptor.initializer();
      }
    } else {
      descriptor = {};
    }

    if (!('enumerable' in descriptor)) {
      descriptor.enumerable = true;
    }

    delete descriptor.value;
    delete descriptor.writable;
    delete descriptor.initializer;

    Reflect.defineProperty(target, innerPropertyName, innerPropertyDescriptor);

    descriptor.get = function () {
      return this[innerPropertyName];
    };
    descriptor.set = function (newValue) {
      var oldValue = this[innerPropertyName];
      if (newValue === oldValue) {
        return;
      }

      this[innerPropertyName] = newValue;
      Reflect.defineProperty(this, innerPropertyName, { enumerable: false });

      if (this[callbackName]) {
        this[callbackName](newValue, oldValue, key);
      }
    };

    descriptor.get.dependencies = [innerPropertyName];

    if (isClassDecorator) {
      Reflect.defineProperty(target, key, descriptor);
    } else {
      return descriptor;
    }
  }

  if (key === undefined) {
    return function (t, k, d) {
      return deco(t, k, d, targetOrConfig);
    };
  }
  return deco(targetOrConfig, key, descriptor);
}

var signals = {};

function connectBindingToSignal(binding, name) {
  if (!signals.hasOwnProperty(name)) {
    signals[name] = 0;
  }
  binding.observeProperty(signals, name);
}

function signalBindings(name) {
  if (signals.hasOwnProperty(name)) {
    signals[name]++;
  }
}

/***/ },

/***/ "aurelia-event-aggregator":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__ = __webpack_require__(51);
/* harmony export (binding) */ __webpack_require__.d(exports, "EventAggregator", function() { return EventAggregator; });
/* harmony export (immutable) */ exports["includeEventsIn"] = includeEventsIn;
/* harmony export (immutable) */ exports["configure"] = configure;




var logger = __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"]('event-aggregator');

var Handler = function () {
  function Handler(messageType, callback) {
    

    this.messageType = messageType;
    this.callback = callback;
  }

  Handler.prototype.handle = function handle(message) {
    if (message instanceof this.messageType) {
      this.callback.call(null, message);
    }
  };

  return Handler;
}();

function invokeCallback(callback, data, event) {
  try {
    callback(data, event);
  } catch (e) {
    logger.error(e);
  }
}

function invokeHandler(handler, data) {
  try {
    handler.handle(data);
  } catch (e) {
    logger.error(e);
  }
}

var EventAggregator = function () {
  function EventAggregator() {
    

    this.eventLookup = {};
    this.messageHandlers = [];
  }

  EventAggregator.prototype.publish = function publish(event, data) {
    var subscribers = void 0;
    var i = void 0;

    if (!event) {
      throw new Error('Event was invalid.');
    }

    if (typeof event === 'string') {
      subscribers = this.eventLookup[event];
      if (subscribers) {
        subscribers = subscribers.slice();
        i = subscribers.length;

        while (i--) {
          invokeCallback(subscribers[i], data, event);
        }
      }
    } else {
      subscribers = this.messageHandlers.slice();
      i = subscribers.length;

      while (i--) {
        invokeHandler(subscribers[i], event);
      }
    }
  };

  EventAggregator.prototype.subscribe = function subscribe(event, callback) {
    var handler = void 0;
    var subscribers = void 0;

    if (!event) {
      throw new Error('Event channel/type was invalid.');
    }

    if (typeof event === 'string') {
      handler = callback;
      subscribers = this.eventLookup[event] || (this.eventLookup[event] = []);
    } else {
      handler = new Handler(event, callback);
      subscribers = this.messageHandlers;
    }

    subscribers.push(handler);

    return {
      dispose: function dispose() {
        var idx = subscribers.indexOf(handler);
        if (idx !== -1) {
          subscribers.splice(idx, 1);
        }
      }
    };
  };

  EventAggregator.prototype.subscribeOnce = function subscribeOnce(event, callback) {
    var sub = this.subscribe(event, function (a, b) {
      sub.dispose();
      return callback(a, b);
    });

    return sub;
  };

  return EventAggregator;
}();

function includeEventsIn(obj) {
  var ea = new EventAggregator();

  obj.subscribeOnce = function (event, callback) {
    return ea.subscribeOnce(event, callback);
  };

  obj.subscribe = function (event, callback) {
    return ea.subscribe(event, callback);
  };

  obj.publish = function (event, data) {
    ea.publish(event, data);
  };

  return ea;
}

function configure(config) {
  config.instance(EventAggregator, includeEventsIn(config.aurelia));
}

/***/ },

/***/ "aurelia-framework":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__ = __webpack_require__("aurelia-binding");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_loader__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_aurelia_task_queue__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_path__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__ = __webpack_require__(51);
/* harmony export (binding) */ __webpack_require__.d(exports, "Aurelia", function() { return Aurelia; });
/* harmony export (binding) */ __webpack_require__.d(exports, "FrameworkConfiguration", function() { return FrameworkConfiguration; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "_emptyParameters", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["_emptyParameters"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "InvocationHandler", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["InvocationHandler"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Container", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Container"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "autoinject", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["autoinject"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "inject", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "invoker", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["invoker"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "invokeAsFactory", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["invokeAsFactory"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FactoryInvoker", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["FactoryInvoker"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "registration", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["registration"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "transient", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["transient"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "singleton", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["singleton"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TransientRegistration", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["TransientRegistration"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SingletonRegistration", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["SingletonRegistration"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "resolver", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["resolver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Strategy", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Strategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "StrategyResolver", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["StrategyResolver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Lazy", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Lazy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "All", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["All"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Optional", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Optional"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Parent", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Parent"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Factory", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Factory"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "NewInstance", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["NewInstance"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getDecoratorDependencies", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["getDecoratorDependencies"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "lazy", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["lazy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "all", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["all"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "optional", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["optional"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "parent", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["parent"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "factory", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["factory"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "newInstance", function() { return __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["newInstance"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getArrayObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getArrayObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getMapObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getMapObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getSetObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getSetObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "targetContext", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["targetContext"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "sourceContext", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["sourceContext"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "camelCase", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["camelCase"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "createOverrideContext", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["createOverrideContext"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getContextFor", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getContextFor"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "createScopeForTest", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["createScopeForTest"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "connectable", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["connectable"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "enqueueBindingConnect", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["enqueueBindingConnect"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "setConnectQueueThreshold", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["setConnectQueueThreshold"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "enableConnectQueue", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["enableConnectQueue"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "disableConnectQueue", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["disableConnectQueue"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getConnectQueueSize", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getConnectQueueSize"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "subscriberCollection", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["subscriberCollection"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ExpressionObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ExpressionObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "calcSplices", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["calcSplices"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "mergeSplice", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["mergeSplice"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "projectArraySplices", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["projectArraySplices"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "getChangeRecords", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["getChangeRecords"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ModifyCollectionObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ModifyCollectionObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CollectionLengthObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CollectionLengthObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Expression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Expression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindingBehavior", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["BindingBehavior"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ValueConverter", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ValueConverter"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Assign", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Assign"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Conditional", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Conditional"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "AccessThis", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["AccessThis"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "AccessScope", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["AccessScope"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "AccessMember", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["AccessMember"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "AccessKeyed", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["AccessKeyed"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CallScope", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CallScope"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CallMember", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CallMember"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CallFunction", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CallFunction"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Binary", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Binary"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Unary", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Unary"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LiteralPrimitive", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["LiteralPrimitive"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LiteralString", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["LiteralString"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LiteralTemplate", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["LiteralTemplate"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LiteralArray", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["LiteralArray"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LiteralObject", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["LiteralObject"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Unparser", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Unparser"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ExpressionCloner", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ExpressionCloner"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "cloneExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["cloneExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "bindingMode", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["bindingMode"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Parser", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Parser"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ParserImplementation", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ParserImplementation"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "delegationStrategy", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["delegationStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "EventManager", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["EventManager"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "EventSubscriber", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["EventSubscriber"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DirtyChecker", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["DirtyChecker"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DirtyCheckProperty", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["DirtyCheckProperty"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "propertyAccessor", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["propertyAccessor"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "PrimitiveObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["PrimitiveObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SetterObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["SetterObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "XLinkAttributeObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["XLinkAttributeObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "dataAttributeAccessor", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["dataAttributeAccessor"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DataAttributeObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["DataAttributeObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "StyleObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["StyleObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ValueAttributeObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ValueAttributeObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CheckedObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CheckedObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SelectValueObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["SelectValueObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ClassObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ClassObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "hasDeclaredDependencies", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["hasDeclaredDependencies"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "declarePropertyDependencies", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["declarePropertyDependencies"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "computedFrom", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["computedFrom"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ComputedExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ComputedExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "createComputedObserver", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["createComputedObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "elements", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["elements"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "presentationElements", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["presentationElements"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "presentationAttributes", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["presentationAttributes"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SVGAnalyzer", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["SVGAnalyzer"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ObserverLocator", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ObserverLocator"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ObjectObservationAdapter", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ObjectObservationAdapter"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindingExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["BindingExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Binding", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Binding"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CallExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["CallExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Call", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Call"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ValueConverterResource", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ValueConverterResource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "valueConverter", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["valueConverter"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindingBehaviorResource", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["BindingBehaviorResource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "bindingBehavior", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["bindingBehavior"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ListenerExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["ListenerExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Listener", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["Listener"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "NameExpression", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["NameExpression"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindingEngine", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["BindingEngine"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "observable", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["observable"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "connectBindingToSignal", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["connectBindingToSignal"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "signalBindings", function() { return __WEBPACK_IMPORTED_MODULE_6_aurelia_binding__["signalBindings"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "metadata", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["metadata"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Origin", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["Origin"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "decorators", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["decorators"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "deprecated", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["deprecated"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "mixin", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "protocol", function() { return __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["protocol"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Animator", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["Animator"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BehaviorInstruction", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BehaviorInstruction"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BehaviorPropertyObserver", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BehaviorPropertyObserver"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindableProperty", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BindableProperty"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BindingLanguage", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BindingLanguage"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BoundViewFactory", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BoundViewFactory"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CompositionEngine", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["CompositionEngine"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CompositionTransaction", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["CompositionTransaction"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CompositionTransactionNotifier", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["CompositionTransactionNotifier"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CompositionTransactionOwnershipToken", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["CompositionTransactionOwnershipToken"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Controller", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["Controller"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ConventionalViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ConventionalViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ElementConfigResource", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ElementConfigResource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ElementEvents", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ElementEvents"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "HtmlBehaviorResource", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["HtmlBehaviorResource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "InlineViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["InlineViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ModuleAnalyzer", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ModuleAnalyzer"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "NoViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["NoViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "PassThroughSlot", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["PassThroughSlot"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "RelativeViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["RelativeViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ResourceDescription", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ResourceDescription"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ResourceLoadContext", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ResourceLoadContext"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ResourceModule", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ResourceModule"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ShadowDOM", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ShadowDOM"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ShadowSlot", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ShadowSlot"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SlotCustomAttribute", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["SlotCustomAttribute"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "StaticViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["StaticViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SwapStrategies", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["SwapStrategies"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TargetInstruction", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["TargetInstruction"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TemplateRegistryViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["TemplateRegistryViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TemplatingEngine", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["TemplatingEngine"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "View", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["View"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewCompileInstruction", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewCompileInstruction"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewCompiler", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewCompiler"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewEngine", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewEngine"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewEngineHooksResource", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewEngineHooksResource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewFactory", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewFactory"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewLocator", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewLocator"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewResources", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewResources"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ViewSlot", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewSlot"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "_hyphenate", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["_hyphenate"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "_isAllWhitespace", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["_isAllWhitespace"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "animationEvent", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["animationEvent"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "behavior", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["behavior"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "bindable", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["bindable"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "child", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["child"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "children", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["children"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "containerless", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["containerless"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "customAttribute", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["customAttribute"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "customElement", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["customElement"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "dynamicOptions", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["dynamicOptions"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "elementConfig", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["elementConfig"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "inlineView", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["inlineView"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "noView", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["noView"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "processAttributes", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["processAttributes"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "processContent", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["processContent"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "resource", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["resource"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "templateController", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["templateController"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "useShadowDOM", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["useShadowDOM"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "useView", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["useView"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "useViewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["useViewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "validateBehaviorName", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["validateBehaviorName"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "view", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["view"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "viewEngineHooks", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["viewEngineHooks"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "viewResources", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["viewResources"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "viewStrategy", function() { return __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["viewStrategy"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TemplateDependency", function() { return __WEBPACK_IMPORTED_MODULE_2_aurelia_loader__["TemplateDependency"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TemplateRegistryEntry", function() { return __WEBPACK_IMPORTED_MODULE_2_aurelia_loader__["TemplateRegistryEntry"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Loader", function() { return __WEBPACK_IMPORTED_MODULE_2_aurelia_loader__["Loader"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "TaskQueue", function() { return __WEBPACK_IMPORTED_MODULE_8_aurelia_task_queue__["TaskQueue"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "buildQueryString", function() { return __WEBPACK_IMPORTED_MODULE_3_aurelia_path__["buildQueryString"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "join", function() { return __WEBPACK_IMPORTED_MODULE_3_aurelia_path__["join"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "parseQueryString", function() { return __WEBPACK_IMPORTED_MODULE_3_aurelia_path__["parseQueryString"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "relativeToFile", function() { return __WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "AggregateError", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["AggregateError"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FEATURE", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["FEATURE"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "PLATFORM", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["PLATFORM"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DOM", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "isInitialized", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["isInitialized"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "initializePAL", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["initializePAL"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "reset", function() { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["reset"]; });














/* harmony reexport (module object) */ __webpack_require__.d(exports, "LogManager", function() { return __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__; });


var logger = __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["getLogger"]('aurelia');
var extPattern = /\.[^/.]+$/;
function runTasks(config, tasks) {
    var current;
    var next = function () {
        current = tasks.shift();
        if (current) {
            return Promise.resolve(current(config)).then(next);
        }
        return Promise.resolve();
    };
    return next();
}
function loadPlugin(fwConfig, loader, info) {
    logger.debug("Loading plugin ".concat(info.moduleId, "."));
    if (typeof info.moduleId === 'string') {
        fwConfig.resourcesRelativeTo = info.resourcesRelativeTo;
        var id = info.moduleId;
        if (info.resourcesRelativeTo.length > 1) {
            return loader.normalize(info.moduleId, info.resourcesRelativeTo[1])
                .then(function (normalizedId) { return _loadPlugin(normalizedId); });
        }
        return _loadPlugin(id);
    }
    else if (typeof info.configure === 'function') {
        if (fwConfig.configuredPlugins.indexOf(info.configure) !== -1) {
            return Promise.resolve();
        }
        fwConfig.configuredPlugins.push(info.configure);
        return Promise.resolve(info.configure.call(null, fwConfig, info.config || {}));
    }
    throw new Error(invalidConfigMsg(info.moduleId || info.configure, 'plugin'));
    function _loadPlugin(moduleId) {
        return loader.loadModule(moduleId).then(function (m) {
            if ('configure' in m) {
                if (fwConfig.configuredPlugins.indexOf(m.configure) !== -1) {
                    return Promise.resolve();
                }
                return Promise.resolve(m.configure(fwConfig, info.config || {})).then(function () {
                    fwConfig.configuredPlugins.push(m.configure);
                    fwConfig.resourcesRelativeTo = null;
                    logger.debug("Configured plugin ".concat(info.moduleId, "."));
                });
            }
            fwConfig.resourcesRelativeTo = null;
            logger.debug("Loaded plugin ".concat(info.moduleId, "."));
        });
    }
}
function loadResources(aurelia, resourcesToLoad, appResources) {
    if (Object.keys(resourcesToLoad).length === 0) {
        return Promise.resolve();
    }
    var viewEngine = aurelia.container.get(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewEngine"]);
    return Promise.all(Object.keys(resourcesToLoad).map(function (n) { return _normalize(resourcesToLoad[n]); }))
        .then(function (loads) {
        var names = [];
        var importIds = [];
        loads.forEach(function (l) {
            names.push(undefined);
            importIds.push(l.importId);
        });
        return viewEngine.importViewResources(importIds, names, appResources);
    });
    function _normalize(load) {
        var moduleId = load.moduleId;
        var ext = getExt(moduleId);
        if (isOtherResource(moduleId)) {
            moduleId = removeExt(moduleId);
        }
        return aurelia.loader.normalize(moduleId, load.relativeTo)
            .then(function (normalized) {
            return {
                name: load.moduleId,
                importId: isOtherResource(load.moduleId) ? addOriginalExt(normalized, ext) : normalized
            };
        });
    }
    function isOtherResource(name) {
        var ext = getExt(name);
        if (!ext)
            return false;
        if (ext === '')
            return false;
        if (ext === '.js' || ext === '.ts')
            return false;
        return true;
    }
    function removeExt(name) {
        return name.replace(extPattern, '');
    }
    function addOriginalExt(normalized, ext) {
        return removeExt(normalized) + '.' + ext;
    }
}
function getExt(name) {
    var match = name.match(extPattern);
    if (match && match.length > 0) {
        return (match[0].split('.'))[1];
    }
}
function loadBehaviors(config) {
    return Promise.all(config.behaviorsToLoad.map(function (m) { return m.load(config.container, m.target); })).then(function () {
        config.behaviorsToLoad = null;
    });
}
function assertProcessed(plugins) {
    if (plugins.processed) {
        throw new Error('This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.');
    }
}
function invalidConfigMsg(cfg, type) {
    return "Invalid ".concat(type, " [").concat(cfg, "], ").concat(type, " must be specified as functions or relative module IDs.");
}
var FrameworkConfiguration = (function () {
    function FrameworkConfiguration(aurelia) {
        var _this = this;
        this.aurelia = aurelia;
        this.container = aurelia.container;
        this.info = [];
        this.processed = false;
        this.preTasks = [];
        this.postTasks = [];
        this.behaviorsToLoad = [];
        this.configuredPlugins = [];
        this.resourcesToLoad = {};
        this.preTask(function () { return aurelia.loader.normalize('aurelia-bootstrapper', undefined)
            .then(function (name) { return _this.bootstrapperName = name; }); });
        this.postTask(function () { return loadResources(aurelia, _this.resourcesToLoad, aurelia.resources); });
    }
    FrameworkConfiguration.prototype.instance = function (type, instance) {
        this.container.registerInstance(type, instance);
        return this;
    };
    FrameworkConfiguration.prototype.singleton = function (type, implementation) {
        this.container.registerSingleton(type, implementation);
        return this;
    };
    FrameworkConfiguration.prototype.transient = function (type, implementation) {
        this.container.registerTransient(type, implementation);
        return this;
    };
    FrameworkConfiguration.prototype.preTask = function (task) {
        assertProcessed(this);
        this.preTasks.push(task);
        return this;
    };
    FrameworkConfiguration.prototype.postTask = function (task) {
        assertProcessed(this);
        this.postTasks.push(task);
        return this;
    };
    FrameworkConfiguration.prototype.feature = function (plugin, config) {
        if (config === void 0) { config = {}; }
        switch (typeof plugin) {
            case 'string':
                var hasIndex = /\/index$/i.test(plugin);
                var moduleId = hasIndex || getExt(plugin) ? plugin : plugin + '/index';
                var root = hasIndex ? plugin.slice(0, -6) : plugin;
                this.info.push({ moduleId: moduleId, resourcesRelativeTo: [root, ''], config: config });
                break;
            case 'function':
                this.info.push({ configure: plugin, config: config || {} });
                break;
            default:
                throw new Error(invalidConfigMsg(plugin, 'feature'));
        }
        return this;
    };
    FrameworkConfiguration.prototype.globalResources = function (resources) {
        var _this = this;
        assertProcessed(this);
        var toAdd = Array.isArray(resources) ? resources : arguments;
        var resource;
        var resourcesRelativeTo = this.resourcesRelativeTo || ['', ''];
        for (var i = 0, ii = toAdd.length; i < ii; ++i) {
            resource = toAdd[i];
            switch (typeof resource) {
                case 'string':
                    var parent_1 = resourcesRelativeTo[0];
                    var grandParent = resourcesRelativeTo[1];
                    var name_1 = resource;
                    if ((resource.startsWith('./') || resource.startsWith('../')) && parent_1 !== '') {
                        name_1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["join"])(parent_1, resource);
                    }
                    this.resourcesToLoad[name_1] = { moduleId: name_1, relativeTo: grandParent };
                    break;
                case 'function':
                    var meta = this.aurelia.resources.autoRegister(this.container, resource);
                    if (meta instanceof __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["HtmlBehaviorResource"] && meta.elementName !== null) {
                        if (this.behaviorsToLoad.push(meta) === 1) {
                            this.postTask(function () { return loadBehaviors(_this); });
                        }
                    }
                    break;
                default:
                    throw new Error(invalidConfigMsg(resource, 'resource'));
            }
        }
        return this;
    };
    FrameworkConfiguration.prototype.globalName = function (resourcePath, newName) {
        assertProcessed(this);
        this.resourcesToLoad[resourcePath] = { moduleId: newName, relativeTo: '' };
        return this;
    };
    FrameworkConfiguration.prototype.plugin = function (plugin, pluginConfig) {
        assertProcessed(this);
        var info;
        switch (typeof plugin) {
            case 'string':
                info = { moduleId: plugin, resourcesRelativeTo: [plugin, ''], config: pluginConfig || {} };
                break;
            case 'function':
                info = { configure: plugin, config: pluginConfig || {} };
                break;
            default:
                throw new Error(invalidConfigMsg(plugin, 'plugin'));
        }
        this.info.push(info);
        return this;
    };
    FrameworkConfiguration.prototype._addNormalizedPlugin = function (name, config) {
        var _this = this;
        var plugin = { moduleId: name, resourcesRelativeTo: [name, ''], config: config || {} };
        this.info.push(plugin);
        this.preTask(function () {
            var relativeTo = [name, _this.bootstrapperName];
            plugin.moduleId = name;
            plugin.resourcesRelativeTo = relativeTo;
            return Promise.resolve();
        });
        return this;
    };
    FrameworkConfiguration.prototype.defaultBindingLanguage = function () {
        return this._addNormalizedPlugin('aurelia-templating-binding');
    };
    FrameworkConfiguration.prototype.router = function () {
        return this._addNormalizedPlugin('aurelia-templating-router');
    };
    FrameworkConfiguration.prototype.history = function () {
        return this._addNormalizedPlugin('aurelia-history-browser');
    };
    FrameworkConfiguration.prototype.defaultResources = function () {
        return this._addNormalizedPlugin('aurelia-templating-resources');
    };
    FrameworkConfiguration.prototype.eventAggregator = function () {
        return this._addNormalizedPlugin('aurelia-event-aggregator');
    };
    FrameworkConfiguration.prototype.basicConfiguration = function () {
        return this.defaultBindingLanguage().defaultResources().eventAggregator();
    };
    FrameworkConfiguration.prototype.standardConfiguration = function () {
        return this.basicConfiguration().history().router();
    };
    FrameworkConfiguration.prototype.developmentLogging = function (level) {
        var _this = this;
        var logLevel = level ? __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["logLevel"][level] : undefined;
        if (logLevel === undefined) {
            logLevel = __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["logLevel"].debug;
        }
        this.preTask(function () {
            return _this.aurelia.loader.normalize('aurelia-logging-console', _this.bootstrapperName).then(function (name) {
                return _this.aurelia.loader.loadModule(name).then(function (m) {
                    __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["addAppender"](new m.ConsoleAppender());
                    __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["setLevel"](logLevel);
                });
            });
        });
        return this;
    };
    FrameworkConfiguration.prototype.apply = function () {
        var _this = this;
        if (this.processed) {
            return Promise.resolve();
        }
        return runTasks(this, this.preTasks).then(function () {
            var loader = _this.aurelia.loader;
            var info = _this.info;
            var current;
            var next = function () {
                current = info.shift();
                if (current) {
                    return loadPlugin(_this, loader, current).then(next);
                }
                _this.processed = true;
                _this.configuredPlugins = null;
                return Promise.resolve();
            };
            return next().then(function () { return runTasks(_this, _this.postTasks); });
        });
    };
    return FrameworkConfiguration;
}());

function preventActionlessFormSubmit() {
    __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].addEventListener('submit', function (evt) {
        var target = evt.target;
        var action = target.action;
        if (target.tagName.toLowerCase() === 'form' && !action) {
            evt.preventDefault();
        }
    }, false);
}
var Aurelia = (function () {
    function Aurelia(loader, container, resources) {
        this.loader = loader || new __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["PLATFORM"].Loader();
        this.container = container || (new __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Container"]()).makeGlobal();
        this.resources = resources || new __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewResources"]();
        this.use = new FrameworkConfiguration(this);
        this.logger = __WEBPACK_IMPORTED_MODULE_5_aurelia_logging__["getLogger"]('aurelia');
        this.hostConfigured = false;
        this.host = null;
        this.use.instance(Aurelia, this);
        this.use.instance(__WEBPACK_IMPORTED_MODULE_2_aurelia_loader__["Loader"], this.loader);
        this.use.instance(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewResources"], this.resources);
    }
    Aurelia.prototype.start = function () {
        var _this = this;
        if (this._started) {
            return this._started;
        }
        this.logger.info('Aurelia Starting');
        return this._started = this.use.apply().then(function () {
            preventActionlessFormSubmit();
            if (!_this.container.hasResolver(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["BindingLanguage"])) {
                var message = 'You must configure Aurelia with a BindingLanguage implementation.';
                _this.logger.error(message);
                throw new Error(message);
            }
            _this.logger.info('Aurelia Started');
            var evt = __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].createCustomEvent('aurelia-started', { bubbles: true, cancelable: true });
            __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].dispatchEvent(evt);
            return _this;
        });
    };
    Aurelia.prototype.enhance = function (bindingContext, applicationHost) {
        var _this = this;
        if (bindingContext === void 0) { bindingContext = {}; }
        if (applicationHost === void 0) { applicationHost = null; }
        this._configureHost(applicationHost || __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].querySelectorAll('body')[0]);
        return new Promise(function (resolve) {
            var engine = _this.container.get(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["TemplatingEngine"]);
            _this.root = engine.enhance({ container: _this.container, element: _this.host, resources: _this.resources, bindingContext: bindingContext });
            _this.root.attached();
            _this._onAureliaComposed();
            resolve(_this);
        });
    };
    Aurelia.prototype.setRoot = function (root, applicationHost) {
        var _this = this;
        if (root === void 0) { root = null; }
        if (applicationHost === void 0) { applicationHost = null; }
        var instruction = {};
        if (this.root && this.root.viewModel && this.root.viewModel.router) {
            this.root.viewModel.router.deactivate();
            this.root.viewModel.router.reset();
        }
        this._configureHost(applicationHost);
        var engine = this.container.get(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["TemplatingEngine"]);
        var transaction = this.container.get(__WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["CompositionTransaction"]);
        delete transaction.initialComposition;
        if (!root) {
            if (this.configModuleId) {
                root = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_path__["relativeToFile"])('./app', this.configModuleId);
            }
            else {
                root = 'app';
            }
        }
        instruction.viewModel = root;
        instruction.container = instruction.childContainer = this.container;
        instruction.viewSlot = this.hostSlot;
        instruction.host = this.host;
        return engine.compose(instruction).then(function (r) {
            _this.root = r;
            instruction.viewSlot.attached();
            _this._onAureliaComposed();
            return _this;
        });
    };
    Aurelia.prototype._configureHost = function (applicationHost) {
        if (this.hostConfigured) {
            return;
        }
        applicationHost = applicationHost || this.host;
        if (!applicationHost || typeof applicationHost === 'string') {
            this.host = __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].getElementById(applicationHost || 'applicationHost');
        }
        else {
            this.host = applicationHost;
        }
        if (!this.host) {
            throw new Error('No applicationHost was specified.');
        }
        this.hostConfigured = true;
        this.host.aurelia = this;
        this.hostSlot = new __WEBPACK_IMPORTED_MODULE_1_aurelia_templating__["ViewSlot"](this.host, true);
        this.hostSlot.transformChildNodesIntoView();
        this.container.registerInstance(__WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].boundary, this.host);
    };
    Aurelia.prototype._onAureliaComposed = function () {
        var evt = __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].createCustomEvent('aurelia-composed', { bubbles: true, cancelable: true });
        setTimeout(function () { return __WEBPACK_IMPORTED_MODULE_4_aurelia_pal__["DOM"].dispatchEvent(evt); }, 1);
    };
    return Aurelia;
}());


//# sourceMappingURL=aurelia-framework.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("bluebird")))

/***/ },

/***/ "aurelia-history-browser":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_history__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__ = __webpack_require__(27);
/* harmony export (binding) */ __webpack_require__.d(exports, "BrowserHistory", function() { return BrowserHistory; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DefaultLinkHandler", function() { return DefaultLinkHandler; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LinkHandler", function() { return LinkHandler; });
/* harmony export (binding) */ __webpack_require__.d(exports, "configure", function() { return configure; });



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var LinkHandler = (function () {
    function LinkHandler() {
    }
    LinkHandler.prototype.activate = function (history) { };
    LinkHandler.prototype.deactivate = function () { };
    return LinkHandler;
}());
var DefaultLinkHandler = (function (_super) {
    __extends(DefaultLinkHandler, _super);
    function DefaultLinkHandler() {
        var _this = _super.call(this) || this;
        _this.handler = function (e) {
            var _a = DefaultLinkHandler.getEventInfo(e), shouldHandleEvent = _a.shouldHandleEvent, href = _a.href;
            if (shouldHandleEvent) {
                e.preventDefault();
                _this.history.navigate(href);
            }
        };
        return _this;
    }
    DefaultLinkHandler.prototype.activate = function (history) {
        if (history._hasPushState) {
            this.history = history;
            __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].addEventListener('click', this.handler, true);
        }
    };
    DefaultLinkHandler.prototype.deactivate = function () {
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].removeEventListener('click', this.handler, true);
    };
    DefaultLinkHandler.getEventInfo = function (event) {
        var $event = event;
        var info = {
            shouldHandleEvent: false,
            href: null,
            anchor: null
        };
        var target = DefaultLinkHandler.findClosestAnchor($event.target);
        if (!target || !DefaultLinkHandler.targetIsThisWindow(target)) {
            return info;
        }
        if (hasAttribute(target, 'download')
            || hasAttribute(target, 'router-ignore')
            || hasAttribute(target, 'data-router-ignore')) {
            return info;
        }
        if ($event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey) {
            return info;
        }
        var href = target.getAttribute('href');
        info.anchor = target;
        info.href = href;
        var leftButtonClicked = $event.which === 1;
        var isRelative = href && !(href.charAt(0) === '#' || (/^[a-z]+:/i).test(href));
        info.shouldHandleEvent = leftButtonClicked && isRelative;
        return info;
    };
    DefaultLinkHandler.findClosestAnchor = function (el) {
        while (el) {
            if (el.tagName === 'A') {
                return el;
            }
            el = el.parentNode;
        }
    };
    DefaultLinkHandler.targetIsThisWindow = function (target) {
        var targetWindow = target.getAttribute('target');
        var win = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].global;
        return !targetWindow ||
            targetWindow === win.name ||
            targetWindow === '_self';
    };
    return DefaultLinkHandler;
}(LinkHandler));
var hasAttribute = function (el, attr) { return el.hasAttribute(attr); };

var BrowserHistory = (function (_super) {
    __extends(BrowserHistory, _super);
    function BrowserHistory(linkHandler) {
        var _this = _super.call(this) || this;
        _this._isActive = false;
        _this._checkUrlCallback = _this._checkUrl.bind(_this);
        _this.location = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].location;
        _this.history = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].history;
        _this.linkHandler = linkHandler;
        return _this;
    }
    BrowserHistory.prototype.activate = function (options) {
        if (this._isActive) {
            throw new Error('History has already been activated.');
        }
        var $history = this.history;
        var wantsPushState = !!options.pushState;
        this._isActive = true;
        var normalizedOptions = this.options = Object.assign({}, { root: '/' }, this.options, options);
        var rootUrl = this.root = ('/' + normalizedOptions.root + '/').replace(rootStripper, '/');
        var wantsHashChange = this._wantsHashChange = normalizedOptions.hashChange !== false;
        var hasPushState = this._hasPushState = !!(normalizedOptions.pushState && $history && $history.pushState);
        var eventName;
        if (hasPushState) {
            eventName = 'popstate';
        }
        else if (wantsHashChange) {
            eventName = 'hashchange';
        }
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].addEventListener(eventName, this._checkUrlCallback);
        if (wantsHashChange && wantsPushState) {
            var $location = this.location;
            var atRoot = $location.pathname.replace(/[^\/]$/, '$&/') === rootUrl;
            if (!hasPushState && !atRoot) {
                var fragment = this.fragment = this._getFragment(null, true);
                $location.replace(rootUrl + $location.search + '#' + fragment);
                return true;
            }
            else if (hasPushState && atRoot && $location.hash) {
                var fragment = this.fragment = this._getHash().replace(routeStripper, '');
                $history.replaceState({}, __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].title, rootUrl + fragment + $location.search);
            }
        }
        if (!this.fragment) {
            this.fragment = this._getFragment('');
        }
        this.linkHandler.activate(this);
        if (!normalizedOptions.silent) {
            return this._loadUrl('');
        }
    };
    BrowserHistory.prototype.deactivate = function () {
        var handler = this._checkUrlCallback;
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].removeEventListener('popstate', handler);
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["PLATFORM"].removeEventListener('hashchange', handler);
        this._isActive = false;
        this.linkHandler.deactivate();
    };
    BrowserHistory.prototype.getAbsoluteRoot = function () {
        var $location = this.location;
        var origin = createOrigin($location.protocol, $location.hostname, $location.port);
        return "" + origin + this.root;
    };
    BrowserHistory.prototype.navigate = function (fragment, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.trigger, trigger = _c === void 0 ? true : _c, _d = _b.replace, replace = _d === void 0 ? false : _d;
        var location = this.location;
        if (fragment && absoluteUrl.test(fragment)) {
            location.href = fragment;
            return true;
        }
        if (!this._isActive) {
            return false;
        }
        fragment = this._getFragment(fragment || '');
        if (this.fragment === fragment && !replace) {
            return false;
        }
        this.fragment = fragment;
        var url = this.root + fragment;
        if (fragment === '' && url !== '/') {
            url = url.slice(0, -1);
        }
        if (this._hasPushState) {
            url = url.replace('//', '/');
            this.history[replace ? 'replaceState' : 'pushState']({}, __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].title, url);
        }
        else if (this._wantsHashChange) {
            updateHash(location, fragment, replace);
        }
        else {
            location.assign(url);
        }
        if (trigger) {
            return this._loadUrl(fragment);
        }
        return true;
    };
    BrowserHistory.prototype.navigateBack = function () {
        this.history.back();
    };
    BrowserHistory.prototype.setTitle = function (title) {
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].title = title;
    };
    BrowserHistory.prototype.setState = function (key, value) {
        var $history = this.history;
        var state = Object.assign({}, $history.state);
        var _a = this.location, pathname = _a.pathname, search = _a.search, hash = _a.hash;
        state[key] = value;
        $history.replaceState(state, null, "" + pathname + search + hash);
    };
    BrowserHistory.prototype.getState = function (key) {
        var state = Object.assign({}, this.history.state);
        return state[key];
    };
    BrowserHistory.prototype.getHistoryIndex = function () {
        var historyIndex = this.getState('HistoryIndex');
        if (historyIndex === undefined) {
            historyIndex = this.history.length - 1;
            this.setState('HistoryIndex', historyIndex);
        }
        return historyIndex;
    };
    BrowserHistory.prototype.go = function (movement) {
        this.history.go(movement);
    };
    BrowserHistory.prototype._getHash = function () {
        return this.location.hash.substr(1);
    };
    BrowserHistory.prototype._getFragment = function (fragment, forcePushState) {
        var rootUrl;
        if (!fragment) {
            if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                var location_1 = this.location;
                fragment = location_1.pathname + location_1.search;
                rootUrl = this.root.replace(trailingSlash, '');
                if (!fragment.indexOf(rootUrl)) {
                    fragment = fragment.substr(rootUrl.length);
                }
            }
            else {
                fragment = this._getHash();
            }
        }
        return '/' + fragment.replace(routeStripper, '');
    };
    BrowserHistory.prototype._checkUrl = function () {
        var current = this._getFragment('');
        if (current !== this.fragment) {
            this._loadUrl('');
        }
    };
    BrowserHistory.prototype._loadUrl = function (fragmentOverride) {
        var fragment = this.fragment = this._getFragment(fragmentOverride);
        return this.options.routeHandler ?
            this.options.routeHandler(fragment) :
            false;
    };
    BrowserHistory.inject = [LinkHandler];
    return BrowserHistory;
}(__WEBPACK_IMPORTED_MODULE_0_aurelia_history__["History"]));
var routeStripper = /^#?\/*|\s+$/g;
var rootStripper = /^\/+|\/+$/g;
var trailingSlash = /\/$/;
var absoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
function updateHash($location, fragment, replace) {
    if (replace) {
        var href = $location.href.replace(/(javascript:|#).*$/, '');
        $location.replace(href + '#' + fragment);
    }
    else {
        $location.hash = '#' + fragment;
    }
}
function createOrigin(protocol, hostname, port) {
    return protocol + "//" + hostname + (port ? ':' + port : '');
}

function configure(config) {
    var $config = config;
    $config.singleton(__WEBPACK_IMPORTED_MODULE_0_aurelia_history__["History"], BrowserHistory);
    $config.transient(LinkHandler, DefaultLinkHandler);
}


//# sourceMappingURL=aurelia-history-browser.js.map


/***/ },

/***/ "aurelia-logging-console":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "ConsoleAppender", function() { return ConsoleAppender; });


var ConsoleAppender = function () {
  function ConsoleAppender() {
    
  }

  ConsoleAppender.prototype.debug = function debug(logger) {
    var _console;

    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    (_console = console).debug.apply(_console, ["DEBUG [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.info = function info(logger) {
    var _console2;

    for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }

    (_console2 = console).info.apply(_console2, ["INFO [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.warn = function warn(logger) {
    var _console3;

    for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }

    (_console3 = console).warn.apply(_console3, ["WARN [" + logger.id + "]"].concat(rest));
  };

  ConsoleAppender.prototype.error = function error(logger) {
    var _console4;

    for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      rest[_key4 - 1] = arguments[_key4];
    }

    (_console4 = console).error.apply(_console4, ["ERROR [" + logger.id + "]"].concat(rest));
  };

  return ConsoleAppender;
}();

/***/ },

/***/ "aurelia-route-recognizer":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_path__ = __webpack_require__(52);
/* harmony export (binding) */ __webpack_require__.d(exports, "State", function() { return State; });
/* harmony export (binding) */ __webpack_require__.d(exports, "StaticSegment", function() { return StaticSegment; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DynamicSegment", function() { return DynamicSegment; });
/* harmony export (binding) */ __webpack_require__.d(exports, "StarSegment", function() { return StarSegment; });
/* harmony export (binding) */ __webpack_require__.d(exports, "EpsilonSegment", function() { return EpsilonSegment; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouteRecognizer", function() { return RouteRecognizer; });




var State = function () {
  function State(charSpec) {
    

    this.charSpec = charSpec;
    this.nextStates = [];
  }

  State.prototype.get = function get(charSpec) {
    for (var _iterator = this.nextStates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var child = _ref;

      var isEqual = child.charSpec.validChars === charSpec.validChars && child.charSpec.invalidChars === charSpec.invalidChars;

      if (isEqual) {
        return child;
      }
    }

    return undefined;
  };

  State.prototype.put = function put(charSpec) {
    var state = this.get(charSpec);

    if (state) {
      return state;
    }

    state = new State(charSpec);

    this.nextStates.push(state);

    if (charSpec.repeat) {
      state.nextStates.push(state);
    }

    return state;
  };

  State.prototype.match = function match(ch) {
    var nextStates = this.nextStates;
    var results = [];

    for (var i = 0, l = nextStates.length; i < l; i++) {
      var child = nextStates[i];
      var charSpec = child.charSpec;

      if (charSpec.validChars !== undefined) {
        if (charSpec.validChars.indexOf(ch) !== -1) {
          results.push(child);
        }
      } else if (charSpec.invalidChars !== undefined) {
        if (charSpec.invalidChars.indexOf(ch) === -1) {
          results.push(child);
        }
      }
    }

    return results;
  };

  return State;
}();

var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

var StaticSegment = function () {
  function StaticSegment(string, caseSensitive) {
    

    this.string = string;
    this.caseSensitive = caseSensitive;
  }

  StaticSegment.prototype.eachChar = function eachChar(callback) {
    var s = this.string;
    for (var i = 0, ii = s.length; i < ii; ++i) {
      var ch = s[i];
      callback({ validChars: this.caseSensitive ? ch : ch.toUpperCase() + ch.toLowerCase() });
    }
  };

  StaticSegment.prototype.regex = function regex() {
    return this.string.replace(escapeRegex, '\\$1');
  };

  StaticSegment.prototype.generate = function generate() {
    return this.string;
  };

  return StaticSegment;
}();

var DynamicSegment = function () {
  function DynamicSegment(name, optional) {
    

    this.name = name;
    this.optional = optional;
  }

  DynamicSegment.prototype.eachChar = function eachChar(callback) {
    callback({ invalidChars: '/', repeat: true });
  };

  DynamicSegment.prototype.regex = function regex() {
    return '([^/]+)';
  };

  DynamicSegment.prototype.generate = function generate(params, consumed) {
    consumed[this.name] = true;
    return params[this.name];
  };

  return DynamicSegment;
}();

var StarSegment = function () {
  function StarSegment(name) {
    

    this.name = name;
  }

  StarSegment.prototype.eachChar = function eachChar(callback) {
    callback({ invalidChars: '', repeat: true });
  };

  StarSegment.prototype.regex = function regex() {
    return '(.+)';
  };

  StarSegment.prototype.generate = function generate(params, consumed) {
    consumed[this.name] = true;
    return params[this.name];
  };

  return StarSegment;
}();

var EpsilonSegment = function () {
  function EpsilonSegment() {
    
  }

  EpsilonSegment.prototype.eachChar = function eachChar() {};

  EpsilonSegment.prototype.regex = function regex() {
    return '';
  };

  EpsilonSegment.prototype.generate = function generate() {
    return '';
  };

  return EpsilonSegment;
}();

var RouteRecognizer = function () {
  function RouteRecognizer() {
    

    this.rootState = new State();
    this.names = {};
    this.routes = new Map();
  }

  RouteRecognizer.prototype.add = function add(route) {
    var _this = this;

    if (Array.isArray(route)) {
      route.forEach(function (r) {
        return _this.add(r);
      });
      return undefined;
    }

    var currentState = this.rootState;
    var skippableStates = [];
    var regex = '^';
    var types = { statics: 0, dynamics: 0, stars: 0 };
    var names = [];
    var routeName = route.handler.name;
    var isEmpty = true;
    var segments = parse(route.path, names, types, route.caseSensitive);

    for (var i = 0, ii = segments.length; i < ii; i++) {
      var segment = segments[i];
      if (segment instanceof EpsilonSegment) {
        continue;
      }

      var _addSegment = addSegment(currentState, segment),
          firstState = _addSegment[0],
          nextState = _addSegment[1];

      for (var j = 0, jj = skippableStates.length; j < jj; j++) {
        skippableStates[j].nextStates.push(firstState);
      }

      if (segment.optional) {
        skippableStates.push(nextState);
        regex += '(?:/' + segment.regex() + ')?';
      } else {
        currentState = nextState;
        regex += '/' + segment.regex();
        skippableStates.length = 0;
        isEmpty = false;
      }
    }

    if (isEmpty) {
      currentState = currentState.put({ validChars: '/' });
      regex += '/?';
    }

    var handlers = [{ handler: route.handler, names: names }];

    this.routes.set(route.handler, { segments: segments, handlers: handlers });
    if (routeName) {
      var routeNames = Array.isArray(routeName) ? routeName : [routeName];
      for (var _i2 = 0; _i2 < routeNames.length; _i2++) {
        if (!(routeNames[_i2] in this.names)) {
          this.names[routeNames[_i2]] = { segments: segments, handlers: handlers };
        }
      }
    }

    for (var _i3 = 0; _i3 < skippableStates.length; _i3++) {
      var state = skippableStates[_i3];
      state.handlers = handlers;
      state.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');
      state.types = types;
    }

    currentState.handlers = handlers;
    currentState.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');
    currentState.types = types;

    return currentState;
  };

  RouteRecognizer.prototype.getRoute = function getRoute(nameOrRoute) {
    return typeof nameOrRoute === 'string' ? this.names[nameOrRoute] : this.routes.get(nameOrRoute);
  };

  RouteRecognizer.prototype.handlersFor = function handlersFor(nameOrRoute) {
    var route = this.getRoute(nameOrRoute);
    if (!route) {
      throw new Error('There is no route named ' + nameOrRoute);
    }

    return [].concat(route.handlers);
  };

  RouteRecognizer.prototype.hasRoute = function hasRoute(nameOrRoute) {
    return !!this.getRoute(nameOrRoute);
  };

  RouteRecognizer.prototype.generate = function generate(nameOrRoute, params) {
    var route = this.getRoute(nameOrRoute);
    if (!route) {
      throw new Error('There is no route named ' + nameOrRoute);
    }

    var handler = route.handlers[0].handler;
    if (handler.generationUsesHref) {
      return handler.href;
    }

    var routeParams = Object.assign({}, params);
    var segments = route.segments;
    var consumed = {};
    var output = '';

    for (var i = 0, l = segments.length; i < l; i++) {
      var segment = segments[i];

      if (segment instanceof EpsilonSegment) {
        continue;
      }

      var segmentValue = segment.generate(routeParams, consumed);
      if (segmentValue === null || segmentValue === undefined) {
        if (!segment.optional) {
          throw new Error('A value is required for route parameter \'' + segment.name + '\' in route \'' + nameOrRoute + '\'.');
        }
      } else {
        output += '/';
        output += segmentValue;
      }
    }

    if (output.charAt(0) !== '/') {
      output = '/' + output;
    }

    for (var param in consumed) {
      delete routeParams[param];
    }

    var queryString = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_path__["buildQueryString"])(routeParams);
    output += queryString ? '?' + queryString : '';

    return output;
  };

  RouteRecognizer.prototype.recognize = function recognize(path) {
    var states = [this.rootState];
    var queryParams = {};
    var isSlashDropped = false;
    var normalizedPath = path;

    var queryStart = normalizedPath.indexOf('?');
    if (queryStart !== -1) {
      var queryString = normalizedPath.substr(queryStart + 1, normalizedPath.length);
      normalizedPath = normalizedPath.substr(0, queryStart);
      queryParams = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_path__["parseQueryString"])(queryString);
    }

    normalizedPath = decodeURI(normalizedPath);

    if (normalizedPath.charAt(0) !== '/') {
      normalizedPath = '/' + normalizedPath;
    }

    var pathLen = normalizedPath.length;
    if (pathLen > 1 && normalizedPath.charAt(pathLen - 1) === '/') {
      normalizedPath = normalizedPath.substr(0, pathLen - 1);
      isSlashDropped = true;
    }

    for (var i = 0, l = normalizedPath.length; i < l; i++) {
      states = recognizeChar(states, normalizedPath.charAt(i));
      if (!states.length) {
        break;
      }
    }

    var solutions = [];
    for (var _i4 = 0, _l = states.length; _i4 < _l; _i4++) {
      if (states[_i4].handlers) {
        solutions.push(states[_i4]);
      }
    }

    states = sortSolutions(solutions);

    var state = solutions[0];
    if (state && state.handlers) {
      if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {
        normalizedPath = normalizedPath + '/';
      }

      return findHandler(state, normalizedPath, queryParams);
    }
  };

  return RouteRecognizer;
}();

var RecognizeResults = function RecognizeResults(queryParams) {
  

  this.splice = Array.prototype.splice;
  this.slice = Array.prototype.slice;
  this.push = Array.prototype.push;
  this.length = 0;
  this.queryParams = queryParams || {};
};

function parse(route, names, types, caseSensitive) {
  var normalizedRoute = route;
  if (route.charAt(0) === '/') {
    normalizedRoute = route.substr(1);
  }

  var results = [];

  var splitRoute = normalizedRoute.split('/');
  for (var i = 0, ii = splitRoute.length; i < ii; ++i) {
    var segment = splitRoute[i];

    var match = segment.match(/^:([^?]+)(\?)?$/);
    if (match) {
      var _match = match,
          _name = _match[1],
          optional = _match[2];

      if (_name.indexOf('=') !== -1) {
        throw new Error('Parameter ' + _name + ' in route ' + route + ' has a default value, which is not supported.');
      }
      results.push(new DynamicSegment(_name, !!optional));
      names.push(_name);
      types.dynamics++;
      continue;
    }

    match = segment.match(/^\*(.+)$/);
    if (match) {
      results.push(new StarSegment(match[1]));
      names.push(match[1]);
      types.stars++;
    } else if (segment === '') {
      results.push(new EpsilonSegment());
    } else {
      results.push(new StaticSegment(segment, caseSensitive));
      types.statics++;
    }
  }

  return results;
}

function sortSolutions(states) {
  return states.sort(function (a, b) {
    if (a.types.stars !== b.types.stars) {
      return a.types.stars - b.types.stars;
    }

    if (a.types.stars) {
      if (a.types.statics !== b.types.statics) {
        return b.types.statics - a.types.statics;
      }
      if (a.types.dynamics !== b.types.dynamics) {
        return b.types.dynamics - a.types.dynamics;
      }
    }

    if (a.types.dynamics !== b.types.dynamics) {
      return a.types.dynamics - b.types.dynamics;
    }

    if (a.types.statics !== b.types.statics) {
      return b.types.statics - a.types.statics;
    }

    return 0;
  });
}

function recognizeChar(states, ch) {
  var nextStates = [];

  for (var i = 0, l = states.length; i < l; i++) {
    var state = states[i];
    nextStates.push.apply(nextStates, state.match(ch));
  }

  return nextStates;
}

function findHandler(state, path, queryParams) {
  var handlers = state.handlers;
  var regex = state.regex;
  var captures = path.match(regex);
  var currentCapture = 1;
  var result = new RecognizeResults(queryParams);

  for (var i = 0, l = handlers.length; i < l; i++) {
    var _handler = handlers[i];
    var _names = _handler.names;
    var _params = {};

    for (var j = 0, m = _names.length; j < m; j++) {
      _params[_names[j]] = captures[currentCapture++];
    }

    result.push({ handler: _handler.handler, params: _params, isDynamic: !!_names.length });
  }

  return result;
}

function addSegment(currentState, segment) {
  var firstState = currentState.put({ validChars: '/' });
  var nextState = firstState;
  segment.eachChar(function (ch) {
    nextState = nextState.put(ch);
  });

  return [firstState, nextState];
}

/***/ },

/***/ "aurelia-router":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_logging__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_dependency_injection__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_history__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_route_recognizer__ = __webpack_require__("aurelia-route-recognizer");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_aurelia_event_aggregator__ = __webpack_require__("aurelia-event-aggregator");
/* harmony export (binding) */ __webpack_require__.d(exports, "ActivateNextStep", function() { return ActivateNextStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AppRouter", function() { return AppRouter; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BuildNavigationPlanStep", function() { return BuildNavigationPlanStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CanActivateNextStep", function() { return CanActivateNextStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CanDeactivatePreviousStep", function() { return CanDeactivatePreviousStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "CommitChangesStep", function() { return CommitChangesStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DeactivatePreviousStep", function() { return DeactivatePreviousStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LoadRouteStep", function() { return LoadRouteStep; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NavModel", function() { return NavModel; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NavigationInstruction", function() { return NavigationInstruction; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Pipeline", function() { return Pipeline; });
/* harmony export (binding) */ __webpack_require__.d(exports, "PipelineProvider", function() { return PipelineProvider; });
/* harmony export (binding) */ __webpack_require__.d(exports, "PipelineSlotName", function() { return PipelineSlotName; });
/* harmony export (binding) */ __webpack_require__.d(exports, "PipelineStatus", function() { return PipelineStatus; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Redirect", function() { return Redirect; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RedirectToRoute", function() { return RedirectToRoute; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouteLoader", function() { return RouteLoader; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Router", function() { return Router; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouterConfiguration", function() { return RouterConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouterEvent", function() { return RouterEvent; });
/* harmony export (binding) */ __webpack_require__.d(exports, "activationStrategy", function() { return activationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "isNavigationCommand", function() { return isNavigationCommand; });






/**
 * Class used to represent an instruction during a navigation.
 */
class NavigationInstruction {
    constructor(init) {
        /**
         * Current built viewport plan of this nav instruction
         */
        this.plan = null;
        this.options = {};
        Object.assign(this, init);
        this.params = this.params || {};
        this.viewPortInstructions = {};
        let ancestorParams = [];
        let current = this;
        do {
            let currentParams = Object.assign({}, current.params);
            if (current.config && current.config.hasChildRouter) {
                // remove the param for the injected child route segment
                delete currentParams[current.getWildCardName()];
            }
            ancestorParams.unshift(currentParams);
            current = current.parentInstruction;
        } while (current);
        let allParams = Object.assign({}, this.queryParams, ...ancestorParams);
        this.lifecycleArgs = [allParams, this.config, this];
    }
    /**
     * Gets an array containing this instruction and all child instructions for the current navigation.
     */
    getAllInstructions() {
        let instructions = [this];
        let viewPortInstructions = this.viewPortInstructions;
        for (let key in viewPortInstructions) {
            let childInstruction = viewPortInstructions[key].childNavigationInstruction;
            if (childInstruction) {
                instructions.push(...childInstruction.getAllInstructions());
            }
        }
        return instructions;
    }
    /**
     * Gets an array containing the instruction and all child instructions for the previous navigation.
     * Previous instructions are no longer available after navigation completes.
     */
    getAllPreviousInstructions() {
        return this.getAllInstructions().map(c => c.previousInstruction).filter(c => c);
    }
    addViewPortInstruction(nameOrInitOptions, strategy, moduleId, component) {
        let viewPortInstruction;
        let viewPortName = typeof nameOrInitOptions === 'string' ? nameOrInitOptions : nameOrInitOptions.name;
        const lifecycleArgs = this.lifecycleArgs;
        const config = Object.assign({}, lifecycleArgs[1], { currentViewPort: viewPortName });
        if (typeof nameOrInitOptions === 'string') {
            viewPortInstruction = {
                name: nameOrInitOptions,
                strategy: strategy,
                moduleId: moduleId,
                component: component,
                childRouter: component.childRouter,
                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]
            };
        }
        else {
            viewPortInstruction = {
                name: viewPortName,
                strategy: nameOrInitOptions.strategy,
                component: nameOrInitOptions.component,
                moduleId: nameOrInitOptions.moduleId,
                childRouter: nameOrInitOptions.component.childRouter,
                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]
            };
        }
        return this.viewPortInstructions[viewPortName] = viewPortInstruction;
    }
    /**
     * Gets the name of the route pattern's wildcard parameter, if applicable.
     */
    getWildCardName() {
        // todo: potential issue, or at least unsafe typings
        let configRoute = this.config.route;
        let wildcardIndex = configRoute.lastIndexOf('*');
        return configRoute.substr(wildcardIndex + 1);
    }
    /**
     * Gets the path and query string created by filling the route
     * pattern's wildcard parameter with the matching param.
     */
    getWildcardPath() {
        let wildcardName = this.getWildCardName();
        let path = this.params[wildcardName] || '';
        let queryString = this.queryString;
        if (queryString) {
            path += '?' + queryString;
        }
        return path;
    }
    /**
     * Gets the instruction's base URL, accounting for wildcard route parameters.
     */
    getBaseUrl() {
        let $encodeURI = encodeURI;
        let fragment = decodeURI(this.fragment);
        if (fragment === '') {
            let nonEmptyRoute = this.router.routes.find(route => {
                return route.name === this.config.name &&
                    route.route !== '';
            });
            if (nonEmptyRoute) {
                fragment = nonEmptyRoute.route;
            }
        }
        if (!this.params) {
            return $encodeURI(fragment);
        }
        let wildcardName = this.getWildCardName();
        let path = this.params[wildcardName] || '';
        if (!path) {
            return $encodeURI(fragment);
        }
        return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));
    }
    /**
     * Finalize a viewport instruction
     * @internal
     */
    _commitChanges(waitToSwap) {
        let router = this.router;
        router.currentInstruction = this;
        const previousInstruction = this.previousInstruction;
        if (previousInstruction) {
            previousInstruction.config.navModel.isActive = false;
        }
        this.config.navModel.isActive = true;
        router.refreshNavigation();
        let loads = [];
        let delaySwaps = [];
        let viewPortInstructions = this.viewPortInstructions;
        for (let viewPortName in viewPortInstructions) {
            let viewPortInstruction = viewPortInstructions[viewPortName];
            let viewPort = router.viewPorts[viewPortName];
            if (!viewPort) {
                throw new Error(`There was no router-view found in the view for ${viewPortInstruction.moduleId}.`);
            }
            let childNavInstruction = viewPortInstruction.childNavigationInstruction;
            if (viewPortInstruction.strategy === "replace" /* Replace */) {
                if (childNavInstruction && childNavInstruction.parentCatchHandler) {
                    loads.push(childNavInstruction._commitChanges(waitToSwap));
                }
                else {
                    if (waitToSwap) {
                        delaySwaps.push({ viewPort, viewPortInstruction });
                    }
                    loads.push(viewPort
                        .process(viewPortInstruction, waitToSwap)
                        .then(() => childNavInstruction
                        ? childNavInstruction._commitChanges(waitToSwap)
                        : Promise.resolve()));
                }
            }
            else {
                if (childNavInstruction) {
                    loads.push(childNavInstruction._commitChanges(waitToSwap));
                }
            }
        }
        return Promise
            .all(loads)
            .then(() => {
            delaySwaps.forEach(x => x.viewPort.swap(x.viewPortInstruction));
            return null;
        })
            .then(() => prune(this));
    }
    /**@internal */
    _updateTitle() {
        let router = this.router;
        let title = this._buildTitle(router.titleSeparator);
        if (title) {
            router.history.setTitle(title);
        }
    }
    /**@internal */
    _buildTitle(separator = ' | ') {
        let title = '';
        let childTitles = [];
        let navModelTitle = this.config.navModel.title;
        let instructionRouter = this.router;
        let viewPortInstructions = this.viewPortInstructions;
        if (navModelTitle) {
            title = instructionRouter.transformTitle(navModelTitle);
        }
        for (let viewPortName in viewPortInstructions) {
            let viewPortInstruction = viewPortInstructions[viewPortName];
            let child_nav_instruction = viewPortInstruction.childNavigationInstruction;
            if (child_nav_instruction) {
                let childTitle = child_nav_instruction._buildTitle(separator);
                if (childTitle) {
                    childTitles.push(childTitle);
                }
            }
        }
        if (childTitles.length) {
            title = childTitles.join(separator) + (title ? separator : '') + title;
        }
        if (instructionRouter.title) {
            title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);
        }
        return title;
    }
}
const prune = (instruction) => {
    instruction.previousInstruction = null;
    instruction.plan = null;
};

/**
* Class for storing and interacting with a route's navigation settings.
*/
class NavModel {
    constructor(router, relativeHref) {
        /**
        * True if this nav item is currently active.
        */
        this.isActive = false;
        /**
        * The title.
        */
        this.title = null;
        /**
        * This nav item's absolute href.
        */
        this.href = null;
        /**
        * This nav item's relative href.
        */
        this.relativeHref = null;
        /**
        * Data attached to the route at configuration time.
        */
        this.settings = {};
        /**
        * The route config.
        */
        this.config = null;
        this.router = router;
        this.relativeHref = relativeHref;
    }
    /**
    * Sets the route's title and updates document.title.
    *  If the a navigation is in progress, the change will be applied
    *  to document.title when the navigation completes.
    *
    * @param title The new title.
    */
    setTitle(title) {
        this.title = title;
        if (this.isActive) {
            this.router.updateTitle();
        }
    }
}

function _normalizeAbsolutePath(path, hasPushState, absolute = false) {
    if (!hasPushState && path[0] !== '#') {
        path = '#' + path;
    }
    if (hasPushState && absolute) {
        path = path.substring(1, path.length);
    }
    return path;
}
function _createRootedPath(fragment, baseUrl, hasPushState, absolute) {
    if (isAbsoluteUrl.test(fragment)) {
        return fragment;
    }
    let path = '';
    if (baseUrl.length && baseUrl[0] !== '/') {
        path += '/';
    }
    path += baseUrl;
    if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {
        path += '/';
    }
    if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {
        path = path.substring(0, path.length - 1);
    }
    return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);
}
function _resolveUrl(fragment, baseUrl, hasPushState) {
    if (isRootedPath.test(fragment)) {
        return _normalizeAbsolutePath(fragment, hasPushState);
    }
    return _createRootedPath(fragment, baseUrl, hasPushState);
}
function _ensureArrayWithSingleRoutePerConfig(config) {
    let routeConfigs = [];
    if (Array.isArray(config.route)) {
        for (let i = 0, ii = config.route.length; i < ii; ++i) {
            let current = Object.assign({}, config);
            current.route = config.route[i];
            routeConfigs.push(current);
        }
    }
    else {
        routeConfigs.push(Object.assign({}, config));
    }
    return routeConfigs;
}
const isRootedPath = /^#?\//;
const isAbsoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;

/**
 * Class used to configure a [[Router]] instance.
 *
 * @constructor
 */
class RouterConfiguration {
    constructor() {
        this.instructions = [];
        this.options = {};
        this.pipelineSteps = [];
    }
    /**
     * Adds a step to be run during the [[Router]]'s navigation pipeline.
     *
     * @param name The name of the pipeline slot to insert the step into.
     * @param step The pipeline step.
     * @chainable
     */
    addPipelineStep(name, step) {
        if (step === null || step === undefined) {
            throw new Error('Pipeline step cannot be null or undefined.');
        }
        this.pipelineSteps.push({ name, step });
        return this;
    }
    /**
     * Adds a step to be run during the [[Router]]'s authorize pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    addAuthorizeStep(step) {
        return this.addPipelineStep("authorize" /* Authorize */, step);
    }
    /**
     * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    addPreActivateStep(step) {
        return this.addPipelineStep("preActivate" /* PreActivate */, step);
    }
    /**
     * Adds a step to be run during the [[Router]]'s preRender pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    addPreRenderStep(step) {
        return this.addPipelineStep("preRender" /* PreRender */, step);
    }
    /**
     * Adds a step to be run during the [[Router]]'s postRender pipeline slot.
     *
     * @param step The pipeline step.
     * @chainable
     */
    addPostRenderStep(step) {
        return this.addPipelineStep("postRender" /* PostRender */, step);
    }
    /**
     * Configures a route that will be used if there is no previous location available on navigation cancellation.
     *
     * @param fragment The URL fragment to use as the navigation destination.
     * @chainable
     */
    fallbackRoute(fragment) {
        this._fallbackRoute = fragment;
        return this;
    }
    /**
     * Maps one or more routes to be registered with the router.
     *
     * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.
     * @chainable
     */
    map(route) {
        if (Array.isArray(route)) {
            route.forEach(r => this.map(r));
            return this;
        }
        return this.mapRoute(route);
    }
    /**
     * Configures defaults to use for any view ports.
     *
     * @param viewPortConfig a view port configuration object to use as a
     *  default, of the form { viewPortName: { moduleId } }.
     * @chainable
     */
    useViewPortDefaults(viewPortConfig) {
        this.viewPortDefaults = viewPortConfig;
        return this;
    }
    /**
     * Maps a single route to be registered with the router.
     *
     * @param route The [[RouteConfig]] to map.
     * @chainable
     */
    mapRoute(config) {
        this.instructions.push(router => {
            let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);
            let navModel;
            for (let i = 0, ii = routeConfigs.length; i < ii; ++i) {
                let routeConfig = routeConfigs[i];
                routeConfig.settings = routeConfig.settings || {};
                if (!navModel) {
                    navModel = router.createNavModel(routeConfig);
                }
                router.addRoute(routeConfig, navModel);
            }
        });
        return this;
    }
    /**
     * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.
     *
     * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the
     *  [[NavigationInstruction]] and selects a moduleId to load.
     * @chainable
     */
    mapUnknownRoutes(config) {
        this.unknownRouteConfig = config;
        return this;
    }
    /**
     * Applies the current configuration to the specified [[Router]].
     *
     * @param router The [[Router]] to apply the configuration to.
     */
    exportToRouter(router) {
        let instructions = this.instructions;
        for (let i = 0, ii = instructions.length; i < ii; ++i) {
            instructions[i](router);
        }
        let { title, titleSeparator, unknownRouteConfig, _fallbackRoute, viewPortDefaults } = this;
        if (title) {
            router.title = title;
        }
        if (titleSeparator) {
            router.titleSeparator = titleSeparator;
        }
        if (unknownRouteConfig) {
            router.handleUnknownRoutes(unknownRouteConfig);
        }
        if (_fallbackRoute) {
            router.fallbackRoute = _fallbackRoute;
        }
        if (viewPortDefaults) {
            router.useViewPortDefaults(viewPortDefaults);
        }
        Object.assign(router.options, this.options);
        let pipelineSteps = this.pipelineSteps;
        let pipelineStepCount = pipelineSteps.length;
        if (pipelineStepCount) {
            if (!router.isRoot) {
                throw new Error('Pipeline steps can only be added to the root router');
            }
            let pipelineProvider = router.pipelineProvider;
            for (let i = 0, ii = pipelineStepCount; i < ii; ++i) {
                let { name, step } = pipelineSteps[i];
                pipelineProvider.addStep(name, step);
            }
        }
    }
}

/**
 * The primary class responsible for handling routing and navigation.
 */
class Router {
    /**
     * @param container The [[Container]] to use when child routers.
     * @param history The [[History]] implementation to delegate navigation requests to.
     */
    constructor(container, history) {
        /**
         * The parent router, or null if this instance is not a child router.
         */
        this.parent = null;
        this.options = {};
        /**
         * The defaults used when a viewport lacks specified content
         */
        this.viewPortDefaults = {};
        /**
         * Extension point to transform the document title before it is built and displayed.
         * By default, child routers delegate to the parent router, and the app router
         * returns the title unchanged.
         */
        this.transformTitle = (title) => {
            if (this.parent) {
                return this.parent.transformTitle(title);
            }
            return title;
        };
        this.container = container;
        this.history = history;
        this.reset();
    }
    /**
     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.
     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.
     */
    reset() {
        this.viewPorts = {};
        this.routes = [];
        this.baseUrl = '';
        this.isConfigured = false;
        this.isNavigating = false;
        this.isExplicitNavigation = false;
        this.isExplicitNavigationBack = false;
        this.isNavigatingFirst = false;
        this.isNavigatingNew = false;
        this.isNavigatingRefresh = false;
        this.isNavigatingForward = false;
        this.isNavigatingBack = false;
        this.couldDeactivate = false;
        this.navigation = [];
        this.currentInstruction = null;
        this.viewPortDefaults = {};
        this._fallbackOrder = 100;
        this._recognizer = new __WEBPACK_IMPORTED_MODULE_3_aurelia_route_recognizer__["RouteRecognizer"]();
        this._childRecognizer = new __WEBPACK_IMPORTED_MODULE_3_aurelia_route_recognizer__["RouteRecognizer"]();
        this._configuredPromise = new Promise(resolve => {
            this._resolveConfiguredPromise = resolve;
        });
    }
    /**
     * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.
     */
    get isRoot() {
        return !this.parent;
    }
    /**
     * Registers a viewPort to be used as a rendering target for activated routes.
     *
     * @param viewPort The viewPort.
     * @param name The name of the viewPort. 'default' if unspecified.
     */
    registerViewPort(viewPort, name) {
        name = name || 'default';
        this.viewPorts[name] = viewPort;
    }
    /**
     * Returns a Promise that resolves when the router is configured.
     */
    ensureConfigured() {
        return this._configuredPromise;
    }
    /**
     * Configures the router.
     *
     * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].
     */
    configure(callbackOrConfig) {
        this.isConfigured = true;
        let result = callbackOrConfig;
        let config;
        if (typeof callbackOrConfig === 'function') {
            config = new RouterConfiguration();
            result = callbackOrConfig(config);
        }
        return Promise
            .resolve(result)
            .then((c) => {
            if (c && c.exportToRouter) {
                config = c;
            }
            config.exportToRouter(this);
            this.isConfigured = true;
            this._resolveConfiguredPromise();
        });
    }
    /**
     * Navigates to a new location.
     *
     * @param fragment The URL fragment to use as the navigation destination.
     * @param options The navigation options.
     */
    navigate(fragment, options) {
        if (!this.isConfigured && this.parent) {
            return this.parent.navigate(fragment, options);
        }
        this.isExplicitNavigation = true;
        return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);
    }
    /**
     * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed
     * by [[Router.navigate]].
     *
     * @param route The name of the route to use when generating the navigation location.
     * @param params The route parameters to be used when populating the route pattern.
     * @param options The navigation options.
     */
    navigateToRoute(route, params, options) {
        let path = this.generate(route, params);
        return this.navigate(path, options);
    }
    /**
     * Navigates back to the most recent location in history.
     */
    navigateBack() {
        this.isExplicitNavigationBack = true;
        this.history.navigateBack();
    }
    /**
     * Creates a child router of the current router.
     *
     * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.
     * @returns {Router} The new child Router.
     */
    createChild(container) {
        let childRouter = new Router(container || this.container.createChild(), this.history);
        childRouter.parent = this;
        return childRouter;
    }
    /**
     * Generates a URL fragment matching the specified route pattern.
     *
     * @param name The name of the route whose pattern should be used to generate the fragment.
     * @param params The route params to be used to populate the route pattern.
     * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.
     * @returns {string} A string containing the generated URL fragment.
     */
    generate(nameOrRoute, params = {}, options = {}) {
        // A child recognizer generates routes for potential child routes. Any potential child route is added
        // to the childRoute property of params for the childRouter to recognize. When generating routes, we
        // use the childRecognizer when childRoute params are available to generate a child router enabled route.
        let recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;
        let hasRoute = recognizer.hasRoute(nameOrRoute);
        if (!hasRoute) {
            if (this.parent) {
                return this.parent.generate(nameOrRoute, params, options);
            }
            throw new Error(`A route with name '${nameOrRoute}' could not be found. Check that \`name: '${nameOrRoute}'\` was specified in the route's config.`);
        }
        let path = recognizer.generate(nameOrRoute, params);
        let rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);
        return options.absolute ? `${this.history.getAbsoluteRoot()}${rootedPath}` : rootedPath;
    }
    /**
     * Creates a [[NavModel]] for the specified route config.
     *
     * @param config The route config.
     */
    createNavModel(config) {
        let navModel = new NavModel(this, 'href' in config
            ? config.href
            // potential error when config.route is a string[] ?
            : config.route);
        navModel.title = config.title;
        navModel.order = config.nav;
        navModel.href = config.href;
        navModel.settings = config.settings;
        navModel.config = config;
        return navModel;
    }
    /**
     * Registers a new route with the router.
     *
     * @param config The [[RouteConfig]].
     * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.
     */
    addRoute(config, navModel) {
        if (Array.isArray(config.route)) {
            let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);
            // the following is wrong. todo: fix this after TS refactoring release
            routeConfigs.forEach(this.addRoute.bind(this));
            return;
        }
        validateRouteConfig(config);
        if (!('viewPorts' in config) && !config.navigationStrategy) {
            config.viewPorts = {
                'default': {
                    moduleId: config.moduleId,
                    view: config.view
                }
            };
        }
        if (!navModel) {
            navModel = this.createNavModel(config);
        }
        this.routes.push(config);
        let path = config.route;
        if (path.charAt(0) === '/') {
            path = path.substr(1);
        }
        let caseSensitive = config.caseSensitive === true;
        let state = this._recognizer.add({
            path: path,
            handler: config,
            caseSensitive: caseSensitive
        });
        if (path) {
            let settings = config.settings;
            delete config.settings;
            let withChild = JSON.parse(JSON.stringify(config));
            config.settings = settings;
            withChild.route = `${path}/*childRoute`;
            withChild.hasChildRouter = true;
            this._childRecognizer.add({
                path: withChild.route,
                handler: withChild,
                caseSensitive: caseSensitive
            });
            withChild.navModel = navModel;
            withChild.settings = config.settings;
            withChild.navigationStrategy = config.navigationStrategy;
        }
        config.navModel = navModel;
        let navigation = this.navigation;
        if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {
            if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {
                throw new Error('Invalid route config for "' + config.route + '" : dynamic routes must specify an "href:" to be included in the navigation model.');
            }
            if (typeof navModel.order !== 'number') {
                navModel.order = ++this._fallbackOrder;
            }
            navigation.push(navModel);
            // this is a potential error / inconsistency between browsers
            //
            // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
            // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,
            // but sorted with respect to all different elements.
            // Note: the ECMAscript standard does not guarantee this behaviour,
            // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
            navigation.sort((a, b) => a.order - b.order);
        }
    }
    /**
     * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.
     *
     * @param name The name of the route to check.
     */
    hasRoute(name) {
        return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));
    }
    /**
     * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.
     *
     * @param name The name of the route to check.
     */
    hasOwnRoute(name) {
        return this._recognizer.hasRoute(name);
    }
    /**
     * Register a handler to use when the incoming URL fragment doesn't match any registered routes.
     *
     * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].
     */
    handleUnknownRoutes(config) {
        if (!config) {
            throw new Error('Invalid unknown route handler');
        }
        this.catchAllHandler = instruction => {
            return this
                ._createRouteConfig(config, instruction)
                .then(c => {
                instruction.config = c;
                return instruction;
            });
        };
    }
    /**
     * Updates the document title using the current navigation instruction.
     */
    updateTitle() {
        let parentRouter = this.parent;
        if (parentRouter) {
            return parentRouter.updateTitle();
        }
        let currentInstruction = this.currentInstruction;
        if (currentInstruction) {
            currentInstruction._updateTitle();
        }
        return undefined;
    }
    /**
     * Updates the navigation routes with hrefs relative to the current location.
     * Note: This method will likely move to a plugin in a future release.
     */
    refreshNavigation() {
        let nav = this.navigation;
        for (let i = 0, length = nav.length; i < length; i++) {
            let current = nav[i];
            if (!current.config.href) {
                current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);
            }
            else {
                current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);
            }
        }
    }
    /**
     * Sets the default configuration for the view ports. This specifies how to
     *  populate a view port for which no module is specified. The default is
     *  an empty view/view-model pair.
     */
    useViewPortDefaults($viewPortDefaults) {
        // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction
        let viewPortDefaults = $viewPortDefaults;
        for (let viewPortName in viewPortDefaults) {
            let viewPortConfig = viewPortDefaults[viewPortName];
            this.viewPortDefaults[viewPortName] = {
                moduleId: viewPortConfig.moduleId
            };
        }
    }
    /**@internal */
    _refreshBaseUrl() {
        let parentRouter = this.parent;
        if (parentRouter) {
            this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);
        }
    }
    /**@internal */
    _createNavigationInstruction(url = '', parentInstruction = null) {
        let fragment = url;
        let queryString = '';
        let queryIndex = url.indexOf('?');
        if (queryIndex !== -1) {
            fragment = url.substr(0, queryIndex);
            queryString = url.substr(queryIndex + 1);
        }
        let urlRecognizationResults = this._recognizer.recognize(url);
        if (!urlRecognizationResults || !urlRecognizationResults.length) {
            urlRecognizationResults = this._childRecognizer.recognize(url);
        }
        let instructionInit = {
            fragment,
            queryString,
            config: null,
            parentInstruction,
            previousInstruction: this.currentInstruction,
            router: this,
            options: {
                compareQueryParams: this.options.compareQueryParams
            }
        };
        let result;
        if (urlRecognizationResults && urlRecognizationResults.length) {
            let first = urlRecognizationResults[0];
            let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                params: first.params,
                queryParams: first.queryParams || urlRecognizationResults.queryParams,
                config: first.config || first.handler
            }));
            if (typeof first.handler === 'function') {
                result = evaluateNavigationStrategy(instruction, first.handler, first);
            }
            else if (first.handler && typeof first.handler.navigationStrategy === 'function') {
                result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);
            }
            else {
                result = Promise.resolve(instruction);
            }
        }
        else if (this.catchAllHandler) {
            let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                params: { path: fragment },
                queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},
                config: null // config will be created by the catchAllHandler
            }));
            result = evaluateNavigationStrategy(instruction, this.catchAllHandler);
        }
        else if (this.parent) {
            let router = this._parentCatchAllHandler(this.parent);
            if (router) {
                let newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);
                let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
                    params: { path: fragment },
                    queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},
                    router: router,
                    parentInstruction: newParentInstruction,
                    parentCatchHandler: true,
                    config: null // config will be created by the chained parent catchAllHandler
                }));
                result = evaluateNavigationStrategy(instruction, router.catchAllHandler);
            }
        }
        if (result && parentInstruction) {
            this.baseUrl = generateBaseUrl(this.parent, parentInstruction);
        }
        return result || Promise.reject(new Error(`Route not found: ${url}`));
    }
    /**@internal */
    _findParentInstructionFromRouter(router, instruction) {
        if (instruction.router === router) {
            instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId
            return instruction;
        }
        else if (instruction.parentInstruction) {
            return this._findParentInstructionFromRouter(router, instruction.parentInstruction);
        }
        return undefined;
    }
    /**@internal */
    _parentCatchAllHandler(router) {
        if (router.catchAllHandler) {
            return router;
        }
        else if (router.parent) {
            return this._parentCatchAllHandler(router.parent);
        }
        return false;
    }
    /**
     * @internal
     */
    _createRouteConfig(config, instruction) {
        return Promise
            .resolve(config)
            .then((c) => {
            if (typeof c === 'string') {
                return { moduleId: c };
            }
            else if (typeof c === 'function') {
                return c(instruction);
            }
            return c;
        })
            // typing here could be either RouteConfig or RedirectConfig
            // but temporarily treat both as RouteConfig
            // todo: improve typings precision
            .then((c) => typeof c === 'string' ? { moduleId: c } : c)
            .then((c) => {
            c.route = instruction.params.path;
            validateRouteConfig(c);
            if (!c.navModel) {
                c.navModel = this.createNavModel(c);
            }
            return c;
        });
    }
}
/* @internal exported for unit testing */
const generateBaseUrl = (router, instruction) => {
    return `${router.baseUrl || ''}${instruction.getBaseUrl() || ''}`;
};
/* @internal exported for unit testing */
const validateRouteConfig = (config) => {
    if (typeof config !== 'object') {
        throw new Error('Invalid Route Config');
    }
    if (typeof config.route !== 'string') {
        let name = config.name || '(no name)';
        throw new Error('Invalid Route Config for "' + name + '": You must specify a "route:" pattern.');
    }
    if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {
        throw new Error('Invalid Route Config for "' + config.route + '": You must specify a "moduleId:", "redirect:", "navigationStrategy:", or "viewPorts:".');
    }
};
/* @internal exported for unit testing */
const evaluateNavigationStrategy = (instruction, evaluator, context) => {
    return Promise
        .resolve(evaluator.call(context, instruction))
        .then(() => {
        if (!('viewPorts' in instruction.config)) {
            instruction.config.viewPorts = {
                'default': {
                    moduleId: instruction.config.moduleId
                }
            };
        }
        return instruction;
    });
};

/**@internal exported for unit testing */
const createNextFn = (instruction, steps) => {
    let index = -1;
    const next = function () {
        index++;
        if (index < steps.length) {
            let currentStep = steps[index];
            try {
                return currentStep(instruction, next);
            }
            catch (e) {
                return next.reject(e);
            }
        }
        else {
            return next.complete();
        }
    };
    next.complete = createCompletionHandler(next, "completed" /* Completed */);
    next.cancel = createCompletionHandler(next, "canceled" /* Canceled */);
    next.reject = createCompletionHandler(next, "rejected" /* Rejected */);
    return next;
};
/**@internal exported for unit testing */
const createCompletionHandler = (next, status) => {
    return (output) => Promise
        .resolve({
        status,
        output,
        completed: status === "completed" /* Completed */
    });
};

/**
 * The class responsible for managing and processing the navigation pipeline.
 */
class Pipeline {
    constructor() {
        /**
         * The pipeline steps. And steps added via addStep will be converted to a function
         * The actualy running functions with correct step contexts of this pipeline
         */
        this.steps = [];
    }
    /**
     * Adds a step to the pipeline.
     *
     * @param step The pipeline step.
     */
    addStep(step) {
        let run;
        if (typeof step === 'function') {
            run = step;
        }
        else if (typeof step.getSteps === 'function') {
            // getSteps is to enable support open slots
            // where devs can add multiple steps into the same slot name
            let steps = step.getSteps();
            for (let i = 0, l = steps.length; i < l; i++) {
                this.addStep(steps[i]);
            }
            return this;
        }
        else {
            run = step.run.bind(step);
        }
        this.steps.push(run);
        return this;
    }
    /**
     * Runs the pipeline.
     *
     * @param instruction The navigation instruction to process.
     */
    run(instruction) {
        const nextFn = createNextFn(instruction, this.steps);
        return nextFn();
    }
}

/**
* Determines if the provided object is a navigation command.
* A navigation command is anything with a navigate method.
*
* @param obj The object to check.
*/
function isNavigationCommand(obj) {
    return obj && typeof obj.navigate === 'function';
}
/**
* Used during the activation lifecycle to cause a redirect.
*/
class Redirect {
    /**
     * @param url The URL fragment to use as the navigation destination.
     * @param options The navigation options.
     */
    constructor(url, options = {}) {
        this.url = url;
        this.options = Object.assign({ trigger: true, replace: true }, options);
        this.shouldContinueProcessing = false;
    }
    /**
     * Called by the activation system to set the child router.
     *
     * @param router The router.
     */
    setRouter(router) {
        this.router = router;
    }
    /**
     * Called by the navigation pipeline to navigate.
     *
     * @param appRouter The router to be redirected.
     */
    navigate(appRouter) {
        let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);
        navigatingRouter.navigate(this.url, this.options);
    }
}
/**
 * Used during the activation lifecycle to cause a redirect to a named route.
 */
class RedirectToRoute {
    /**
     * @param route The name of the route.
     * @param params The parameters to be sent to the activation method.
     * @param options The options to use for navigation.
     */
    constructor(route, params = {}, options = {}) {
        this.route = route;
        this.params = params;
        this.options = Object.assign({ trigger: true, replace: true }, options);
        this.shouldContinueProcessing = false;
    }
    /**
     * Called by the activation system to set the child router.
     *
     * @param router The router.
     */
    setRouter(router) {
        this.router = router;
    }
    /**
     * Called by the navigation pipeline to navigate.
     *
     * @param appRouter The router to be redirected.
     */
    navigate(appRouter) {
        let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);
        navigatingRouter.navigateToRoute(this.route, this.params, this.options);
    }
}

/**
 * @internal exported for unit testing
 */
function _buildNavigationPlan(instruction, forceLifecycleMinimum) {
    let config = instruction.config;
    if ('redirect' in config) {
        return buildRedirectPlan(instruction);
    }
    const prevInstruction = instruction.previousInstruction;
    const defaultViewPortConfigs = instruction.router.viewPortDefaults;
    if (prevInstruction) {
        return buildTransitionPlans(instruction, prevInstruction, defaultViewPortConfigs, forceLifecycleMinimum);
    }
    // first navigation, only need to prepare a few information for each viewport plan
    const viewPortPlans = {};
    let viewPortConfigs = config.viewPorts;
    for (let viewPortName in viewPortConfigs) {
        let viewPortConfig = viewPortConfigs[viewPortName];
        if (viewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {
            viewPortConfig = defaultViewPortConfigs[viewPortName];
        }
        viewPortPlans[viewPortName] = {
            name: viewPortName,
            strategy: "replace" /* Replace */,
            config: viewPortConfig
        };
    }
    return Promise.resolve(viewPortPlans);
}
/**
 * Build redirect plan based on config of a navigation instruction
 * @internal exported for unit testing
 */
const buildRedirectPlan = (instruction) => {
    const config = instruction.config;
    const router = instruction.router;
    return router
        ._createNavigationInstruction(config.redirect)
        .then(redirectInstruction => {
        const params = {};
        const originalInstructionParams = instruction.params;
        const redirectInstructionParams = redirectInstruction.params;
        for (let key in redirectInstructionParams) {
            // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }
            let val = redirectInstructionParams[key];
            if (typeof val === 'string' && val[0] === ':') {
                val = val.slice(1);
                // And if that param is found on the original instruction then use it
                if (val in originalInstructionParams) {
                    params[key] = originalInstructionParams[val];
                }
            }
            else {
                params[key] = redirectInstructionParams[key];
            }
        }
        let redirectLocation = router.generate(redirectInstruction.config, params, instruction.options);
        // Special handling for child routes
        for (let key in originalInstructionParams) {
            redirectLocation = redirectLocation.replace(`:${key}`, originalInstructionParams[key]);
        }
        let queryString = instruction.queryString;
        if (queryString) {
            redirectLocation += '?' + queryString;
        }
        return Promise.resolve(new Redirect(redirectLocation));
    });
};
/**
 * @param viewPortPlans the Plan record that holds information about built plans
 * @internal exported for unit testing
 */
const buildTransitionPlans = (currentInstruction, previousInstruction, defaultViewPortConfigs, forceLifecycleMinimum) => {
    let viewPortPlans = {};
    let newInstructionConfig = currentInstruction.config;
    let hasNewParams = hasDifferentParameterValues(previousInstruction, currentInstruction);
    let pending = [];
    let previousViewPortInstructions = previousInstruction.viewPortInstructions;
    for (let viewPortName in previousViewPortInstructions) {
        const prevViewPortInstruction = previousViewPortInstructions[viewPortName];
        const prevViewPortComponent = prevViewPortInstruction.component;
        const newInstructionViewPortConfigs = newInstructionConfig.viewPorts;
        // if this is invoked on a viewport without any changes, based on new url,
        // newViewPortConfig will be the existing viewport instruction
        let nextViewPortConfig = viewPortName in newInstructionViewPortConfigs
            ? newInstructionViewPortConfigs[viewPortName]
            : prevViewPortInstruction;
        if (nextViewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {
            nextViewPortConfig = defaultViewPortConfigs[viewPortName];
        }
        const viewPortActivationStrategy = determineActivationStrategy(currentInstruction, prevViewPortInstruction, nextViewPortConfig, hasNewParams, forceLifecycleMinimum);
        const viewPortPlan = viewPortPlans[viewPortName] = {
            name: viewPortName,
            // ViewPortInstruction can quack like a RouteConfig
            config: nextViewPortConfig,
            prevComponent: prevViewPortComponent,
            prevModuleId: prevViewPortInstruction.moduleId,
            strategy: viewPortActivationStrategy
        };
        // recursively build nav plans for all existing child routers/viewports of this viewport
        // this is possible because existing child viewports and routers already have necessary information
        // to process the wildcard path from parent instruction
        if (viewPortActivationStrategy !== "replace" /* Replace */ && prevViewPortInstruction.childRouter) {
            const path = currentInstruction.getWildcardPath();
            const task = prevViewPortInstruction
                .childRouter
                ._createNavigationInstruction(path, currentInstruction)
                .then((childInstruction) => {
                viewPortPlan.childNavigationInstruction = childInstruction;
                return _buildNavigationPlan(childInstruction, 
                // is it safe to assume viewPortPlan has not been changed from previous assignment?
                // if so, can just use local variable viewPortPlanStrategy
                // there could be user code modifying viewport plan during _createNavigationInstruction?
                viewPortPlan.strategy === "invoke-lifecycle" /* InvokeLifecycle */)
                    .then(childPlan => {
                    if (childPlan instanceof Redirect) {
                        return Promise.reject(childPlan);
                    }
                    childInstruction.plan = childPlan;
                    // for bluebird ?
                    return null;
                });
            });
            pending.push(task);
        }
    }
    return Promise.all(pending).then(() => viewPortPlans);
};
/**
 * @param newViewPortConfig if this is invoked on a viewport without any changes, based on new url, newViewPortConfig will be the existing viewport instruction
 * @internal exported for unit testing
 */
const determineActivationStrategy = (currentNavInstruction, prevViewPortInstruction, newViewPortConfig, 
// indicates whether there is difference between old and new url params
hasNewParams, forceLifecycleMinimum) => {
    let newInstructionConfig = currentNavInstruction.config;
    let prevViewPortViewModel = prevViewPortInstruction.component.viewModel;
    let viewPortPlanStrategy;
    if (prevViewPortInstruction.moduleId !== newViewPortConfig.moduleId) {
        viewPortPlanStrategy = "replace" /* Replace */;
    }
    else if ('determineActivationStrategy' in prevViewPortViewModel) {
        viewPortPlanStrategy = prevViewPortViewModel.determineActivationStrategy(...currentNavInstruction.lifecycleArgs);
    }
    else if (newInstructionConfig.activationStrategy) {
        viewPortPlanStrategy = newInstructionConfig.activationStrategy;
    }
    else if (hasNewParams || forceLifecycleMinimum) {
        viewPortPlanStrategy = "invoke-lifecycle" /* InvokeLifecycle */;
    }
    else {
        viewPortPlanStrategy = "no-change" /* NoChange */;
    }
    return viewPortPlanStrategy;
};
/**@internal exported for unit testing */
const hasDifferentParameterValues = (prev, next) => {
    let prevParams = prev.params;
    let nextParams = next.params;
    let nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;
    for (let key in nextParams) {
        if (key === nextWildCardName) {
            continue;
        }
        if (prevParams[key] !== nextParams[key]) {
            return true;
        }
    }
    for (let key in prevParams) {
        if (key === nextWildCardName) {
            continue;
        }
        if (prevParams[key] !== nextParams[key]) {
            return true;
        }
    }
    if (!next.options.compareQueryParams) {
        return false;
    }
    let prevQueryParams = prev.queryParams;
    let nextQueryParams = next.queryParams;
    for (let key in nextQueryParams) {
        if (prevQueryParams[key] !== nextQueryParams[key]) {
            return true;
        }
    }
    for (let key in prevQueryParams) {
        if (prevQueryParams[key] !== nextQueryParams[key]) {
            return true;
        }
    }
    return false;
};

/**
 * Transform a navigation instruction into viewport plan record object,
 * or a redirect request if user viewmodel demands
 */
class BuildNavigationPlanStep {
    run(navigationInstruction, next) {
        return _buildNavigationPlan(navigationInstruction)
            .then(plan => {
            if (plan instanceof Redirect) {
                return next.cancel(plan);
            }
            navigationInstruction.plan = plan;
            return next();
        })
            .catch(next.cancel);
    }
}

/**
 * @internal Exported for unit testing
 */
const loadNewRoute = (routeLoader, navigationInstruction) => {
    let loadingPlans = determineLoadingPlans(navigationInstruction);
    let loadPromises = loadingPlans.map((loadingPlan) => loadRoute(routeLoader, loadingPlan.navigationInstruction, loadingPlan.viewPortPlan));
    return Promise.all(loadPromises);
};
/**
 * @internal Exported for unit testing
 */
const determineLoadingPlans = (navigationInstruction, loadingPlans = []) => {
    let viewPortPlans = navigationInstruction.plan;
    for (let viewPortName in viewPortPlans) {
        let viewPortPlan = viewPortPlans[viewPortName];
        let childNavInstruction = viewPortPlan.childNavigationInstruction;
        if (viewPortPlan.strategy === "replace" /* Replace */) {
            loadingPlans.push({ viewPortPlan, navigationInstruction });
            if (childNavInstruction) {
                determineLoadingPlans(childNavInstruction, loadingPlans);
            }
        }
        else {
            let viewPortInstruction = navigationInstruction.addViewPortInstruction({
                name: viewPortName,
                strategy: viewPortPlan.strategy,
                moduleId: viewPortPlan.prevModuleId,
                component: viewPortPlan.prevComponent
            });
            if (childNavInstruction) {
                viewPortInstruction.childNavigationInstruction = childNavInstruction;
                determineLoadingPlans(childNavInstruction, loadingPlans);
            }
        }
    }
    return loadingPlans;
};
/**
 * @internal Exported for unit testing
 */
const loadRoute = (routeLoader, navigationInstruction, viewPortPlan) => {
    let planConfig = viewPortPlan.config;
    let moduleId = planConfig ? planConfig.moduleId : null;
    return loadComponent(routeLoader, navigationInstruction, planConfig)
        .then((component) => {
        let viewPortInstruction = navigationInstruction.addViewPortInstruction({
            name: viewPortPlan.name,
            strategy: viewPortPlan.strategy,
            moduleId: moduleId,
            component: component
        });
        let childRouter = component.childRouter;
        if (childRouter) {
            let path = navigationInstruction.getWildcardPath();
            return childRouter
                ._createNavigationInstruction(path, navigationInstruction)
                .then((childInstruction) => {
                viewPortPlan.childNavigationInstruction = childInstruction;
                return _buildNavigationPlan(childInstruction)
                    .then((childPlan) => {
                    if (childPlan instanceof Redirect) {
                        return Promise.reject(childPlan);
                    }
                    childInstruction.plan = childPlan;
                    viewPortInstruction.childNavigationInstruction = childInstruction;
                    return loadNewRoute(routeLoader, childInstruction);
                });
            });
        }
        // ts complains without this, though they are same
        return void 0;
    });
};
/**
 * Load a routed-component based on navigation instruction and route config
 * @internal exported for unit testing only
 */
const loadComponent = (routeLoader, navigationInstruction, config) => {
    let router = navigationInstruction.router;
    let lifecycleArgs = navigationInstruction.lifecycleArgs;
    return Promise.resolve()
        .then(() => routeLoader.loadRoute(router, config, navigationInstruction))
        .then(
    /**
     * @param component an object carrying information about loaded route
     * typically contains information about view model, childContainer, view and router
     */
    (component) => {
        let { viewModel, childContainer } = component;
        component.router = router;
        component.config = config;
        if ('configureRouter' in viewModel) {
            let childRouter = childContainer.getChildRouter();
            component.childRouter = childRouter;
            return childRouter
                .configure(c => viewModel.configureRouter(c, childRouter, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]))
                .then(() => component);
        }
        return component;
    });
};

/**
 * Abstract class that is responsible for loading view / view model from a route config
 * The default implementation can be found in `aurelia-templating-router`
 */
class RouteLoader {
    /**
     * Load a route config based on its viewmodel / view configuration
     */
    // return typing: return typings used to be never
    // as it was a throw. Changing it to Promise<any> should not cause any issues
    loadRoute(router, config, navigationInstruction) {
        throw new Error('Route loaders must implement "loadRoute(router, config, navigationInstruction)".');
    }
}

/**
 * A pipeline step responsible for loading a route config of a navigation instruction
 */
class LoadRouteStep {
    /**@internal */
    static inject() { return [RouteLoader]; }
    constructor(routeLoader) {
        this.routeLoader = routeLoader;
    }
    /**
     * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline
     */
    run(navigationInstruction, next) {
        return loadNewRoute(this.routeLoader, navigationInstruction)
            .then(next, next.cancel);
    }
}

/**
 * A pipeline step for instructing a piepline to commit changes on a navigation instruction
 */
class CommitChangesStep {
    run(navigationInstruction, next) {
        return navigationInstruction
            ._commitChanges(/*wait to swap?*/ true)
            .then(() => {
            navigationInstruction._updateTitle();
            return next();
        });
    }
}

/**
 * An optional interface describing the available activation strategies.
 * @internal Used internally.
 */
var InternalActivationStrategy;
(function (InternalActivationStrategy) {
    /**
     * Reuse the existing view model, without invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["NoChange"] = "no-change";
    /**
     * Reuse the existing view model, invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["InvokeLifecycle"] = "invoke-lifecycle";
    /**
     * Replace the existing view model, invoking Router lifecycle hooks.
     */
    InternalActivationStrategy["Replace"] = "replace";
})(InternalActivationStrategy || (InternalActivationStrategy = {}));
/**
 * The strategy to use when activating modules during navigation.
 */
// kept for compat reason
const activationStrategy = {
    noChange: "no-change" /* NoChange */,
    invokeLifecycle: "invoke-lifecycle" /* InvokeLifecycle */,
    replace: "replace" /* Replace */
};

/**
 * Recursively find list of deactivate-able view models
 * and invoke the either 'canDeactivate' or 'deactivate' on each
 * @internal exported for unit testing
 */
const processDeactivatable = (navigationInstruction, callbackName, next, ignoreResult) => {
    let plan = navigationInstruction.plan;
    let infos = findDeactivatable(plan, callbackName);
    let i = infos.length; // query from inside out
    function inspect(val) {
        if (ignoreResult || shouldContinue(val)) {
            return iterate();
        }
        return next.cancel(val);
    }
    function iterate() {
        if (i--) {
            try {
                let viewModel = infos[i];
                let result = viewModel[callbackName](navigationInstruction);
                return processPotential(result, inspect, next.cancel);
            }
            catch (error) {
                return next.cancel(error);
            }
        }
        navigationInstruction.router.couldDeactivate = true;
        return next();
    }
    return iterate();
};
/**
 * Recursively find and returns a list of deactivate-able view models
 * @internal exported for unit testing
 */
const findDeactivatable = (plan, callbackName, list = []) => {
    for (let viewPortName in plan) {
        let viewPortPlan = plan[viewPortName];
        let prevComponent = viewPortPlan.prevComponent;
        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)
            && prevComponent) {
            let viewModel = prevComponent.viewModel;
            if (callbackName in viewModel) {
                list.push(viewModel);
            }
        }
        if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {
            addPreviousDeactivatable(prevComponent, callbackName, list);
        }
        else if (viewPortPlan.childNavigationInstruction) {
            findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);
        }
    }
    return list;
};
/**
 * @internal exported for unit testing
 */
const addPreviousDeactivatable = (component, callbackName, list) => {
    let childRouter = component.childRouter;
    if (childRouter && childRouter.currentInstruction) {
        let viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;
        for (let viewPortName in viewPortInstructions) {
            let viewPortInstruction = viewPortInstructions[viewPortName];
            let prevComponent = viewPortInstruction.component;
            let prevViewModel = prevComponent.viewModel;
            if (callbackName in prevViewModel) {
                list.push(prevViewModel);
            }
            addPreviousDeactivatable(prevComponent, callbackName, list);
        }
    }
};
/**
 * @internal exported for unit testing
 */
const processActivatable = (navigationInstruction, callbackName, next, ignoreResult) => {
    let infos = findActivatable(navigationInstruction, callbackName);
    let length = infos.length;
    let i = -1; // query from top down
    function inspect(val, router) {
        if (ignoreResult || shouldContinue(val, router)) {
            return iterate();
        }
        return next.cancel(val);
    }
    function iterate() {
        i++;
        if (i < length) {
            try {
                let current = infos[i];
                let result = current.viewModel[callbackName](...current.lifecycleArgs);
                return processPotential(result, (val) => inspect(val, current.router), next.cancel);
            }
            catch (error) {
                return next.cancel(error);
            }
        }
        return next();
    }
    return iterate();
};
/**
 * Find list of activatable view model and add to list (3rd parameter)
 * @internal exported for unit testing
 */
const findActivatable = (navigationInstruction, callbackName, list = [], router) => {
    let plan = navigationInstruction.plan;
    Object
        .keys(plan)
        .forEach((viewPortName) => {
        let viewPortPlan = plan[viewPortName];
        let viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName];
        let viewPortComponent = viewPortInstruction.component;
        let viewModel = viewPortComponent.viewModel;
        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle
            || viewPortPlan.strategy === activationStrategy.replace)
            && callbackName in viewModel) {
            list.push({
                viewModel,
                lifecycleArgs: viewPortInstruction.lifecycleArgs,
                router
            });
        }
        let childNavInstruction = viewPortPlan.childNavigationInstruction;
        if (childNavInstruction) {
            findActivatable(childNavInstruction, callbackName, list, viewPortComponent.childRouter || router);
        }
    });
    return list;
};
const shouldContinue = (output, router) => {
    if (output instanceof Error) {
        return false;
    }
    if (isNavigationCommand(output)) {
        if (typeof output.setRouter === 'function') {
            output.setRouter(router);
        }
        return !!output.shouldContinueProcessing;
    }
    if (output === undefined) {
        return true;
    }
    return output;
};
/**
 * wraps a subscription, allowing unsubscribe calls even if
 * the first value comes synchronously
 */
class SafeSubscription {
    constructor(subscriptionFunc) {
        this._subscribed = true;
        this._subscription = subscriptionFunc(this);
        if (!this._subscribed) {
            this.unsubscribe();
        }
    }
    get subscribed() {
        return this._subscribed;
    }
    unsubscribe() {
        if (this._subscribed && this._subscription) {
            this._subscription.unsubscribe();
        }
        this._subscribed = false;
    }
}
/**
 * A function to process return value from `activate`/`canActivate` steps
 * Supports observable/promise
 *
 * For observable, resolve at first next() or on complete()
 */
const processPotential = (obj, resolve, reject) => {
    // if promise like
    if (obj && typeof obj.then === 'function') {
        return Promise.resolve(obj).then(resolve).catch(reject);
    }
    // if observable
    if (obj && typeof obj.subscribe === 'function') {
        let obs = obj;
        return new SafeSubscription(sub => obs.subscribe({
            next() {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    resolve(obj);
                }
            },
            error(error) {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    reject(error);
                }
            },
            complete() {
                if (sub.subscribed) {
                    sub.unsubscribe();
                    resolve(obj);
                }
            }
        }));
    }
    // else just resolve
    try {
        return resolve(obj);
    }
    catch (error) {
        return reject(error);
    }
};

/**
 * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route
 */
class CanDeactivatePreviousStep {
    run(navigationInstruction, next) {
        return processDeactivatable(navigationInstruction, 'canDeactivate', next);
    }
}
/**
 * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route
 */
class CanActivateNextStep {
    run(navigationInstruction, next) {
        return processActivatable(navigationInstruction, 'canActivate', next);
    }
}
/**
 * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route
 */
class DeactivatePreviousStep {
    run(navigationInstruction, next) {
        return processDeactivatable(navigationInstruction, 'deactivate', next, true);
    }
}
/**
 * A pipeline step responsible for finding and activating method `activate` on a view model of a route
 */
class ActivateNextStep {
    run(navigationInstruction, next) {
        return processActivatable(navigationInstruction, 'activate', next, true);
    }
}

/**
 * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution
 */
class PipelineSlot {
    constructor(container, name, alias) {
        this.steps = [];
        this.container = container;
        this.slotName = name;
        this.slotAlias = alias;
    }
    getSteps() {
        return this.steps.map(x => this.container.get(x));
    }
}
/**
 * Class responsible for creating the navigation pipeline.
 */
class PipelineProvider {
    /**@internal */
    static inject() { return [__WEBPACK_IMPORTED_MODULE_1_aurelia_dependency_injection__["Container"]]; }
    constructor(container) {
        this.container = container;
        this.steps = [
            BuildNavigationPlanStep,
            CanDeactivatePreviousStep,
            LoadRouteStep,
            createPipelineSlot(container, "authorize" /* Authorize */),
            CanActivateNextStep,
            createPipelineSlot(container, "preActivate" /* PreActivate */, 'modelbind'),
            // NOTE: app state changes start below - point of no return
            DeactivatePreviousStep,
            ActivateNextStep,
            createPipelineSlot(container, "preRender" /* PreRender */, 'precommit'),
            CommitChangesStep,
            createPipelineSlot(container, "postRender" /* PostRender */, 'postcomplete')
        ];
    }
    /**
     * Create the navigation pipeline.
     */
    createPipeline(useCanDeactivateStep = true) {
        let pipeline = new Pipeline();
        this.steps.forEach(step => {
            if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {
                pipeline.addStep(this.container.get(step));
            }
        });
        return pipeline;
    }
    /**@internal */
    _findStep(name) {
        // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.
        return this.steps.find(x => x.slotName === name || x.slotAlias === name);
    }
    /**
     * Adds a step into the pipeline at a known slot location.
     */
    addStep(name, step) {
        let found = this._findStep(name);
        if (found) {
            let slotSteps = found.steps;
            // prevent duplicates
            if (!slotSteps.includes(step)) {
                slotSteps.push(step);
            }
        }
        else {
            throw new Error(`Invalid pipeline slot name: ${name}.`);
        }
    }
    /**
     * Removes a step from a slot in the pipeline
     */
    removeStep(name, step) {
        let slot = this._findStep(name);
        if (slot) {
            let slotSteps = slot.steps;
            slotSteps.splice(slotSteps.indexOf(step), 1);
        }
    }
    /**
     * Clears all steps from a slot in the pipeline
     * @internal
     */
    _clearSteps(name = '') {
        let slot = this._findStep(name);
        if (slot) {
            slot.steps = [];
        }
    }
    /**
     * Resets all pipeline slots
     */
    reset() {
        this._clearSteps("authorize" /* Authorize */);
        this._clearSteps("preActivate" /* PreActivate */);
        this._clearSteps("preRender" /* PreRender */);
        this._clearSteps("postRender" /* PostRender */);
    }
}
/**@internal */
const createPipelineSlot = (container, name, alias) => {
    return new PipelineSlot(container, name, alias);
};

const logger = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_logging__["getLogger"])('app-router');
/**
 * The main application router.
 */
class AppRouter extends Router {
    /**@internal */
    static inject() { return [__WEBPACK_IMPORTED_MODULE_1_aurelia_dependency_injection__["Container"], __WEBPACK_IMPORTED_MODULE_2_aurelia_history__["History"], PipelineProvider, __WEBPACK_IMPORTED_MODULE_4_aurelia_event_aggregator__["EventAggregator"]]; }
    constructor(container, history, pipelineProvider, events) {
        super(container, history); // Note the super will call reset internally.
        this.pipelineProvider = pipelineProvider;
        this.events = events;
    }
    /**
     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.
     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.
     */
    reset() {
        super.reset();
        this.maxInstructionCount = 10;
        if (!this._queue) {
            this._queue = [];
        }
        else {
            this._queue.length = 0;
        }
    }
    /**
     * Loads the specified URL.
     *
     * @param url The URL fragment to load.
     */
    loadUrl(url) {
        return this
            ._createNavigationInstruction(url)
            .then(instruction => this._queueInstruction(instruction))
            .catch(error => {
            logger.error(error);
            restorePreviousLocation(this);
        });
    }
    /**
     * Registers a viewPort to be used as a rendering target for activated routes.
     *
     * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl
     * @param name The name of the viewPort. 'default' if unspecified.
     */
    registerViewPort(viewPort, name) {
        // having strong typing without changing public API
        const $viewPort = viewPort;
        super.registerViewPort($viewPort, name);
        // beside adding viewport to the registry of this instance
        // AppRouter also configure routing/history to start routing functionality
        // There are situation where there are more than 1 <router-view/> element at root view
        // in that case, still only activate once via the following guard
        if (!this.isActive) {
            const viewModel = this._findViewModel($viewPort);
            if ('configureRouter' in viewModel) {
                // If there are more than one <router-view/> element at root view
                // use this flag to guard against configure method being invoked multiple times
                // this flag is set inside method configure
                if (!this.isConfigured) {
                    // replace the real resolve with a noop to guarantee that any action in base class Router
                    // won't resolve the configurePromise prematurely
                    const resolveConfiguredPromise = this._resolveConfiguredPromise;
                    this._resolveConfiguredPromise = () => { };
                    return this
                        .configure(config => Promise
                        .resolve(viewModel.configureRouter(config, this))
                        // an issue with configure interface. Should be fixed there
                        // todo: fix this via configure interface in router
                        .then(() => config))
                        .then(() => {
                        this.activate();
                        resolveConfiguredPromise();
                    });
                }
            }
            else {
                this.activate();
            }
        }
        // when a viewport is added dynamically to a root view that is already activated
        // just process the navigation instruction
        else {
            this._dequeueInstruction();
        }
        return Promise.resolve();
    }
    /**
     * Activates the router. This instructs the router to begin listening for history changes and processing instructions.
     *
     * @params options The set of options to activate the router with.
     */
    activate(options) {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        // route handler property is responsible for handling url change
        // the interface of aurelia-history isn't clear on this perspective
        this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);
        this.history.activate(this.options);
        this._dequeueInstruction();
    }
    /**
     * Deactivates the router.
     */
    deactivate() {
        this.isActive = false;
        this.history.deactivate();
    }
    /**@internal */
    _queueInstruction(instruction) {
        return new Promise((resolve) => {
            instruction.resolve = resolve;
            this._queue.unshift(instruction);
            this._dequeueInstruction();
        });
    }
    /**@internal */
    _dequeueInstruction(instructionCount = 0) {
        return Promise.resolve().then(() => {
            if (this.isNavigating && !instructionCount) {
                // ts complains about inconsistent returns without void 0
                return void 0;
            }
            let instruction = this._queue.shift();
            this._queue.length = 0;
            if (!instruction) {
                // ts complains about inconsistent returns without void 0
                return void 0;
            }
            this.isNavigating = true;
            let navtracker = this.history.getState('NavigationTracker');
            let currentNavTracker = this.currentNavigationTracker;
            if (!navtracker && !currentNavTracker) {
                this.isNavigatingFirst = true;
                this.isNavigatingNew = true;
            }
            else if (!navtracker) {
                this.isNavigatingNew = true;
            }
            else if (!currentNavTracker) {
                this.isNavigatingRefresh = true;
            }
            else if (currentNavTracker < navtracker) {
                this.isNavigatingForward = true;
            }
            else if (currentNavTracker > navtracker) {
                this.isNavigatingBack = true;
            }
            if (!navtracker) {
                navtracker = Date.now();
                this.history.setState('NavigationTracker', navtracker);
            }
            this.currentNavigationTracker = navtracker;
            instruction.previousInstruction = this.currentInstruction;
            let maxInstructionCount = this.maxInstructionCount;
            if (!instructionCount) {
                this.events.publish("router:navigation:processing" /* Processing */, { instruction });
            }
            else if (instructionCount === maxInstructionCount - 1) {
                logger.error(`${instructionCount + 1} navigation instructions have been attempted without success. Restoring last known good location.`);
                restorePreviousLocation(this);
                return this._dequeueInstruction(instructionCount + 1);
            }
            else if (instructionCount > maxInstructionCount) {
                throw new Error('Maximum navigation attempts exceeded. Giving up.');
            }
            let pipeline = this.pipelineProvider.createPipeline(!this.couldDeactivate);
            return pipeline
                .run(instruction)
                .then(result => processResult(instruction, result, instructionCount, this))
                .catch(error => {
                return { output: error instanceof Error ? error : new Error(error) };
            })
                .then(result => resolveInstruction(instruction, result, !!instructionCount, this));
        });
    }
    /**@internal */
    _findViewModel(viewPort) {
        if (this.container.viewModel) {
            return this.container.viewModel;
        }
        if (viewPort.container) {
            let container = viewPort.container;
            while (container) {
                if (container.viewModel) {
                    this.container.viewModel = container.viewModel;
                    return container.viewModel;
                }
                container = container.parent;
            }
        }
        return undefined;
    }
}
const processResult = (instruction, result, instructionCount, router) => {
    if (!(result && 'completed' in result && 'output' in result)) {
        result = result || {};
        result.output = new Error(`Expected router pipeline to return a navigation result, but got [${JSON.stringify(result)}] instead.`);
    }
    let finalResult = null;
    let navigationCommandResult = null;
    if (isNavigationCommand(result.output)) {
        navigationCommandResult = result.output.navigate(router);
    }
    else {
        finalResult = result;
        if (!result.completed) {
            if (result.output instanceof Error) {
                logger.error(result.output.toString());
            }
            restorePreviousLocation(router);
        }
    }
    return Promise.resolve(navigationCommandResult)
        .then(_ => router._dequeueInstruction(instructionCount + 1))
        .then(innerResult => finalResult || innerResult || result);
};
const resolveInstruction = (instruction, result, isInnerInstruction, router) => {
    instruction.resolve(result);
    let eventAggregator = router.events;
    let eventArgs = { instruction, result };
    if (!isInnerInstruction) {
        router.isNavigating = false;
        router.isExplicitNavigation = false;
        router.isExplicitNavigationBack = false;
        router.isNavigatingFirst = false;
        router.isNavigatingNew = false;
        router.isNavigatingRefresh = false;
        router.isNavigatingForward = false;
        router.isNavigatingBack = false;
        router.couldDeactivate = false;
        let eventName;
        if (result.output instanceof Error) {
            eventName = "router:navigation:error" /* Error */;
        }
        else if (!result.completed) {
            eventName = "router:navigation:canceled" /* Canceled */;
        }
        else {
            let queryString = instruction.queryString ? ('?' + instruction.queryString) : '';
            router.history.previousLocation = instruction.fragment + queryString;
            eventName = "router:navigation:success" /* Success */;
        }
        eventAggregator.publish(eventName, eventArgs);
        eventAggregator.publish("router:navigation:complete" /* Complete */, eventArgs);
    }
    else {
        eventAggregator.publish("router:navigation:child:complete" /* ChildComplete */, eventArgs);
    }
    return result;
};
const restorePreviousLocation = (router) => {
    let previousLocation = router.history.previousLocation;
    if (previousLocation) {
        router.navigate(previousLocation, { trigger: false, replace: true });
    }
    else if (router.fallbackRoute) {
        router.navigate(router.fallbackRoute, { trigger: true, replace: true });
    }
    else {
        logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');
    }
};

/**
* The status of a Pipeline.
*/
var PipelineStatus;
(function (PipelineStatus) {
    PipelineStatus["Completed"] = "completed";
    PipelineStatus["Canceled"] = "canceled";
    PipelineStatus["Rejected"] = "rejected";
    PipelineStatus["Running"] = "running";
})(PipelineStatus || (PipelineStatus = {}));

/**
 * A list of known router events used by the Aurelia router
 * to signal the pipeline has come to a certain state
 */
// const enum is preserved in tsconfig
var RouterEvent;
(function (RouterEvent) {
    RouterEvent["Processing"] = "router:navigation:processing";
    RouterEvent["Error"] = "router:navigation:error";
    RouterEvent["Canceled"] = "router:navigation:canceled";
    RouterEvent["Complete"] = "router:navigation:complete";
    RouterEvent["Success"] = "router:navigation:success";
    RouterEvent["ChildComplete"] = "router:navigation:child:complete";
})(RouterEvent || (RouterEvent = {}));

/**
 * Available pipeline slot names to insert interceptor into router pipeline
 */
// const enum is preserved in tsconfig
var PipelineSlotName;
(function (PipelineSlotName) {
    /**
     * Authorization slot. Invoked early in the pipeline,
     * before `canActivate` hook of incoming route
     */
    PipelineSlotName["Authorize"] = "authorize";
    /**
     * Pre-activation slot. Invoked early in the pipeline,
     * Invoked timing:
     *   - after Authorization slot
     *   - after canActivate hook on new view model
     *   - before deactivate hook on old view model
     *   - before activate hook on new view model
     */
    PipelineSlotName["PreActivate"] = "preActivate";
    /**
     * Pre-render slot. Invoked later in the pipeline
     * Invokcation timing:
     *   - after activate hook on new view model
     *   - before commit step on new navigation instruction
     */
    PipelineSlotName["PreRender"] = "preRender";
    /**
     * Post-render slot. Invoked last in the pipeline
     */
    PipelineSlotName["PostRender"] = "postRender";
})(PipelineSlotName || (PipelineSlotName = {}));


//# sourceMappingURL=aurelia-router.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("bluebird")))

/***/ },

/***/ "aurelia-templating-binding":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__ = __webpack_require__("aurelia-binding");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_logging__ = __webpack_require__(51);
/* harmony export (binding) */ __webpack_require__.d(exports, "AttributeMap", function() { return AttributeMap; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ChildInterpolationBinding", function() { return ChildInterpolationBinding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "InterpolationBinding", function() { return InterpolationBinding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "InterpolationBindingExpression", function() { return InterpolationBindingExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LetBinding", function() { return LetBinding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LetExpression", function() { return LetExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LetInterpolationBinding", function() { return LetInterpolationBinding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "LetInterpolationBindingExpression", function() { return LetInterpolationBindingExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SyntaxInterpreter", function() { return SyntaxInterpreter; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TemplatingBindingLanguage", function() { return TemplatingBindingLanguage; });
/* harmony export (binding) */ __webpack_require__.d(exports, "configure", function() { return configure; });




/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var AttributeMap = (function () {
    function AttributeMap(svg) {
        this.elements = Object.create(null);
        this.allElements = Object.create(null);
        this.svg = svg;
        this.registerUniversal('accesskey', 'accessKey');
        this.registerUniversal('contenteditable', 'contentEditable');
        this.registerUniversal('tabindex', 'tabIndex');
        this.registerUniversal('textcontent', 'textContent');
        this.registerUniversal('innerhtml', 'innerHTML');
        this.registerUniversal('scrolltop', 'scrollTop');
        this.registerUniversal('scrollleft', 'scrollLeft');
        this.registerUniversal('readonly', 'readOnly');
        this.register('label', 'for', 'htmlFor');
        this.register('img', 'usemap', 'useMap');
        this.register('input', 'maxlength', 'maxLength');
        this.register('input', 'minlength', 'minLength');
        this.register('input', 'formaction', 'formAction');
        this.register('input', 'formenctype', 'formEncType');
        this.register('input', 'formmethod', 'formMethod');
        this.register('input', 'formnovalidate', 'formNoValidate');
        this.register('input', 'formtarget', 'formTarget');
        this.register('textarea', 'maxlength', 'maxLength');
        this.register('td', 'rowspan', 'rowSpan');
        this.register('td', 'colspan', 'colSpan');
        this.register('th', 'rowspan', 'rowSpan');
        this.register('th', 'colspan', 'colSpan');
    }
    AttributeMap.prototype.register = function (elementName, attributeName, propertyName) {
        elementName = elementName.toLowerCase();
        attributeName = attributeName.toLowerCase();
        var element = this.elements[elementName] = (this.elements[elementName] || Object.create(null));
        element[attributeName] = propertyName;
    };
    AttributeMap.prototype.registerUniversal = function (attributeName, propertyName) {
        attributeName = attributeName.toLowerCase();
        this.allElements[attributeName] = propertyName;
    };
    AttributeMap.prototype.map = function (elementName, attributeName) {
        if (this.svg.isStandardSvgAttribute(elementName, attributeName)) {
            return attributeName;
        }
        elementName = elementName.toLowerCase();
        attributeName = attributeName.toLowerCase();
        var element = this.elements[elementName];
        if (element !== undefined && attributeName in element) {
            return element[attributeName];
        }
        if (attributeName in this.allElements) {
            return this.allElements[attributeName];
        }
        if (/(?:^data-)|(?:^aria-)|:/.test(attributeName)) {
            return attributeName;
        }
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["camelCase"])(attributeName);
    };
    AttributeMap.inject = [__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["SVGAnalyzer"]];
    return AttributeMap;
}());

var InterpolationBindingExpression = (function () {
    function InterpolationBindingExpression(observerLocator, targetProperty, parts, mode, lookupFunctions, attribute) {
        this.observerLocator = observerLocator;
        this.targetProperty = targetProperty;
        this.parts = parts;
        this.mode = mode;
        this.lookupFunctions = lookupFunctions;
        this.attribute = this.attrToRemove = attribute;
        this.discrete = false;
    }
    InterpolationBindingExpression.prototype.createBinding = function (target) {
        if (this.parts.length === 3) {
            return new ChildInterpolationBinding(target, this.observerLocator, this.parts[1], this.mode, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
        }
        return new InterpolationBinding(this.observerLocator, this.parts, target, this.targetProperty, this.mode, this.lookupFunctions);
    };
    return InterpolationBindingExpression;
}());
function validateTarget(target, propertyName) {
    if (propertyName === 'style') {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_logging__["getLogger"]('templating-binding')
            .info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');
    }
    else if (target.parentElement && target.parentElement.nodeName === 'TEXTAREA' && propertyName === 'textContent') {
        throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.');
    }
}
var InterpolationBinding = (function () {
    function InterpolationBinding(observerLocator, parts, target, targetProperty, mode, lookupFunctions) {
        validateTarget(target, targetProperty);
        this.observerLocator = observerLocator;
        this.parts = parts;
        this.target = target;
        this.targetProperty = targetProperty;
        this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
        this.mode = mode;
        this.lookupFunctions = lookupFunctions;
    }
    InterpolationBinding.prototype.interpolate = function () {
        if (this.isBound) {
            var value = '';
            var parts = this.parts;
            for (var i = 0, ii = parts.length; i < ii; i++) {
                value += (i % 2 === 0 ? parts[i] : this["childBinding".concat(i)].value);
            }
            this.targetAccessor.setValue(value, this.target, this.targetProperty);
        }
    };
    InterpolationBinding.prototype.updateOneTimeBindings = function () {
        for (var i = 1, ii = this.parts.length; i < ii; i += 2) {
            var child = this["childBinding".concat(i)];
            if (child.mode === __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].oneTime) {
                child.call();
            }
        }
    };
    InterpolationBinding.prototype.bind = function (source) {
        if (this.isBound) {
            if (this.source === source) {
                return;
            }
            this.unbind();
        }
        this.source = source;
        var parts = this.parts;
        for (var i = 1, ii = parts.length; i < ii; i += 2) {
            var binding = new ChildInterpolationBinding(this, this.observerLocator, parts[i], this.mode, this.lookupFunctions);
            binding.bind(source);
            this["childBinding".concat(i)] = binding;
        }
        this.isBound = true;
        this.interpolate();
    };
    InterpolationBinding.prototype.unbind = function () {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.source = null;
        var parts = this.parts;
        for (var i = 1, ii = parts.length; i < ii; i += 2) {
            var name_1 = "childBinding".concat(i);
            this[name_1].unbind();
        }
    };
    return InterpolationBinding;
}());
var ChildInterpolationBinding = (function () {
    function ChildInterpolationBinding(target, observerLocator, sourceExpression, mode, lookupFunctions, targetProperty, left, right) {
        if (target instanceof InterpolationBinding) {
            this.parent = target;
        }
        else {
            validateTarget(target, targetProperty);
            this.target = target;
            this.targetProperty = targetProperty;
            this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
        }
        this.observerLocator = observerLocator;
        this.sourceExpression = sourceExpression;
        this.mode = mode;
        this.lookupFunctions = lookupFunctions;
        this.left = left;
        this.right = right;
    }
    ChildInterpolationBinding.prototype.updateTarget = function (value) {
        value = value === null || value === undefined ? '' : value.toString();
        if (value !== this.value) {
            this.value = value;
            if (this.parent) {
                this.parent.interpolate();
            }
            else {
                this.targetAccessor.setValue(this.left + value + this.right, this.target, this.targetProperty);
            }
        }
    };
    ChildInterpolationBinding.prototype.call = function () {
        if (!this.isBound) {
            return;
        }
        this.rawValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
        this.updateTarget(this.rawValue);
        if (this.mode !== __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].oneTime) {
            this._version++;
            this.sourceExpression.connect(this, this.source);
            if (this.rawValue instanceof Array) {
                this.observeArray(this.rawValue);
            }
            this.unobserve(false);
        }
    };
    ChildInterpolationBinding.prototype.bind = function (source) {
        if (this.isBound) {
            if (this.source === source) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.source = source;
        var sourceExpression = this.sourceExpression;
        if (sourceExpression.bind) {
            sourceExpression.bind(this, source, this.lookupFunctions);
        }
        this.rawValue = sourceExpression.evaluate(source, this.lookupFunctions);
        this.updateTarget(this.rawValue);
        if (this.mode === __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].oneWay) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["enqueueBindingConnect"])(this);
        }
    };
    ChildInterpolationBinding.prototype.unbind = function () {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        var sourceExpression = this.sourceExpression;
        if (sourceExpression.unbind) {
            sourceExpression.unbind(this, this.source);
        }
        this.source = null;
        this.value = null;
        this.rawValue = null;
        this.unobserve(true);
    };
    ChildInterpolationBinding.prototype.connect = function (evaluate) {
        if (!this.isBound) {
            return;
        }
        if (evaluate) {
            this.rawValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
            this.updateTarget(this.rawValue);
        }
        this.sourceExpression.connect(this, this.source);
        if (this.rawValue instanceof Array) {
            this.observeArray(this.rawValue);
        }
    };
    ChildInterpolationBinding = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["connectable"])()
    ], ChildInterpolationBinding);
    return ChildInterpolationBinding;
}());

var LetExpression = (function () {
    function LetExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions, toBindingContext) {
        this.observerLocator = observerLocator;
        this.sourceExpression = sourceExpression;
        this.targetProperty = targetProperty;
        this.lookupFunctions = lookupFunctions;
        this.toBindingContext = toBindingContext;
    }
    LetExpression.prototype.createBinding = function () {
        return new LetBinding(this.observerLocator, this.sourceExpression, this.targetProperty, this.lookupFunctions, this.toBindingContext);
    };
    return LetExpression;
}());
var LetBinding = (function () {
    function LetBinding(observerLocator, sourceExpression, targetProperty, lookupFunctions, toBindingContext) {
        this.observerLocator = observerLocator;
        this.sourceExpression = sourceExpression;
        this.targetProperty = targetProperty;
        this.lookupFunctions = lookupFunctions;
        this.source = null;
        this.target = null;
        this.toBindingContext = toBindingContext;
    }
    LetBinding.prototype.updateTarget = function () {
        var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
        this.target[this.targetProperty] = value;
    };
    LetBinding.prototype.call = function (context) {
        if (!this.isBound) {
            return;
        }
        if (context === __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["sourceContext"]) {
            this.updateTarget();
            return;
        }
        throw new Error("Unexpected call context ".concat(context));
    };
    LetBinding.prototype.bind = function (source) {
        if (this.isBound) {
            if (this.source === source) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.source = source;
        this.target = this.toBindingContext ? source.bindingContext : source.overrideContext;
        if (this.sourceExpression.bind) {
            this.sourceExpression.bind(this, source, this.lookupFunctions);
        }
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["enqueueBindingConnect"])(this);
    };
    LetBinding.prototype.unbind = function () {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        if (this.sourceExpression.unbind) {
            this.sourceExpression.unbind(this, this.source);
        }
        this.source = null;
        this.target = null;
        this.unobserve(true);
    };
    LetBinding.prototype.unobserve = function (arg0) {
        throw new Error('Method not implemented.');
    };
    LetBinding.prototype.connect = function () {
        if (!this.isBound) {
            return;
        }
        this.updateTarget();
        this.sourceExpression.connect(this, this.source);
    };
    LetBinding = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["connectable"])()
    ], LetBinding);
    return LetBinding;
}());

var LetInterpolationBindingExpression = (function () {
    function LetInterpolationBindingExpression(observerLocator, targetProperty, parts, lookupFunctions, toBindingContext) {
        this.observerLocator = observerLocator;
        this.targetProperty = targetProperty;
        this.parts = parts;
        this.lookupFunctions = lookupFunctions;
        this.toBindingContext = toBindingContext;
    }
    LetInterpolationBindingExpression.prototype.createBinding = function () {
        return new LetInterpolationBinding(this.observerLocator, this.targetProperty, this.parts, this.lookupFunctions, this.toBindingContext);
    };
    return LetInterpolationBindingExpression;
}());
var LetInterpolationBinding = (function () {
    function LetInterpolationBinding(observerLocator, targetProperty, parts, lookupFunctions, toBindingContext) {
        this.observerLocator = observerLocator;
        this.parts = parts;
        this.targetProperty = targetProperty;
        this.lookupFunctions = lookupFunctions;
        this.toBindingContext = toBindingContext;
        this.target = null;
    }
    LetInterpolationBinding.prototype.bind = function (source) {
        if (this.isBound) {
            if (this.source === source) {
                return;
            }
            this.unbind();
        }
        this.isBound = true;
        this.source = source;
        this.target = this.toBindingContext ? source.bindingContext : source.overrideContext;
        this.interpolationBinding = this.createInterpolationBinding();
        this.interpolationBinding.bind(source);
    };
    LetInterpolationBinding.prototype.unbind = function () {
        if (!this.isBound) {
            return;
        }
        this.isBound = false;
        this.source = null;
        this.target = null;
        this.interpolationBinding.unbind();
        this.interpolationBinding = null;
    };
    LetInterpolationBinding.prototype.createInterpolationBinding = function () {
        if (this.parts.length === 3) {
            return new ChildInterpolationBinding(this.target, this.observerLocator, this.parts[1], __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
        }
        return new InterpolationBinding(this.observerLocator, this.parts, this.target, this.targetProperty, __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, this.lookupFunctions);
    };
    return LetInterpolationBinding;
}());

var SyntaxInterpreter = (function () {
    function SyntaxInterpreter(parser, observerLocator, eventManager, attributeMap) {
        this.parser = parser;
        this.observerLocator = observerLocator;
        this.eventManager = eventManager;
        this.attributeMap = attributeMap;
    }
    SyntaxInterpreter.prototype.interpret = function (resources, element, info, existingInstruction, context) {
        if (info.command in this) {
            return this[info.command](resources, element, info, existingInstruction, context);
        }
        return this.handleUnknownCommand(resources, element, info, existingInstruction, context);
    };
    SyntaxInterpreter.prototype.handleUnknownCommand = function (resources, element, info, existingInstruction, context) {
        __WEBPACK_IMPORTED_MODULE_2_aurelia_logging__["getLogger"]('templating-binding').warn('Unknown binding command.', info);
        return existingInstruction;
    };
    SyntaxInterpreter.prototype.determineDefaultBindingMode = function (element, attrName, context) {
        var tagName = element.tagName.toLowerCase();
        if (tagName === 'input' && (attrName === 'value' || attrName === 'files') && element.type !== 'checkbox' && element.type !== 'radio'
            || tagName === 'input' && attrName === 'checked' && (element.type === 'checkbox' || element.type === 'radio')
            || (tagName === 'textarea' || tagName === 'select') && attrName === 'value'
            || (attrName === 'textcontent' || attrName === 'innerhtml') && element.contentEditable === 'true'
            || attrName === 'scrolltop'
            || attrName === 'scrollleft') {
            return __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].twoWay;
        }
        if (context
            && attrName in context.attributes
            && context.attributes[attrName]
            && context.attributes[attrName].defaultBindingMode >= __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].oneTime) {
            return context.attributes[attrName].defaultBindingMode;
        }
        return __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView;
    };
    SyntaxInterpreter.prototype.bind = function (resources, element, info, existingInstruction, context) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), info.defaultBindingMode === undefined || info.defaultBindingMode === null
            ? this.determineDefaultBindingMode(element, info.attrName, context)
            : info.defaultBindingMode, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype.trigger = function (resources, element, info) {
        return new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["ListenerExpression"](this.eventManager, info.attrName, this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["delegationStrategy"].none, true, resources.lookupFunctions);
    };
    SyntaxInterpreter.prototype.capture = function (resources, element, info) {
        return new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["ListenerExpression"](this.eventManager, info.attrName, this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["delegationStrategy"].capturing, true, resources.lookupFunctions);
    };
    SyntaxInterpreter.prototype.delegate = function (resources, element, info) {
        return new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["ListenerExpression"](this.eventManager, info.attrName, this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["delegationStrategy"].bubbling, true, resources.lookupFunctions);
    };
    SyntaxInterpreter.prototype.call = function (resources, element, info, existingInstruction) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["CallExpression"](this.observerLocator, info.attrName, this.parser.parse(info.attrValue), resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype.options = function (resources, element, info, existingInstruction, context) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        var attrValue = info.attrValue;
        var language = this.language;
        var name = null;
        var target = '';
        var current;
        var i;
        var ii;
        var inString = false;
        var inEscape = false;
        var foundName = false;
        for (i = 0, ii = attrValue.length; i < ii; ++i) {
            current = attrValue[i];
            if (current === ';' && !inString) {
                if (!foundName) {
                    name = this._getPrimaryPropertyName(resources, context);
                }
                info = language.inspectAttribute(resources, '?', name, target.trim());
                language.createAttributeInstruction(resources, element, info, instruction, context);
                if (!instruction.attributes[info.attrName]) {
                    instruction.attributes[info.attrName] = info.attrValue;
                }
                target = '';
                name = null;
            }
            else if (current === ':' && name === null) {
                foundName = true;
                name = target.trim();
                target = '';
            }
            else if (current === '\\') {
                target += current;
                inEscape = true;
                continue;
            }
            else {
                target += current;
                if (name !== null && inEscape === false && current === '\'') {
                    inString = !inString;
                }
            }
            inEscape = false;
        }
        if (!foundName) {
            name = this._getPrimaryPropertyName(resources, context);
        }
        if (name !== null) {
            info = language.inspectAttribute(resources, '?', name, target.trim());
            language.createAttributeInstruction(resources, element, info, instruction, context);
            if (!instruction.attributes[info.attrName]) {
                instruction.attributes[info.attrName] = info.attrValue;
            }
        }
        return instruction;
    };
    SyntaxInterpreter.prototype._getPrimaryPropertyName = function (resources, context) {
        var type = resources.getAttribute(context.attributeName);
        if (type && type.primaryProperty) {
            return type.primaryProperty.attribute;
        }
        return null;
    };
    SyntaxInterpreter.prototype['for'] = function (resources, element, info, existingInstruction) {
        var parts;
        var keyValue;
        var instruction;
        var attrValue;
        var isDestructuring;
        attrValue = info.attrValue;
        isDestructuring = attrValue.match(/^ *[[].+[\]]/);
        parts = isDestructuring ? attrValue.split('of ') : attrValue.split(' of ');
        if (parts.length !== 2) {
            throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');
        }
        instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        if (isDestructuring) {
            keyValue = parts[0].replace(/[[\]]/g, '').replace(/,/g, ' ').replace(/\s+/g, ' ').trim().split(' ');
            instruction.attributes.key = keyValue[0];
            instruction.attributes.value = keyValue[1];
        }
        else {
            instruction.attributes.local = parts[0];
        }
        instruction.attributes.items = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, 'items', this.parser.parse(parts[1]), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype['two-way'] = function (resources, element, info, existingInstruction) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].twoWay, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype['to-view'] = function (resources, element, info, existingInstruction) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype['from-view'] = function (resources, element, info, existingInstruction) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].fromView, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.prototype['one-time'] = function (resources, element, info, existingInstruction) {
        var instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(info.attrName);
        instruction.attributes[info.attrName] = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["BindingExpression"](this.observerLocator, this.attributeMap.map(element.tagName, info.attrName), this.parser.parse(info.attrValue), __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].oneTime, resources.lookupFunctions);
        return instruction;
    };
    SyntaxInterpreter.inject = [__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["Parser"], __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["ObserverLocator"], __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["EventManager"], AttributeMap];
    return SyntaxInterpreter;
}());
Object.defineProperty(SyntaxInterpreter.prototype, 'one-way', Object.getOwnPropertyDescriptor(SyntaxInterpreter.prototype, 'to-view'));

var info = {};
var TemplatingBindingLanguage = (function (_super) {
    __extends(TemplatingBindingLanguage, _super);
    function TemplatingBindingLanguage(parser, observerLocator, syntaxInterpreter, attributeMap) {
        var _this = _super.call(this) || this;
        _this.parser = parser;
        _this.observerLocator = observerLocator;
        _this.syntaxInterpreter = syntaxInterpreter;
        _this.emptyStringExpression = _this.parser.parse('\'\'');
        syntaxInterpreter.language = _this;
        _this.attributeMap = attributeMap;
        _this.toBindingContextAttr = 'to-binding-context';
        return _this;
    }
    TemplatingBindingLanguage.prototype.inspectAttribute = function (resources, elementName, attrName, attrValue) {
        var parts = attrName.split('.');
        info.defaultBindingMode = null;
        if (parts.length === 2) {
            info.attrName = parts[0].trim();
            info.attrValue = attrValue;
            info.command = parts[1].trim();
            if (info.command === 'ref') {
                info.expression = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["NameExpression"](this.parser.parse(attrValue), info.attrName, resources.lookupFunctions);
                info.command = null;
                info.attrName = 'ref';
            }
            else {
                info.expression = null;
            }
        }
        else if (attrName === 'ref') {
            info.attrName = attrName;
            info.attrValue = attrValue;
            info.command = null;
            info.expression = new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["NameExpression"](this.parser.parse(attrValue), 'element', resources.lookupFunctions);
        }
        else {
            info.attrName = attrName;
            info.attrValue = attrValue;
            info.command = null;
            var interpolationParts = this.parseInterpolation(resources, attrValue);
            if (interpolationParts === null) {
                info.expression = null;
            }
            else {
                info.expression = new InterpolationBindingExpression(this.observerLocator, this.attributeMap.map(elementName, attrName), interpolationParts, __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, resources.lookupFunctions, attrName);
            }
        }
        return info;
    };
    TemplatingBindingLanguage.prototype.createAttributeInstruction = function (resources, element, theInfo, existingInstruction, context) {
        var instruction;
        if (theInfo.expression) {
            if (theInfo.attrName === 'ref') {
                return theInfo.expression;
            }
            instruction = existingInstruction || __WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BehaviorInstruction"].attribute(theInfo.attrName);
            instruction.attributes[theInfo.attrName] = theInfo.expression;
        }
        else if (theInfo.command) {
            instruction = this.syntaxInterpreter.interpret(resources, element, theInfo, existingInstruction, context);
        }
        return instruction;
    };
    TemplatingBindingLanguage.prototype.createLetExpressions = function (resources, letElement) {
        var expressions = [];
        var attributes = letElement.attributes;
        var attr;
        var parts;
        var attrName;
        var attrValue;
        var command;
        var toBindingContextAttr = this.toBindingContextAttr;
        var toBindingContext = letElement.hasAttribute(toBindingContextAttr);
        for (var i = 0, ii = attributes.length; ii > i; ++i) {
            attr = attributes[i];
            attrName = attr.name;
            attrValue = attr.nodeValue;
            parts = attrName.split('.');
            if (attrName === toBindingContextAttr) {
                continue;
            }
            if (parts.length === 2) {
                command = parts[1];
                if (command !== 'bind') {
                    __WEBPACK_IMPORTED_MODULE_2_aurelia_logging__["getLogger"]('templating-binding-language')
                        .warn("Detected invalid let command. Expected \"".concat(parts[0], ".bind\", given \"").concat(attrName, "\""));
                    continue;
                }
                expressions.push(new LetExpression(this.observerLocator, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["camelCase"])(parts[0]), this.parser.parse(attrValue), resources.lookupFunctions, toBindingContext));
            }
            else {
                attrName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["camelCase"])(attrName);
                parts = this.parseInterpolation(resources, attrValue);
                if (parts === null) {
                    __WEBPACK_IMPORTED_MODULE_2_aurelia_logging__["getLogger"]('templating-binding-language')
                        .warn("Detected string literal in let bindings. Did you mean \"".concat(attrName, ".bind=").concat(attrValue, "\" or \"").concat(attrName, "=${").concat(attrValue, "}\" ?"));
                }
                if (parts) {
                    expressions.push(new LetInterpolationBindingExpression(this.observerLocator, attrName, parts, resources.lookupFunctions, toBindingContext));
                }
                else {
                    expressions.push(new LetExpression(this.observerLocator, attrName, new __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["LiteralString"](attrValue), resources.lookupFunctions, toBindingContext));
                }
            }
        }
        return expressions;
    };
    TemplatingBindingLanguage.prototype.inspectTextContent = function (resources, value) {
        var parts = this.parseInterpolation(resources, value);
        if (parts === null) {
            return null;
        }
        return new InterpolationBindingExpression(this.observerLocator, 'textContent', parts, __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["bindingMode"].toView, resources.lookupFunctions, 'textContent');
    };
    TemplatingBindingLanguage.prototype.parseInterpolation = function (resources, value) {
        var i = value.indexOf('${', 0);
        var ii = value.length;
        var char;
        var pos = 0;
        var open = 0;
        var quote = null;
        var interpolationStart;
        var parts;
        var partIndex = 0;
        while (i >= 0 && i < ii - 2) {
            open = 1;
            interpolationStart = i;
            i += 2;
            do {
                char = value[i];
                i++;
                if (char === "'" || char === '"') {
                    if (quote === null) {
                        quote = char;
                    }
                    else if (quote === char) {
                        quote = null;
                    }
                    continue;
                }
                if (char === '\\') {
                    i++;
                    continue;
                }
                if (quote !== null) {
                    continue;
                }
                if (char === '{') {
                    open++;
                }
                else if (char === '}') {
                    open--;
                }
            } while (open > 0 && i < ii);
            if (open === 0) {
                parts = parts || [];
                if (value[interpolationStart - 1] === '\\' && value[interpolationStart - 2] !== '\\') {
                    parts[partIndex] = value.substring(pos, interpolationStart - 1) + value.substring(interpolationStart, i);
                    partIndex++;
                    parts[partIndex] = this.emptyStringExpression;
                    partIndex++;
                }
                else {
                    parts[partIndex] = value.substring(pos, interpolationStart);
                    partIndex++;
                    parts[partIndex] = this.parser.parse(value.substring(interpolationStart + 2, i - 1));
                    partIndex++;
                }
                pos = i;
                i = value.indexOf('${', i);
            }
            else {
                break;
            }
        }
        if (partIndex === 0) {
            return null;
        }
        parts[partIndex] = value.substr(pos);
        return parts;
    };
    TemplatingBindingLanguage.inject = [__WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["Parser"], __WEBPACK_IMPORTED_MODULE_1_aurelia_binding__["ObserverLocator"], SyntaxInterpreter, AttributeMap];
    return TemplatingBindingLanguage;
}(__WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BindingLanguage"]));

function configure(config) {
    config.container.registerSingleton(__WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BindingLanguage"], TemplatingBindingLanguage);
    config.container.registerAlias(__WEBPACK_IMPORTED_MODULE_0_aurelia_templating__["BindingLanguage"], TemplatingBindingLanguage);
}


//# sourceMappingURL=aurelia-templating-binding.js.map


/***/ },

/***/ "aurelia-templating-resources":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_task_queue__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__ = __webpack_require__("aurelia-binding");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_aurelia_loader__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aurelia_path__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_aurelia_logging__ = __webpack_require__(51);
/* harmony export (binding) */ __webpack_require__.d(exports, "AbstractRepeater", function() { return AbstractRepeater; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ArrayRepeatStrategy", function() { return ArrayRepeatStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AttrBindingBehavior", function() { return AttrBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "BindingSignaler", function() { return BindingSignaler; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Compose", function() { return Compose; });
/* harmony export (binding) */ __webpack_require__.d(exports, "DebounceBindingBehavior", function() { return DebounceBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Else", function() { return Else; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Focus", function() { return Focus; });
/* harmony export (binding) */ __webpack_require__.d(exports, "FromViewBindingBehavior", function() { return FromViewBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "HTMLSanitizer", function() { return HTMLSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Hide", function() { return Hide; });
/* harmony export (binding) */ __webpack_require__.d(exports, "If", function() { return If; });
/* harmony export (binding) */ __webpack_require__.d(exports, "MapRepeatStrategy", function() { return MapRepeatStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NullRepeatStrategy", function() { return NullRepeatStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "NumberRepeatStrategy", function() { return NumberRepeatStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "OneTimeBindingBehavior", function() { return OneTimeBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "OneWayBindingBehavior", function() { return OneWayBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Repeat", function() { return Repeat; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RepeatStrategyLocator", function() { return RepeatStrategyLocator; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Replaceable", function() { return Replaceable; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SanitizeHTMLValueConverter", function() { return SanitizeHTMLValueConverter; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SelfBindingBehavior", function() { return SelfBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SetRepeatStrategy", function() { return SetRepeatStrategy; });
/* harmony export (binding) */ __webpack_require__.d(exports, "Show", function() { return Show; });
/* harmony export (binding) */ __webpack_require__.d(exports, "SignalBindingBehavior", function() { return SignalBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ThrottleBindingBehavior", function() { return ThrottleBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ToViewBindingBehavior", function() { return ToViewBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TwoWayBindingBehavior", function() { return TwoWayBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "UpdateTriggerBindingBehavior", function() { return UpdateTriggerBindingBehavior; });
/* harmony export (binding) */ __webpack_require__.d(exports, "With", function() { return With; });
/* harmony export (binding) */ __webpack_require__.d(exports, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(exports, "createFullOverrideContext", function() { return createFullOverrideContext; });
/* harmony export (binding) */ __webpack_require__.d(exports, "getItemsSourceExpression", function() { return getItemsSourceExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "isOneTime", function() { return isOneTime; });
/* harmony export (binding) */ __webpack_require__.d(exports, "unwrapExpression", function() { return unwrapExpression; });
/* harmony export (binding) */ __webpack_require__.d(exports, "updateOneTimeBinding", function() { return updateOneTimeBinding; });
/* harmony export (binding) */ __webpack_require__.d(exports, "updateOverrideContext", function() { return updateOverrideContext; });
/* harmony export (binding) */ __webpack_require__.d(exports, "viewsRequireLifecycle", function() { return viewsRequireLifecycle; });










/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var ActivationStrategy;
(function (ActivationStrategy) {
    ActivationStrategy["InvokeLifecycle"] = "invoke-lifecycle";
    ActivationStrategy["Replace"] = "replace";
})(ActivationStrategy || (ActivationStrategy = {}));
var Compose = (function () {
    function Compose(element, container, compositionEngine, viewSlot, viewResources, taskQueue) {
        this.activationStrategy = ActivationStrategy.InvokeLifecycle;
        this.element = element;
        this.container = container;
        this.compositionEngine = compositionEngine;
        this.viewSlot = viewSlot;
        this.viewResources = viewResources;
        this.taskQueue = taskQueue;
        this.currentController = null;
        this.currentViewModel = null;
        this.changes = Object.create(null);
    }
    Compose.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element, __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Container"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["CompositionEngine"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewResources"], __WEBPACK_IMPORTED_MODULE_2_aurelia_task_queue__["TaskQueue"]];
    };
    Compose.prototype.created = function (owningView) {
        this.owningView = owningView;
    };
    Compose.prototype.bind = function (bindingContext, overrideContext) {
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
        var changes = this.changes;
        changes.view = this.view;
        changes.viewModel = this.viewModel;
        changes.model = this.model;
        if (!this.pendingTask) {
            processChanges(this);
        }
    };
    Compose.prototype.unbind = function () {
        this.changes = Object.create(null);
        this.bindingContext = null;
        this.overrideContext = null;
        var returnToCache = true;
        var skipAnimation = true;
        this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Compose.prototype.modelChanged = function (newValue, oldValue) {
        this.changes.model = newValue;
        requestUpdate(this);
    };
    Compose.prototype.viewChanged = function (newValue, oldValue) {
        this.changes.view = newValue;
        requestUpdate(this);
    };
    Compose.prototype.viewModelChanged = function (newValue, oldValue) {
        this.changes.viewModel = newValue;
        requestUpdate(this);
    };
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Compose.prototype, "model", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Compose.prototype, "view", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Compose.prototype, "viewModel", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Compose.prototype, "activationStrategy", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Compose.prototype, "swapOrder", void 0);
    Compose = __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["noView"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customElement"])('compose')
    ], Compose);
    return Compose;
}());
function isEmpty(obj) {
    for (var _ in obj) {
        return false;
    }
    return true;
}
function tryActivateViewModel(vm, model) {
    if (vm && typeof vm.activate === 'function') {
        return Promise.resolve(vm.activate(model));
    }
}
function createInstruction(composer, instruction) {
    return Object.assign(instruction, {
        bindingContext: composer.bindingContext,
        overrideContext: composer.overrideContext,
        owningView: composer.owningView,
        container: composer.container,
        viewSlot: composer.viewSlot,
        viewResources: composer.viewResources,
        currentController: composer.currentController,
        host: composer.element,
        swapOrder: composer.swapOrder
    });
}
function processChanges(composer) {
    var changes = composer.changes;
    composer.changes = Object.create(null);
    if (needsReInitialization(composer, changes)) {
        var instruction = {
            view: composer.view,
            viewModel: composer.currentViewModel || composer.viewModel,
            model: composer.model
        };
        instruction = Object.assign(instruction, changes);
        instruction = createInstruction(composer, instruction);
        composer.pendingTask = composer.compositionEngine.compose(instruction).then(function (controller) {
            composer.currentController = controller;
            composer.currentViewModel = controller ? controller.viewModel : null;
        });
    }
    else {
        composer.pendingTask = tryActivateViewModel(composer.currentViewModel, changes.model);
        if (!composer.pendingTask) {
            return;
        }
    }
    composer.pendingTask = composer.pendingTask
        .then(function () {
        completeCompositionTask(composer);
    }, function (reason) {
        completeCompositionTask(composer);
        throw reason;
    });
}
function completeCompositionTask(composer) {
    composer.pendingTask = null;
    if (!isEmpty(composer.changes)) {
        processChanges(composer);
    }
}
function requestUpdate(composer) {
    if (composer.pendingTask || composer.updateRequested) {
        return;
    }
    composer.updateRequested = true;
    composer.taskQueue.queueMicroTask(function () {
        composer.updateRequested = false;
        processChanges(composer);
    });
}
function needsReInitialization(composer, changes) {
    var activationStrategy = composer.activationStrategy;
    var vm = composer.currentViewModel;
    if (vm && typeof vm.determineActivationStrategy === 'function') {
        activationStrategy = vm.determineActivationStrategy();
    }
    return 'view' in changes
        || 'viewModel' in changes
        || activationStrategy === ActivationStrategy.Replace;
}

var IfCore = (function () {
    function IfCore(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.view = null;
        this.bindingContext = null;
        this.overrideContext = null;
        this.showing = false;
        this.cache = true;
    }
    IfCore.prototype.bind = function (bindingContext, overrideContext) {
        this.bindingContext = bindingContext;
        this.overrideContext = overrideContext;
    };
    IfCore.prototype.unbind = function () {
        if (this.view === null) {
            return;
        }
        this.view.unbind();
        if (!this.viewFactory.isCaching) {
            return;
        }
        if (this.showing) {
            this.showing = false;
            this.viewSlot.remove(this.view, true, true);
        }
        else {
            this.view.returnToCache();
        }
        this.view = null;
    };
    IfCore.prototype._show = function () {
        if (this.showing) {
            if (!this.view.isBound) {
                this.view.bind(this.bindingContext, this.overrideContext);
            }
            return;
        }
        if (this.view === null) {
            this.view = this.viewFactory.create();
        }
        if (!this.view.isBound) {
            this.view.bind(this.bindingContext, this.overrideContext);
        }
        this.showing = true;
        return this.viewSlot.add(this.view);
    };
    IfCore.prototype._hide = function () {
        var _this = this;
        if (!this.showing) {
            return;
        }
        this.showing = false;
        var removed = this.viewSlot.remove(this.view);
        if (removed instanceof Promise) {
            return removed.then(function () {
                _this._unbindView();
            });
        }
        this._unbindView();
    };
    IfCore.prototype._unbindView = function () {
        var cache = this.cache === 'false' ? false : !!this.cache;
        this.view.unbind();
        if (!cache) {
            this.view = null;
        }
    };
    return IfCore;
}());

var If = (function (_super) {
    __extends(If, _super);
    function If() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cache = true;
        return _this;
    }
    If.prototype.bind = function (bindingContext, overrideContext) {
        _super.prototype.bind.call(this, bindingContext, overrideContext);
        if (this.condition) {
            this._show();
        }
        else {
            this._hide();
        }
    };
    If.prototype.conditionChanged = function (newValue) {
        this._update(newValue);
    };
    If.prototype._update = function (show) {
        var _this = this;
        if (this.animating) {
            return;
        }
        var promise;
        if (this.elseVm) {
            promise = show ? this._swap(this.elseVm, this) : this._swap(this, this.elseVm);
        }
        else {
            promise = show ? this._show() : this._hide();
        }
        if (promise) {
            this.animating = true;
            promise.then(function () {
                _this.animating = false;
                if (_this.condition !== _this.showing) {
                    _this._update(_this.condition);
                }
            });
        }
    };
    If.prototype._swap = function (remove, add) {
        switch (this.swapOrder) {
            case 'before':
                return Promise.resolve(add._show()).then(function () { return remove._hide(); });
            case 'with':
                return Promise.all([remove._hide(), add._show()]);
            default:
                var promise = remove._hide();
                return promise ? promise.then(function () { return add._show(); }) : add._show();
        }
    };
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"])({ primaryProperty: true })
    ], If.prototype, "condition", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], If.prototype, "swapOrder", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], If.prototype, "cache", void 0);
    If = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('if'),
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["templateController"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BoundViewFactory"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"])
    ], If);
    return If;
}(IfCore));

var Else = (function (_super) {
    __extends(Else, _super);
    function Else(viewFactory, viewSlot) {
        var _this = _super.call(this, viewFactory, viewSlot) || this;
        _this._registerInIf();
        return _this;
    }
    Else.prototype.bind = function (bindingContext, overrideContext) {
        _super.prototype.bind.call(this, bindingContext, overrideContext);
        if (this.ifVm.condition) {
            this._hide();
        }
        else {
            this._show();
        }
    };
    Else.prototype._registerInIf = function () {
        var previous = this.viewSlot.anchor.previousSibling;
        while (previous && !previous.au) {
            previous = previous.previousSibling;
        }
        if (!previous || !previous.au.if) {
            throw new Error("Can't find matching If for Else custom attribute.");
        }
        this.ifVm = previous.au.if.viewModel;
        this.ifVm.elseVm = this;
    };
    Else = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('else'),
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["templateController"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BoundViewFactory"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"])
    ], Else);
    return Else;
}(IfCore));

var With = (function () {
    function With(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.parentOverrideContext = null;
        this.view = null;
    }
    With.prototype.bind = function (bindingContext, overrideContext) {
        this.parentOverrideContext = overrideContext;
        this.valueChanged(this.value);
    };
    With.prototype.valueChanged = function (newValue) {
        var overrideContext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["createOverrideContext"])(newValue, this.parentOverrideContext);
        var view = this.view;
        if (!view) {
            view = this.view = this.viewFactory.create();
            view.bind(newValue, overrideContext);
            this.viewSlot.add(view);
        }
        else {
            view.bind(newValue, overrideContext);
        }
    };
    With.prototype.unbind = function () {
        var view = this.view;
        this.parentOverrideContext = null;
        if (view) {
            view.unbind();
        }
    };
    With = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('with'),
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["templateController"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BoundViewFactory"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"])
    ], With);
    return With;
}());

var oneTime = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].oneTime;
function updateOverrideContexts(views, startIndex) {
    var length = views.length;
    if (startIndex > 0) {
        startIndex = startIndex - 1;
    }
    for (; startIndex < length; ++startIndex) {
        updateOverrideContext(views[startIndex].overrideContext, startIndex, length);
    }
}
function createFullOverrideContext(repeat, data, index, length, key) {
    var bindingContext = {};
    var overrideContext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["createOverrideContext"])(bindingContext, repeat.scope.overrideContext);
    if (typeof key !== 'undefined') {
        bindingContext[repeat.key] = key;
        bindingContext[repeat.value] = data;
    }
    else {
        bindingContext[repeat.local] = data;
    }
    updateOverrideContext(overrideContext, index, length);
    return overrideContext;
}
function updateOverrideContext(overrideContext, index, length) {
    var first = (index === 0);
    var last = (index === length - 1);
    var even = index % 2 === 0;
    overrideContext.$index = index;
    overrideContext.$first = first;
    overrideContext.$last = last;
    overrideContext.$middle = !(first || last);
    overrideContext.$odd = !even;
    overrideContext.$even = even;
}
function getItemsSourceExpression(instruction, attrName) {
    return instruction.behaviorInstructions
        .filter(function (bi) { return bi.originalAttrName === attrName; })[0]
        .attributes
        .items
        .sourceExpression;
}
function unwrapExpression(expression) {
    var unwrapped = false;
    while (expression instanceof __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["BindingBehavior"]) {
        expression = expression.expression;
    }
    while (expression instanceof __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["ValueConverter"]) {
        expression = expression.expression;
        unwrapped = true;
    }
    return unwrapped ? expression : null;
}
function isOneTime(expression) {
    while (expression instanceof __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["BindingBehavior"]) {
        if (expression.name === 'oneTime') {
            return true;
        }
        expression = expression.expression;
    }
    return false;
}
function updateOneTimeBinding(binding) {
    if (binding.call && binding.mode === oneTime) {
        binding.call(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["sourceContext"]);
    }
    else if (binding.updateOneTimeBindings) {
        binding.updateOneTimeBindings();
    }
}
function indexOf(array, item, matcher, startIndex) {
    if (!matcher) {
        return array.indexOf(item);
    }
    var length = array.length;
    for (var index = startIndex || 0; index < length; index++) {
        if (matcher(array[index], item)) {
            return index;
        }
    }
    return -1;
}

var ArrayRepeatStrategy = (function () {
    function ArrayRepeatStrategy() {
    }
    ArrayRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getArrayObserver(items);
    };
    ArrayRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var $repeat = repeat;
        var itemsLength = items.length;
        if (!items || itemsLength === 0) {
            $repeat.removeAllViews(true, !$repeat.viewsRequireLifecycle);
            return;
        }
        var children = $repeat.views();
        var viewsLength = children.length;
        if (viewsLength === 0) {
            this._standardProcessInstanceChanged($repeat, items);
            return;
        }
        if ($repeat.viewsRequireLifecycle) {
            var childrenSnapshot = children.slice(0);
            var itemNameInBindingContext = $repeat.local;
            var matcher_1 = $repeat.matcher();
            var itemsPreviouslyInViews_1 = [];
            var viewsToRemove = [];
            for (var index = 0; index < viewsLength; index++) {
                var view = childrenSnapshot[index];
                var oldItem = view.bindingContext[itemNameInBindingContext];
                if (indexOf(items, oldItem, matcher_1) === -1) {
                    viewsToRemove.push(view);
                }
                else {
                    itemsPreviouslyInViews_1.push(oldItem);
                }
            }
            var updateViews = void 0;
            var removePromise = void 0;
            if (itemsPreviouslyInViews_1.length > 0) {
                removePromise = $repeat.removeViews(viewsToRemove, true, !$repeat.viewsRequireLifecycle);
                updateViews = function () {
                    for (var index = 0; index < itemsLength; index++) {
                        var item = items[index];
                        var indexOfView = indexOf(itemsPreviouslyInViews_1, item, matcher_1, index);
                        var view = void 0;
                        if (indexOfView === -1) {
                            var overrideContext = createFullOverrideContext($repeat, items[index], index, itemsLength);
                            $repeat.insertView(index, overrideContext.bindingContext, overrideContext);
                            itemsPreviouslyInViews_1.splice(index, 0, undefined);
                        }
                        else if (indexOfView === index) {
                            view = children[indexOfView];
                            itemsPreviouslyInViews_1[indexOfView] = undefined;
                        }
                        else {
                            view = children[indexOfView];
                            $repeat.moveView(indexOfView, index);
                            itemsPreviouslyInViews_1.splice(indexOfView, 1);
                            itemsPreviouslyInViews_1.splice(index, 0, undefined);
                        }
                        if (view) {
                            updateOverrideContext(view.overrideContext, index, itemsLength);
                        }
                    }
                    _this._inPlaceProcessItems($repeat, items);
                };
            }
            else {
                removePromise = $repeat.removeAllViews(true, !$repeat.viewsRequireLifecycle);
                updateViews = function () { return _this._standardProcessInstanceChanged($repeat, items); };
            }
            if (removePromise instanceof Promise) {
                removePromise.then(updateViews);
            }
            else {
                updateViews();
            }
        }
        else {
            this._inPlaceProcessItems($repeat, items);
        }
    };
    ArrayRepeatStrategy.prototype._standardProcessInstanceChanged = function (repeat, items) {
        for (var i = 0, ii = items.length; i < ii; i++) {
            var overrideContext = createFullOverrideContext(repeat, items[i], i, ii);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
    };
    ArrayRepeatStrategy.prototype._inPlaceProcessItems = function (repeat, items) {
        var itemsLength = items.length;
        var viewsLength = repeat.viewCount();
        while (viewsLength > itemsLength) {
            viewsLength--;
            repeat.removeView(viewsLength, true, !repeat.viewsRequireLifecycle);
        }
        var local = repeat.local;
        for (var i = 0; i < viewsLength; i++) {
            var view = repeat.view(i);
            var last = i === itemsLength - 1;
            var middle = i !== 0 && !last;
            var bindingContext = view.bindingContext;
            var overrideContext = view.overrideContext;
            if (bindingContext[local] === items[i]
                && overrideContext.$middle === middle
                && overrideContext.$last === last) {
                continue;
            }
            bindingContext[local] = items[i];
            overrideContext.$middle = middle;
            overrideContext.$last = last;
            repeat.updateBindings(view);
        }
        for (var i = viewsLength; i < itemsLength; i++) {
            var overrideContext = createFullOverrideContext(repeat, items[i], i, itemsLength);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
    };
    ArrayRepeatStrategy.prototype.instanceMutated = function (repeat, array, splices) {
        var _this = this;
        if (repeat.__queuedSplices) {
            for (var i = 0, ii = splices.length; i < ii; ++i) {
                var _a = splices[i], index = _a.index, removed = _a.removed, addedCount = _a.addedCount;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["mergeSplice"])(repeat.__queuedSplices, index, removed, addedCount);
            }
            repeat.__array = array.slice(0);
            return;
        }
        var maybePromise = this._runSplices(repeat, array.slice(0), splices);
        if (maybePromise instanceof Promise) {
            var queuedSplices_1 = repeat.__queuedSplices = [];
            var runQueuedSplices_1 = function () {
                if (!queuedSplices_1.length) {
                    repeat.__queuedSplices = undefined;
                    repeat.__array = undefined;
                    return;
                }
                var nextPromise = _this._runSplices(repeat, repeat.__array, queuedSplices_1) || Promise.resolve();
                queuedSplices_1 = repeat.__queuedSplices = [];
                nextPromise.then(runQueuedSplices_1);
            };
            maybePromise.then(runQueuedSplices_1);
        }
    };
    ArrayRepeatStrategy.prototype._runSplices = function (repeat, array, splices) {
        var _this = this;
        var removeDelta = 0;
        var rmPromises = [];
        for (var i = 0, ii = splices.length; i < ii; ++i) {
            var splice = splices[i];
            var removed = splice.removed;
            for (var j = 0, jj = removed.length; j < jj; ++j) {
                var viewOrPromise = repeat.removeView(splice.index + removeDelta + rmPromises.length, true);
                if (viewOrPromise instanceof Promise) {
                    rmPromises.push(viewOrPromise);
                }
            }
            removeDelta -= splice.addedCount;
        }
        if (rmPromises.length > 0) {
            return Promise.all(rmPromises).then(function () {
                var spliceIndexLow = _this._handleAddedSplices(repeat, array, splices);
                updateOverrideContexts(repeat.views(), spliceIndexLow);
            });
        }
        var spliceIndexLow = this._handleAddedSplices(repeat, array, splices);
        updateOverrideContexts(repeat.views(), spliceIndexLow);
        return undefined;
    };
    ArrayRepeatStrategy.prototype._handleAddedSplices = function (repeat, array, splices) {
        var spliceIndex;
        var spliceIndexLow;
        var arrayLength = array.length;
        for (var i = 0, ii = splices.length; i < ii; ++i) {
            var splice = splices[i];
            var addIndex = spliceIndex = splice.index;
            var end = splice.index + splice.addedCount;
            if (typeof spliceIndexLow === 'undefined' || spliceIndexLow === null || spliceIndexLow > splice.index) {
                spliceIndexLow = spliceIndex;
            }
            for (; addIndex < end; ++addIndex) {
                var overrideContext = createFullOverrideContext(repeat, array[addIndex], addIndex, arrayLength);
                repeat.insertView(addIndex, overrideContext.bindingContext, overrideContext);
            }
        }
        return spliceIndexLow;
    };
    return ArrayRepeatStrategy;
}());

var MapRepeatStrategy = (function () {
    function MapRepeatStrategy() {
    }
    MapRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getMapObserver(items);
    };
    MapRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, items); });
            return;
        }
        this._standardProcessItems(repeat, items);
    };
    MapRepeatStrategy.prototype._standardProcessItems = function (repeat, items) {
        var index = 0;
        var overrideContext;
        items.forEach(function (value, key) {
            overrideContext = createFullOverrideContext(repeat, value, index, items.size, key);
            repeat.addView(overrideContext.bindingContext, overrideContext);
            ++index;
        });
    };
    MapRepeatStrategy.prototype.instanceMutated = function (repeat, map, records) {
        var key;
        var i;
        var ii;
        var overrideContext;
        var removeIndex;
        var addIndex;
        var record;
        var rmPromises = [];
        var viewOrPromise;
        for (i = 0, ii = records.length; i < ii; ++i) {
            record = records[i];
            key = record.key;
            switch (record.type) {
                case 'update':
                    removeIndex = this._getViewIndexByKey(repeat, key);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    overrideContext = createFullOverrideContext(repeat, map.get(key), removeIndex, map.size, key);
                    repeat.insertView(removeIndex, overrideContext.bindingContext, overrideContext);
                    break;
                case 'add':
                    addIndex = repeat.viewCount() <= map.size - 1 ? repeat.viewCount() : map.size - 1;
                    overrideContext = createFullOverrideContext(repeat, map.get(key), addIndex, map.size, key);
                    repeat.insertView(map.size - 1, overrideContext.bindingContext, overrideContext);
                    break;
                case 'delete':
                    if (record.oldValue === undefined) {
                        return;
                    }
                    removeIndex = this._getViewIndexByKey(repeat, key);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    break;
                case 'clear':
                    repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
                    break;
                default:
                    continue;
            }
        }
        if (rmPromises.length > 0) {
            Promise.all(rmPromises).then(function () {
                updateOverrideContexts(repeat.views(), 0);
            });
        }
        else {
            updateOverrideContexts(repeat.views(), 0);
        }
    };
    MapRepeatStrategy.prototype._getViewIndexByKey = function (repeat, key) {
        var i;
        var ii;
        var child;
        for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
            child = repeat.view(i);
            if (child.bindingContext[repeat.key] === key) {
                return i;
            }
        }
        return undefined;
    };
    return MapRepeatStrategy;
}());

var NullRepeatStrategy = (function () {
    function NullRepeatStrategy() {
    }
    NullRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        repeat.removeAllViews(true);
    };
    NullRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
    };
    return NullRepeatStrategy;
}());

var NumberRepeatStrategy = (function () {
    function NumberRepeatStrategy() {
    }
    NumberRepeatStrategy.prototype.getCollectionObserver = function () {
        return null;
    };
    NumberRepeatStrategy.prototype.instanceChanged = function (repeat, value) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, value); });
            return;
        }
        this._standardProcessItems(repeat, value);
    };
    NumberRepeatStrategy.prototype._standardProcessItems = function (repeat, value) {
        var childrenLength = repeat.viewCount();
        var i;
        var ii;
        var overrideContext;
        var viewsToRemove;
        value = Math.floor(value);
        viewsToRemove = childrenLength - value;
        if (viewsToRemove > 0) {
            if (viewsToRemove > childrenLength) {
                viewsToRemove = childrenLength;
            }
            for (i = 0, ii = viewsToRemove; i < ii; ++i) {
                repeat.removeView(childrenLength - (i + 1), true, !repeat.viewsRequireLifecycle);
            }
            return;
        }
        for (i = childrenLength, ii = value; i < ii; ++i) {
            overrideContext = createFullOverrideContext(repeat, i, i, ii);
            repeat.addView(overrideContext.bindingContext, overrideContext);
        }
        updateOverrideContexts(repeat.views(), 0);
    };
    return NumberRepeatStrategy;
}());

var SetRepeatStrategy = (function () {
    function SetRepeatStrategy() {
    }
    SetRepeatStrategy.prototype.getCollectionObserver = function (observerLocator, items) {
        return observerLocator.getSetObserver(items);
    };
    SetRepeatStrategy.prototype.instanceChanged = function (repeat, items) {
        var _this = this;
        var removePromise = repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
        if (removePromise instanceof Promise) {
            removePromise.then(function () { return _this._standardProcessItems(repeat, items); });
            return;
        }
        this._standardProcessItems(repeat, items);
    };
    SetRepeatStrategy.prototype._standardProcessItems = function (repeat, items) {
        var index = 0;
        var overrideContext;
        items.forEach(function (value) {
            overrideContext = createFullOverrideContext(repeat, value, index, items.size);
            repeat.addView(overrideContext.bindingContext, overrideContext);
            ++index;
        });
    };
    SetRepeatStrategy.prototype.instanceMutated = function (repeat, set, records) {
        var value;
        var i;
        var ii;
        var overrideContext;
        var removeIndex;
        var record;
        var rmPromises = [];
        var viewOrPromise;
        for (i = 0, ii = records.length; i < ii; ++i) {
            record = records[i];
            value = record.value;
            switch (record.type) {
                case 'add':
                    var size = Math.max(set.size - 1, 0);
                    overrideContext = createFullOverrideContext(repeat, value, size, set.size);
                    repeat.insertView(size, overrideContext.bindingContext, overrideContext);
                    break;
                case 'delete':
                    removeIndex = this._getViewIndexByValue(repeat, value);
                    viewOrPromise = repeat.removeView(removeIndex, true, !repeat.viewsRequireLifecycle);
                    if (viewOrPromise instanceof Promise) {
                        rmPromises.push(viewOrPromise);
                    }
                    break;
                case 'clear':
                    repeat.removeAllViews(true, !repeat.viewsRequireLifecycle);
                    break;
                default:
                    continue;
            }
        }
        if (rmPromises.length > 0) {
            Promise.all(rmPromises).then(function () {
                updateOverrideContexts(repeat.views(), 0);
            });
        }
        else {
            updateOverrideContexts(repeat.views(), 0);
        }
    };
    SetRepeatStrategy.prototype._getViewIndexByValue = function (repeat, value) {
        var i;
        var ii;
        var child;
        for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
            child = repeat.view(i);
            if (child.bindingContext[repeat.local] === value) {
                return i;
            }
        }
        return undefined;
    };
    return SetRepeatStrategy;
}());

var RepeatStrategyLocator = (function () {
    function RepeatStrategyLocator() {
        this.matchers = [];
        this.strategies = [];
        this.addStrategy(function (items) { return items === null || items === undefined; }, new NullRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Array; }, new ArrayRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Map; }, new MapRepeatStrategy());
        this.addStrategy(function (items) { return items instanceof Set; }, new SetRepeatStrategy());
        this.addStrategy(function (items) { return typeof items === 'number'; }, new NumberRepeatStrategy());
    }
    RepeatStrategyLocator.prototype.addStrategy = function (matcher, strategy) {
        this.matchers.push(matcher);
        this.strategies.push(strategy);
    };
    RepeatStrategyLocator.prototype.getStrategy = function (items) {
        var matchers = this.matchers;
        for (var i = 0, ii = matchers.length; i < ii; ++i) {
            if (matchers[i](items)) {
                return this.strategies[i];
            }
        }
        return null;
    };
    return RepeatStrategyLocator;
}());

var lifecycleOptionalBehaviors = ['focus', 'if', 'else', 'repeat', 'show', 'hide', 'with'];
function behaviorRequiresLifecycle(instruction) {
    var t = instruction.type;
    var name = t.elementName !== null ? t.elementName : t.attributeName;
    return lifecycleOptionalBehaviors.indexOf(name) === -1 && (t.handlesAttached || t.handlesBind || t.handlesCreated || t.handlesDetached || t.handlesUnbind)
        || t.viewFactory && viewsRequireLifecycle(t.viewFactory)
        || instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
}
function targetRequiresLifecycle(instruction) {
    var behaviors = instruction.behaviorInstructions;
    if (behaviors) {
        var i = behaviors.length;
        while (i--) {
            if (behaviorRequiresLifecycle(behaviors[i])) {
                return true;
            }
        }
    }
    return instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
}
function viewsRequireLifecycle(viewFactory) {
    if ('_viewsRequireLifecycle' in viewFactory) {
        return viewFactory._viewsRequireLifecycle;
    }
    viewFactory._viewsRequireLifecycle = false;
    if (viewFactory.viewFactory) {
        viewFactory._viewsRequireLifecycle = viewsRequireLifecycle(viewFactory.viewFactory);
        return viewFactory._viewsRequireLifecycle;
    }
    if (viewFactory.template.querySelector('.au-animate')) {
        viewFactory._viewsRequireLifecycle = true;
        return true;
    }
    for (var id in viewFactory.instructions) {
        if (targetRequiresLifecycle(viewFactory.instructions[id])) {
            viewFactory._viewsRequireLifecycle = true;
            return true;
        }
    }
    viewFactory._viewsRequireLifecycle = false;
    return false;
}

var AbstractRepeater = (function () {
    function AbstractRepeater(options) {
        Object.assign(this, {
            local: 'items',
            viewsRequireLifecycle: true
        }, options);
    }
    AbstractRepeater.prototype.viewCount = function () {
        throw new Error('subclass must implement `viewCount`');
    };
    AbstractRepeater.prototype.views = function () {
        throw new Error('subclass must implement `views`');
    };
    AbstractRepeater.prototype.view = function (index) {
        throw new Error('subclass must implement `view`');
    };
    AbstractRepeater.prototype.matcher = function () {
        throw new Error('subclass must implement `matcher`');
    };
    AbstractRepeater.prototype.addView = function (bindingContext, overrideContext) {
        throw new Error('subclass must implement `addView`');
    };
    AbstractRepeater.prototype.insertView = function (index, bindingContext, overrideContext) {
        throw new Error('subclass must implement `insertView`');
    };
    AbstractRepeater.prototype.moveView = function (sourceIndex, targetIndex) {
        throw new Error('subclass must implement `moveView`');
    };
    AbstractRepeater.prototype.removeAllViews = function (returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeAllViews`');
    };
    AbstractRepeater.prototype.removeViews = function (viewsToRemove, returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeView`');
    };
    AbstractRepeater.prototype.removeView = function (index, returnToCache, skipAnimation) {
        throw new Error('subclass must implement `removeView`');
    };
    AbstractRepeater.prototype.updateBindings = function (view) {
        throw new Error('subclass must implement `updateBindings`');
    };
    return AbstractRepeater;
}());

var matcherExtractionMarker = '__marker_extracted__';
var Repeat = (function (_super) {
    __extends(Repeat, _super);
    function Repeat(viewFactory, instruction, viewSlot, viewResources, observerLocator, strategyLocator) {
        var _this = _super.call(this, {
            local: 'item',
            viewsRequireLifecycle: viewsRequireLifecycle(viewFactory)
        }) || this;
        _this.viewFactory = viewFactory;
        _this.instruction = instruction;
        _this.viewSlot = viewSlot;
        _this.lookupFunctions = viewResources.lookupFunctions;
        _this.observerLocator = observerLocator;
        _this.key = 'key';
        _this.value = 'value';
        _this.strategyLocator = strategyLocator;
        _this.ignoreMutation = false;
        _this.sourceExpression = getItemsSourceExpression(_this.instruction, 'repeat.for');
        _this.isOneTime = isOneTime(_this.sourceExpression);
        _this.viewsRequireLifecycle = viewsRequireLifecycle(viewFactory);
        return _this;
    }
    Repeat_1 = Repeat;
    Repeat.prototype.call = function (context, changes) {
        this[context](this.items, changes);
    };
    Repeat.prototype.bind = function (bindingContext, overrideContext) {
        this.scope = { bindingContext: bindingContext, overrideContext: overrideContext };
        var instruction = this.instruction;
        if (!(matcherExtractionMarker in instruction)) {
            instruction[matcherExtractionMarker] = this._captureAndRemoveMatcherBinding();
        }
        this.matcherBinding = instruction[matcherExtractionMarker];
        this.itemsChanged();
    };
    Repeat.prototype.unbind = function () {
        this.scope = null;
        this.items = null;
        this.matcherBinding = null;
        this.viewSlot.removeAll(true, true);
        this._unsubscribeCollection();
    };
    Repeat.prototype._unsubscribeCollection = function () {
        if (this.collectionObserver) {
            this.collectionObserver.unsubscribe(this.callContext, this);
            this.collectionObserver = null;
            this.callContext = null;
        }
    };
    Repeat.prototype.itemsChanged = function () {
        var _this = this;
        this._unsubscribeCollection();
        if (!this.scope) {
            return;
        }
        var items = this.items;
        this.strategy = this.strategyLocator.getStrategy(items);
        if (!this.strategy) {
            throw new Error("Value for '".concat(this.sourceExpression, "' is non-repeatable"));
        }
        if (!this.isOneTime && !this._observeInnerCollection()) {
            this._observeCollection();
        }
        this.ignoreMutation = true;
        this.strategy.instanceChanged(this, items);
        this.observerLocator.taskQueue.queueMicroTask(function () {
            _this.ignoreMutation = false;
        });
    };
    Repeat.prototype._getInnerCollection = function () {
        var expression = unwrapExpression(this.sourceExpression);
        if (!expression) {
            return null;
        }
        return expression.evaluate(this.scope, null);
    };
    Repeat.prototype.handleCollectionMutated = function (collection, changes) {
        if (!this.collectionObserver) {
            return;
        }
        if (this.ignoreMutation) {
            return;
        }
        this.strategy.instanceMutated(this, collection, changes);
    };
    Repeat.prototype.handleInnerCollectionMutated = function (collection, changes) {
        var _this = this;
        if (!this.collectionObserver) {
            return;
        }
        if (this.ignoreMutation) {
            return;
        }
        this.ignoreMutation = true;
        var newItems = this.sourceExpression.evaluate(this.scope, this.lookupFunctions);
        this.observerLocator.taskQueue.queueMicroTask(function () { return _this.ignoreMutation = false; });
        if (newItems === this.items) {
            this.itemsChanged();
        }
        else {
            this.items = newItems;
        }
    };
    Repeat.prototype._observeInnerCollection = function () {
        var items = this._getInnerCollection();
        var strategy = this.strategyLocator.getStrategy(items);
        if (!strategy) {
            return false;
        }
        this.collectionObserver = strategy.getCollectionObserver(this.observerLocator, items);
        if (!this.collectionObserver) {
            return false;
        }
        this.callContext = 'handleInnerCollectionMutated';
        this.collectionObserver.subscribe(this.callContext, this);
        return true;
    };
    Repeat.prototype._observeCollection = function () {
        var items = this.items;
        this.collectionObserver = this.strategy.getCollectionObserver(this.observerLocator, items);
        if (this.collectionObserver) {
            this.callContext = 'handleCollectionMutated';
            this.collectionObserver.subscribe(this.callContext, this);
        }
    };
    Repeat.prototype._captureAndRemoveMatcherBinding = function () {
        var viewFactory = this.viewFactory.viewFactory;
        if (viewFactory) {
            var template = viewFactory.template;
            var instructions = viewFactory.instructions;
            if (Repeat_1.useInnerMatcher) {
                return extractMatcherBindingExpression(instructions);
            }
            if (getChildrenCount(template) > 1) {
                return undefined;
            }
            var repeatedElement = getFirstElementChild(template);
            if (!repeatedElement.hasAttribute('au-target-id')) {
                return undefined;
            }
            var repeatedElementTargetId = repeatedElement.getAttribute('au-target-id');
            return extractMatcherBindingExpression(instructions, repeatedElementTargetId);
        }
        return undefined;
    };
    Repeat.prototype.viewCount = function () { return this.viewSlot.children.length; };
    Repeat.prototype.views = function () { return this.viewSlot.children; };
    Repeat.prototype.view = function (index) { return this.viewSlot.children[index]; };
    Repeat.prototype.matcher = function () {
        var matcherBinding = this.matcherBinding;
        return matcherBinding
            ? matcherBinding.sourceExpression.evaluate(this.scope, matcherBinding.lookupFunctions)
            : null;
    };
    Repeat.prototype.addView = function (bindingContext, overrideContext) {
        var view = this.viewFactory.create();
        view.bind(bindingContext, overrideContext);
        this.viewSlot.add(view);
    };
    Repeat.prototype.insertView = function (index, bindingContext, overrideContext) {
        var view = this.viewFactory.create();
        view.bind(bindingContext, overrideContext);
        this.viewSlot.insert(index, view);
    };
    Repeat.prototype.moveView = function (sourceIndex, targetIndex) {
        this.viewSlot.move(sourceIndex, targetIndex);
    };
    Repeat.prototype.removeAllViews = function (returnToCache, skipAnimation) {
        return this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Repeat.prototype.removeViews = function (viewsToRemove, returnToCache, skipAnimation) {
        return this.viewSlot.removeMany(viewsToRemove, returnToCache, skipAnimation);
    };
    Repeat.prototype.removeView = function (index, returnToCache, skipAnimation) {
        return this.viewSlot.removeAt(index, returnToCache, skipAnimation);
    };
    Repeat.prototype.updateBindings = function (view) {
        var $view = view;
        var j = $view.bindings.length;
        while (j--) {
            updateOneTimeBinding($view.bindings[j]);
        }
        j = $view.controllers.length;
        while (j--) {
            var k = $view.controllers[j].boundProperties.length;
            while (k--) {
                var binding = $view.controllers[j].boundProperties[k].binding;
                updateOneTimeBinding(binding);
            }
        }
    };
    var Repeat_1;
    Repeat.useInnerMatcher = true;
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Repeat.prototype, "items", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Repeat.prototype, "local", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Repeat.prototype, "key", void 0);
    __decorate([
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"]
    ], Repeat.prototype, "value", void 0);
    Repeat = Repeat_1 = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('repeat'),
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["templateController"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BoundViewFactory"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["TargetInstruction"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewResources"], __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["ObserverLocator"], RepeatStrategyLocator)
    ], Repeat);
    return Repeat;
}(AbstractRepeater));
var extractMatcherBindingExpression = function (instructions, targetedElementId) {
    var instructionIds = Object.keys(instructions);
    for (var i = 0; i < instructionIds.length; i++) {
        var instructionId = instructionIds[i];
        if (targetedElementId !== undefined && instructionId !== targetedElementId) {
            continue;
        }
        var expressions = instructions[instructionId].expressions;
        if (expressions) {
            for (var ii = 0; ii < expressions.length; ii++) {
                if (expressions[ii].targetProperty === 'matcher') {
                    var matcherBindingExpression = expressions[ii];
                    expressions.splice(ii, 1);
                    return matcherBindingExpression;
                }
            }
        }
    }
};
var getChildrenCount = function (el) {
    var childNodes = el.childNodes;
    var count = 0;
    for (var i = 0, ii = childNodes.length; ii > i; ++i) {
        if (childNodes[i].nodeType === 1) {
            ++count;
        }
    }
    return count;
};
var getFirstElementChild = function (el) {
    var firstChild = el.firstChild;
    while (firstChild !== null) {
        if (firstChild.nodeType === 1) {
            return firstChild;
        }
        firstChild = firstChild.nextSibling;
    }
    return null;
};

var aureliaHideClassName = 'aurelia-hide';
var aureliaHideClass = ".".concat(aureliaHideClassName, " { display:none !important; }");
function injectAureliaHideStyleAtHead() {
    __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(aureliaHideClass);
}
function injectAureliaHideStyleAtBoundary(domBoundary) {
    if (__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["FEATURE"].shadowDOM && domBoundary && !domBoundary.hasAureliaHideStyle) {
        domBoundary.hasAureliaHideStyle = true;
        __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(aureliaHideClass, domBoundary);
    }
}

var Show = (function () {
    function Show(element, animator, domBoundary) {
        this.element = element;
        this.animator = animator;
        this.domBoundary = domBoundary;
    }
    Show.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element, __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["Animator"], __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Optional"].of(__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].boundary, true)];
    };
    Show.prototype.created = function () {
        injectAureliaHideStyleAtBoundary(this.domBoundary);
    };
    Show.prototype.valueChanged = function (newValue) {
        var element = this.element;
        var animator = this.animator;
        if (newValue) {
            animator.removeClass(element, aureliaHideClassName);
        }
        else {
            animator.addClass(element, aureliaHideClassName);
        }
    };
    Show.prototype.bind = function (bindingContext) {
        this.valueChanged(this.value);
    };
    Show = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('show')
    ], Show);
    return Show;
}());

var Hide = (function () {
    function Hide(element, animator, domBoundary) {
        this.element = element;
        this.animator = animator;
        this.domBoundary = domBoundary;
    }
    Hide.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element, __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["Animator"], __WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["Optional"].of(__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].boundary, true)];
    };
    Hide.prototype.created = function () {
        injectAureliaHideStyleAtBoundary(this.domBoundary);
    };
    Hide.prototype.valueChanged = function (newValue) {
        if (newValue) {
            this.animator.addClass(this.element, aureliaHideClassName);
        }
        else {
            this.animator.removeClass(this.element, aureliaHideClassName);
        }
    };
    Hide.prototype.bind = function (bindingContext) {
        this.valueChanged(this.value);
    };
    Hide.prototype.value = function (value) {
        throw new Error('Method not implemented.');
    };
    Hide = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('hide')
    ], Hide);
    return Hide;
}());

var HTMLSanitizer = (function () {
    function HTMLSanitizer() {
    }
    HTMLSanitizer.prototype.sanitize = function (input) {
        throw new Error("To protect the application against a wide variety of sophisticated XSS attacks.\nPlease see https://aurelia.io/docs/binding/basics#element-content for instructions on how to use a secure solution like DOMPurify or sanitize-html.");
    };
    return HTMLSanitizer;
}());

var SanitizeHTMLValueConverter = (function () {
    function SanitizeHTMLValueConverter(sanitizer) {
        this.sanitizer = sanitizer;
    }
    SanitizeHTMLValueConverter.prototype.toView = function (untrustedMarkup) {
        if (untrustedMarkup === null || untrustedMarkup === undefined) {
            return null;
        }
        return this.sanitizer.sanitize(untrustedMarkup);
    };
    SanitizeHTMLValueConverter = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["valueConverter"])('sanitizeHTML'),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(HTMLSanitizer)
    ], SanitizeHTMLValueConverter);
    return SanitizeHTMLValueConverter;
}());

var Replaceable = (function () {
    function Replaceable(viewFactory, viewSlot) {
        this.viewFactory = viewFactory;
        this.viewSlot = viewSlot;
        this.view = null;
    }
    Replaceable.prototype.bind = function (bindingContext, overrideContext) {
        if (this.view === null) {
            this.view = this.viewFactory.create();
            this.viewSlot.add(this.view);
        }
        this.view.bind(bindingContext, overrideContext);
    };
    Replaceable.prototype.unbind = function () {
        this.view.unbind();
    };
    Replaceable = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('replaceable'),
        __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["templateController"],
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_aurelia_dependency_injection__["inject"])(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BoundViewFactory"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"])
    ], Replaceable);
    return Replaceable;
}());

var Focus = (function () {
    function Focus(element, taskQueue) {
        this.element = element;
        this.taskQueue = taskQueue;
        this.isAttached = false;
        this.needsApply = false;
    }
    Focus.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].Element, __WEBPACK_IMPORTED_MODULE_2_aurelia_task_queue__["TaskQueue"]];
    };
    Focus.prototype.valueChanged = function () {
        if (this.isAttached) {
            this._apply();
        }
        else {
            this.needsApply = true;
        }
    };
    Focus.prototype._apply = function () {
        var _this = this;
        if (this.value) {
            this.taskQueue.queueMicroTask(function () {
                if (_this.value) {
                    _this.element.focus();
                }
            });
        }
        else {
            this.element.blur();
        }
    };
    Focus.prototype.attached = function () {
        this.isAttached = true;
        if (this.needsApply) {
            this.needsApply = false;
            this._apply();
        }
        this.element.addEventListener('focus', this);
        this.element.addEventListener('blur', this);
    };
    Focus.prototype.detached = function () {
        this.isAttached = false;
        this.element.removeEventListener('focus', this);
        this.element.removeEventListener('blur', this);
    };
    Focus.prototype.handleEvent = function (e) {
        if (e.type === 'focus') {
            this.value = true;
        }
        else if (__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].activeElement !== this.element) {
            this.value = false;
        }
    };
    Focus = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customAttribute"])('focus', __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].twoWay)
    ], Focus);
    return Focus;
}());

var cssUrlMatcher = /url\((?!['"]data)([^)]+)\)/gi;
function fixupCSSUrls(address, css) {
    if (typeof css !== 'string') {
        throw new Error("Failed loading required CSS file: ".concat(address));
    }
    return css.replace(cssUrlMatcher, function (match, p1) {
        var quote = p1.charAt(0);
        if (quote === '\'' || quote === '"') {
            p1 = p1.substr(1, p1.length - 2);
        }
        return 'url(\'' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_aurelia_path__["relativeToFile"])(p1, address) + '\')';
    });
}
var CSSResource = (function () {
    function CSSResource(address) {
        this.address = address;
        this._scoped = null;
        this._global = false;
        this._alreadyGloballyInjected = false;
    }
    CSSResource.prototype.initialize = function (container, Target) {
        this._scoped = new Target(this);
    };
    CSSResource.prototype.register = function (registry, name) {
        if (name === 'scoped') {
            registry.registerViewEngineHooks(this._scoped);
        }
        else {
            this._global = true;
        }
    };
    CSSResource.prototype.load = function (container) {
        var _this = this;
        return container.get(__WEBPACK_IMPORTED_MODULE_5_aurelia_loader__["Loader"])
            .loadText(this.address)
            .catch(function () { return null; })
            .then(function (text) {
            text = fixupCSSUrls(_this.address, text);
            _this._scoped.css = text;
            if (_this._global) {
                _this._alreadyGloballyInjected = true;
                __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(text);
            }
            return _this;
        });
    };
    return CSSResource;
}());
var CSSViewEngineHooks = (function () {
    function CSSViewEngineHooks(owner) {
        this.owner = owner;
        this.css = null;
    }
    CSSViewEngineHooks.prototype.beforeCompile = function (content, resources, instruction) {
        if (instruction.targetShadowDOM) {
            __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(this.css, content, true);
        }
        else if (__WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["FEATURE"].scopedCSS) {
            var styleNode = __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(this.css, content, true);
            styleNode.setAttribute('scoped', 'scoped');
        }
        else if (this._global && !this.owner._alreadyGloballyInjected) {
            __WEBPACK_IMPORTED_MODULE_1_aurelia_pal__["DOM"].injectStyles(this.css);
            this.owner._alreadyGloballyInjected = true;
        }
    };
    return CSSViewEngineHooks;
}());
function _createCSSResource(address) {
    var ViewCSS = (function (_super) {
        __extends(ViewCSS, _super);
        function ViewCSS() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ViewCSS = __decorate([
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["resource"])(new CSSResource(address))
        ], ViewCSS);
        return ViewCSS;
    }(CSSViewEngineHooks));
    return ViewCSS;
}

var AttrBindingBehavior = (function () {
    function AttrBindingBehavior() {
    }
    AttrBindingBehavior.prototype.bind = function (binding, source) {
        binding.targetObserver = new __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["DataAttributeObserver"](binding.target, binding.targetProperty);
    };
    AttrBindingBehavior.prototype.unbind = function (binding, source) {
    };
    AttrBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('attr')
    ], AttrBindingBehavior);
    return AttrBindingBehavior;
}());

var modeBindingBehavior = {
    bind: function (binding, source, lookupFunctions) {
        binding.originalMode = binding.mode;
        binding.mode = this.mode;
    },
    unbind: function (binding, source) {
        binding.mode = binding.originalMode;
        binding.originalMode = null;
    }
};
var OneTimeBindingBehavior = (function () {
    function OneTimeBindingBehavior() {
        this.mode = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].oneTime;
    }
    OneTimeBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"])(modeBindingBehavior),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('oneTime')
    ], OneTimeBindingBehavior);
    return OneTimeBindingBehavior;
}());
var OneWayBindingBehavior = (function () {
    function OneWayBindingBehavior() {
        this.mode = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].toView;
    }
    OneWayBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"])(modeBindingBehavior),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('oneWay')
    ], OneWayBindingBehavior);
    return OneWayBindingBehavior;
}());
var ToViewBindingBehavior = (function () {
    function ToViewBindingBehavior() {
        this.mode = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].toView;
    }
    ToViewBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"])(modeBindingBehavior),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('toView')
    ], ToViewBindingBehavior);
    return ToViewBindingBehavior;
}());
var FromViewBindingBehavior = (function () {
    function FromViewBindingBehavior() {
        this.mode = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].fromView;
    }
    FromViewBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"])(modeBindingBehavior),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('fromView')
    ], FromViewBindingBehavior);
    return FromViewBindingBehavior;
}());
var TwoWayBindingBehavior = (function () {
    function TwoWayBindingBehavior() {
        this.mode = __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].twoWay;
    }
    TwoWayBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_aurelia_metadata__["mixin"])(modeBindingBehavior),
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('twoWay')
    ], TwoWayBindingBehavior);
    return TwoWayBindingBehavior;
}());

function throttle(newValue) {
    var _this = this;
    var state = this.throttleState;
    var elapsed = +new Date() - state.last;
    if (elapsed >= state.delay) {
        clearTimeout(state.timeoutId);
        state.timeoutId = null;
        state.last = +new Date();
        this.throttledMethod(newValue);
        return;
    }
    state.newValue = newValue;
    if (state.timeoutId === null) {
        state.timeoutId = setTimeout(function () {
            state.timeoutId = null;
            state.last = +new Date();
            _this.throttledMethod(state.newValue);
        }, state.delay - elapsed);
    }
}
var ThrottleBindingBehavior = (function () {
    function ThrottleBindingBehavior() {
    }
    ThrottleBindingBehavior.prototype.bind = function (binding, source, delay) {
        if (delay === void 0) { delay = 200; }
        var methodToThrottle = 'updateTarget';
        if (binding.callSource) {
            methodToThrottle = 'callSource';
        }
        else if (binding.updateSource && binding.mode === __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].twoWay) {
            methodToThrottle = 'updateSource';
        }
        binding.throttledMethod = binding[methodToThrottle];
        binding.throttledMethod.originalName = methodToThrottle;
        binding[methodToThrottle] = throttle;
        binding.throttleState = {
            delay: delay,
            last: 0,
            timeoutId: null
        };
    };
    ThrottleBindingBehavior.prototype.unbind = function (binding, source) {
        var methodToRestore = binding.throttledMethod.originalName;
        binding[methodToRestore] = binding.throttledMethod;
        binding.throttledMethod = null;
        clearTimeout(binding.throttleState.timeoutId);
        binding.throttleState = null;
    };
    ThrottleBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('throttle')
    ], ThrottleBindingBehavior);
    return ThrottleBindingBehavior;
}());

var unset = {};
function debounceCallSource(event) {
    var _this = this;
    var state = this.debounceState;
    clearTimeout(state.timeoutId);
    state.timeoutId = setTimeout(function () { return _this.debouncedMethod(event); }, state.delay);
}
function debounceCall(context, newValue, oldValue) {
    var _this = this;
    var state = this.debounceState;
    clearTimeout(state.timeoutId);
    if (context !== state.callContextToDebounce) {
        state.oldValue = unset;
        this.debouncedMethod(context, newValue, oldValue);
        return;
    }
    if (state.oldValue === unset) {
        state.oldValue = oldValue;
    }
    state.timeoutId = setTimeout(function () {
        var _oldValue = state.oldValue;
        state.oldValue = unset;
        _this.debouncedMethod(context, newValue, _oldValue);
    }, state.delay);
}
var DebounceBindingBehavior = (function () {
    function DebounceBindingBehavior() {
    }
    DebounceBindingBehavior.prototype.bind = function (binding, source, delay) {
        if (delay === void 0) { delay = 200; }
        var isCallSource = binding.callSource !== undefined;
        var methodToDebounce = isCallSource ? 'callSource' : 'call';
        var debouncer = isCallSource ? debounceCallSource : debounceCall;
        var mode = binding.mode;
        var callContextToDebounce = mode === __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].twoWay || mode === __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].fromView ? __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["targetContext"] : __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["sourceContext"];
        binding.debouncedMethod = binding[methodToDebounce];
        binding.debouncedMethod.originalName = methodToDebounce;
        binding[methodToDebounce] = debouncer;
        binding.debounceState = {
            callContextToDebounce: callContextToDebounce,
            delay: delay,
            timeoutId: 0,
            oldValue: unset
        };
    };
    DebounceBindingBehavior.prototype.unbind = function (binding, source) {
        var methodToRestore = binding.debouncedMethod.originalName;
        binding[methodToRestore] = binding.debouncedMethod;
        binding.debouncedMethod = null;
        clearTimeout(binding.debounceState.timeoutId);
        binding.debounceState = null;
    };
    DebounceBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('debounce')
    ], DebounceBindingBehavior);
    return DebounceBindingBehavior;
}());

function findOriginalEventTarget(event) {
    return (event.path && event.path[0]) || (event.deepPath && event.deepPath[0]) || event.target;
}
function handleSelfEvent(event) {
    var target = findOriginalEventTarget(event);
    if (this.target !== target) {
        return;
    }
    this.selfEventCallSource(event);
}
var SelfBindingBehavior = (function () {
    function SelfBindingBehavior() {
    }
    SelfBindingBehavior.prototype.bind = function (binding, source) {
        if (!binding.callSource || !binding.targetEvent) {
            throw new Error('Self binding behavior only supports event.');
        }
        binding.selfEventCallSource = binding.callSource;
        binding.callSource = handleSelfEvent;
    };
    SelfBindingBehavior.prototype.unbind = function (binding, source) {
        binding.callSource = binding.selfEventCallSource;
        binding.selfEventCallSource = null;
    };
    SelfBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('self')
    ], SelfBindingBehavior);
    return SelfBindingBehavior;
}());

var BindingSignaler = (function () {
    function BindingSignaler() {
        this.signals = {};
    }
    BindingSignaler.prototype.signal = function (name) {
        var bindings = this.signals[name];
        if (!bindings) {
            return;
        }
        var i = bindings.length;
        while (i--) {
            bindings[i].call(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["sourceContext"]);
        }
    };
    return BindingSignaler;
}());

var SignalBindingBehavior = (function () {
    function SignalBindingBehavior(bindingSignaler) {
        this.signals = bindingSignaler.signals;
    }
    SignalBindingBehavior.inject = function () { return [BindingSignaler]; };
    SignalBindingBehavior.prototype.bind = function (binding, source) {
        var names = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            names[_i - 2] = arguments[_i];
        }
        if (!binding.updateTarget) {
            throw new Error('Only property bindings and string interpolation bindings can be signaled.  Trigger, delegate and call bindings cannot be signaled.');
        }
        var signals = this.signals;
        if (names.length === 1) {
            var name_1 = names[0];
            var bindings = signals[name_1] || (signals[name_1] = []);
            bindings.push(binding);
            binding.signalName = name_1;
        }
        else if (names.length > 1) {
            var i = names.length;
            while (i--) {
                var name_2 = names[i];
                var bindings = signals[name_2] || (signals[name_2] = []);
                bindings.push(binding);
            }
            binding.signalName = names;
        }
        else {
            throw new Error('Signal name is required.');
        }
    };
    SignalBindingBehavior.prototype.unbind = function (binding, source) {
        var signals = this.signals;
        var name = binding.signalName;
        binding.signalName = null;
        if (Array.isArray(name)) {
            var names = name;
            var i = names.length;
            while (i--) {
                var n = names[i];
                var bindings = signals[n];
                bindings.splice(bindings.indexOf(binding), 1);
            }
        }
        else {
            var bindings = signals[name];
            bindings.splice(bindings.indexOf(binding), 1);
        }
    };
    SignalBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('signal')
    ], SignalBindingBehavior);
    return SignalBindingBehavior;
}());

var eventNamesRequired = 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">';
var notApplicableMessage = 'The updateTrigger binding behavior can only be applied to two-way/ from-view bindings on input/select elements.';
var UpdateTriggerBindingBehavior = (function () {
    function UpdateTriggerBindingBehavior() {
    }
    UpdateTriggerBindingBehavior.prototype.bind = function (binding, source) {
        var events = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            events[_i - 2] = arguments[_i];
        }
        if (events.length === 0) {
            throw new Error(eventNamesRequired);
        }
        if (binding.mode !== __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].twoWay && binding.mode !== __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingMode"].fromView) {
            throw new Error(notApplicableMessage);
        }
        var targetObserver = binding.observerLocator.getObserver(binding.target, binding.targetProperty);
        if (!targetObserver.handler) {
            throw new Error(notApplicableMessage);
        }
        binding.targetObserver = targetObserver;
        targetObserver.originalHandler = binding.targetObserver.handler;
        var handler = new __WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["EventSubscriber"](events);
        targetObserver.handler = handler;
    };
    UpdateTriggerBindingBehavior.prototype.unbind = function (binding, source) {
        var targetObserver = binding.targetObserver;
        targetObserver.handler.dispose();
        targetObserver.handler = targetObserver.originalHandler;
        targetObserver.originalHandler = null;
    };
    UpdateTriggerBindingBehavior = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_aurelia_binding__["bindingBehavior"])('updateTrigger')
    ], UpdateTriggerBindingBehavior);
    return UpdateTriggerBindingBehavior;
}());

function _createDynamicElement(_a) {
    var name = _a.name, viewUrl = _a.viewUrl, bindableNames = _a.bindableNames, useShadowDOMmode = _a.useShadowDOMmode;
    var DynamicElement = (function () {
        function DynamicElement() {
        }
        DynamicElement.prototype.bind = function (bindingContext) {
            this.$parent = bindingContext;
        };
        DynamicElement = __decorate([
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customElement"])(name),
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["useView"])(viewUrl)
        ], DynamicElement);
        return DynamicElement;
    }());
    for (var i = 0, ii = bindableNames.length; i < ii; ++i) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["bindable"])(bindableNames[i])(DynamicElement);
    }
    switch (useShadowDOMmode) {
        case 'open':
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["useShadowDOM"])({ mode: 'open' })(DynamicElement);
            break;
        case 'closed':
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["useShadowDOM"])({ mode: 'closed' })(DynamicElement);
            break;
        case '':
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["useShadowDOM"])(DynamicElement);
            break;
        case null:
            break;
        default:
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_aurelia_logging__["getLogger"])('aurelia-html-only-element')
                .warn("Expected 'use-shadow-dom' value to be \"close\", \"open\" or \"\", received ".concat(useShadowDOMmode));
            break;
    }
    return DynamicElement;
}

function getElementName(address) {
    return /([^\/^\?]+)\.html/i.exec(address)[1].toLowerCase();
}
function configure$1(config) {
    var viewEngine = config.container.get(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewEngine"]);
    var loader = config.aurelia.loader;
    viewEngine.addResourcePlugin('.html', {
        'fetch': function (viewUrl) {
            return loader.loadTemplate(viewUrl).then(function (registryEntry) {
                var _a;
                var bindableNames = registryEntry.template.getAttribute('bindable');
                var useShadowDOMmode = registryEntry.template.getAttribute('use-shadow-dom');
                var name = getElementName(viewUrl);
                if (bindableNames) {
                    bindableNames = bindableNames.split(',').map(function (x) { return x.trim(); });
                    registryEntry.template.removeAttribute('bindable');
                }
                else {
                    bindableNames = [];
                }
                return _a = {}, _a[name] = _createDynamicElement({ name: name, viewUrl: viewUrl, bindableNames: bindableNames, useShadowDOMmode: useShadowDOMmode }), _a;
            });
        }
    });
}

function configure(config) {
    injectAureliaHideStyleAtHead();
    config.globalResources(Compose, If, Else, With, Repeat, Show, Hide, Replaceable, Focus, SanitizeHTMLValueConverter, OneTimeBindingBehavior, OneWayBindingBehavior, ToViewBindingBehavior, FromViewBindingBehavior, TwoWayBindingBehavior, ThrottleBindingBehavior, DebounceBindingBehavior, SelfBindingBehavior, SignalBindingBehavior, UpdateTriggerBindingBehavior, AttrBindingBehavior);
    configure$1(config);
    var viewEngine = config.container.get(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewEngine"]);
    var styleResourcePlugin = {
        fetch: function (address) {
            var _a;
            return _a = {}, _a[address] = _createCSSResource(address), _a;
        }
    };
    ['.css', '.less', '.sass', '.scss', '.styl'].forEach(function (ext) { return viewEngine.addResourcePlugin(ext, styleResourcePlugin); });
}


//# sourceMappingURL=aurelia-templating-resources.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("bluebird")))

/***/ },

/***/ "aurelia-templating-router":
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_aurelia_router__ = __webpack_require__("aurelia-router");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_aurelia_metadata__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_aurelia_path__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_aurelia_dependency_injection__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_aurelia_binding__ = __webpack_require__("aurelia-binding");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_aurelia_pal__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_aurelia_logging__ = __webpack_require__(51);
/* harmony export (binding) */ __webpack_require__.d(exports, "RouteHref", function() { return RouteHref; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouterView", function() { return RouterView; });
/* harmony export (binding) */ __webpack_require__.d(exports, "RouterViewLocator", function() { return RouterViewLocator; });
/* harmony export (binding) */ __webpack_require__.d(exports, "TemplatingRouteLoader", function() { return TemplatingRouteLoader; });
/* harmony export (binding) */ __webpack_require__.d(exports, "configure", function() { return configure; });









/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var EmptyLayoutViewModel = (function () {
    function EmptyLayoutViewModel() {
    }
    return EmptyLayoutViewModel;
}());
var RouterView = (function () {
    function RouterView(element, container, viewSlot, router, viewLocator, compositionTransaction, compositionEngine) {
        this.element = element;
        this.container = container;
        this.viewSlot = viewSlot;
        this.router = router;
        this.viewLocator = viewLocator;
        this.compositionTransaction = compositionTransaction;
        this.compositionEngine = compositionEngine;
        this.router.registerViewPort(this, this.element.getAttribute('name'));
        if (!('initialComposition' in compositionTransaction)) {
            compositionTransaction.initialComposition = true;
            this.compositionTransactionNotifier = compositionTransaction.enlist();
        }
    }
    RouterView.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_6_aurelia_pal__["DOM"].Element, __WEBPACK_IMPORTED_MODULE_4_aurelia_dependency_injection__["Container"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewSlot"], __WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ViewLocator"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["CompositionTransaction"], __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["CompositionEngine"]];
    };
    RouterView.prototype.created = function (owningView) {
        this.owningView = owningView;
    };
    RouterView.prototype.bind = function (bindingContext, overrideContext) {
        this.container.viewModel = bindingContext;
        this.overrideContext = overrideContext;
    };
    RouterView.prototype.process = function ($viewPortInstruction, waitToSwap) {
        var _this = this;
        var viewPortInstruction = $viewPortInstruction;
        var component = viewPortInstruction.component;
        var childContainer = component.childContainer;
        var viewModel = component.viewModel;
        var viewModelResource = component.viewModelResource;
        var metadata = viewModelResource.metadata;
        var config = component.router.currentInstruction.config;
        var viewPortConfig = config.viewPorts ? (config.viewPorts[viewPortInstruction.name] || {}) : {};
        childContainer.get(RouterViewLocator)._notify(this);
        var layoutInstruction = {
            viewModel: viewPortConfig.layoutViewModel || config.layoutViewModel || this.layoutViewModel,
            view: viewPortConfig.layoutView || config.layoutView || this.layoutView,
            model: viewPortConfig.layoutModel || config.layoutModel || this.layoutModel,
            router: viewPortInstruction.component.router,
            childContainer: childContainer,
            viewSlot: this.viewSlot
        };
        var viewStrategy = this.viewLocator.getViewStrategy(component.view || viewModel);
        if (viewStrategy && component.view) {
            viewStrategy.makeRelativeTo(__WEBPACK_IMPORTED_MODULE_1_aurelia_metadata__["Origin"].get(component.router.container.viewModel.constructor).moduleId);
        }
        return metadata
            .load(childContainer, viewModelResource.value, null, viewStrategy, true)
            .then(function (viewFactory) {
            if (!_this.compositionTransactionNotifier) {
                _this.compositionTransactionOwnershipToken = _this.compositionTransaction.tryCapture();
            }
            if (layoutInstruction.viewModel || layoutInstruction.view) {
                viewPortInstruction.layoutInstruction = layoutInstruction;
            }
            var viewPortComponentBehaviorInstruction = __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["BehaviorInstruction"].dynamic(_this.element, viewModel, viewFactory);
            viewPortInstruction.controller = metadata.create(childContainer, viewPortComponentBehaviorInstruction);
            if (waitToSwap) {
                return null;
            }
            _this.swap(viewPortInstruction);
        });
    };
    RouterView.prototype.swap = function ($viewPortInstruction) {
        var _this = this;
        var viewPortInstruction = $viewPortInstruction;
        var viewPortController = viewPortInstruction.controller;
        var layoutInstruction = viewPortInstruction.layoutInstruction;
        var previousView = this.view;
        var work = function () {
            var swapStrategy = __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["SwapStrategies"][_this.swapOrder] || __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["SwapStrategies"].after;
            var viewSlot = _this.viewSlot;
            swapStrategy(viewSlot, previousView, function () { return Promise.resolve(viewSlot.add(_this.view)); }).then(function () {
                _this._notify();
            });
        };
        var ready = function (owningView_or_layoutView) {
            viewPortController.automate(_this.overrideContext, owningView_or_layoutView);
            var transactionOwnerShipToken = _this.compositionTransactionOwnershipToken;
            if (transactionOwnerShipToken) {
                return transactionOwnerShipToken
                    .waitForCompositionComplete()
                    .then(function () {
                    _this.compositionTransactionOwnershipToken = null;
                    return work();
                });
            }
            return work();
        };
        if (layoutInstruction) {
            if (!layoutInstruction.viewModel) {
                layoutInstruction.viewModel = new EmptyLayoutViewModel();
            }
            return this.compositionEngine
                .createController(layoutInstruction)
                .then(function (layoutController) {
                var layoutView = layoutController.view;
                __WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["ShadowDOM"].distributeView(viewPortController.view, layoutController.slots || layoutView.slots);
                layoutController.automate(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_aurelia_binding__["createOverrideContext"])(layoutInstruction.viewModel), _this.owningView);
                layoutView.children.push(viewPortController.view);
                return layoutView || layoutController;
            })
                .then(function (newView) {
                _this.view = newView;
                return ready(newView);
            });
        }
        this.view = viewPortController.view;
        return ready(this.owningView);
    };
    RouterView.prototype._notify = function () {
        var notifier = this.compositionTransactionNotifier;
        if (notifier) {
            notifier.done();
            this.compositionTransactionNotifier = null;
        }
    };
    RouterView.$view = null;
    RouterView.$resource = {
        name: 'router-view',
        bindables: ['swapOrder', 'layoutView', 'layoutViewModel', 'layoutModel', 'inherit-binding-context']
    };
    return RouterView;
}());
var RouterViewLocator = (function () {
    function RouterViewLocator() {
        var _this = this;
        this.promise = new Promise(function (resolve) { return _this.resolve = resolve; });
    }
    RouterViewLocator.prototype.findNearest = function () {
        return this.promise;
    };
    RouterViewLocator.prototype._notify = function (routerView) {
        this.resolve(routerView);
    };
    return RouterViewLocator;
}());

var EmptyClass = (function () {
    function EmptyClass() {
    }
    return EmptyClass;
}());
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["inlineView"])('<template></template>')(EmptyClass);
var TemplatingRouteLoader = (function (_super) {
    __extends(TemplatingRouteLoader, _super);
    function TemplatingRouteLoader(compositionEngine) {
        var _this = _super.call(this) || this;
        _this.compositionEngine = compositionEngine;
        return _this;
    }
    TemplatingRouteLoader.prototype.resolveViewModel = function (router, config) {
        return new Promise(function (resolve, reject) {
            var viewModel;
            if ('moduleId' in config) {
                var moduleId = config.moduleId;
                if (moduleId === null) {
                    viewModel = EmptyClass;
                }
                else {
                    moduleId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_aurelia_path__["relativeToFile"])(moduleId, __WEBPACK_IMPORTED_MODULE_1_aurelia_metadata__["Origin"].get(router.container.viewModel.constructor).moduleId);
                    if (/\.html/i.test(moduleId)) {
                        viewModel = createDynamicClass(moduleId);
                    }
                    else {
                        viewModel = moduleId;
                    }
                }
                return resolve(viewModel);
            }
            reject(new Error('Invalid route config. No "moduleId" found.'));
        });
    };
    TemplatingRouteLoader.prototype.createChildContainer = function (router) {
        var childContainer = router.container.createChild();
        childContainer.registerSingleton(RouterViewLocator);
        childContainer.getChildRouter = function () {
            var childRouter;
            childContainer.registerHandler(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"], function () { return childRouter || (childRouter = router.createChild(childContainer)); });
            return childContainer.get(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"]);
        };
        return childContainer;
    };
    TemplatingRouteLoader.prototype.loadRoute = function (router, config, navInstruction) {
        var _this = this;
        return this
            .resolveViewModel(router, config)
            .then(function (viewModel) { return _this.compositionEngine.ensureViewModel({
            viewModel: viewModel,
            childContainer: _this.createChildContainer(router),
            view: config.view || config.viewStrategy,
            router: router
        }); });
    };
    TemplatingRouteLoader.inject = [__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["CompositionEngine"]];
    return TemplatingRouteLoader;
}(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["RouteLoader"]));
function createDynamicClass(moduleId) {
    var name = /([^\/^\?]+)\.html/i.exec(moduleId)[1];
    var DynamicClass = (function () {
        function DynamicClass() {
        }
        DynamicClass.prototype.bind = function (bindingContext) {
            this.$parent = bindingContext;
        };
        return DynamicClass;
    }());
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["customElement"])(name)(DynamicClass);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_aurelia_templating__["useView"])(moduleId)(DynamicClass);
    return DynamicClass;
}

var logger = __WEBPACK_IMPORTED_MODULE_7_aurelia_logging__["getLogger"]('route-href');
var RouteHref = (function () {
    function RouteHref(router, element) {
        this.router = router;
        this.element = element;
        this.attribute = 'href';
    }
    RouteHref.inject = function () {
        return [__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"], __WEBPACK_IMPORTED_MODULE_6_aurelia_pal__["DOM"].Element];
    };
    RouteHref.prototype.bind = function () {
        this.isActive = true;
        this.processChange();
    };
    RouteHref.prototype.unbind = function () {
        this.isActive = false;
    };
    RouteHref.prototype.attributeChanged = function (value, previous) {
        if (previous) {
            this.element.removeAttribute(previous);
        }
        return this.processChange();
    };
    RouteHref.prototype.processChange = function () {
        var _this = this;
        return this.router
            .ensureConfigured()
            .then(function () {
            if (!_this.isActive) {
                return null;
            }
            var element = _this.element;
            var href = _this.router.generate(_this.route, _this.params);
            if (element.au.controller) {
                element.au.controller.viewModel[_this.attribute] = href;
            }
            else {
                element.setAttribute(_this.attribute, href);
            }
            return null;
        })
            .catch(function (reason) {
            logger.error(reason);
        });
    };
    RouteHref.$resource = {
        type: 'attribute',
        name: 'route-href',
        bindables: [
            { name: 'route', changeHandler: 'processChange', primaryProperty: true },
            { name: 'params', changeHandler: 'processChange' },
            'attribute'
        ]
    };
    return RouteHref;
}());

function configure(config) {
    config
        .singleton(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["RouteLoader"], TemplatingRouteLoader)
        .singleton(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"], __WEBPACK_IMPORTED_MODULE_0_aurelia_router__["AppRouter"])
        .globalResources(RouterView, RouteHref);
    config.container.registerAlias(__WEBPACK_IMPORTED_MODULE_0_aurelia_router__["Router"], __WEBPACK_IMPORTED_MODULE_0_aurelia_router__["AppRouter"]);
}


//# sourceMappingURL=aurelia-templating-router.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("bluebird")))

/***/ }

},[1049]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS5idW5kbGUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F1cmVsaWEtdGFzay1xdWV1ZS9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtdGFzay1xdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F1cmVsaWEtaGlzdG9yeS9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24vZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS10ZW1wbGF0aW5nL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS10ZW1wbGF0aW5nLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1sb2dnaW5nL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1sb2dnaW5nLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1iaW5kaW5nL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1iaW5kaW5nLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1ldmVudC1hZ2dyZWdhdG9yL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1ldmVudC1hZ2dyZWdhdG9yLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1mcmFtZXdvcmsvZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLWZyYW1ld29yay5qcyIsIndlYnBhY2s6Ly8vLi9+L2F1cmVsaWEtaGlzdG9yeS1icm93c2VyL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1oaXN0b3J5LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9hdXJlbGlhLWxvZ2dpbmctY29uc29sZS9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtbG9nZ2luZy1jb25zb2xlLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1yb3V0ZS1yZWNvZ25pemVyL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1yb3V0ZS1yZWNvZ25pemVyLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS1yb3V0ZXIvZGlzdC9lczIwMTUvYXVyZWxpYS1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9hdXJlbGlhLXRlbXBsYXRpbmctYmluZGluZy9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtdGVtcGxhdGluZy1iaW5kaW5nLmpzIiwid2VicGFjazovLy8uL34vYXVyZWxpYS10ZW1wbGF0aW5nLXJlc291cmNlcy9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtdGVtcGxhdGluZy1yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9hdXJlbGlhLXRlbXBsYXRpbmctcm91dGVyL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS10ZW1wbGF0aW5nLXJvdXRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cblxuXG5pbXBvcnQgeyBET00sIEZFQVRVUkUgfSBmcm9tICdhdXJlbGlhLXBhbCc7XG5cbnZhciBzdGFja1NlcGFyYXRvciA9ICdcXG5FbnF1ZXVlZCBpbiBUYXNrUXVldWUgYnk6XFxuJztcbnZhciBtaWNyb1N0YWNrU2VwYXJhdG9yID0gJ1xcbkVucXVldWVkIGluIE1pY3JvVGFza1F1ZXVlIGJ5Olxcbic7XG5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0Rmx1c2hGcm9tTXV0YXRpb25PYnNlcnZlcihmbHVzaCkge1xuICB2YXIgb2JzZXJ2ZXIgPSBET00uY3JlYXRlTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciB2YWwgPSAnYSc7XG4gIHZhciBub2RlID0gRE9NLmNyZWF0ZVRleHROb2RlKCdhJyk7XG4gIHZhciB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YWx1ZXMuYSA9ICdiJztcbiAgdmFsdWVzLmIgPSAnYSc7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdEZsdXNoKCkge1xuICAgIG5vZGUuZGF0YSA9IHZhbCA9IHZhbHVlc1t2YWxdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdEZsdXNoRnJvbVRpbWVyKGZsdXNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Rmx1c2goKSB7XG4gICAgdmFyIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZUZsdXNoVGltZXIsIDApO1xuXG4gICAgdmFyIGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlRmx1c2hUaW1lciwgNTApO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUZsdXNoVGltZXIoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgIGZsdXNoKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbkVycm9yKGVycm9yLCB0YXNrLCBsb25nU3RhY2tzKSB7XG4gIGlmIChsb25nU3RhY2tzICYmIHRhc2suc3RhY2sgJiYgKHR5cGVvZiBlcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZXJyb3IpKSA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwpIHtcbiAgICBlcnJvci5zdGFjayA9IGZpbHRlckZsdXNoU3RhY2soZXJyb3Iuc3RhY2spICsgdGFzay5zdGFjaztcbiAgfVxuXG4gIGlmICgnb25FcnJvcicgaW4gdGFzaykge1xuICAgIHRhc2sub25FcnJvcihlcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIFRhc2tRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGFza1F1ZXVlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBcblxuICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmxvbmdTdGFja3MgPSBmYWxzZTtcblxuICAgIHRoaXMubWljcm9UYXNrUXVldWUgPSBbXTtcbiAgICB0aGlzLm1pY3JvVGFza1F1ZXVlQ2FwYWNpdHkgPSAxMDI0O1xuICAgIHRoaXMudGFza1F1ZXVlID0gW107XG5cbiAgICBpZiAoRkVBVFVSRS5tdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICB0aGlzLnJlcXVlc3RGbHVzaE1pY3JvVGFza1F1ZXVlID0gbWFrZVJlcXVlc3RGbHVzaEZyb21NdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZsdXNoTWljcm9UYXNrUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlcXVlc3RGbHVzaE1pY3JvVGFza1F1ZXVlID0gbWFrZVJlcXVlc3RGbHVzaEZyb21UaW1lcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5mbHVzaE1pY3JvVGFza1F1ZXVlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlcXVlc3RGbHVzaFRhc2tRdWV1ZSA9IG1ha2VSZXF1ZXN0Rmx1c2hGcm9tVGltZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmZsdXNoVGFza1F1ZXVlKCk7XG4gICAgfSk7XG4gIH1cblxuICBUYXNrUXVldWUucHJvdG90eXBlLl9mbHVzaFF1ZXVlID0gZnVuY3Rpb24gX2ZsdXNoUXVldWUocXVldWUsIGNhcGFjaXR5KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgdGFzayA9IHZvaWQgMDtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB0YXNrID0gcXVldWVbaW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5sb25nU3RhY2tzKSB7XG4gICAgICAgICAgdGhpcy5zdGFjayA9IHR5cGVvZiB0YXNrLnN0YWNrID09PSAnc3RyaW5nJyA/IHRhc2suc3RhY2sgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGFzay5jYWxsKCk7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICBmb3IgKHZhciBzY2FuID0gMCwgbmV3TGVuZ3RoID0gcXVldWUubGVuZ3RoIC0gaW5kZXg7IHNjYW4gPCBuZXdMZW5ndGg7IHNjYW4rKykge1xuICAgICAgICAgICAgcXVldWVbc2Nhbl0gPSBxdWV1ZVtzY2FuICsgaW5kZXhdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHF1ZXVlLmxlbmd0aCAtPSBpbmRleDtcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25FcnJvcihlcnJvciwgdGFzaywgdGhpcy5sb25nU3RhY2tzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5mbHVzaGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBUYXNrUXVldWUucHJvdG90eXBlLnF1ZXVlTWljcm9UYXNrID0gZnVuY3Rpb24gcXVldWVNaWNyb1Rhc2sodGFzaykge1xuICAgIGlmICh0aGlzLm1pY3JvVGFza1F1ZXVlLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRoaXMucmVxdWVzdEZsdXNoTWljcm9UYXNrUXVldWUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sb25nU3RhY2tzKSB7XG4gICAgICB0YXNrLnN0YWNrID0gdGhpcy5wcmVwYXJlUXVldWVTdGFjayhtaWNyb1N0YWNrU2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLm1pY3JvVGFza1F1ZXVlLnB1c2godGFzayk7XG4gIH07XG5cbiAgVGFza1F1ZXVlLnByb3RvdHlwZS5xdWV1ZVRhc2sgPSBmdW5jdGlvbiBxdWV1ZVRhc2sodGFzaykge1xuICAgIGlmICh0aGlzLnRhc2tRdWV1ZS5sZW5ndGggPCAxKSB7XG4gICAgICB0aGlzLnJlcXVlc3RGbHVzaFRhc2tRdWV1ZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvbmdTdGFja3MpIHtcbiAgICAgIHRhc2suc3RhY2sgPSB0aGlzLnByZXBhcmVRdWV1ZVN0YWNrKHN0YWNrU2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnRhc2tRdWV1ZS5wdXNoKHRhc2spO1xuICB9O1xuXG4gIFRhc2tRdWV1ZS5wcm90b3R5cGUuZmx1c2hUYXNrUXVldWUgPSBmdW5jdGlvbiBmbHVzaFRhc2tRdWV1ZSgpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnRhc2tRdWV1ZTtcbiAgICB0aGlzLnRhc2tRdWV1ZSA9IFtdO1xuICAgIHRoaXMuX2ZsdXNoUXVldWUocXVldWUsIE51bWJlci5NQVhfVkFMVUUpO1xuICB9O1xuXG4gIFRhc2tRdWV1ZS5wcm90b3R5cGUuZmx1c2hNaWNyb1Rhc2tRdWV1ZSA9IGZ1bmN0aW9uIGZsdXNoTWljcm9UYXNrUXVldWUoKSB7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5taWNyb1Rhc2tRdWV1ZTtcbiAgICB0aGlzLl9mbHVzaFF1ZXVlKHF1ZXVlLCB0aGlzLm1pY3JvVGFza1F1ZXVlQ2FwYWNpdHkpO1xuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgVGFza1F1ZXVlLnByb3RvdHlwZS5wcmVwYXJlUXVldWVTdGFjayA9IGZ1bmN0aW9uIHByZXBhcmVRdWV1ZVN0YWNrKHNlcGFyYXRvcikge1xuICAgIHZhciBzdGFjayA9IHNlcGFyYXRvciArIGZpbHRlclF1ZXVlU3RhY2soY2FwdHVyZVN0YWNrKCkpO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgc3RhY2sgPSBmaWx0ZXJGbHVzaFN0YWNrKHN0YWNrKSArIHRoaXMuc3RhY2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrO1xuICB9O1xuXG4gIHJldHVybiBUYXNrUXVldWU7XG59KCk7XG5cbmZ1bmN0aW9uIGNhcHR1cmVTdGFjaygpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cbiAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgcmV0dXJuIGVycm9yLnN0YWNrO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlLnN0YWNrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlclF1ZXVlU3RhY2soc3RhY2spIHtcbiAgcmV0dXJuIHN0YWNrLnJlcGxhY2UoL15bXFxzXFxTXSo/XFxicXVldWUoTWljcm8pP1Rhc2tcXGJbXlxcbl0qXFxuLywgJycpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJGbHVzaFN0YWNrKHN0YWNrKSB7XG4gIHZhciBpbmRleCA9IHN0YWNrLmxhc3RJbmRleE9mKCdmbHVzaE1pY3JvVGFza1F1ZXVlJyk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gc3RhY2subGFzdEluZGV4T2YoJ2ZsdXNoVGFza1F1ZXVlJyk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH1cbiAgfVxuXG4gIGluZGV4ID0gc3RhY2subGFzdEluZGV4T2YoJ1xcbicsIGluZGV4KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gc3RhY2sgOiBzdGFjay5zdWJzdHIoMCwgaW5kZXgpO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hdXJlbGlhLXRhc2stcXVldWUvZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLXRhc2stcXVldWUuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJcblxuZnVuY3Rpb24gbWkobmFtZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0hpc3RvcnkgbXVzdCBpbXBsZW1lbnQgJyArIG5hbWUgKyAnKCkuJyk7XG59XG5cbmV4cG9ydCB2YXIgSGlzdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSGlzdG9yeSgpIHtcbiAgICBcbiAgfVxuXG4gIEhpc3RvcnkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gYWN0aXZhdGUob3B0aW9ucykge1xuICAgIG1pKCdhY3RpdmF0ZScpO1xuICB9O1xuXG4gIEhpc3RvcnkucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xuICAgIG1pKCdkZWFjdGl2YXRlJyk7XG4gIH07XG5cbiAgSGlzdG9yeS5wcm90b3R5cGUuZ2V0QWJzb2x1dGVSb290ID0gZnVuY3Rpb24gZ2V0QWJzb2x1dGVSb290KCkge1xuICAgIG1pKCdnZXRBYnNvbHV0ZVJvb3QnKTtcbiAgfTtcblxuICBIaXN0b3J5LnByb3RvdHlwZS5uYXZpZ2F0ZSA9IGZ1bmN0aW9uIG5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgbWkoJ25hdmlnYXRlJyk7XG4gIH07XG5cbiAgSGlzdG9yeS5wcm90b3R5cGUubmF2aWdhdGVCYWNrID0gZnVuY3Rpb24gbmF2aWdhdGVCYWNrKCkge1xuICAgIG1pKCduYXZpZ2F0ZUJhY2snKTtcbiAgfTtcblxuICBIaXN0b3J5LnByb3RvdHlwZS5zZXRUaXRsZSA9IGZ1bmN0aW9uIHNldFRpdGxlKHRpdGxlKSB7XG4gICAgbWkoJ3NldFRpdGxlJyk7XG4gIH07XG5cbiAgSGlzdG9yeS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShrZXksIHZhbHVlKSB7XG4gICAgbWkoJ3NldFN0YXRlJyk7XG4gIH07XG5cbiAgSGlzdG9yeS5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbiBnZXRTdGF0ZShrZXkpIHtcbiAgICBtaSgnZ2V0U3RhdGUnKTtcbiAgfTtcblxuICBIaXN0b3J5LnByb3RvdHlwZS5nZXRIaXN0b3J5SW5kZXggPSBmdW5jdGlvbiBnZXRIaXN0b3J5SW5kZXgoKSB7XG4gICAgbWkoJ2dldEhpc3RvcnlJbmRleCcpO1xuICB9O1xuXG4gIEhpc3RvcnkucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28obW92ZW1lbnQpIHtcbiAgICBtaSgnZ28nKTtcbiAgfTtcblxuICByZXR1cm4gSGlzdG9yeTtcbn0oKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXVyZWxpYS1oaXN0b3J5L2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1oaXN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiaW1wb3J0IHsgbWV0YWRhdGEsIHByb3RvY29sIH0gZnJvbSAnYXVyZWxpYS1tZXRhZGF0YSc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVFcnJvciB9IGZyb20gJ2F1cmVsaWEtcGFsJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cblxuZnVuY3Rpb24gaXNJbmplY3RhYmxlKHBvdGVudGlhbFRhcmdldCkge1xyXG4gICAgcmV0dXJuICEhcG90ZW50aWFsVGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGF1dG9pbmplY3QocG90ZW50aWFsVGFyZ2V0KSB7XHJcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eSgnaW5qZWN0JykpIHtcclxuICAgICAgICAgICAgdGFyZ2V0LmluamVjdCA9IChtZXRhZGF0YS5nZXRPd24obWV0YWRhdGEucGFyYW1UeXBlcywgdGFyZ2V0KSB8fFxyXG4gICAgICAgICAgICAgICAgX2VtcHR5UGFyYW1ldGVycykuc2xpY2UoKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5pbmplY3QgJiYgdGFyZ2V0LmluamVjdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmluamVjdFt0YXJnZXQuaW5qZWN0Lmxlbmd0aCAtIDFdID09PSBPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuaW5qZWN0LnNwbGljZSgtMSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKGlzSW5qZWN0YWJsZShwb3RlbnRpYWxUYXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY28ocG90ZW50aWFsVGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWNvO1xyXG59XHJcbmZ1bmN0aW9uIGluamVjdCgpIHtcclxuICAgIHZhciByZXN0ID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHJlc3RbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBfa2V5LCBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBhdXRvaW5qZWN0KHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmluamVjdFtkZXNjcmlwdG9yXSA9IHJlc3RbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICB2YXIgZm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgICAgICAgICBmbi5pbmplY3QgPSByZXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0LmluamVjdCA9IHJlc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG52YXIgcmVzb2x2ZXIgPSBwcm90b2NvbC5jcmVhdGUoJ2F1cmVsaWE6cmVzb2x2ZXInLCBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICBpZiAoISh0eXBlb2YgdGFyZ2V0LmdldCA9PT0gJ2Z1bmN0aW9uJykpIHtcclxuICAgICAgICByZXR1cm4gJ1Jlc29sdmVycyBtdXN0IGltcGxlbWVudDogZ2V0KGNvbnRhaW5lcjogQ29udGFpbmVyLCBrZXk6IGFueSk6IGFueSc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufSk7XHJcbnZhciBTdHJhdGVneTtcclxuKGZ1bmN0aW9uIChTdHJhdGVneSkge1xyXG4gICAgU3RyYXRlZ3lbU3RyYXRlZ3lbXCJpbnN0YW5jZVwiXSA9IDBdID0gXCJpbnN0YW5jZVwiO1xyXG4gICAgU3RyYXRlZ3lbU3RyYXRlZ3lbXCJzaW5nbGV0b25cIl0gPSAxXSA9IFwic2luZ2xldG9uXCI7XHJcbiAgICBTdHJhdGVneVtTdHJhdGVneVtcInRyYW5zaWVudFwiXSA9IDJdID0gXCJ0cmFuc2llbnRcIjtcclxuICAgIFN0cmF0ZWd5W1N0cmF0ZWd5W1wiZnVuY3Rpb25cIl0gPSAzXSA9IFwiZnVuY3Rpb25cIjtcclxuICAgIFN0cmF0ZWd5W1N0cmF0ZWd5W1wiYXJyYXlcIl0gPSA0XSA9IFwiYXJyYXlcIjtcclxuICAgIFN0cmF0ZWd5W1N0cmF0ZWd5W1wiYWxpYXNcIl0gPSA1XSA9IFwiYWxpYXNcIjtcclxufSkoU3RyYXRlZ3kgfHwgKFN0cmF0ZWd5ID0ge30pKTtcclxuZnVuY3Rpb24gaXNTdHJhdGVneShhY3R1YWwsIGV4cGVjdGVkLCBzdGF0ZSkge1xyXG4gICAgcmV0dXJuIGFjdHVhbCA9PT0gZXhwZWN0ZWQ7XHJcbn1cclxudmFyIFN0cmF0ZWd5UmVzb2x2ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RyYXRlZ3lSZXNvbHZlcihzdHJhdGVneSwgc3RhdGUpIHtcclxuICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgfVxyXG4gICAgU3RyYXRlZ3lSZXNvbHZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwga2V5KSB7XHJcbiAgICAgICAgaWYgKGlzU3RyYXRlZ3kodGhpcy5zdHJhdGVneSwgU3RyYXRlZ3kuaW5zdGFuY2UsIHRoaXMuc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNTdHJhdGVneSh0aGlzLnN0cmF0ZWd5LCBTdHJhdGVneS5zaW5nbGV0b24sIHRoaXMuc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHZhciBzaW5nbGV0b24gPSBjb250YWluZXIuaW52b2tlKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gc2luZ2xldG9uO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHNpbmdsZXRvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyYXRlZ3kodGhpcy5zdHJhdGVneSwgU3RyYXRlZ3kudHJhbnNpZW50LCB0aGlzLnN0YXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmludm9rZSh0aGlzLnN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyYXRlZ3kodGhpcy5zdHJhdGVneSwgU3RyYXRlZ3kuZnVuY3Rpb24sIHRoaXMuc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlKGNvbnRhaW5lciwga2V5LCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzU3RyYXRlZ3kodGhpcy5zdHJhdGVneSwgU3RyYXRlZ3kuYXJyYXksIHRoaXMuc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlWzBdLmdldChjb250YWluZXIsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1N0cmF0ZWd5KHRoaXMuc3RyYXRlZ3ksIFN0cmF0ZWd5LmFsaWFzLCB0aGlzLnN0YXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmdldCh0aGlzLnN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmF0ZWd5OiAnICsgdGhpcy5zdHJhdGVneSk7XHJcbiAgICB9O1xyXG4gICAgU3RyYXRlZ3lSZXNvbHZlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIHJlc29sdmVyKCksXHJcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtOdW1iZXIsIE9iamVjdF0pXHJcbiAgICBdLCBTdHJhdGVneVJlc29sdmVyKTtcclxuICAgIHJldHVybiBTdHJhdGVneVJlc29sdmVyO1xyXG59KCkpO1xyXG52YXIgTGF6eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMYXp5KGtleSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcclxuICAgIH1cclxuICAgIExhenlfMSA9IExhenk7XHJcbiAgICBMYXp5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udGFpbmVyLmdldChfdGhpcy5fa2V5KTsgfTtcclxuICAgIH07XHJcbiAgICBMYXp5Lm9mID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGF6eV8xKGtleSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIExhenlfMTtcclxuICAgIExhenkgPSBMYXp5XzEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICByZXNvbHZlcigpLFxyXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIExhenkpO1xyXG4gICAgcmV0dXJuIExhenk7XHJcbn0oKSk7XHJcbnZhciBBbGwgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWxsKGtleSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcclxuICAgIH1cclxuICAgIEFsbF8xID0gQWxsO1xyXG4gICAgQWxsLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5nZXRBbGwodGhpcy5fa2V5KTtcclxuICAgIH07XHJcbiAgICBBbGwub2YgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBbGxfMShrZXkpO1xyXG4gICAgfTtcclxuICAgIHZhciBBbGxfMTtcclxuICAgIEFsbCA9IEFsbF8xID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgcmVzb2x2ZXIoKSxcclxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBBbGwpO1xyXG4gICAgcmV0dXJuIEFsbDtcclxufSgpKTtcclxudmFyIE9wdGlvbmFsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9wdGlvbmFsKGtleSwgY2hlY2tQYXJlbnQpIHtcclxuICAgICAgICBpZiAoY2hlY2tQYXJlbnQgPT09IHZvaWQgMCkgeyBjaGVja1BhcmVudCA9IHRydWU7IH1cclxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tQYXJlbnQgPSBjaGVja1BhcmVudDtcclxuICAgIH1cclxuICAgIE9wdGlvbmFsXzEgPSBPcHRpb25hbDtcclxuICAgIE9wdGlvbmFsLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lci5oYXNSZXNvbHZlcih0aGlzLl9rZXksIHRoaXMuX2NoZWNrUGFyZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmdldCh0aGlzLl9rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBPcHRpb25hbC5vZiA9IGZ1bmN0aW9uIChrZXksIGNoZWNrUGFyZW50KSB7XHJcbiAgICAgICAgaWYgKGNoZWNrUGFyZW50ID09PSB2b2lkIDApIHsgY2hlY2tQYXJlbnQgPSB0cnVlOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPcHRpb25hbF8xKGtleSwgY2hlY2tQYXJlbnQpO1xyXG4gICAgfTtcclxuICAgIHZhciBPcHRpb25hbF8xO1xyXG4gICAgT3B0aW9uYWwgPSBPcHRpb25hbF8xID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgcmVzb2x2ZXIoKSxcclxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdCwgQm9vbGVhbl0pXHJcbiAgICBdLCBPcHRpb25hbCk7XHJcbiAgICByZXR1cm4gT3B0aW9uYWw7XHJcbn0oKSk7XHJcbnZhciBQYXJlbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFyZW50KGtleSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcclxuICAgIH1cclxuICAgIFBhcmVudF8xID0gUGFyZW50O1xyXG4gICAgUGFyZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5wYXJlbnQgPyBjb250YWluZXIucGFyZW50LmdldCh0aGlzLl9rZXkpIDogbnVsbDtcclxuICAgIH07XHJcbiAgICBQYXJlbnQub2YgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJlbnRfMShrZXkpO1xyXG4gICAgfTtcclxuICAgIHZhciBQYXJlbnRfMTtcclxuICAgIFBhcmVudCA9IFBhcmVudF8xID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgcmVzb2x2ZXIoKSxcclxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pXHJcbiAgICBdLCBQYXJlbnQpO1xyXG4gICAgcmV0dXJuIFBhcmVudDtcclxufSgpKTtcclxudmFyIEZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjdG9yeShrZXkpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XHJcbiAgICB9XHJcbiAgICBGYWN0b3J5XzEgPSBGYWN0b3J5O1xyXG4gICAgRmFjdG9yeS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHZhciBmbiA9IHRoaXMuX2tleTtcclxuICAgICAgICB2YXIgcmVzb2x2ZXIgPSBjb250YWluZXIuZ2V0UmVzb2x2ZXIoZm4pO1xyXG4gICAgICAgIGlmIChyZXNvbHZlciAmJiByZXNvbHZlci5zdHJhdGVneSA9PT0gU3RyYXRlZ3kuZnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgZm4gPSByZXNvbHZlci5zdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3QgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3RbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLmludm9rZShmbiwgcmVzdCk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBGYWN0b3J5Lm9mID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmFjdG9yeV8xKGtleSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIEZhY3RvcnlfMTtcclxuICAgIEZhY3RvcnkgPSBGYWN0b3J5XzEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICByZXNvbHZlcigpLFxyXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIEZhY3RvcnkpO1xyXG4gICAgcmV0dXJuIEZhY3Rvcnk7XHJcbn0oKSk7XHJcbnZhciBOZXdJbnN0YW5jZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOZXdJbnN0YW5jZShrZXkpIHtcclxuICAgICAgICB2YXIgZHluYW1pY0RlcGVuZGVuY2llcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGR5bmFtaWNEZXBlbmRlbmNpZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIHRoaXMuYXNLZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5keW5hbWljRGVwZW5kZW5jaWVzID0gZHluYW1pY0RlcGVuZGVuY2llcztcclxuICAgIH1cclxuICAgIE5ld0luc3RhbmNlXzEgPSBOZXdJbnN0YW5jZTtcclxuICAgIE5ld0luc3RhbmNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIGR5bmFtaWNEZXBlbmRlbmNpZXMgPSB0aGlzLmR5bmFtaWNEZXBlbmRlbmNpZXMubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICA/IHRoaXMuZHluYW1pY0RlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcGVuZGVuY3kpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZXBlbmRlbmN5Wydwcm90b2NvbDphdXJlbGlhOnJlc29sdmVyJ11cclxuICAgICAgICAgICAgICAgICAgICA/IGRlcGVuZGVuY3kuZ2V0KGNvbnRhaW5lcilcclxuICAgICAgICAgICAgICAgICAgICA6IGNvbnRhaW5lci5nZXQoZGVwZW5kZW5jeSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBmbiA9IHRoaXMua2V5O1xyXG4gICAgICAgIHZhciByZXNvbHZlciA9IGNvbnRhaW5lci5nZXRSZXNvbHZlcihmbik7XHJcbiAgICAgICAgaWYgKHJlc29sdmVyICYmIHJlc29sdmVyLnN0cmF0ZWd5ID09PSAzKSB7XHJcbiAgICAgICAgICAgIGZuID0gcmVzb2x2ZXIuc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNvbnRhaW5lci5pbnZva2UoZm4sIGR5bmFtaWNEZXBlbmRlbmNpZXMpO1xyXG4gICAgICAgIGNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKHRoaXMuYXNLZXksIGluc3RhbmNlKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgTmV3SW5zdGFuY2UucHJvdG90eXBlLmFzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHRoaXMuYXNLZXkgPSBrZXk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgTmV3SW5zdGFuY2Uub2YgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIGR5bmFtaWNEZXBlbmRlbmNpZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBkeW5hbWljRGVwZW5kZW5jaWVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IChOZXdJbnN0YW5jZV8xLmJpbmQuYXBwbHkoTmV3SW5zdGFuY2VfMSwgW3ZvaWQgMCwga2V5XS5jb25jYXQoZHluYW1pY0RlcGVuZGVuY2llcykpKSgpO1xyXG4gICAgfTtcclxuICAgIHZhciBOZXdJbnN0YW5jZV8xO1xyXG4gICAgTmV3SW5zdGFuY2UgPSBOZXdJbnN0YW5jZV8xID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgcmVzb2x2ZXIoKSxcclxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdCwgT2JqZWN0XSlcclxuICAgIF0sIE5ld0luc3RhbmNlKTtcclxuICAgIHJldHVybiBOZXdJbnN0YW5jZTtcclxufSgpKTtcclxuZnVuY3Rpb24gZ2V0RGVjb3JhdG9yRGVwZW5kZW5jaWVzKHRhcmdldCkge1xyXG4gICAgYXV0b2luamVjdCh0YXJnZXQpO1xyXG4gICAgcmV0dXJuIHRhcmdldC5pbmplY3Q7XHJcbn1cclxuZnVuY3Rpb24gbGF6eShrZXlWYWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIF9rZXksIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGluamVjdCQkMSA9IGdldERlY29yYXRvckRlcGVuZGVuY2llcyh0YXJnZXQpO1xyXG4gICAgICAgIGluamVjdCQkMVtpbmRleF0gPSBMYXp5Lm9mKGtleVZhbHVlKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gYWxsKGtleVZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgX2tleSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgaW5qZWN0JCQxID0gZ2V0RGVjb3JhdG9yRGVwZW5kZW5jaWVzKHRhcmdldCk7XHJcbiAgICAgICAgaW5qZWN0JCQxW2luZGV4XSA9IEFsbC5vZihrZXlWYWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIG9wdGlvbmFsKGNoZWNrUGFyZW50T3JUYXJnZXQpIHtcclxuICAgIGlmIChjaGVja1BhcmVudE9yVGFyZ2V0ID09PSB2b2lkIDApIHsgY2hlY2tQYXJlbnRPclRhcmdldCA9IHRydWU7IH1cclxuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gKGNoZWNrUGFyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIF9rZXksIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmplY3QkJDEgPSBnZXREZWNvcmF0b3JEZXBlbmRlbmNpZXModGFyZ2V0KTtcclxuICAgICAgICAgICAgaW5qZWN0JCQxW2luZGV4XSA9IE9wdGlvbmFsLm9mKGluamVjdCQkMVtpbmRleF0sIGNoZWNrUGFyZW50KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGlmICh0eXBlb2YgY2hlY2tQYXJlbnRPclRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY28oY2hlY2tQYXJlbnRPclRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVjbyh0cnVlKTtcclxufVxyXG5mdW5jdGlvbiBwYXJlbnQodGFyZ2V0LCBfa2V5LCBpbmRleCkge1xyXG4gICAgdmFyIGluamVjdCQkMSA9IGdldERlY29yYXRvckRlcGVuZGVuY2llcyh0YXJnZXQpO1xyXG4gICAgaW5qZWN0JCQxW2luZGV4XSA9IFBhcmVudC5vZihpbmplY3QkJDFbaW5kZXhdKTtcclxufVxyXG5mdW5jdGlvbiBmYWN0b3J5KGtleVZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgX2tleSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgaW5qZWN0JCQxID0gZ2V0RGVjb3JhdG9yRGVwZW5kZW5jaWVzKHRhcmdldCk7XHJcbiAgICAgICAgaW5qZWN0JCQxW2luZGV4XSA9IEZhY3Rvcnkub2Yoa2V5VmFsdWUpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBuZXdJbnN0YW5jZShhc0tleU9yVGFyZ2V0KSB7XHJcbiAgICB2YXIgZHluYW1pY0RlcGVuZGVuY2llcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBkeW5hbWljRGVwZW5kZW5jaWVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGRlY28gPSBmdW5jdGlvbiAoYXNLZXkpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgX2tleSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGluamVjdCQkMSA9IGdldERlY29yYXRvckRlcGVuZGVuY2llcyh0YXJnZXQpO1xyXG4gICAgICAgICAgICBpbmplY3QkJDFbaW5kZXhdID0gTmV3SW5zdGFuY2Uub2YuYXBwbHkoTmV3SW5zdGFuY2UsIFtpbmplY3QkJDFbaW5kZXhdXS5jb25jYXQoZHluYW1pY0RlcGVuZGVuY2llcykpO1xyXG4gICAgICAgICAgICBpZiAoISFhc0tleSkge1xyXG4gICAgICAgICAgICAgICAgaW5qZWN0JCQxW2luZGV4XS5hcyhhc0tleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDEpIHtcclxuICAgICAgICByZXR1cm4gZGVjbyhhc0tleU9yVGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWNvKCk7XHJcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVLZXkoa2V5KSB7XHJcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZXkvdmFsdWUgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLiBBcmUgeW91IHRyeWluZyB0byBpbmplY3QvcmVnaXN0ZXIgc29tZXRoaW5nIHRoYXQgZG9lc25cXCd0IGV4aXN0IHdpdGggREk/Jyk7XHJcbiAgICB9XHJcbn1cclxudmFyIF9lbXB0eVBhcmFtZXRlcnMgPSBPYmplY3QuZnJlZXplKFtdKTtcclxubWV0YWRhdGEucmVnaXN0cmF0aW9uID0gJ2F1cmVsaWE6cmVnaXN0cmF0aW9uJztcclxubWV0YWRhdGEuaW52b2tlciA9ICdhdXJlbGlhOmludm9rZXInO1xyXG52YXIgcmVzb2x2ZXJEZWNvcmF0ZXMgPSByZXNvbHZlci5kZWNvcmF0ZXM7XHJcbnZhciBJbnZvY2F0aW9uSGFuZGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbnZvY2F0aW9uSGFuZGxlcihmbiwgaW52b2tlciwgZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xyXG4gICAgICAgIHRoaXMuaW52b2tlciA9IGludm9rZXI7XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XHJcbiAgICB9XHJcbiAgICBJbnZvY2F0aW9uSGFuZGxlci5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgZHluYW1pY0RlcGVuZGVuY2llcykge1xyXG4gICAgICAgIHJldHVybiBkeW5hbWljRGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyB0aGlzLmludm9rZXIuaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXMoY29udGFpbmVyLCB0aGlzLmZuLCB0aGlzLmRlcGVuZGVuY2llcywgZHluYW1pY0RlcGVuZGVuY2llcylcclxuICAgICAgICAgICAgOiB0aGlzLmludm9rZXIuaW52b2tlKGNvbnRhaW5lciwgdGhpcy5mbiwgdGhpcy5kZXBlbmRlbmNpZXMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJbnZvY2F0aW9uSGFuZGxlcjtcclxufSgpKTtcclxuZnVuY3Rpb24gaW52b2tlV2l0aER5bmFtaWNEZXBlbmRlbmNpZXMoY29udGFpbmVyLCBmbiwgc3RhdGljRGVwZW5kZW5jaWVzLCBkeW5hbWljRGVwZW5kZW5jaWVzKSB7XHJcbiAgICB2YXIgaSA9IHN0YXRpY0RlcGVuZGVuY2llcy5sZW5ndGg7XHJcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShpKTtcclxuICAgIHZhciBsb29rdXA7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgbG9va3VwID0gc3RhdGljRGVwZW5kZW5jaWVzW2ldO1xyXG4gICAgICAgIGlmIChsb29rdXAgPT09IG51bGwgfHwgbG9va3VwID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25zdHJ1Y3RvciBQYXJhbWV0ZXIgd2l0aCBpbmRleCAnICtcclxuICAgICAgICAgICAgICAgIGkgK1xyXG4gICAgICAgICAgICAgICAgJyBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEFyZSB5b3UgdHJ5aW5nIHRvIGluamVjdC9yZWdpc3RlciBzb21ldGhpbmcgdGhhdCBkb2VzblxcJ3QgZXhpc3Qgd2l0aCBEST8nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBjb250YWluZXIuZ2V0KGxvb2t1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGR5bmFtaWNEZXBlbmRlbmNpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChkeW5hbWljRGVwZW5kZW5jaWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChmbiwgYXJncyk7XHJcbn1cclxudmFyIGNsYXNzSW52b2tlciA9IHtcclxuICAgIGludm9rZTogZnVuY3Rpb24gKGNvbnRhaW5lciwgVHlwZSwgZGVwcykge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSBkZXBzLm1hcChmdW5jdGlvbiAoZGVwKSB7IHJldHVybiBjb250YWluZXIuZ2V0KGRlcCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChUeXBlLCBpbnN0YW5jZXMpO1xyXG4gICAgfSxcclxuICAgIGludm9rZVdpdGhEeW5hbWljRGVwZW5kZW5jaWVzOiBpbnZva2VXaXRoRHluYW1pY0RlcGVuZGVuY2llc1xyXG59O1xyXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZikge1xyXG4gICAgaWYgKCFmLmhhc093blByb3BlcnR5KCdpbmplY3QnKSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZi5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gZi5pbmplY3QoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmLmluamVjdDtcclxufVxyXG52YXIgQ29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbnRhaW5lcihjb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMuX29uSGFuZGxlckNyZWF0ZWQgPSBjb25maWd1cmF0aW9uLm9uSGFuZGxlckNyZWF0ZWQ7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlcnMgPVxyXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmhhbmRsZXJzIHx8IChjb25maWd1cmF0aW9uLmhhbmRsZXJzID0gbmV3IE1hcCgpKTtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcztcclxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLm1ha2VHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgQ29udGFpbmVyLmluc3RhbmNlID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLnNldEhhbmRsZXJDcmVhdGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAob25IYW5kbGVyQ3JlYXRlZCkge1xyXG4gICAgICAgIHRoaXMuX29uSGFuZGxlckNyZWF0ZWQgPSBvbkhhbmRsZXJDcmVhdGVkO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyYXRpb24ub25IYW5kbGVyQ3JlYXRlZCA9IG9uSGFuZGxlckNyZWF0ZWQ7XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKGtleSwgaW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKGtleSwgbmV3IFN0cmF0ZWd5UmVzb2x2ZXIoMCwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCA/IGtleSA6IGluc3RhbmNlKSk7XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3RlclNpbmdsZXRvbiA9IGZ1bmN0aW9uIChrZXksIGZuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJSZXNvbHZlcihrZXksIG5ldyBTdHJhdGVneVJlc29sdmVyKDEsIGZuID09PSB1bmRlZmluZWQgPyBrZXkgOiBmbikpO1xyXG4gICAgfTtcclxuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJUcmFuc2llbnQgPSBmdW5jdGlvbiAoa2V5LCBmbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyUmVzb2x2ZXIoa2V5LCBuZXcgU3RyYXRlZ3lSZXNvbHZlcigyLCBmbiA9PT0gdW5kZWZpbmVkID8ga2V5IDogZm4pKTtcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlZ2lzdGVySGFuZGxlciA9IGZ1bmN0aW9uIChrZXksIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKGtleSwgbmV3IFN0cmF0ZWd5UmVzb2x2ZXIoMywgaGFuZGxlcikpO1xyXG4gICAgfTtcclxuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJBbGlhcyA9IGZ1bmN0aW9uIChvcmlnaW5hbEtleSwgYWxpYXNLZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJlc29sdmVyKGFsaWFzS2V5LCBuZXcgU3RyYXRlZ3lSZXNvbHZlcig1LCBvcmlnaW5hbEtleSkpO1xyXG4gICAgfTtcclxuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJSZXNvbHZlciA9IGZ1bmN0aW9uIChrZXksIHJlc29sdmVyJCQxKSB7XHJcbiAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcclxuICAgICAgICB2YXIgYWxsUmVzb2x2ZXJzID0gdGhpcy5fcmVzb2x2ZXJzO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBhbGxSZXNvbHZlcnMuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGFsbFJlc29sdmVycy5zZXQoa2V5LCByZXNvbHZlciQkMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdHJhdGVneSA9PT0gNCkge1xyXG4gICAgICAgICAgICByZXN1bHQuc3RhdGUucHVzaChyZXNvbHZlciQkMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhbGxSZXNvbHZlcnMuc2V0KGtleSwgbmV3IFN0cmF0ZWd5UmVzb2x2ZXIoNCwgW3Jlc3VsdCwgcmVzb2x2ZXIkJDFdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlciQkMTtcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLmF1dG9SZWdpc3RlciA9IGZ1bmN0aW9uIChrZXksIGZuKSB7XHJcbiAgICAgICAgZm4gPSBmbiA9PT0gdW5kZWZpbmVkID8ga2V5IDogZm47XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB2YXIgcmVnaXN0cmF0aW9uID0gbWV0YWRhdGEuZ2V0KG1ldGFkYXRhLnJlZ2lzdHJhdGlvbiwgZm4pO1xyXG4gICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyUmVzb2x2ZXIoa2V5LCBuZXcgU3RyYXRlZ3lSZXNvbHZlcigxLCBmbikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RyYXRpb24ucmVnaXN0ZXJSZXNvbHZlcih0aGlzLCBrZXksIGZuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJSZXNvbHZlcihrZXksIG5ldyBTdHJhdGVneVJlc29sdmVyKDAsIGZuKSk7XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5hdXRvUmVnaXN0ZXJBbGwgPSBmdW5jdGlvbiAoZm5zKSB7XHJcbiAgICAgICAgdmFyIGkgPSBmbnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRvUmVnaXN0ZXIoZm5zW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmVycy5kZWxldGUoa2V5KTtcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLmhhc1Jlc29sdmVyID0gZnVuY3Rpb24gKGtleSwgY2hlY2tQYXJlbnQpIHtcclxuICAgICAgICBpZiAoY2hlY2tQYXJlbnQgPT09IHZvaWQgMCkgeyBjaGVja1BhcmVudCA9IGZhbHNlOyB9XHJcbiAgICAgICAgdmFsaWRhdGVLZXkoa2V5KTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3Jlc29sdmVycy5oYXMoa2V5KSB8fFxyXG4gICAgICAgICAgICAoY2hlY2tQYXJlbnQgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5oYXNSZXNvbHZlcihrZXksIGNoZWNrUGFyZW50KSkpO1xyXG4gICAgfTtcclxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0UmVzb2x2ZXIgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVycy5nZXQoa2V5KTtcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YWxpZGF0ZUtleShrZXkpO1xyXG4gICAgICAgIGlmIChrZXkgPT09IENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc29sdmVyRGVjb3JhdGVzKGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleS5nZXQodGhpcywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc29sdmVyJCQxID0gdGhpcy5fcmVzb2x2ZXJzLmdldChrZXkpO1xyXG4gICAgICAgIGlmIChyZXNvbHZlciQkMSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0b1JlZ2lzdGVyKGtleSkuZ2V0KHRoaXMsIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IG1ldGFkYXRhLmdldChtZXRhZGF0YS5yZWdpc3RyYXRpb24sIGtleSk7XHJcbiAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Ll9nZXQoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uLnJlZ2lzdGVyUmVzb2x2ZXIodGhpcywga2V5LCBrZXkpLmdldCh0aGlzLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzb2x2ZXIkJDEuZ2V0KHRoaXMsIGtleSk7XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciByZXNvbHZlciQkMSA9IHRoaXMuX3Jlc29sdmVycy5nZXQoa2V5KTtcclxuICAgICAgICBpZiAocmVzb2x2ZXIkJDEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dG9SZWdpc3RlcihrZXkpLmdldCh0aGlzLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5fZ2V0KGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXNvbHZlciQkMS5nZXQodGhpcywga2V5KTtcclxuICAgIH07XHJcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YWxpZGF0ZUtleShrZXkpO1xyXG4gICAgICAgIHZhciByZXNvbHZlciQkMSA9IHRoaXMuX3Jlc29sdmVycy5nZXQoa2V5KTtcclxuICAgICAgICBpZiAocmVzb2x2ZXIkJDEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfZW1wdHlQYXJhbWV0ZXJzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRBbGwoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc29sdmVyJCQxLnN0cmF0ZWd5ID09PSA0KSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHJlc29sdmVyJCQxLnN0YXRlO1xyXG4gICAgICAgICAgICB2YXIgaSA9IHN0YXRlLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkoaSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBzdGF0ZVtpXS5nZXQodGhpcywga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtyZXNvbHZlciQkMS5nZXQodGhpcywga2V5KV07XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5jcmVhdGVDaGlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hpbGQgPSBuZXcgQ29udGFpbmVyKHRoaXMuX2NvbmZpZ3VyYXRpb24pO1xyXG4gICAgICAgIGNoaWxkLnJvb3QgPSB0aGlzLnJvb3Q7XHJcbiAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9O1xyXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAoZm4sIGR5bmFtaWNEZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMuX2hhbmRsZXJzLmdldChmbik7XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLl9jcmVhdGVJbnZvY2F0aW9uSGFuZGxlcihmbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVycy5zZXQoZm4sIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmludm9rZSh0aGlzLCBkeW5hbWljRGVwZW5kZW5jaWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFnZ3JlZ2F0ZUVycm9yKFwiRXJyb3IgaW52b2tpbmcgXCIgKyBmbi5uYW1lICsgXCIuIENoZWNrIHRoZSBpbm5lciBlcnJvciBmb3IgZGV0YWlscy5cIiwgZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2NyZWF0ZUludm9jYXRpb25IYW5kbGVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIGRlcGVuZGVuY2llcztcclxuICAgICAgICBpZiAoZm4uaW5qZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID1cclxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmdldE93bihtZXRhZGF0YS5wYXJhbVR5cGVzLCBmbikgfHwgX2VtcHR5UGFyYW1ldGVycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgY3RvciA9IGZuO1xyXG4gICAgICAgICAgICB3aGlsZSAodHlwZW9mIGN0b3IgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoLmFwcGx5KGRlcGVuZGVuY2llcywgZ2V0RGVwZW5kZW5jaWVzKGN0b3IpKTtcclxuICAgICAgICAgICAgICAgIGN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3Rvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGludm9rZXIgPSBtZXRhZGF0YS5nZXRPd24obWV0YWRhdGEuaW52b2tlciwgZm4pIHx8IGNsYXNzSW52b2tlcjtcclxuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBJbnZvY2F0aW9uSGFuZGxlcihmbiwgaW52b2tlciwgZGVwZW5kZW5jaWVzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb25IYW5kbGVyQ3JlYXRlZCAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gdGhpcy5fb25IYW5kbGVyQ3JlYXRlZChoYW5kbGVyKVxyXG4gICAgICAgICAgICA6IGhhbmRsZXI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbnRhaW5lcjtcclxufSgpKTtcblxuZnVuY3Rpb24gaW52b2tlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEuaW52b2tlciwgdmFsdWUsIHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGludm9rZUFzRmFjdG9yeShwb3RlbnRpYWxUYXJnZXQpIHtcclxuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIG1ldGFkYXRhLmRlZmluZShtZXRhZGF0YS5pbnZva2VyLCBGYWN0b3J5SW52b2tlci5pbnN0YW5jZSwgdGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gcG90ZW50aWFsVGFyZ2V0ID8gZGVjbyhwb3RlbnRpYWxUYXJnZXQpIDogZGVjbztcclxufVxyXG52YXIgRmFjdG9yeUludm9rZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmFjdG9yeUludm9rZXIoKSB7XHJcbiAgICB9XHJcbiAgICBGYWN0b3J5SW52b2tlci5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgZm4sIGRlcGVuZGVuY2llcykge1xyXG4gICAgICAgIHZhciBpID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcclxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShpKTtcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBjb250YWluZXIuZ2V0KGRlcGVuZGVuY2llc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xyXG4gICAgfTtcclxuICAgIEZhY3RvcnlJbnZva2VyLnByb3RvdHlwZS5pbnZva2VXaXRoRHluYW1pY0RlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIChjb250YWluZXIsIGZuLCBzdGF0aWNEZXBlbmRlbmNpZXMsIGR5bmFtaWNEZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICB2YXIgaSA9IHN0YXRpY0RlcGVuZGVuY2llcy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoaSk7XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICBhcmdzW2ldID0gY29udGFpbmVyLmdldChzdGF0aWNEZXBlbmRlbmNpZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZHluYW1pY0RlcGVuZGVuY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChkeW5hbWljRGVwZW5kZW5jaWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZhY3RvcnlJbnZva2VyO1xyXG59KCkpO1xyXG5GYWN0b3J5SW52b2tlci5pbnN0YW5jZSA9IG5ldyBGYWN0b3J5SW52b2tlcigpO1xuXG5mdW5jdGlvbiByZWdpc3RyYXRpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlZ2lzdHJhdGlvbiwgdmFsdWUsIHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRyYW5zaWVudChrZXkpIHtcclxuICAgIHJldHVybiByZWdpc3RyYXRpb24obmV3IFRyYW5zaWVudFJlZ2lzdHJhdGlvbihrZXkpKTtcclxufVxyXG5mdW5jdGlvbiBzaW5nbGV0b24oa2V5T3JSZWdpc3RlckluQ2hpbGQsIHJlZ2lzdGVySW5DaGlsZCkge1xyXG4gICAgaWYgKHJlZ2lzdGVySW5DaGlsZCA9PT0gdm9pZCAwKSB7IHJlZ2lzdGVySW5DaGlsZCA9IGZhbHNlOyB9XHJcbiAgICByZXR1cm4gcmVnaXN0cmF0aW9uKG5ldyBTaW5nbGV0b25SZWdpc3RyYXRpb24oa2V5T3JSZWdpc3RlckluQ2hpbGQsIHJlZ2lzdGVySW5DaGlsZCkpO1xyXG59XHJcbnZhciBUcmFuc2llbnRSZWdpc3RyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVHJhbnNpZW50UmVnaXN0cmF0aW9uKGtleSkge1xyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcclxuICAgIH1cclxuICAgIFRyYW5zaWVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVnaXN0ZXJSZXNvbHZlciA9IGZ1bmN0aW9uIChjb250YWluZXIsIGtleSwgZm4pIHtcclxuICAgICAgICB2YXIgZXhpc3RpbmdSZXNvbHZlciA9IGNvbnRhaW5lci5nZXRSZXNvbHZlcih0aGlzLl9rZXkgfHwga2V5KTtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdSZXNvbHZlciA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gY29udGFpbmVyLnJlZ2lzdGVyVHJhbnNpZW50KCh0aGlzLl9rZXkgfHwga2V5KSwgZm4pXHJcbiAgICAgICAgICAgIDogZXhpc3RpbmdSZXNvbHZlcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJhbnNpZW50UmVnaXN0cmF0aW9uO1xyXG59KCkpO1xyXG52YXIgU2luZ2xldG9uUmVnaXN0cmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNpbmdsZXRvblJlZ2lzdHJhdGlvbihrZXlPclJlZ2lzdGVySW5DaGlsZCwgcmVnaXN0ZXJJbkNoaWxkKSB7XHJcbiAgICAgICAgaWYgKHJlZ2lzdGVySW5DaGlsZCA9PT0gdm9pZCAwKSB7IHJlZ2lzdGVySW5DaGlsZCA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlPclJlZ2lzdGVySW5DaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVySW5DaGlsZCA9IGtleU9yUmVnaXN0ZXJJbkNoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fa2V5ID0ga2V5T3JSZWdpc3RlckluQ2hpbGQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVySW5DaGlsZCA9IHJlZ2lzdGVySW5DaGlsZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTaW5nbGV0b25SZWdpc3RyYXRpb24ucHJvdG90eXBlLnJlZ2lzdGVyUmVzb2x2ZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBrZXksIGZuKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldENvbnRhaW5lciA9IHRoaXMuX3JlZ2lzdGVySW5DaGlsZCA/IGNvbnRhaW5lciA6IGNvbnRhaW5lci5yb290O1xyXG4gICAgICAgIHZhciBleGlzdGluZ1Jlc29sdmVyID0gdGFyZ2V0Q29udGFpbmVyLmdldFJlc29sdmVyKHRoaXMuX2tleSB8fCBrZXkpO1xyXG4gICAgICAgIHJldHVybiBleGlzdGluZ1Jlc29sdmVyID09PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyB0YXJnZXRDb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24odGhpcy5fa2V5IHx8IGtleSwgZm4pXHJcbiAgICAgICAgICAgIDogZXhpc3RpbmdSZXNvbHZlcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2luZ2xldG9uUmVnaXN0cmF0aW9uO1xyXG59KCkpO1xuXG5leHBvcnQgeyBfZW1wdHlQYXJhbWV0ZXJzLCBJbnZvY2F0aW9uSGFuZGxlciwgQ29udGFpbmVyLCBhdXRvaW5qZWN0LCBpbmplY3QsIGludm9rZXIsIGludm9rZUFzRmFjdG9yeSwgRmFjdG9yeUludm9rZXIsIHJlZ2lzdHJhdGlvbiwgdHJhbnNpZW50LCBzaW5nbGV0b24sIFRyYW5zaWVudFJlZ2lzdHJhdGlvbiwgU2luZ2xldG9uUmVnaXN0cmF0aW9uLCByZXNvbHZlciwgU3RyYXRlZ3ksIFN0cmF0ZWd5UmVzb2x2ZXIsIExhenksIEFsbCwgT3B0aW9uYWwsIFBhcmVudCwgRmFjdG9yeSwgTmV3SW5zdGFuY2UsIGdldERlY29yYXRvckRlcGVuZGVuY2llcywgbGF6eSwgYWxsLCBvcHRpb25hbCwgcGFyZW50LCBmYWN0b3J5LCBuZXdJbnN0YW5jZSB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24vZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJpbXBvcnQgeyBET00sIEZFQVRVUkUsIFBMQVRGT1JNIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0IHsgVGVtcGxhdGVSZWdpc3RyeUVudHJ5LCBMb2FkZXIgfSBmcm9tICdhdXJlbGlhLWxvYWRlcic7XG5pbXBvcnQgeyBtZXRhZGF0YSwgT3JpZ2luLCBwcm90b2NvbCB9IGZyb20gJ2F1cmVsaWEtbWV0YWRhdGEnO1xuaW1wb3J0IHsgcmVsYXRpdmVUb0ZpbGUgfSBmcm9tICdhdXJlbGlhLXBhdGgnO1xuaW1wb3J0ICogYXMgTG9nTWFuYWdlciBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuaW1wb3J0IHsgc3Vic2NyaWJlckNvbGxlY3Rpb24sIGJpbmRpbmdNb2RlLCBjcmVhdGVPdmVycmlkZUNvbnRleHQsIFZhbHVlQ29udmVydGVyUmVzb3VyY2UsIEJpbmRpbmdCZWhhdmlvclJlc291cmNlLCBPYnNlcnZlckxvY2F0b3IsIGNhbWVsQ2FzZSwgRXZlbnRNYW5hZ2VyIH0gZnJvbSAnYXVyZWxpYS1iaW5kaW5nJztcbmltcG9ydCB7IENvbnRhaW5lciwgcmVzb2x2ZXIsIGluamVjdCB9IGZyb20gJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nO1xuaW1wb3J0IHsgVGFza1F1ZXVlIH0gZnJvbSAnYXVyZWxpYS10YXNrLXF1ZXVlJztcblxudmFyIEVsZW1lbnRFdmVudHMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRWxlbWVudEV2ZW50cyhlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSB7fTtcclxuICAgIH1cclxuICAgIEVsZW1lbnRFdmVudHMucHJvdG90eXBlLl9lbnF1ZXVlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2hhbmRsZXIuZXZlbnROYW1lXSA9IHRoaXMuc3Vic2NyaXB0aW9uc1toYW5kbGVyLmV2ZW50TmFtZV0gfHwgW107XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2hhbmRsZXIuZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRFdmVudHMucHJvdG90eXBlLl9kZXF1ZXVlSGFuZGxlciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIGluZGV4O1xyXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zW2hhbmRsZXIuZXZlbnROYW1lXTtcclxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xyXG4gICAgICAgICAgICBpbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFuZGxlcjtcclxuICAgIH07XHJcbiAgICBFbGVtZW50RXZlbnRzLnByb3RvdHlwZS5wdWJsaXNoID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGV0YWlsLCBidWJibGVzLCBjYW5jZWxhYmxlKSB7XHJcbiAgICAgICAgaWYgKGRldGFpbCA9PT0gdm9pZCAwKSB7IGRldGFpbCA9IHt9OyB9XHJcbiAgICAgICAgaWYgKGJ1YmJsZXMgPT09IHZvaWQgMCkgeyBidWJibGVzID0gdHJ1ZTsgfVxyXG4gICAgICAgIGlmIChjYW5jZWxhYmxlID09PSB2b2lkIDApIHsgY2FuY2VsYWJsZSA9IHRydWU7IH1cclxuICAgICAgICB2YXIgZXZlbnQgPSBET00uY3JlYXRlQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7IGNhbmNlbGFibGU6IGNhbmNlbGFibGUsIGJ1YmJsZXM6IGJ1YmJsZXMsIGRldGFpbDogZGV0YWlsIH0pO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBFbGVtZW50RXZlbnRzLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlT3JPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGlmIChjYXB0dXJlT3JPcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhcHR1cmVPck9wdGlvbnMgPSBFbGVtZW50RXZlbnRzLmRlZmF1bHRMaXN0ZW5lck9wdGlvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGV2ZW50SGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXJJbXBsKHRoaXMsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZU9yT3B0aW9ucywgZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRIYW5kbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEVsZW1lbnRFdmVudHMucHJvdG90eXBlLnN1YnNjcmliZU9uY2UgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlT3JPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGlmIChjYXB0dXJlT3JPcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhcHR1cmVPck9wdGlvbnMgPSBFbGVtZW50RXZlbnRzLmRlZmF1bHRMaXN0ZW5lck9wdGlvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGV2ZW50SGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXJJbXBsKHRoaXMsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZU9yT3B0aW9ucywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBldmVudEhhbmRsZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEV2ZW50cy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcclxuICAgICAgICBpZiAoZXZlbnROYW1lICYmIHR5cGVvZiBldmVudE5hbWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zW2V2ZW50TmFtZV07XHJcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoc3Vic2NyaXB0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9ucy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VBbGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRWxlbWVudEV2ZW50cy5wcm90b3R5cGUuZGlzcG9zZUFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdWJzY3JpcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbGVtZW50RXZlbnRzLmRlZmF1bHRMaXN0ZW5lck9wdGlvbnMgPSB0cnVlO1xyXG4gICAgcmV0dXJuIEVsZW1lbnRFdmVudHM7XHJcbn0oKSk7XHJcbnZhciBFdmVudEhhbmRsZXJJbXBsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV2ZW50SGFuZGxlckltcGwob3duZXIsIGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZU9yT3B0aW9ucywgb25jZSkge1xyXG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcclxuICAgICAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgICAgIHRoaXMuY2FwdHVyZSA9IHR5cGVvZiBjYXB0dXJlT3JPcHRpb25zID09PSAnYm9vbGVhbicgPyBjYXB0dXJlT3JPcHRpb25zIDogY2FwdHVyZU9yT3B0aW9ucy5jYXB0dXJlO1xyXG4gICAgICAgIHRoaXMuYnViYmxlcyA9ICF0aGlzLmNhcHR1cmU7XHJcbiAgICAgICAgdGhpcy5jYXB0dXJlT3JPcHRpb25zID0gY2FwdHVyZU9yT3B0aW9ucztcclxuICAgICAgICB0aGlzLm9uY2UgPSBvbmNlO1xyXG4gICAgICAgIG93bmVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMsIGNhcHR1cmVPck9wdGlvbnMpO1xyXG4gICAgICAgIG93bmVyLl9lbnF1ZXVlSGFuZGxlcih0aGlzKTtcclxuICAgIH1cclxuICAgIEV2ZW50SGFuZGxlckltcGwucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgZm4gPSB0aGlzLmhhbmRsZXI7XHJcbiAgICAgICAgZm4oZSk7XHJcbiAgICAgICAgaWYgKHRoaXMub25jZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRXZlbnRIYW5kbGVySW1wbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm93bmVyLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcywgdGhpcy5jYXB0dXJlT3JPcHRpb25zKTtcclxuICAgICAgICB0aGlzLm93bmVyLl9kZXF1ZXVlSGFuZGxlcih0aGlzKTtcclxuICAgICAgICB0aGlzLm93bmVyID0gdGhpcy5oYW5kbGVyID0gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZlbnRIYW5kbGVySW1wbDtcclxufSgpKTtcblxudmFyIFJlc291cmNlTG9hZENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVzb3VyY2VMb2FkQ29udGV4dCgpIHtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IHt9O1xyXG4gICAgfVxyXG4gICAgUmVzb3VyY2VMb2FkQ29udGV4dC5wcm90b3R5cGUuYWRkRGVwZW5kZW5jeSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llc1t1cmxdID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBSZXNvdXJjZUxvYWRDb250ZXh0LnByb3RvdHlwZS5oYXNEZXBlbmRlbmN5ID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHJldHVybiB1cmwgaW4gdGhpcy5kZXBlbmRlbmNpZXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc291cmNlTG9hZENvbnRleHQ7XHJcbn0oKSk7XHJcbnZhciBWaWV3Q29tcGlsZUluc3RydWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24odGFyZ2V0U2hhZG93RE9NLCBjb21waWxlU3Vycm9nYXRlKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldFNoYWRvd0RPTSA9PT0gdm9pZCAwKSB7IHRhcmdldFNoYWRvd0RPTSA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKGNvbXBpbGVTdXJyb2dhdGUgPT09IHZvaWQgMCkgeyBjb21waWxlU3Vycm9nYXRlID0gZmFsc2U7IH1cclxuICAgICAgICB0aGlzLnRhcmdldFNoYWRvd0RPTSA9IHRhcmdldFNoYWRvd0RPTTtcclxuICAgICAgICB0aGlzLmNvbXBpbGVTdXJyb2dhdGUgPSBjb21waWxlU3Vycm9nYXRlO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRlZE1vZHVsZUlkID0gbnVsbDtcclxuICAgIH1cclxuICAgIFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24ubm9ybWFsID0gbmV3IFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24oKTtcclxuICAgIHJldHVybiBWaWV3Q29tcGlsZUluc3RydWN0aW9uO1xyXG59KCkpO1xyXG52YXIgQmVoYXZpb3JJbnN0cnVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCZWhhdmlvckluc3RydWN0aW9uKCkge1xyXG4gICAgfVxyXG4gICAgQmVoYXZpb3JJbnN0cnVjdGlvbi5lbmhhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IG5ldyBCZWhhdmlvckluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uZW5oYW5jZSA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIEJlaGF2aW9ySW5zdHJ1Y3Rpb24udW5pdFRlc3QgPSBmdW5jdGlvbiAodHlwZSwgYXR0cmlidXRlcykge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IG5ldyBCZWhhdmlvckluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24udHlwZSA9IHR5cGU7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIEJlaGF2aW9ySW5zdHJ1Y3Rpb24uZWxlbWVudCA9IGZ1bmN0aW9uIChub2RlLCB0eXBlKSB7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IEJlaGF2aW9ySW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi50eXBlID0gdHlwZTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYW5jaG9ySXNDb250YWluZXIgPSAhKG5vZGUuaGFzQXR0cmlidXRlKCdjb250YWluZXJsZXNzJykgfHwgdHlwZS5jb250YWluZXJsZXNzKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5pbml0aWF0ZWRCeUJlaGF2aW9yID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUgPSBmdW5jdGlvbiAoYXR0ck5hbWUsIHR5cGUpIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgQmVoYXZpb3JJbnN0cnVjdGlvbigpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmF0dHJOYW1lID0gYXR0ck5hbWU7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24udHlwZSA9IHR5cGUgfHwgbnVsbDtcclxuICAgICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIEJlaGF2aW9ySW5zdHJ1Y3Rpb24uZHluYW1pYyA9IGZ1bmN0aW9uIChob3N0LCB2aWV3TW9kZWwsIHZpZXdGYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IEJlaGF2aW9ySW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5ob3N0ID0gaG9zdDtcclxuICAgICAgICBpbnN0cnVjdGlvbi52aWV3TW9kZWwgPSB2aWV3TW9kZWw7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkgPSB2aWV3RmFjdG9yeTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5pbmhlcml0QmluZGluZ0NvbnRleHQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcclxuICAgIH07XHJcbiAgICBCZWhhdmlvckluc3RydWN0aW9uLm5vcm1hbCA9IG5ldyBCZWhhdmlvckluc3RydWN0aW9uKCk7XHJcbiAgICByZXR1cm4gQmVoYXZpb3JJbnN0cnVjdGlvbjtcclxufSgpKTtcclxudmFyIGJpUHJvdG8gPSBCZWhhdmlvckluc3RydWN0aW9uLnByb3RvdHlwZTtcclxuYmlQcm90by5pbml0aWF0ZWRCeUJlaGF2aW9yID0gZmFsc2U7XHJcbmJpUHJvdG8uZW5oYW5jZSA9IGZhbHNlO1xyXG5iaVByb3RvLnBhcnRSZXBsYWNlbWVudHMgPSBudWxsO1xyXG5iaVByb3RvLnZpZXdGYWN0b3J5ID0gbnVsbDtcclxuYmlQcm90by5vcmlnaW5hbEF0dHJOYW1lID0gbnVsbDtcclxuYmlQcm90by5za2lwQ29udGVudFByb2Nlc3NpbmcgPSBmYWxzZTtcclxuYmlQcm90by5jb250ZW50RmFjdG9yeSA9IG51bGw7XHJcbmJpUHJvdG8udmlld01vZGVsID0gbnVsbDtcclxuYmlQcm90by5hbmNob3JJc0NvbnRhaW5lciA9IGZhbHNlO1xyXG5iaVByb3RvLmhvc3QgPSBudWxsO1xyXG5iaVByb3RvLmF0dHJpYnV0ZXMgPSBudWxsO1xyXG5iaVByb3RvLnR5cGUgPSBudWxsO1xyXG5iaVByb3RvLmF0dHJOYW1lID0gbnVsbDtcclxuYmlQcm90by5pbmhlcml0QmluZGluZ0NvbnRleHQgPSBmYWxzZTtcclxudmFyIFRhcmdldEluc3RydWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRhcmdldEluc3RydWN0aW9uKCkge1xyXG4gICAgfVxyXG4gICAgVGFyZ2V0SW5zdHJ1Y3Rpb24uc2hhZG93U2xvdCA9IGZ1bmN0aW9uIChwYXJlbnRJbmplY3RvcklkKSB7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFRhcmdldEluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24ucGFyZW50SW5qZWN0b3JJZCA9IHBhcmVudEluamVjdG9ySWQ7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uc2hhZG93U2xvdCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFRhcmdldEluc3RydWN0aW9uLmNvbnRlbnRFeHByZXNzaW9uID0gZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgVGFyZ2V0SW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5jb250ZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFRhcmdldEluc3RydWN0aW9uLmxldEVsZW1lbnQgPSBmdW5jdGlvbiAoZXhwcmVzc2lvbnMpIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgVGFyZ2V0SW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmxldEVsZW1lbnQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcclxuICAgIH07XHJcbiAgICBUYXJnZXRJbnN0cnVjdGlvbi5saWZ0aW5nID0gZnVuY3Rpb24gKHBhcmVudEluamVjdG9ySWQsIGxpZnRpbmdJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IG5ldyBUYXJnZXRJbnN0cnVjdGlvbigpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLnBhcmVudEluamVjdG9ySWQgPSBwYXJlbnRJbmplY3RvcklkO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmV4cHJlc3Npb25zID0gVGFyZ2V0SW5zdHJ1Y3Rpb24ubm9FeHByZXNzaW9ucztcclxuICAgICAgICBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucyA9IFtsaWZ0aW5nSW5zdHJ1Y3Rpb25dO1xyXG4gICAgICAgIGluc3RydWN0aW9uLnZpZXdGYWN0b3J5ID0gbGlmdGluZ0luc3RydWN0aW9uLnZpZXdGYWN0b3J5O1xyXG4gICAgICAgIGluc3RydWN0aW9uLnByb3ZpZGVycyA9IFtsaWZ0aW5nSW5zdHJ1Y3Rpb24udHlwZS50YXJnZXRdO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmxpZnRpbmcgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcclxuICAgIH07XHJcbiAgICBUYXJnZXRJbnN0cnVjdGlvbi5ub3JtYWwgPSBmdW5jdGlvbiAoaW5qZWN0b3JJZCwgcGFyZW50SW5qZWN0b3JJZCwgcHJvdmlkZXJzLCBiZWhhdmlvckluc3RydWN0aW9ucywgZXhwcmVzc2lvbnMsIGVsZW1lbnRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IG5ldyBUYXJnZXRJbnN0cnVjdGlvbigpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmluamVjdG9ySWQgPSBpbmplY3RvcklkO1xyXG4gICAgICAgIGluc3RydWN0aW9uLnBhcmVudEluamVjdG9ySWQgPSBwYXJlbnRJbmplY3RvcklkO1xyXG4gICAgICAgIGluc3RydWN0aW9uLnByb3ZpZGVycyA9IHByb3ZpZGVycztcclxuICAgICAgICBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucyA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYW5jaG9ySXNDb250YWluZXIgPSBlbGVtZW50SW5zdHJ1Y3Rpb24gPyBlbGVtZW50SW5zdHJ1Y3Rpb24uYW5jaG9ySXNDb250YWluZXIgOiB0cnVlO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmVsZW1lbnRJbnN0cnVjdGlvbiA9IGVsZW1lbnRJbnN0cnVjdGlvbjtcclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgVGFyZ2V0SW5zdHJ1Y3Rpb24uc3Vycm9nYXRlID0gZnVuY3Rpb24gKHByb3ZpZGVycywgYmVoYXZpb3JJbnN0cnVjdGlvbnMsIGV4cHJlc3Npb25zLCB2YWx1ZXMpIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgVGFyZ2V0SW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmJlaGF2aW9ySW5zdHJ1Y3Rpb25zID0gYmVoYXZpb3JJbnN0cnVjdGlvbnM7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24ucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xyXG4gICAgICAgIGluc3RydWN0aW9uLnZhbHVlcyA9IHZhbHVlcztcclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgVGFyZ2V0SW5zdHJ1Y3Rpb24ubm9FeHByZXNzaW9ucyA9IE9iamVjdC5mcmVlemUoW10pO1xyXG4gICAgcmV0dXJuIFRhcmdldEluc3RydWN0aW9uO1xyXG59KCkpO1xyXG52YXIgdGlQcm90byA9IFRhcmdldEluc3RydWN0aW9uLnByb3RvdHlwZTtcclxudGlQcm90by5pbmplY3RvcklkID0gbnVsbDtcclxudGlQcm90by5wYXJlbnRJbmplY3RvcklkID0gbnVsbDtcclxudGlQcm90by5zaGFkb3dTbG90ID0gZmFsc2U7XHJcbnRpUHJvdG8uc2xvdE5hbWUgPSBudWxsO1xyXG50aVByb3RvLnNsb3RGYWxsYmFja0ZhY3RvcnkgPSBudWxsO1xyXG50aVByb3RvLmNvbnRlbnRFeHByZXNzaW9uID0gbnVsbDtcclxudGlQcm90by5sZXRFbGVtZW50ID0gZmFsc2U7XHJcbnRpUHJvdG8uZXhwcmVzc2lvbnMgPSBudWxsO1xyXG50aVByb3RvLmV4cHJlc3Npb25zID0gbnVsbDtcclxudGlQcm90by5wcm92aWRlcnMgPSBudWxsO1xyXG50aVByb3RvLnZpZXdGYWN0b3J5ID0gbnVsbDtcclxudGlQcm90by5hbmNob3JJc0NvbnRhaW5lciA9IGZhbHNlO1xyXG50aVByb3RvLmVsZW1lbnRJbnN0cnVjdGlvbiA9IG51bGw7XHJcbnRpUHJvdG8ubGlmdGluZyA9IGZhbHNlO1xyXG50aVByb3RvLnZhbHVlcyA9IG51bGw7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XG5cbnZhciBjYXBpdGFsTWF0Y2hlciA9IC8oW0EtWl0pL2c7XHJcbmZ1bmN0aW9uIGFkZEh5cGhlbkFuZExvd2VyKGNoYXIpIHtcclxuICAgIHJldHVybiAnLScgKyBjaGFyLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuZnVuY3Rpb24gX2h5cGhlbmF0ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gKG5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpKS5yZXBsYWNlKGNhcGl0YWxNYXRjaGVyLCBhZGRIeXBoZW5BbmRMb3dlcik7XHJcbn1cclxuZnVuY3Rpb24gX2lzQWxsV2hpdGVzcGFjZShub2RlKSB7XHJcbiAgICByZXR1cm4gIShub2RlLmF1SW50ZXJwb2xhdGlvblRhcmdldCB8fCAoL1teXFx0XFxuXFxyIF0vLnRlc3Qobm9kZS50ZXh0Q29udGVudCkpKTtcclxufVxuXG52YXIgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlcih0YXNrUXVldWUsIG9iaiwgcHJvcGVydHlOYW1lLCBzZWxmU3Vic2NyaWJlciwgaW5pdGlhbFZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XHJcbiAgICAgICAgdGhpcy5vYmogPSBvYmo7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XHJcbiAgICAgICAgdGhpcy5ub3RxdWV1ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucHVibGlzaGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2VsZlN1YnNjcmliZXIgPSBzZWxmU3Vic2NyaWJlcjtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMub2xkVmFsdWUgPSBpbml0aWFsVmFsdWU7XHJcbiAgICB9XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRWYWx1ZTtcclxuICAgIH07XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgaWYgKCFPYmplY3QuaXMobmV3VmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9sZFZhbHVlID0gb2xkVmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnB1Ymxpc2hpbmcgJiYgdGhpcy5ub3RxdWV1ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhc2tRdWV1ZS5mbHVzaGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RxdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcclxuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICB0aGlzLm5vdHF1ZXVlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKE9iamVjdC5pcyhuZXdWYWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZlN1YnNjcmliZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxmU3Vic2NyaWJlcihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgIHRoaXMub2xkVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgIH07XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLmNhbGxTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9O1xyXG4gICAgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGFibGUpIHtcclxuICAgICAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xyXG4gICAgfTtcclxuICAgIEJlaGF2aW9yUHJvcGVydHlPYnNlcnZlci5wcm90b3R5cGUuYWRkU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYWJsZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH07XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGNvbnRleHQsIGNhbGxhYmxlKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKTtcclxuICAgIH07XHJcbiAgICBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmliZXIgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGFibGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9O1xyXG4gICAgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgc3Vic2NyaWJlckNvbGxlY3Rpb24oKVxyXG4gICAgXSwgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyKTtcclxuICAgIHJldHVybiBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXI7XHJcbn0oKSk7XG5cbmZ1bmN0aW9uIGdldE9ic2VydmVyKGluc3RhbmNlLCBuYW1lKSB7XHJcbiAgICB2YXIgbG9va3VwID0gaW5zdGFuY2UuX19vYnNlcnZlcnNfXztcclxuICAgIGlmIChsb29rdXAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhciBjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3RhbmNlKS5jb25zdHJ1Y3RvcjtcclxuICAgICAgICB2YXIgYmVoYXZpb3IgPSBtZXRhZGF0YS5nZXQobWV0YWRhdGEucmVzb3VyY2UsIGN0b3IpO1xyXG4gICAgICAgIGlmICghYmVoYXZpb3IuaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBiZWhhdmlvci5pbml0aWFsaXplKENvbnRhaW5lci5pbnN0YW5jZSB8fCBuZXcgQ29udGFpbmVyKCksIGluc3RhbmNlLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9va3VwID0gYmVoYXZpb3Iub2JzZXJ2ZXJMb2NhdG9yLmdldE9yQ3JlYXRlT2JzZXJ2ZXJzTG9va3VwKGluc3RhbmNlKTtcclxuICAgICAgICBiZWhhdmlvci5fZW5zdXJlUHJvcGVydGllc0RlZmluZWQoaW5zdGFuY2UsIGxvb2t1cCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG9va3VwW25hbWVdO1xyXG59XHJcbnZhciBCaW5kYWJsZVByb3BlcnR5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJpbmRhYmxlUHJvcGVydHkobmFtZU9yQ29uZmlnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lT3JDb25maWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWVPckNvbmZpZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbmFtZU9yQ29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZSB8fCBfaHlwaGVuYXRlKHRoaXMubmFtZSk7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRCaW5kaW5nTW9kZSA9IHRoaXMuZGVmYXVsdEJpbmRpbmdNb2RlO1xyXG4gICAgICAgIGlmIChkZWZhdWx0QmluZGluZ01vZGUgPT09IG51bGwgfHwgZGVmYXVsdEJpbmRpbmdNb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0QmluZGluZ01vZGUgPSBiaW5kaW5nTW9kZS5vbmVXYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZhdWx0QmluZGluZ01vZGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdEJpbmRpbmdNb2RlID0gYmluZGluZ01vZGVbZGVmYXVsdEJpbmRpbmdNb2RlXSB8fCBiaW5kaW5nTW9kZS5vbmVXYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlciA9IHRoaXMuY2hhbmdlSGFuZGxlciB8fCBudWxsO1xyXG4gICAgICAgIHRoaXMub3duZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRvciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBCaW5kYWJsZVByb3BlcnR5LnByb3RvdHlwZS5yZWdpc3RlcldpdGggPSBmdW5jdGlvbiAodGFyZ2V0LCBiZWhhdmlvciwgZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGJlaGF2aW9yLnByb3BlcnRpZXMucHVzaCh0aGlzKTtcclxuICAgICAgICBiZWhhdmlvci5hdHRyaWJ1dGVzW3RoaXMuYXR0cmlidXRlXSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5vd25lciA9IGJlaGF2aW9yO1xyXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWd1cmVEZXNjcmlwdG9yKGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEJpbmRhYmxlUHJvcGVydHkucHJvdG90eXBlLl9jb25maWd1cmVEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoJ2luaXRpYWxpemVyJyBpbiBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVzY3JpcHRvci5pbml0aWFsaXplcjtcclxuICAgICAgICAgICAgZGVsZXRlIGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXI7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yLndyaXRhYmxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVzY3JpcHRvci52YWx1ZTtcclxuICAgICAgICAgICAgZGVsZXRlIGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yLndyaXRhYmxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldE9ic2VydmVyKHRoaXMsIG5hbWUpLmdldFZhbHVlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZXNjcmlwdG9yLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBnZXRPYnNlcnZlcih0aGlzLCBuYW1lKS5zZXRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZXNjcmlwdG9yLmdldC5nZXRPYnNlcnZlciA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldE9ic2VydmVyKG9iaiwgbmFtZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcclxuICAgIH07XHJcbiAgICBCaW5kYWJsZVByb3BlcnR5LnByb3RvdHlwZS5kZWZpbmVPbiA9IGZ1bmN0aW9uICh0YXJnZXQsIGJlaGF2aW9yKSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgdmFyIGhhbmRsZXJOYW1lO1xyXG4gICAgICAgIGlmICh0aGlzLmNoYW5nZUhhbmRsZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaGFuZGxlck5hbWUgPSBuYW1lICsgJ0NoYW5nZWQnO1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlck5hbWUgaW4gdGFyZ2V0LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyID0gaGFuZGxlck5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzY3JpcHRvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LnByb3RvdHlwZSwgbmFtZSwgdGhpcy5fY29uZmlndXJlRGVzY3JpcHRvcih7fSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCaW5kYWJsZVByb3BlcnR5LnByb3RvdHlwZS5jcmVhdGVPYnNlcnZlciA9IGZ1bmN0aW9uICh2aWV3TW9kZWwpIHtcclxuICAgICAgICB2YXIgc2VsZlN1YnNjcmliZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB2YXIgY2hhbmdlSGFuZGxlck5hbWUgPSB0aGlzLmNoYW5nZUhhbmRsZXI7XHJcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5oYXNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2VIYW5kbGVyTmFtZSBpbiB2aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgaWYgKCdwcm9wZXJ0eUNoYW5nZWQnIGluIHZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGVsW2NoYW5nZUhhbmRsZXJOYW1lXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbC5wcm9wZXJ0eUNoYW5nZWQobmFtZSwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgcmV0dXJuIHZpZXdNb2RlbFtjaGFuZ2VIYW5kbGVyTmFtZV0obmV3VmFsdWUsIG9sZFZhbHVlKTsgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgncHJvcGVydHlDaGFuZ2VkJyBpbiB2aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7IHJldHVybiB2aWV3TW9kZWwucHJvcGVydHlDaGFuZ2VkKG5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNoYW5nZUhhbmRsZXJOYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYW5nZSBoYW5kbGVyIFwiLmNvbmNhdChjaGFuZ2VIYW5kbGVyTmFtZSwgXCIgd2FzIHNwZWNpZmllZCBidXQgbm90IGRlY2xhcmVkIG9uIHRoZSBjbGFzcy5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZS5jYWxsKHZpZXdNb2RlbCkgOiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyKHRoaXMub3duZXIudGFza1F1ZXVlLCB2aWV3TW9kZWwsIHRoaXMubmFtZSwgc2VsZlN1YnNjcmliZXIsIGluaXRpYWxWYWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgQmluZGFibGVQcm9wZXJ0eS5wcm90b3R5cGUuX2luaXRpYWxpemUgPSBmdW5jdGlvbiAodmlld01vZGVsLCBvYnNlcnZlckxvb2t1cCwgYXR0cmlidXRlcywgYmVoYXZpb3JIYW5kbGVzQmluZCwgYm91bmRQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgdmFyIHNlbGZTdWJzY3JpYmVyO1xyXG4gICAgICAgIHZhciBvYnNlcnZlcjtcclxuICAgICAgICB2YXIgYXR0cmlidXRlO1xyXG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5pc0R5bmFtaWMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUR5bmFtaWNQcm9wZXJ0eSh2aWV3TW9kZWwsIG9ic2VydmVyTG9va3VwLCBiZWhhdmlvckhhbmRsZXNCaW5kLCBrZXksIGF0dHJpYnV0ZXNba2V5XSwgYm91bmRQcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghdGhpcy5oYXNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0gb2JzZXJ2ZXJMb29rdXBbdGhpcy5uYW1lXTtcclxuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNlbGZTdWJzY3JpYmVyID0gb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXI7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW3RoaXMuYXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvckhhbmRsZXNCaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGVsW3RoaXMubmFtZV0gPSBhdHRyaWJ1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRQcm9wZXJ0aWVzLnB1c2goeyBvYnNlcnZlcjogb2JzZXJ2ZXIsIGJpbmRpbmc6IGF0dHJpYnV0ZS5jcmVhdGVCaW5kaW5nKHZpZXdNb2RlbCkgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyID0gc2VsZlN1YnNjcmliZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JzZXJ2ZXIucHVibGlzaGluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpbmRhYmxlUHJvcGVydHkucHJvdG90eXBlLl9jcmVhdGVEeW5hbWljUHJvcGVydHkgPSBmdW5jdGlvbiAodmlld01vZGVsLCBvYnNlcnZlckxvb2t1cCwgYmVoYXZpb3JIYW5kbGVzQmluZCwgbmFtZSwgYXR0cmlidXRlLCBib3VuZFByb3BlcnRpZXMpIHtcclxuICAgICAgICB2YXIgY2hhbmdlSGFuZGxlck5hbWUgPSBuYW1lICsgJ0NoYW5nZWQnO1xyXG4gICAgICAgIHZhciBzZWxmU3Vic2NyaWJlciA9IG51bGw7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyO1xyXG4gICAgICAgIHZhciBpbmZvO1xyXG4gICAgICAgIGlmIChjaGFuZ2VIYW5kbGVyTmFtZSBpbiB2aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgaWYgKCdwcm9wZXJ0eUNoYW5nZWQnIGluIHZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGVsW2NoYW5nZUhhbmRsZXJOYW1lXShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbC5wcm9wZXJ0eUNoYW5nZWQobmFtZSwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmU3Vic2NyaWJlciA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgcmV0dXJuIHZpZXdNb2RlbFtjaGFuZ2VIYW5kbGVyTmFtZV0obmV3VmFsdWUsIG9sZFZhbHVlKTsgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgncHJvcGVydHlDaGFuZ2VkJyBpbiB2aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgc2VsZlN1YnNjcmliZXIgPSBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7IHJldHVybiB2aWV3TW9kZWwucHJvcGVydHlDaGFuZ2VkKG5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ic2VydmVyID0gb2JzZXJ2ZXJMb29rdXBbbmFtZV0gPSBuZXcgQmVoYXZpb3JQcm9wZXJ0eU9ic2VydmVyKHRoaXMub3duZXIudGFza1F1ZXVlLCB2aWV3TW9kZWwsIG5hbWUsIHNlbGZTdWJzY3JpYmVyKTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmlld01vZGVsLCBuYW1lLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBvYnNlcnZlci5nZXRWYWx1ZS5iaW5kKG9ic2VydmVyKSxcclxuICAgICAgICAgICAgc2V0OiBvYnNlcnZlci5zZXRWYWx1ZS5iaW5kKG9ic2VydmVyKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChiZWhhdmlvckhhbmRsZXNCaW5kKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLnNlbGZTdWJzY3JpYmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHZpZXdNb2RlbFtuYW1lXSA9IGF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY2FsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgaW5mbyA9IHsgb2JzZXJ2ZXI6IG9ic2VydmVyLCBiaW5kaW5nOiBhdHRyaWJ1dGUuY3JlYXRlQmluZGluZyh2aWV3TW9kZWwpIH07XHJcbiAgICAgICAgICAgIGJvdW5kUHJvcGVydGllcy5wdXNoKGluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZlci5wdWJsaXNoaW5nID0gdHJ1ZTtcclxuICAgICAgICBvYnNlcnZlci5zZWxmU3Vic2NyaWJlciA9IHNlbGZTdWJzY3JpYmVyO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCaW5kYWJsZVByb3BlcnR5O1xyXG59KCkpO1xuXG52YXIgVmlld0xvY2F0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld0xvY2F0b3IoKSB7XHJcbiAgICB9XHJcbiAgICBWaWV3TG9jYXRvci5wcm90b3R5cGUuZ2V0Vmlld1N0cmF0ZWd5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgJ2dldFZpZXdTdHJhdGVneScgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbl8xID0gT3JpZ2luLmdldCh2YWx1ZS5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuZ2V0Vmlld1N0cmF0ZWd5KCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBSZWxhdGl2ZVZpZXdTdHJhdGVneSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmlld1N0cmF0ZWd5LmFzc2VydCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5fMS5tb2R1bGVJZCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUubWFrZVJlbGF0aXZlVG8ob3JpZ2luXzEubW9kdWxlSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBuZXcgUmVsYXRpdmVWaWV3U3RyYXRlZ3kodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmlld1N0cmF0ZWd5LnZhbGlkYXRlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5jb25zdHJ1Y3RvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCckdmlldycgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGMgPSB2YWx1ZS4kdmlldztcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIGMgPSB0eXBlb2YgYyA9PT0gJ2Z1bmN0aW9uJyA/IGMuY2FsbCh2YWx1ZSkgOiBjO1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmlldyA9IG5ldyBOb1ZpZXdTdHJhdGVneSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmlldyA9IGMgaW5zdGFuY2VvZiBTdGF0aWNWaWV3U3RyYXRlZ3kgPyBjIDogbmV3IFN0YXRpY1ZpZXdTdHJhdGVneShjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXRhZGF0YS5kZWZpbmUoVmlld0xvY2F0b3Iudmlld1N0cmF0ZWd5TWV0YWRhdGFLZXksIHZpZXcsIHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmlnaW4gPSBPcmlnaW4uZ2V0KHZhbHVlKTtcclxuICAgICAgICB2YXIgc3RyYXRlZ3kgPSBtZXRhZGF0YS5nZXQoVmlld0xvY2F0b3Iudmlld1N0cmF0ZWd5TWV0YWRhdGFLZXksIHZhbHVlKTtcclxuICAgICAgICBpZiAoIXN0cmF0ZWd5KSB7XHJcbiAgICAgICAgICAgIGlmICghb3JpZ2luLm1vZHVsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgZGVmYXVsdCB2aWV3IHN0cmF0ZWd5IGZvciBvYmplY3QuXFxuJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJhdGVneSA9IHRoaXMuY3JlYXRlRmFsbGJhY2tWaWV3U3RyYXRlZ3kob3JpZ2luKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3JpZ2luLm1vZHVsZUlkKSB7XHJcbiAgICAgICAgICAgIHN0cmF0ZWd5Lm1vZHVsZUlkID0gb3JpZ2luLm1vZHVsZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyYXRlZ3k7XHJcbiAgICB9O1xyXG4gICAgVmlld0xvY2F0b3IucHJvdG90eXBlLmNyZWF0ZUZhbGxiYWNrVmlld1N0cmF0ZWd5ID0gZnVuY3Rpb24gKG9yaWdpbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5KHRoaXMsIG9yaWdpbik7XHJcbiAgICB9O1xyXG4gICAgVmlld0xvY2F0b3IucHJvdG90eXBlLmNvbnZlcnRPcmlnaW5Ub1ZpZXdVcmwgPSBmdW5jdGlvbiAob3JpZ2luKSB7XHJcbiAgICAgICAgdmFyIG1vZHVsZUlkID0gb3JpZ2luLm1vZHVsZUlkO1xyXG4gICAgICAgIHZhciBpZCA9IChtb2R1bGVJZC5lbmRzV2l0aCgnLmpzJykgfHwgbW9kdWxlSWQuZW5kc1dpdGgoJy50cycpKSA/IG1vZHVsZUlkLnN1YnN0cmluZygwLCBtb2R1bGVJZC5sZW5ndGggLSAzKSA6IG1vZHVsZUlkO1xyXG4gICAgICAgIHJldHVybiBpZCArICcuaHRtbCc7XHJcbiAgICB9O1xyXG4gICAgVmlld0xvY2F0b3Iudmlld1N0cmF0ZWd5TWV0YWRhdGFLZXkgPSAnYXVyZWxpYTp2aWV3LXN0cmF0ZWd5JztcclxuICAgIHJldHVybiBWaWV3TG9jYXRvcjtcclxufSgpKTtcblxuZnVuY3Rpb24gbWkobmFtZSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmluZGluZ0xhbmd1YWdlIG11c3QgaW1wbGVtZW50IFwiLmNvbmNhdChuYW1lLCBcIigpLlwiKSk7XHJcbn1cclxudmFyIEJpbmRpbmdMYW5ndWFnZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCaW5kaW5nTGFuZ3VhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICBCaW5kaW5nTGFuZ3VhZ2UucHJvdG90eXBlLmluc3BlY3RBdHRyaWJ1dGUgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBlbGVtZW50TmFtZSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSkge1xyXG4gICAgICAgIG1pKCdpbnNwZWN0QXR0cmlidXRlJyk7XHJcbiAgICB9O1xyXG4gICAgQmluZGluZ0xhbmd1YWdlLnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpIHtcclxuICAgICAgICBtaSgnY3JlYXRlQXR0cmlidXRlSW5zdHJ1Y3Rpb24nKTtcclxuICAgIH07XHJcbiAgICBCaW5kaW5nTGFuZ3VhZ2UucHJvdG90eXBlLmNyZWF0ZUxldEV4cHJlc3Npb25zID0gZnVuY3Rpb24gKHJlc291cmNlcywgZWxlbWVudCkge1xyXG4gICAgICAgIG1pKCdjcmVhdGVMZXRFeHByZXNzaW9ucycpO1xyXG4gICAgfTtcclxuICAgIEJpbmRpbmdMYW5ndWFnZS5wcm90b3R5cGUuaW5zcGVjdFRleHRDb250ZW50ID0gZnVuY3Rpb24gKHJlc291cmNlcywgdmFsdWUpIHtcclxuICAgICAgICBtaSgnaW5zcGVjdFRleHRDb250ZW50Jyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJpbmRpbmdMYW5ndWFnZTtcclxufSgpKTtcblxudmFyIG5vTm9kZXMgPSBPYmplY3QuZnJlZXplKFtdKTtcclxudmFyIFNsb3RDdXN0b21BdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2xvdEN1c3RvbUF0dHJpYnV0ZShlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXVTbG90QXR0cmlidXRlID0gdGhpcztcclxuICAgIH1cclxuICAgIFNsb3RDdXN0b21BdHRyaWJ1dGUuaW5qZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBbRE9NLkVsZW1lbnRdO1xyXG4gICAgfTtcclxuICAgIFNsb3RDdXN0b21BdHRyaWJ1dGUucHJvdG90eXBlLnZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgfTtcclxuICAgIHJldHVybiBTbG90Q3VzdG9tQXR0cmlidXRlO1xyXG59KCkpO1xyXG52YXIgUGFzc1Rocm91Z2hTbG90ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBhc3NUaHJvdWdoU2xvdChhbmNob3IsIG5hbWUsIGRlc3RpbmF0aW9uTmFtZSwgZmFsbGJhY2tGYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5hbmNob3IgPSBhbmNob3I7XHJcbiAgICAgICAgdGhpcy5hbmNob3Iudmlld1Nsb3QgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbk5hbWUgPSBkZXN0aW5hdGlvbk5hbWU7XHJcbiAgICAgICAgdGhpcy5mYWxsYmFja0ZhY3RvcnkgPSBmYWxsYmFja0ZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvblNsb3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvamVjdGlvbnMgPSAwO1xyXG4gICAgICAgIHRoaXMuY29udGVudFZpZXcgPSBudWxsO1xyXG4gICAgICAgIHZhciBhdHRyID0gbmV3IFNsb3RDdXN0b21BdHRyaWJ1dGUodGhpcy5hbmNob3IpO1xyXG4gICAgICAgIGF0dHIudmFsdWUgPSB0aGlzLmRlc3RpbmF0aW9uTmFtZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLCBcIm5lZWRzRmFsbGJhY2tSZW5kZXJpbmdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWxsYmFja0ZhY3RvcnkgJiYgdGhpcy5wcm9qZWN0aW9ucyA9PT0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLnJlbmRlckZhbGxiYWNrQ29udGVudCA9IGZ1bmN0aW9uICh2aWV3LCBub2RlcywgcHJvamVjdGlvblNvdXJjZSwgaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50VmlldyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3ID0gdGhpcy5mYWxsYmFja0ZhY3RvcnkuY3JlYXRlKHRoaXMub3duZXJWaWV3LmNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcuYmluZCh0aGlzLm93bmVyVmlldy5iaW5kaW5nQ29udGV4dCwgdGhpcy5vd25lclZpZXcub3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICAgICAgdmFyIHNsb3RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgc2xvdHNbdGhpcy5kZXN0aW5hdGlvblNsb3QubmFtZV0gPSB0aGlzLmRlc3RpbmF0aW9uU2xvdDtcclxuICAgICAgICAgICAgU2hhZG93RE9NLmRpc3RyaWJ1dGVWaWV3KHRoaXMuY29udGVudFZpZXcsIHNsb3RzLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCwgdGhpcy5kZXN0aW5hdGlvblNsb3QubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhc3NUaHJvdWdoU2xvdC5wcm90b3R5cGUucGFzc1Rocm91Z2hUbyA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvblNsb3QpIHtcclxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uU2xvdCA9IGRlc3RpbmF0aW9uU2xvdDtcclxuICAgIH07XHJcbiAgICBQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLmFkZE5vZGUgPSBmdW5jdGlvbiAodmlldywgbm9kZSwgcHJvamVjdGlvblNvdXJjZSwgaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50VmlldyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3LnJlbW92ZU5vZGVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcuZGV0YWNoZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlldy51bmJpbmQoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50VmlldyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLnZpZXdTbG90IGluc3RhbmNlb2YgUGFzc1Rocm91Z2hTbG90KSB7XHJcbiAgICAgICAgICAgIG5vZGUudmlld1Nsb3QucGFzc1Rocm91Z2hUbyh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb2plY3Rpb25zKys7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvblNsb3QuYWRkTm9kZSh2aWV3LCBub2RlLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCk7XHJcbiAgICB9O1xyXG4gICAgUGFzc1Rocm91Z2hTbG90LnByb3RvdHlwZS5yZW1vdmVWaWV3ID0gZnVuY3Rpb24gKHZpZXcsIHByb2plY3Rpb25Tb3VyY2UpIHtcclxuICAgICAgICB0aGlzLnByb2plY3Rpb25zLS07XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvblNsb3QucmVtb3ZlVmlldyh2aWV3LCBwcm9qZWN0aW9uU291cmNlKTtcclxuICAgICAgICBpZiAodGhpcy5uZWVkc0ZhbGxiYWNrUmVuZGVyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmFsbGJhY2tDb250ZW50KG51bGwsIG5vTm9kZXMsIHByb2plY3Rpb25Tb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uIChwcm9qZWN0aW9uU291cmNlKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9ucyA9IDA7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvblNsb3QucmVtb3ZlQWxsKHByb2plY3Rpb25Tb3VyY2UpO1xyXG4gICAgICAgIGlmICh0aGlzLm5lZWRzRmFsbGJhY2tSZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJGYWxsYmFja0NvbnRlbnQobnVsbCwgbm9Ob2RlcywgcHJvamVjdGlvblNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhc3NUaHJvdWdoU2xvdC5wcm90b3R5cGUucHJvamVjdEZyb20gPSBmdW5jdGlvbiAodmlldywgcHJvamVjdGlvblNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25TbG90LnByb2plY3RGcm9tKHZpZXcsIHByb2plY3Rpb25Tb3VyY2UpO1xyXG4gICAgfTtcclxuICAgIFBhc3NUaHJvdWdoU2xvdC5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uIChvd25lclZpZXcpIHtcclxuICAgICAgICB0aGlzLm93bmVyVmlldyA9IG93bmVyVmlldztcclxuICAgIH07XHJcbiAgICBQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcuYmluZCh2aWV3LmJpbmRpbmdDb250ZXh0LCB2aWV3Lm92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBhc3NUaHJvdWdoU2xvdC5wcm90b3R5cGUuYXR0YWNoZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlldy5hdHRhY2hlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQYXNzVGhyb3VnaFNsb3QucHJvdG90eXBlLmRldGFjaGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcuZGV0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGFzc1Rocm91Z2hTbG90LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlldy51bmJpbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhc3NUaHJvdWdoU2xvdDtcclxufSgpKTtcclxudmFyIFNoYWRvd1Nsb3QgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2hhZG93U2xvdChhbmNob3IsIG5hbWUsIGZhbGxiYWNrRmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yO1xyXG4gICAgICAgIHRoaXMuYW5jaG9yLmlzQ29udGVudFByb2plY3Rpb25Tb3VyY2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYW5jaG9yLnZpZXdTbG90ID0gdGhpcztcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZmFsbGJhY2tGYWN0b3J5ID0gZmFsbGJhY2tGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuY29udGVudFZpZXcgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJvamVjdGlvbnMgPSAwO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnByb2plY3RGcm9tQW5jaG9ycyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvblNsb3RzID0gbnVsbDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTaGFkb3dTbG90LnByb3RvdHlwZSwgXCJuZWVkc0ZhbGxiYWNrUmVuZGVyaW5nXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2tGYWN0b3J5ICYmIHRoaXMucHJvamVjdGlvbnMgPT09IDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgU2hhZG93U2xvdC5wcm90b3R5cGUuYWRkTm9kZSA9IGZ1bmN0aW9uICh2aWV3LCBub2RlLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCwgZGVzdGluYXRpb24pIHtcclxuICAgICAgICB2YXIgJG5vZGUgPSBub2RlO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcucmVtb3ZlTm9kZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlldy5kZXRhY2hlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3LnVuYmluZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCRub2RlLnZpZXdTbG90IGluc3RhbmNlb2YgUGFzc1Rocm91Z2hTbG90KSB7XHJcbiAgICAgICAgICAgICRub2RlLnZpZXdTbG90LnBhc3NUaHJvdWdoVG8odGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25TbG90cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBTaGFkb3dET00uZGlzdHJpYnV0ZU5vZGVzKHZpZXcsIFskbm9kZV0sIHRoaXMuZGVzdGluYXRpb25TbG90cywgdGhpcywgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJG5vZGUuYXVPd25lclZpZXcgPSB2aWV3O1xyXG4gICAgICAgICAgICAkbm9kZS5hdVByb2plY3Rpb25Tb3VyY2UgPSBwcm9qZWN0aW9uU291cmNlO1xyXG4gICAgICAgICAgICAkbm9kZS5hdUFzc2lnbmVkU2xvdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBhbmNob3IgPSB0aGlzLl9maW5kQW5jaG9yKHZpZXcsICRub2RlLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IGFuY2hvci5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICBwYXJlbnRfMS5pbnNlcnRCZWZvcmUoJG5vZGUsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgkbm9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbnMrKztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2hhZG93U2xvdC5wcm90b3R5cGUucmVtb3ZlVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBwcm9qZWN0aW9uU291cmNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVzdGluYXRpb25TbG90cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBTaGFkb3dET00udW5kaXN0cmlidXRlVmlldyh2aWV3LCB0aGlzLmRlc3RpbmF0aW9uU2xvdHMsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnRWaWV3ICYmIHRoaXMuY29udGVudFZpZXcuaGFzU2xvdHMpIHtcclxuICAgICAgICAgICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZVZpZXcodmlldywgdGhpcy5jb250ZW50Vmlldy5zbG90cywgcHJvamVjdGlvblNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZm91bmQgPSB0aGlzLmNoaWxkcmVuLmZpbmQoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguYXVTbG90UHJvamVjdEZyb20gPT09IHByb2plY3Rpb25Tb3VyY2U7IH0pO1xyXG4gICAgICAgICAgICBpZiAoZm91bmQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGZvdW5kLmF1UHJvamVjdGlvbkNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgdmFyIG93bkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuYXVPd25lclZpZXcgPT09IHZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmZyYWdtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25zLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBvd25DaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25DaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5lZWRzRmFsbGJhY2tSZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckZhbGxiYWNrQ29udGVudCh2aWV3LCBub05vZGVzLCBwcm9qZWN0aW9uU291cmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTaGFkb3dTbG90LnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbiAocHJvamVjdGlvblNvdXJjZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uU2xvdHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZUFsbCh0aGlzLmRlc3RpbmF0aW9uU2xvdHMsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnRWaWV3ICYmIHRoaXMuY29udGVudFZpZXcuaGFzU2xvdHMpIHtcclxuICAgICAgICAgICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZUFsbCh0aGlzLmNvbnRlbnRWaWV3LnNsb3RzLCBwcm9qZWN0aW9uU291cmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRoaXMuY2hpbGRyZW4uZmluZChmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5hdVNsb3RQcm9qZWN0RnJvbSA9PT0gcHJvamVjdGlvblNvdXJjZTsgfSk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZm91bmQuYXVQcm9qZWN0aW9uQ2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICB2YXIgb3duQ2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmF1T3duZXJWaWV3LmZyYWdtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb25zLS07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IG93bkNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZHggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25DaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3VuZC5hdVByb2plY3Rpb25DaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmVlZHNGYWxsYmFja1JlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRmFsbGJhY2tDb250ZW50KG51bGwsIG5vTm9kZXMsIHByb2plY3Rpb25Tb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNoYWRvd1Nsb3QucHJvdG90eXBlLl9maW5kQW5jaG9yID0gZnVuY3Rpb24gKHZpZXcsIG5vZGUsIHByb2plY3Rpb25Tb3VyY2UsIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKHByb2plY3Rpb25Tb3VyY2UpIHtcclxuICAgICAgICAgICAgdmFyIGZvdW5kID0gdGhpcy5jaGlsZHJlbi5maW5kKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmF1U2xvdFByb2plY3RGcm9tID09PSBwcm9qZWN0aW9uU291cmNlOyB9KTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGZvdW5kLmF1UHJvamVjdGlvbkNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3SW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFZpZXcgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hdU93bmVyVmlldyAhPT0gbGFzdFZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFZpZXcgPSBjdXJyZW50LmF1T3duZXJWaWV3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdJbmRleCA+PSBpbmRleCAmJiBsYXN0VmlldyAhPT0gdmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShpLCAwLCBub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvdW5kLmF1UHJvamVjdGlvbkNoaWxkcmVuLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5jaG9yO1xyXG4gICAgfTtcclxuICAgIFNoYWRvd1Nsb3QucHJvdG90eXBlLnByb2plY3RUbyA9IGZ1bmN0aW9uIChzbG90cykge1xyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25TbG90cyA9IHNsb3RzO1xyXG4gICAgfTtcclxuICAgIFNoYWRvd1Nsb3QucHJvdG90eXBlLnByb2plY3RGcm9tID0gZnVuY3Rpb24gKHZpZXcsIHByb2plY3Rpb25Tb3VyY2UpIHtcclxuICAgICAgICB2YXIgYW5jaG9yID0gRE9NLmNyZWF0ZUNvbW1lbnQoJ2FuY2hvcicpO1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmFuY2hvci5wYXJlbnROb2RlO1xyXG4gICAgICAgIGFuY2hvci5hdVNsb3RQcm9qZWN0RnJvbSA9IHByb2plY3Rpb25Tb3VyY2U7XHJcbiAgICAgICAgYW5jaG9yLmF1T3duZXJWaWV3ID0gdmlldztcclxuICAgICAgICBhbmNob3IuYXVQcm9qZWN0aW9uQ2hpbGRyZW4gPSBbXTtcclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGFuY2hvciwgdGhpcy5hbmNob3IpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhbmNob3IpO1xyXG4gICAgICAgIGlmICh0aGlzLnByb2plY3RGcm9tQW5jaG9ycyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3RGcm9tQW5jaG9ycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb2plY3RGcm9tQW5jaG9ycy5wdXNoKGFuY2hvcik7XHJcbiAgICB9O1xyXG4gICAgU2hhZG93U2xvdC5wcm90b3R5cGUucmVuZGVyRmFsbGJhY2tDb250ZW50ID0gZnVuY3Rpb24gKHZpZXcsIG5vZGVzLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcgPSB0aGlzLmZhbGxiYWNrRmFjdG9yeS5jcmVhdGUodGhpcy5vd25lclZpZXcuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50Vmlldy5iaW5kKHRoaXMub3duZXJWaWV3LmJpbmRpbmdDb250ZXh0LCB0aGlzLm93bmVyVmlldy5vdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3Lmluc2VydE5vZGVzQmVmb3JlKHRoaXMuYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFZpZXcuaGFzU2xvdHMpIHtcclxuICAgICAgICAgICAgdmFyIHNsb3RzID0gdGhpcy5jb250ZW50Vmlldy5zbG90cztcclxuICAgICAgICAgICAgdmFyIHByb2plY3RGcm9tQW5jaG9ycyA9IHRoaXMucHJvamVjdEZyb21BbmNob3JzO1xyXG4gICAgICAgICAgICBpZiAocHJvamVjdEZyb21BbmNob3JzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gc2xvdHNbc2xvdE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHByb2plY3RGcm9tQW5jaG9ycy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBwcm9qZWN0RnJvbUFuY2hvcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QucHJvamVjdEZyb20oYW5jaG9yLmF1T3duZXJWaWV3LCBhbmNob3IuYXVTbG90UHJvamVjdEZyb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmZhbGxiYWNrU2xvdHMgPSBzbG90cztcclxuICAgICAgICAgICAgU2hhZG93RE9NLmRpc3RyaWJ1dGVOb2Rlcyh2aWV3LCBub2Rlcywgc2xvdHMsIHByb2plY3Rpb25Tb3VyY2UsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2hhZG93U2xvdC5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uIChvd25lclZpZXcpIHtcclxuICAgICAgICB0aGlzLm93bmVyVmlldyA9IG93bmVyVmlldztcclxuICAgIH07XHJcbiAgICBTaGFkb3dTbG90LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50Vmlldykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3LmJpbmQodmlldy5iaW5kaW5nQ29udGV4dCwgdmlldy5vdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTaGFkb3dTbG90LnByb3RvdHlwZS5hdHRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50Vmlldykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3LmF0dGFjaGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNoYWRvd1Nsb3QucHJvdG90eXBlLmRldGFjaGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcuZGV0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2hhZG93U2xvdC5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXcudW5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTaGFkb3dTbG90O1xyXG59KCkpO1xyXG52YXIgU2hhZG93RE9NID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNoYWRvd0RPTSgpIHtcclxuICAgIH1cclxuICAgIFNoYWRvd0RPTS5nZXRTbG90TmFtZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgaWYgKG5vZGUuYXVTbG90QXR0cmlidXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNoYWRvd0RPTS5kZWZhdWx0U2xvdEtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuYXVTbG90QXR0cmlidXRlLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBzbG90cywgcHJvamVjdGlvblNvdXJjZSwgaW5kZXgsIGRlc3RpbmF0aW9uT3ZlcnJpZGUpIHtcclxuICAgICAgICB2YXIgbm9kZXM7XHJcbiAgICAgICAgaWYgKHZpZXcgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgbm9kZXMgPSBub05vZGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSB2aWV3LmZyYWdtZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBpaSA9IGNoaWxkTm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBub2RlcyA9IG5ldyBBcnJheShpaSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZXNbaV0gPSBjaGlsZE5vZGVzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlTm9kZXModmlldywgbm9kZXMsIHNsb3RzLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCwgZGVzdGluYXRpb25PdmVycmlkZSk7XHJcbiAgICB9O1xyXG4gICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZVZpZXcgPSBmdW5jdGlvbiAodmlldywgc2xvdHMsIHByb2plY3Rpb25Tb3VyY2UpIHtcclxuICAgICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICBzbG90c1tzbG90TmFtZV0ucmVtb3ZlVmlldyh2aWV3LCBwcm9qZWN0aW9uU291cmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZUFsbCA9IGZ1bmN0aW9uIChzbG90cywgcHJvamVjdGlvblNvdXJjZSkge1xyXG4gICAgICAgIGZvciAodmFyIHNsb3ROYW1lIGluIHNsb3RzKSB7XHJcbiAgICAgICAgICAgIHNsb3RzW3Nsb3ROYW1lXS5yZW1vdmVBbGwocHJvamVjdGlvblNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlTm9kZXMgPSBmdW5jdGlvbiAodmlldywgbm9kZXMsIHNsb3RzLCBwcm9qZWN0aW9uU291cmNlLCBpbmRleCwgZGVzdGluYXRpb25PdmVycmlkZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgIHZhciBub2RlVHlwZSA9IGN1cnJlbnROb2RlLm5vZGVUeXBlO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudE5vZGUuaXNDb250ZW50UHJvamVjdGlvblNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUudmlld1Nsb3QucHJvamVjdFRvKHNsb3RzKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNsb3ROYW1lIGluIHNsb3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdLnByb2plY3RGcm9tKHZpZXcsIGN1cnJlbnROb2RlLnZpZXdTbG90KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGlpLS07XHJcbiAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDMgfHwgY3VycmVudE5vZGUudmlld1Nsb3QgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaFNsb3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PT0gMyAmJiBfaXNBbGxXaGl0ZXNwYWNlKGN1cnJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IHNsb3RzW2Rlc3RpbmF0aW9uT3ZlcnJpZGUgfHwgU2hhZG93RE9NLmdldFNsb3ROYW1lKGN1cnJlbnROb2RlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kLmFkZE5vZGUodmlldywgY3VycmVudE5vZGUsIHByb2plY3Rpb25Tb3VyY2UsIGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgaWktLTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICB2YXIgc2xvdCA9IHNsb3RzW3Nsb3ROYW1lXTtcclxuICAgICAgICAgICAgaWYgKHNsb3QubmVlZHNGYWxsYmFja1JlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgICAgc2xvdC5yZW5kZXJGYWxsYmFja0NvbnRlbnQodmlldywgbm9kZXMsIHByb2plY3Rpb25Tb3VyY2UsIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTaGFkb3dET00uZGVmYXVsdFNsb3RLZXkgPSAnX19hdS1kZWZhdWx0LXNsb3Qta2V5X18nO1xyXG4gICAgcmV0dXJuIFNoYWRvd0RPTTtcclxufSgpKTtcblxudmFyIENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Ob3RpZmllciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvblRyYW5zYWN0aW9uTm90aWZpZXIob3duZXIpIHtcclxuICAgICAgICB0aGlzLm93bmVyID0gb3duZXI7XHJcbiAgICAgICAgdGhpcy5vd25lci5fY29tcG9zaXRpb25Db3VudCsrO1xyXG4gICAgfVxyXG4gICAgQ29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMub3duZXIuX2NvbXBvc2l0aW9uQ291bnQtLTtcclxuICAgICAgICB0aGlzLm93bmVyLl90cnlDb21wbGV0ZVRyYW5zYWN0aW9uKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Ob3RpZmllcjtcclxufSgpKTtcclxudmFyIENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW4ob3duZXIpIHtcclxuICAgICAgICB0aGlzLm93bmVyID0gb3duZXI7XHJcbiAgICAgICAgdGhpcy5vd25lci5fb3duZXJzaGlwVG9rZW4gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMudGhlbmFibGUgPSB0aGlzLl9jcmVhdGVUaGVuYWJsZSgpO1xyXG4gICAgfVxyXG4gICAgQ29tcG9zaXRpb25UcmFuc2FjdGlvbk93bmVyc2hpcFRva2VuLnByb3RvdHlwZS53YWl0Rm9yQ29tcG9zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm93bmVyLl90cnlDb21wbGV0ZVRyYW5zYWN0aW9uKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbmFibGU7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9zaXRpb25UcmFuc2FjdGlvbk93bmVyc2hpcFRva2VuLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmVDYWxsYmFjaygpO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbi5wcm90b3R5cGUuX3Jlc29sdmVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH07XHJcbiAgICBDb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW4ucHJvdG90eXBlLl9jcmVhdGVUaGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZUNhbGxiYWNrID0gcmVzb2x2ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG9zaXRpb25UcmFuc2FjdGlvbk93bmVyc2hpcFRva2VuO1xyXG59KCkpO1xyXG52YXIgQ29tcG9zaXRpb25UcmFuc2FjdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvblRyYW5zYWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX293bmVyc2hpcFRva2VuID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jb21wb3NpdGlvbkNvdW50ID0gMDtcclxuICAgIH1cclxuICAgIENvbXBvc2l0aW9uVHJhbnNhY3Rpb24ucHJvdG90eXBlLnRyeUNhcHR1cmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX293bmVyc2hpcFRva2VuID09PSBudWxsXHJcbiAgICAgICAgICAgID8gbmV3IENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbih0aGlzKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9zaXRpb25UcmFuc2FjdGlvbi5wcm90b3R5cGUuZW5saXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2l0aW9uVHJhbnNhY3Rpb24ucHJvdG90eXBlLl90cnlDb21wbGV0ZVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb21wb3NpdGlvbkNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9zaXRpb25Db3VudCA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vd25lcnNoaXBUb2tlbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5fb3duZXJzaGlwVG9rZW47XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vd25lcnNoaXBUb2tlbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0b2tlbi5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBvc2l0aW9uVHJhbnNhY3Rpb247XHJcbn0oKSk7XG5cbnZhciBWaWV3ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXcoY29udGFpbmVyLCB2aWV3RmFjdG9yeSwgZnJhZ21lbnQsIGNvbnRyb2xsZXJzLCBiaW5kaW5ncywgY2hpbGRyZW4sIHNsb3RzKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gdmlld0ZhY3RvcnkucmVzb3VyY2VzO1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDtcclxuICAgICAgICB0aGlzLmZpcnN0Q2hpbGQgPSBmcmFnbWVudC5maXJzdENoaWxkO1xyXG4gICAgICAgIHRoaXMubGFzdENoaWxkID0gZnJhZ21lbnQubGFzdENoaWxkO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSBjb250cm9sbGVycztcclxuICAgICAgICB0aGlzLmJpbmRpbmdzID0gYmluZGluZ3M7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMuc2xvdHMgPSBzbG90cztcclxuICAgICAgICB0aGlzLmhhc1Nsb3RzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mcm9tQ2FjaGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJpbmRpbmdDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm92ZXJyaWRlQ29udGV4dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpZXdNb2RlbFNjb3BlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmFuaW1hdGFibGVFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2lzVXNlckNvbnRyb2xsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRWaWV3ID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBfIGluIHNsb3RzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzU2xvdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBWaWV3LnByb3RvdHlwZS5yZXR1cm5Ub0NhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudmlld0ZhY3RvcnkucmV0dXJuVmlld1RvQ2FjaGUodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgVmlldy5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJzID0gdGhpcy5jb250cm9sbGVycztcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY29udHJvbGxlcnNbaV0uY3JlYXRlZCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlldy5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0LCBfc3lzdGVtVXBkYXRlKSB7XHJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJzO1xyXG4gICAgICAgIHZhciBiaW5kaW5ncztcclxuICAgICAgICB2YXIgY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIGlmIChfc3lzdGVtVXBkYXRlICYmIHRoaXMuX2lzVXNlckNvbnRyb2xsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdDb250ZXh0ID09PSBiaW5kaW5nQ29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVDb250ZXh0ID0gb3ZlcnJpZGVDb250ZXh0IHx8IGNyZWF0ZU92ZXJyaWRlQ29udGV4dChiaW5kaW5nQ29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuX2ludm9rZUhvb2soJ2JlZm9yZUJpbmQnLCB0aGlzKTtcclxuICAgICAgICBiaW5kaW5ncyA9IHRoaXMuYmluZGluZ3M7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBiaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdzW2ldLmJpbmQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbFNjb3BlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdDb250ZXh0LmJpbmQodGhpcy52aWV3TW9kZWxTY29wZS5iaW5kaW5nQ29udGV4dCwgdGhpcy52aWV3TW9kZWxTY29wZS5vdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFNjb3BlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gY29udHJvbGxlcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyc1tpXS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuW2ldLmJpbmQoYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1Nsb3RzKSB7XHJcbiAgICAgICAgICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyh0aGlzLmNvbnRlbnRWaWV3LCB0aGlzLnNsb3RzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlldy5wcm90b3R5cGUuYWRkQmluZGluZyA9IGZ1bmN0aW9uIChiaW5kaW5nKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgYmluZGluZy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJzO1xyXG4gICAgICAgIHZhciBiaW5kaW5ncztcclxuICAgICAgICB2YXIgY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzLl9pbnZva2VIb29rKCdiZWZvcmVVbmJpbmQnLCB0aGlzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLnVuYmluZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncztcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBiaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nc1tpXS51bmJpbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnM7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gY29udHJvbGxlcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcnNbaV0udW5iaW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLnVuYmluZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlQ29udGV4dCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXcucHJvdG90eXBlLmluc2VydE5vZGVzQmVmb3JlID0gZnVuY3Rpb24gKHJlZk5vZGUpIHtcclxuICAgICAgICByZWZOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZnJhZ21lbnQsIHJlZk5vZGUpO1xyXG4gICAgfTtcclxuICAgIFZpZXcucHJvdG90eXBlLmFwcGVuZE5vZGVzVG8gPSBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZnJhZ21lbnQpO1xyXG4gICAgfTtcclxuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU5vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgdmFyIGVuZCA9IHRoaXMubGFzdENoaWxkO1xyXG4gICAgICAgIHZhciBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjdXJyZW50KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudCA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXcucHJvdG90eXBlLmF0dGFjaGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb250cm9sbGVycztcclxuICAgICAgICB2YXIgY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLmF0dGFjaGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRyb2xsZXJzID0gdGhpcy5jb250cm9sbGVycztcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY29udHJvbGxlcnNbaV0uYXR0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBjaGlsZHJlbltpXS5hdHRhY2hlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3LnByb3RvdHlwZS5kZXRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29udHJvbGxlcnM7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuZGV0YWNoZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnM7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gY29udHJvbGxlcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcnNbaV0uZGV0YWNoZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0uZGV0YWNoZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVmlldztcclxufSgpKTtcblxudmFyIEFuaW1hdG9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFuaW1hdG9yKCkge1xyXG4gICAgfVxyXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBBbmltYXRvci5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIEFuaW1hdG9yLnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBBbmltYXRvci5wcm90b3R5cGUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLnJ1blNlcXVlbmNlID0gZnVuY3Rpb24gKGFuaW1hdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBBbmltYXRvci5wcm90b3R5cGUucmVnaXN0ZXJFZmZlY3QgPSBmdW5jdGlvbiAoZWZmZWN0TmFtZSwgcHJvcGVydGllcykgeyB9O1xyXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLnVucmVnaXN0ZXJFZmZlY3QgPSBmdW5jdGlvbiAoZWZmZWN0TmFtZSkgeyB9O1xyXG4gICAgcmV0dXJuIEFuaW1hdG9yO1xyXG59KCkpO1xuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlRWxlbWVudCh2aWV3KSB7XHJcbiAgICBpZiAodmlldy5hbmltYXRhYmxlRWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcuYW5pbWF0YWJsZUVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICB2YXIgY3VycmVudCA9IHZpZXcuZmlyc3RDaGlsZDtcclxuICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQubm9kZVR5cGUgIT09IDEpIHtcclxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0U2libGluZztcclxuICAgIH1cclxuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gKHZpZXcuYW5pbWF0YWJsZUVsZW1lbnQgPSBjdXJyZW50LmNsYXNzTGlzdC5jb250YWlucygnYXUtYW5pbWF0ZScpID8gY3VycmVudCA6IG51bGwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh2aWV3LmFuaW1hdGFibGVFbGVtZW50ID0gbnVsbCk7XHJcbn1cclxudmFyIFZpZXdTbG90ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXdTbG90KGFuY2hvciwgYW5jaG9ySXNDb250YWluZXIsIGFuaW1hdG9yKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdG9yID09PSB2b2lkIDApIHsgYW5pbWF0b3IgPSBBbmltYXRvci5pbnN0YW5jZTsgfVxyXG4gICAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yO1xyXG4gICAgICAgIHRoaXMuYW5jaG9ySXNDb250YWluZXIgPSBhbmNob3JJc0NvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmJpbmRpbmdDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm92ZXJyaWRlQ29udGV4dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvciA9IGFuaW1hdG9yO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRTZWxlY3RvcnMgPSBudWxsO1xyXG4gICAgICAgIGFuY2hvci52aWV3U2xvdCA9IHRoaXM7XHJcbiAgICAgICAgYW5jaG9yLmlzQ29udGVudFByb2plY3Rpb25Tb3VyY2UgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5hbmltYXRlVmlldyA9IGZ1bmN0aW9uICh2aWV3LCBkaXJlY3Rpb24pIHtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSB2b2lkIDApIHsgZGlyZWN0aW9uID0gJ2VudGVyJzsgfVxyXG4gICAgICAgIHZhciBhbmltYXRhYmxlRWxlbWVudCA9IGdldEFuaW1hdGFibGVFbGVtZW50KHZpZXcpO1xyXG4gICAgICAgIGlmIChhbmltYXRhYmxlRWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZW50ZXInOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdG9yLmVudGVyKGFuaW1hdGFibGVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlYXZlJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRvci5sZWF2ZShhbmltYXRhYmxlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhbmltYXRpb24gZGlyZWN0aW9uOiAnICsgZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3U2xvdC5wcm90b3R5cGUudHJhbnNmb3JtQ2hpbGROb2Rlc0ludG9WaWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmFuY2hvcjtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICBmcmFnbWVudDogcGFyZW50LFxyXG4gICAgICAgICAgICBmaXJzdENoaWxkOiBwYXJlbnQuZmlyc3RDaGlsZCxcclxuICAgICAgICAgICAgbGFzdENoaWxkOiBwYXJlbnQubGFzdENoaWxkLFxyXG4gICAgICAgICAgICByZXR1cm5Ub0NhY2hlOiBmdW5jdGlvbiAoKSB7IH0sXHJcbiAgICAgICAgICAgIHJlbW92ZU5vZGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0ID0gcGFyZW50Lmxhc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChsYXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3JlYXRlZDogZnVuY3Rpb24gKCkgeyB9LFxyXG4gICAgICAgICAgICBiaW5kOiBmdW5jdGlvbiAoKSB7IH0sXHJcbiAgICAgICAgICAgIHVuYmluZDogZnVuY3Rpb24gKCkgeyB9LFxyXG4gICAgICAgICAgICBhdHRhY2hlZDogZnVuY3Rpb24gKCkgeyB9LFxyXG4gICAgICAgICAgICBkZXRhY2hlZDogZnVuY3Rpb24gKCkgeyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgY2hpbGRyZW47XHJcbiAgICAgICAgaWYgKHRoaXMuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5iaW5kaW5nQ29udGV4dCA9PT0gYmluZGluZ0NvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0IHx8IHRoaXMuYmluZGluZ0NvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5vdmVycmlkZUNvbnRleHQgPSBvdmVycmlkZUNvbnRleHQgPSBvdmVycmlkZUNvbnRleHQgfHwgdGhpcy5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBjaGlsZHJlbltpXS5iaW5kKGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3U2xvdC5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHZhciBpaSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlQ29udGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0udW5iaW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5jaG9ySXNDb250YWluZXIpIHtcclxuICAgICAgICAgICAgdmlldy5hcHBlbmROb2Rlc1RvKHRoaXMuYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZpZXcuaW5zZXJ0Tm9kZXNCZWZvcmUodGhpcy5hbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmlldyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICB2aWV3LmF0dGFjaGVkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGVWaWV3KHZpZXcsICdlbnRlcicpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3U2xvdC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGluZGV4LCB2aWV3KSB7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIGlmICgoaW5kZXggPT09IDAgJiYgbGVuZ3RoID09PSAwKSB8fCBpbmRleCA+PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3Lmluc2VydE5vZGVzQmVmb3JlKGNoaWxkcmVuW2luZGV4XS5maXJzdENoaWxkKTtcclxuICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIHZpZXcpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlVmlldyh2aWV3LCAnZW50ZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAoc291cmNlSW5kZXgsIHRhcmdldEluZGV4KSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZUluZGV4ID09PSB0YXJnZXRJbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIHZpZXcgPSBjaGlsZHJlbltzb3VyY2VJbmRleF07XHJcbiAgICAgICAgdmlldy5yZW1vdmVOb2RlcygpO1xyXG4gICAgICAgIHZpZXcuaW5zZXJ0Tm9kZXNCZWZvcmUoY2hpbGRyZW5bdGFyZ2V0SW5kZXhdLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIGNoaWxkcmVuLnNwbGljZShzb3VyY2VJbmRleCwgMSk7XHJcbiAgICAgICAgY2hpbGRyZW4uc3BsaWNlKHRhcmdldEluZGV4LCAwLCB2aWV3KTtcclxuICAgIH07XHJcbiAgICBWaWV3U2xvdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHZpZXcsIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVBdCh0aGlzLmNoaWxkcmVuLmluZGV4T2YodmlldyksIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pO1xyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5yZW1vdmVNYW55ID0gZnVuY3Rpb24gKHZpZXdzVG9SZW1vdmUsIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGlpID0gdmlld3NUb1JlbW92ZS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHJtUHJvbWlzZXMgPSBbXTtcclxuICAgICAgICB2aWV3c1RvUmVtb3ZlLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChza2lwQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5yZW1vdmVOb2RlcygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBfdGhpcy5hbmltYXRlVmlldyhjaGlsZCwgJ2xlYXZlJyk7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHJtUHJvbWlzZXMucHVzaChhbmltYXRpb24udGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBjaGlsZC5yZW1vdmVOb2RlcygpOyB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5yZW1vdmVOb2RlcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHJlbW92ZUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3NUb1JlbW92ZVtpXS5kZXRhY2hlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXR1cm5Ub0NhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzVG9SZW1vdmVbaV0ucmV0dXJuVG9DYWNoZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKHZpZXdzVG9SZW1vdmVbaV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAocm1Qcm9taXNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChybVByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZUFjdGlvbigpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZUFjdGlvbigpO1xyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5yZW1vdmVBdCA9IGZ1bmN0aW9uIChpbmRleCwgcmV0dXJuVG9DYWNoZSwgc2tpcEFuaW1hdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmNoaWxkcmVuW2luZGV4XTtcclxuICAgICAgICB2YXIgcmVtb3ZlQWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IF90aGlzLmNoaWxkcmVuLmluZGV4T2Yodmlldyk7XHJcbiAgICAgICAgICAgIHZpZXcucmVtb3ZlTm9kZXMoKTtcclxuICAgICAgICAgICAgX3RoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgICAgIHZpZXcuZGV0YWNoZWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmV0dXJuVG9DYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5yZXR1cm5Ub0NhY2hlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIXNraXBBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0ZVZpZXcodmlldywgJ2xlYXZlJyk7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhbmltYXRpb24udGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmVBY3Rpb24oKTsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZUFjdGlvbigpO1xyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbiAocmV0dXJuVG9DYWNoZSwgc2tpcEFuaW1hdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICB2YXIgaWkgPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHJtUHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICBpZiAoc2tpcEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlTm9kZXMoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gX3RoaXMuYW5pbWF0ZVZpZXcoY2hpbGQsICdsZWF2ZScpO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBybVByb21pc2VzLnB1c2goYW5pbWF0aW9uLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hpbGQucmVtb3ZlTm9kZXMoKTsgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlTm9kZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByZW1vdmVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0F0dGFjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLmRldGFjaGVkKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJldHVyblRvQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnJldHVyblRvQ2FjaGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChybVByb21pc2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJtUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlQWN0aW9uKCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVtb3ZlQWN0aW9uKCk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLmF0dGFjaGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGNoaWxkO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSB0cnVlO1xyXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgY2hpbGQuYXR0YWNoZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlVmlldyhjaGlsZCwgJ2VudGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5kZXRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0F0dGFjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpXS5kZXRhY2hlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5wcm9qZWN0VG8gPSBmdW5jdGlvbiAoc2xvdHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucHJvamVjdFRvU2xvdHMgPSBzbG90cztcclxuICAgICAgICB0aGlzLmFkZCA9IHRoaXMuX3Byb2plY3Rpb25BZGQ7XHJcbiAgICAgICAgdGhpcy5pbnNlcnQgPSB0aGlzLl9wcm9qZWN0aW9uSW5zZXJ0O1xyXG4gICAgICAgIHRoaXMubW92ZSA9IHRoaXMuX3Byb2plY3Rpb25Nb3ZlO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlID0gdGhpcy5fcHJvamVjdGlvblJlbW92ZTtcclxuICAgICAgICB0aGlzLnJlbW92ZUF0ID0gdGhpcy5fcHJvamVjdGlvblJlbW92ZUF0O1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTWFueSA9IHRoaXMuX3Byb2plY3Rpb25SZW1vdmVNYW55O1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsID0gdGhpcy5fcHJvamVjdGlvblJlbW92ZUFsbDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyh2aWV3LCBzbG90cywgX3RoaXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBWaWV3U2xvdC5wcm90b3R5cGUuX3Byb2plY3Rpb25BZGQgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyh2aWV3LCB0aGlzLnByb2plY3RUb1Nsb3RzLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmlldyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICB2aWV3LmF0dGFjaGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5fcHJvamVjdGlvbkluc2VydCA9IGZ1bmN0aW9uIChpbmRleCwgdmlldykge1xyXG4gICAgICAgIGlmICgoaW5kZXggPT09IDAgJiYgIXRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB8fCBpbmRleCA+PSB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZCh2aWV3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyh2aWV3LCB0aGlzLnByb2plY3RUb1Nsb3RzLCB0aGlzLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCB2aWV3KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5fcHJvamVjdGlvbk1vdmUgPSBmdW5jdGlvbiAoc291cmNlSW5kZXgsIHRhcmdldEluZGV4KSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZUluZGV4ID09PSB0YXJnZXRJbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIHZpZXcgPSBjaGlsZHJlbltzb3VyY2VJbmRleF07XHJcbiAgICAgICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZVZpZXcodmlldywgdGhpcy5wcm9qZWN0VG9TbG90cywgdGhpcyk7XHJcbiAgICAgICAgU2hhZG93RE9NLmRpc3RyaWJ1dGVWaWV3KHZpZXcsIHRoaXMucHJvamVjdFRvU2xvdHMsIHRoaXMsIHRhcmdldEluZGV4KTtcclxuICAgICAgICBjaGlsZHJlbi5zcGxpY2Uoc291cmNlSW5kZXgsIDEpO1xyXG4gICAgICAgIGNoaWxkcmVuLnNwbGljZSh0YXJnZXRJbmRleCwgMCwgdmlldyk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLl9wcm9qZWN0aW9uUmVtb3ZlID0gZnVuY3Rpb24gKHZpZXcsIHJldHVyblRvQ2FjaGUpIHtcclxuICAgICAgICBTaGFkb3dET00udW5kaXN0cmlidXRlVmlldyh2aWV3LCB0aGlzLnByb2plY3RUb1Nsb3RzLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YodmlldyksIDEpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgdmlldy5kZXRhY2hlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV0dXJuVG9DYWNoZSkge1xyXG4gICAgICAgICAgICB2aWV3LnJldHVyblRvQ2FjaGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlld1Nsb3QucHJvdG90eXBlLl9wcm9qZWN0aW9uUmVtb3ZlQXQgPSBmdW5jdGlvbiAoaW5kZXgsIHJldHVyblRvQ2FjaGUpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHRoaXMuY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgIFNoYWRvd0RPTS51bmRpc3RyaWJ1dGVWaWV3KHZpZXcsIHRoaXMucHJvamVjdFRvU2xvdHMsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XHJcbiAgICAgICAgICAgIHZpZXcuZGV0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldHVyblRvQ2FjaGUpIHtcclxuICAgICAgICAgICAgdmlldy5yZXR1cm5Ub0NhY2hlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5fcHJvamVjdGlvblJlbW92ZU1hbnkgPSBmdW5jdGlvbiAodmlld3NUb1JlbW92ZSwgcmV0dXJuVG9DYWNoZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmlld3NUb1JlbW92ZS5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7IHJldHVybiBfdGhpcy5yZW1vdmUodmlldywgcmV0dXJuVG9DYWNoZSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFZpZXdTbG90LnByb3RvdHlwZS5fcHJvamVjdGlvblJlbW92ZUFsbCA9IGZ1bmN0aW9uIChyZXR1cm5Ub0NhY2hlKSB7XHJcbiAgICAgICAgU2hhZG93RE9NLnVuZGlzdHJpYnV0ZUFsbCh0aGlzLnByb2plY3RUb1Nsb3RzLCB0aGlzKTtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG4gICAgICAgIHZhciBpaSA9IGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKHJldHVyblRvQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLnJldHVyblRvQ2FjaGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLmRldGFjaGVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWaWV3U2xvdDtcclxufSgpKTtcblxudmFyICRyZXNvbHZlciA9IHJlc29sdmVyO1xyXG52YXIgUHJvdmlkZXJSZXNvbHZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQcm92aWRlclJlc29sdmVyKCkge1xyXG4gICAgfVxyXG4gICAgUHJvdmlkZXJSZXNvbHZlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwga2V5KSB7XHJcbiAgICAgICAgdmFyIGlkID0ga2V5Ll9fcHJvdmlkZXJJZF9fO1xyXG4gICAgICAgIHJldHVybiBpZCBpbiBjb250YWluZXIgPyBjb250YWluZXJbaWRdIDogKGNvbnRhaW5lcltpZF0gPSBjb250YWluZXIuaW52b2tlKGtleSkpO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyUmVzb2x2ZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICAkcmVzb2x2ZXJcclxuICAgIF0sIFByb3ZpZGVyUmVzb2x2ZXIpO1xyXG4gICAgcmV0dXJuIFByb3ZpZGVyUmVzb2x2ZXI7XHJcbn0oKSk7XHJcbnZhciBwcm92aWRlclJlc29sdmVySW5zdGFuY2UgPSBuZXcgUHJvdmlkZXJSZXNvbHZlcigpO1xyXG5mdW5jdGlvbiBlbGVtZW50Q29udGFpbmVyR2V0KGtleSkge1xyXG4gICAgaWYgKGtleSA9PT0gRE9NLkVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGtleSA9PT0gQm91bmRWaWV3RmFjdG9yeSkge1xyXG4gICAgICAgIGlmICh0aGlzLmJvdW5kVmlld0ZhY3RvcnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRWaWV3RmFjdG9yeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLmluc3RydWN0aW9uLnZpZXdGYWN0b3J5O1xyXG4gICAgICAgIHZhciBwYXJ0UmVwbGFjZW1lbnRzID0gdGhpcy5wYXJ0UmVwbGFjZW1lbnRzO1xyXG4gICAgICAgIGlmIChwYXJ0UmVwbGFjZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGZhY3RvcnkgPSBwYXJ0UmVwbGFjZW1lbnRzW2ZhY3RvcnkucGFydF0gfHwgZmFjdG9yeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ib3VuZFZpZXdGYWN0b3J5ID0gbmV3IEJvdW5kVmlld0ZhY3RvcnkodGhpcywgZmFjdG9yeSwgcGFydFJlcGxhY2VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRWaWV3RmFjdG9yeTtcclxuICAgIH1cclxuICAgIGlmIChrZXkgPT09IFZpZXdTbG90KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlld1Nsb3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdTbG90ID0gbmV3IFZpZXdTbG90KHRoaXMuZWxlbWVudCwgdGhpcy5pbnN0cnVjdGlvbi5hbmNob3JJc0NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5pc0NvbnRlbnRQcm9qZWN0aW9uU291cmNlID0gdGhpcy5pbnN0cnVjdGlvbi5saWZ0aW5nO1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy52aWV3U2xvdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdTbG90O1xyXG4gICAgfVxyXG4gICAgaWYgKGtleSA9PT0gRWxlbWVudEV2ZW50cykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRFdmVudHMgfHwgKHRoaXMuZWxlbWVudEV2ZW50cyA9IG5ldyBFbGVtZW50RXZlbnRzKHRoaXMuZWxlbWVudCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKGtleSA9PT0gQ29tcG9zaXRpb25UcmFuc2FjdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uVHJhbnNhY3Rpb24gfHwgKHRoaXMuY29tcG9zaXRpb25UcmFuc2FjdGlvbiA9IHRoaXMucGFyZW50LmdldChrZXkpKTtcclxuICAgIH1cclxuICAgIGlmIChrZXkgPT09IFZpZXdSZXNvdXJjZXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3UmVzb3VyY2VzO1xyXG4gICAgfVxyXG4gICAgaWYgKGtleSA9PT0gVGFyZ2V0SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbjtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnN1cGVyR2V0KGtleSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudENvbnRhaW5lcihwYXJlbnQsIGVsZW1lbnQsIGluc3RydWN0aW9uLCBjaGlsZHJlbiwgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKSB7XHJcbiAgICB2YXIgY29udGFpbmVyID0gcGFyZW50LmNyZWF0ZUNoaWxkKCk7XHJcbiAgICB2YXIgcHJvdmlkZXJzO1xyXG4gICAgdmFyIGk7XHJcbiAgICBjb250YWluZXIuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICBjb250YWluZXIuaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcclxuICAgIGNvbnRhaW5lci5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgY29udGFpbmVyLnZpZXdSZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgICBjb250YWluZXIucGFydFJlcGxhY2VtZW50cyA9IHBhcnRSZXBsYWNlbWVudHM7XHJcbiAgICBwcm92aWRlcnMgPSBpbnN0cnVjdGlvbi5wcm92aWRlcnM7XHJcbiAgICBpID0gcHJvdmlkZXJzLmxlbmd0aDtcclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICBjb250YWluZXIuX3Jlc29sdmVycy5zZXQocHJvdmlkZXJzW2ldLCBwcm92aWRlclJlc29sdmVySW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgY29udGFpbmVyLnN1cGVyR2V0ID0gY29udGFpbmVyLmdldDtcclxuICAgIGNvbnRhaW5lci5nZXQgPSBlbGVtZW50Q29udGFpbmVyR2V0O1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxufVxyXG5mdW5jdGlvbiBoYXNBdHRyaWJ1dGUobmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XHJcbn1cclxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XHJcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gbWFrZUVsZW1lbnRJbnRvQW5jaG9yKGVsZW1lbnQsIGVsZW1lbnRJbnN0cnVjdGlvbikge1xyXG4gICAgdmFyIGFuY2hvciA9IERPTS5jcmVhdGVDb21tZW50KCdhbmNob3InKTtcclxuICAgIGlmIChlbGVtZW50SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcclxuICAgICAgICBpZiAoZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkLnRhZ05hbWUgPT09ICdBVS1DT05URU5UJykge1xyXG4gICAgICAgICAgICBhbmNob3IuY29udGVudEVsZW1lbnQgPSBmaXJzdENoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhbmNob3IuX2VsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGFuY2hvci5oYXNBdHRyaWJ1dGUgPSBoYXNBdHRyaWJ1dGU7XHJcbiAgICAgICAgYW5jaG9yLmdldEF0dHJpYnV0ZSA9IGdldEF0dHJpYnV0ZTtcclxuICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlID0gc2V0QXR0cmlidXRlO1xyXG4gICAgfVxyXG4gICAgRE9NLnJlcGxhY2VOb2RlKGFuY2hvciwgZWxlbWVudCk7XHJcbiAgICByZXR1cm4gYW5jaG9yO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5SW5zdHJ1Y3Rpb25zKGNvbnRhaW5lcnMsIGVsZW1lbnQsIGluc3RydWN0aW9uLCBjb250cm9sbGVycywgYmluZGluZ3MsIGNoaWxkcmVuLCBzaGFkb3dTbG90cywgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKSB7XHJcbiAgICB2YXIgYmVoYXZpb3JJbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9ucztcclxuICAgIHZhciBleHByZXNzaW9ucyA9IGluc3RydWN0aW9uLmV4cHJlc3Npb25zO1xyXG4gICAgdmFyIGVsZW1lbnRDb250YWluZXI7XHJcbiAgICB2YXIgaTtcclxuICAgIHZhciBpaTtcclxuICAgIHZhciBjdXJyZW50O1xyXG4gICAgdmFyIGluc3RhbmNlO1xyXG4gICAgaWYgKGluc3RydWN0aW9uLmNvbnRlbnRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgYmluZGluZ3MucHVzaChpbnN0cnVjdGlvbi5jb250ZW50RXhwcmVzc2lvbi5jcmVhdGVCaW5kaW5nKGVsZW1lbnQubmV4dFNpYmxpbmcpKTtcclxuICAgICAgICBlbGVtZW50Lm5leHRTaWJsaW5nLmF1SW50ZXJwb2xhdGlvblRhcmdldCA9IHRydWU7XHJcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpbnN0cnVjdGlvbi5zaGFkb3dTbG90KSB7XHJcbiAgICAgICAgdmFyIGNvbW1lbnRBbmNob3IgPSBET00uY3JlYXRlQ29tbWVudCgnc2xvdCcpO1xyXG4gICAgICAgIHZhciBzbG90ID0gdm9pZCAwO1xyXG4gICAgICAgIGlmIChpbnN0cnVjdGlvbi5zbG90RGVzdGluYXRpb24pIHtcclxuICAgICAgICAgICAgc2xvdCA9IG5ldyBQYXNzVGhyb3VnaFNsb3QoY29tbWVudEFuY2hvciwgaW5zdHJ1Y3Rpb24uc2xvdE5hbWUsIGluc3RydWN0aW9uLnNsb3REZXN0aW5hdGlvbiwgaW5zdHJ1Y3Rpb24uc2xvdEZhbGxiYWNrRmFjdG9yeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzbG90ID0gbmV3IFNoYWRvd1Nsb3QoY29tbWVudEFuY2hvciwgaW5zdHJ1Y3Rpb24uc2xvdE5hbWUsIGluc3RydWN0aW9uLnNsb3RGYWxsYmFja0ZhY3RvcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBET00ucmVwbGFjZU5vZGUoY29tbWVudEFuY2hvciwgZWxlbWVudCk7XHJcbiAgICAgICAgc2hhZG93U2xvdHNbaW5zdHJ1Y3Rpb24uc2xvdE5hbWVdID0gc2xvdDtcclxuICAgICAgICBjb250cm9sbGVycy5wdXNoKHNsb3QpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpbnN0cnVjdGlvbi5sZXRFbGVtZW50KSB7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goZXhwcmVzc2lvbnNbaV0uY3JlYXRlQmluZGluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoIWluc3RydWN0aW9uLmFuY2hvcklzQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBtYWtlRWxlbWVudEludG9BbmNob3IoZWxlbWVudCwgaW5zdHJ1Y3Rpb24uZWxlbWVudEluc3RydWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGFpbmVyc1tpbnN0cnVjdGlvbi5pbmplY3RvcklkXSA9IGVsZW1lbnRDb250YWluZXIgPVxyXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50Q29udGFpbmVyKGNvbnRhaW5lcnNbaW5zdHJ1Y3Rpb24ucGFyZW50SW5qZWN0b3JJZF0sIGVsZW1lbnQsIGluc3RydWN0aW9uLCBjaGlsZHJlbiwgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zW2ldO1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IGN1cnJlbnQudHlwZS5jcmVhdGUoZWxlbWVudENvbnRhaW5lciwgY3VycmVudCwgZWxlbWVudCwgYmluZGluZ3MpO1xyXG4gICAgICAgICAgICBjb250cm9sbGVycy5wdXNoKGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICBiaW5kaW5ncy5wdXNoKGV4cHJlc3Npb25zW2ldLmNyZWF0ZUJpbmRpbmcoZWxlbWVudCkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHN0eWxlU3RyaW5nVG9PYmplY3Qoc3R5bGUsIHRhcmdldCkge1xyXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdHlsZS5zcGxpdCgnOycpO1xyXG4gICAgdmFyIGZpcnN0SW5kZXhPZkNvbG9uO1xyXG4gICAgdmFyIGk7XHJcbiAgICB2YXIgY3VycmVudDtcclxuICAgIHZhciBrZXk7XHJcbiAgICB2YXIgdmFsdWU7XHJcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwge307XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGN1cnJlbnQgPSBhdHRyaWJ1dGVzW2ldO1xyXG4gICAgICAgIGZpcnN0SW5kZXhPZkNvbG9uID0gY3VycmVudC5pbmRleE9mKCc6Jyk7XHJcbiAgICAgICAga2V5ID0gY3VycmVudC5zdWJzdHJpbmcoMCwgZmlyc3RJbmRleE9mQ29sb24pLnRyaW0oKTtcclxuICAgICAgICB2YWx1ZSA9IGN1cnJlbnQuc3Vic3RyaW5nKGZpcnN0SW5kZXhPZkNvbG9uICsgMSkudHJpbSgpO1xyXG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIHN0eWxlT2JqZWN0VG9TdHJpbmcob2JqKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmVzdWx0ICs9IGtleSArICc6JyArIG9ialtrZXldICsgJzsnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBhcHBseVN1cnJvZ2F0ZUluc3RydWN0aW9uKGNvbnRhaW5lciwgZWxlbWVudCwgaW5zdHJ1Y3Rpb24sIGNvbnRyb2xsZXJzLCBiaW5kaW5ncywgY2hpbGRyZW4pIHtcclxuICAgIHZhciBiZWhhdmlvckluc3RydWN0aW9ucyA9IGluc3RydWN0aW9uLmJlaGF2aW9ySW5zdHJ1Y3Rpb25zO1xyXG4gICAgdmFyIGV4cHJlc3Npb25zID0gaW5zdHJ1Y3Rpb24uZXhwcmVzc2lvbnM7XHJcbiAgICB2YXIgcHJvdmlkZXJzID0gaW5zdHJ1Y3Rpb24ucHJvdmlkZXJzO1xyXG4gICAgdmFyIHZhbHVlcyA9IGluc3RydWN0aW9uLnZhbHVlcztcclxuICAgIHZhciBpO1xyXG4gICAgdmFyIGlpO1xyXG4gICAgdmFyIGN1cnJlbnQ7XHJcbiAgICB2YXIgaW5zdGFuY2U7XHJcbiAgICB2YXIgY3VycmVudEF0dHJpYnV0ZVZhbHVlO1xyXG4gICAgaSA9IHByb3ZpZGVycy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgY29udGFpbmVyLl9yZXNvbHZlcnMuc2V0KHByb3ZpZGVyc1tpXSwgcHJvdmlkZXJSZXNvbHZlckluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZXMpIHtcclxuICAgICAgICBjdXJyZW50QXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIGlmIChjdXJyZW50QXR0cmlidXRlVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VycmVudEF0dHJpYnV0ZVZhbHVlICsgJyAnICsgdmFsdWVzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlT2JqZWN0ID0gc3R5bGVTdHJpbmdUb09iamVjdCh2YWx1ZXNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBzdHlsZVN0cmluZ1RvT2JqZWN0KGN1cnJlbnRBdHRyaWJ1dGVWYWx1ZSwgc3R5bGVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVPYmplY3RUb1N0cmluZyhzdHlsZU9iamVjdCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlc1trZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYmVoYXZpb3JJbnN0cnVjdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBiZWhhdmlvckluc3RydWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgaW5zdGFuY2UgPSBjdXJyZW50LnR5cGUuY3JlYXRlKGNvbnRhaW5lciwgY3VycmVudCwgZWxlbWVudCwgYmluZGluZ3MpO1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuY29udGVudFZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goaW5zdGFuY2UuY29udGVudFZpZXcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJzLnB1c2goaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgIGJpbmRpbmdzLnB1c2goZXhwcmVzc2lvbnNbaV0uY3JlYXRlQmluZGluZyhlbGVtZW50KSk7XHJcbiAgICB9XHJcbn1cclxudmFyIEJvdW5kVmlld0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQm91bmRWaWV3RmFjdG9yeShwYXJlbnRDb250YWluZXIsIHZpZXdGYWN0b3J5LCBwYXJ0UmVwbGFjZW1lbnRzKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDb250YWluZXIgPSBwYXJlbnRDb250YWluZXI7XHJcbiAgICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMuZmFjdG9yeUNyZWF0ZUluc3RydWN0aW9uID0geyBwYXJ0UmVwbGFjZW1lbnRzOiBwYXJ0UmVwbGFjZW1lbnRzIH07XHJcbiAgICB9XHJcbiAgICBCb3VuZFZpZXdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZSh0aGlzLnBhcmVudENvbnRhaW5lci5jcmVhdGVDaGlsZCgpLCB0aGlzLmZhY3RvcnlDcmVhdGVJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgdmlldy5faXNVc2VyQ29udHJvbGxlZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvdW5kVmlld0ZhY3RvcnkucHJvdG90eXBlLCBcImlzQ2FjaGluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZXdGYWN0b3J5LmlzQ2FjaGluZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBCb3VuZFZpZXdGYWN0b3J5LnByb3RvdHlwZS5zZXRDYWNoZVNpemUgPSBmdW5jdGlvbiAoc2l6ZSwgZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCkge1xyXG4gICAgICAgIHRoaXMudmlld0ZhY3Rvcnkuc2V0Q2FjaGVTaXplKHNpemUsIGRvTm90T3ZlcnJpZGVJZkFscmVhZHlTZXQpO1xyXG4gICAgfTtcclxuICAgIEJvdW5kVmlld0ZhY3RvcnkucHJvdG90eXBlLmdldENhY2hlZFZpZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0ZhY3RvcnkuZ2V0Q2FjaGVkVmlldygpO1xyXG4gICAgfTtcclxuICAgIEJvdW5kVmlld0ZhY3RvcnkucHJvdG90eXBlLnJldHVyblZpZXdUb0NhY2hlID0gZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICB0aGlzLnZpZXdGYWN0b3J5LnJldHVyblZpZXdUb0NhY2hlKHZpZXcpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCb3VuZFZpZXdGYWN0b3J5O1xyXG59KCkpO1xyXG52YXIgVmlld0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld0ZhY3RvcnkodGVtcGxhdGUsIGluc3RydWN0aW9ucywgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgdGhpcy5pc0NhY2hpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgICAgICAgdGhpcy5jYWNoZVNpemUgPSAtMTtcclxuICAgICAgICB0aGlzLmNhY2hlID0gbnVsbDtcclxuICAgIH1cclxuICAgIFZpZXdGYWN0b3J5LnByb3RvdHlwZS5zZXRDYWNoZVNpemUgPSBmdW5jdGlvbiAoc2l6ZSwgZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCkge1xyXG4gICAgICAgIGlmIChzaXplKSB7XHJcbiAgICAgICAgICAgIGlmIChzaXplID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgIHNpemUgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jYWNoZVNpemUgPT09IC0xIHx8ICFkb05vdE92ZXJyaWRlSWZBbHJlYWR5U2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTaXplID0gTnVtYmVyKHNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jYWNoZVNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQ2FjaGluZyA9IHRoaXMuY2FjaGVTaXplID4gMDtcclxuICAgIH07XHJcbiAgICBWaWV3RmFjdG9yeS5wcm90b3R5cGUuZ2V0Q2FjaGVkVmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZSAhPT0gbnVsbCA/ICh0aGlzLmNhY2hlLnBvcCgpIHx8IG51bGwpIDogbnVsbDtcclxuICAgIH07XHJcbiAgICBWaWV3RmFjdG9yeS5wcm90b3R5cGUucmV0dXJuVmlld1RvQ2FjaGUgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIGlmICh2aWV3LmlzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgdmlldy5kZXRhY2hlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmlldy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIHZpZXcudW5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNhY2hlICE9PSBudWxsICYmIHRoaXMuY2FjaGUubGVuZ3RoIDwgdGhpcy5jYWNoZVNpemUpIHtcclxuICAgICAgICAgICAgdmlldy5mcm9tQ2FjaGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhY2hlLnB1c2godmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZpZXdGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBjcmVhdGVJbnN0cnVjdGlvbiwgZWxlbWVudCkge1xyXG4gICAgICAgIGNyZWF0ZUluc3RydWN0aW9uID0gY3JlYXRlSW5zdHJ1Y3Rpb24gfHwgQmVoYXZpb3JJbnN0cnVjdGlvbi5ub3JtYWw7XHJcbiAgICAgICAgdmFyIGNhY2hlZFZpZXcgPSB0aGlzLmdldENhY2hlZFZpZXcoKTtcclxuICAgICAgICBpZiAoY2FjaGVkVmlldyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkVmlldztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gY3JlYXRlSW5zdHJ1Y3Rpb24uZW5oYW5jZSA/IHRoaXMudGVtcGxhdGUgOiB0aGlzLnRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3RhYmxlcyA9IGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdS10YXJnZXQnKTtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb25zID0gdGhpcy5pbnN0cnVjdGlvbnM7XHJcbiAgICAgICAgdmFyIHJlc291cmNlcyA9IHRoaXMucmVzb3VyY2VzO1xyXG4gICAgICAgIHZhciBjb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHZhciBiaW5kaW5ncyA9IFtdO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgIHZhciBzaGFkb3dTbG90cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSB7IHJvb3Q6IGNvbnRhaW5lciB9O1xyXG4gICAgICAgIHZhciBwYXJ0UmVwbGFjZW1lbnRzID0gY3JlYXRlSW5zdHJ1Y3Rpb24ucGFydFJlcGxhY2VtZW50cztcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIHZpZXc7XHJcbiAgICAgICAgdmFyIGluc3RydWN0YWJsZTtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuX2ludm9rZUhvb2soJ2JlZm9yZUNyZWF0ZScsIHRoaXMsIGNvbnRhaW5lciwgZnJhZ21lbnQsIGNyZWF0ZUluc3RydWN0aW9uKTtcclxuICAgICAgICBpZiAoZWxlbWVudCAmJiB0aGlzLnN1cnJvZ2F0ZUluc3RydWN0aW9uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFwcGx5U3Vycm9nYXRlSW5zdHJ1Y3Rpb24oY29udGFpbmVyLCBlbGVtZW50LCB0aGlzLnN1cnJvZ2F0ZUluc3RydWN0aW9uLCBjb250cm9sbGVycywgYmluZGluZ3MsIGNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNyZWF0ZUluc3RydWN0aW9uLmVuaGFuY2UgJiYgZnJhZ21lbnQuaGFzQXR0cmlidXRlKCdhdS10YXJnZXQtaWQnKSkge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGFibGUgPSBmcmFnbWVudDtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaW5zdHJ1Y3RhYmxlLmdldEF0dHJpYnV0ZSgnYXUtdGFyZ2V0LWlkJyldO1xyXG4gICAgICAgICAgICBhcHBseUluc3RydWN0aW9ucyhjb250YWluZXJzLCBpbnN0cnVjdGFibGUsIGluc3RydWN0aW9uLCBjb250cm9sbGVycywgYmluZGluZ3MsIGNoaWxkcmVuLCBzaGFkb3dTbG90cywgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBpbnN0cnVjdGFibGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3RhYmxlID0gaW5zdHJ1Y3RhYmxlc1tpXTtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaW5zdHJ1Y3RhYmxlLmdldEF0dHJpYnV0ZSgnYXUtdGFyZ2V0LWlkJyldO1xyXG4gICAgICAgICAgICBhcHBseUluc3RydWN0aW9ucyhjb250YWluZXJzLCBpbnN0cnVjdGFibGUsIGluc3RydWN0aW9uLCBjb250cm9sbGVycywgYmluZGluZ3MsIGNoaWxkcmVuLCBzaGFkb3dTbG90cywgcGFydFJlcGxhY2VtZW50cywgcmVzb3VyY2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmlldyA9IG5ldyBWaWV3KGNvbnRhaW5lciwgdGhpcywgZnJhZ21lbnQsIGNvbnRyb2xsZXJzLCBiaW5kaW5ncywgY2hpbGRyZW4sIHNoYWRvd1Nsb3RzKTtcclxuICAgICAgICBpZiAoIWNyZWF0ZUluc3RydWN0aW9uLmluaXRpYXRlZEJ5QmVoYXZpb3IpIHtcclxuICAgICAgICAgICAgdmlldy5jcmVhdGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzLl9pbnZva2VIb29rKCdhZnRlckNyZWF0ZScsIHZpZXcpO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWaWV3RmFjdG9yeTtcclxufSgpKTtcblxudmFyIG5leHRJbmplY3RvcklkID0gMDtcclxuZnVuY3Rpb24gZ2V0TmV4dEluamVjdG9ySWQoKSB7XHJcbiAgICByZXR1cm4gKytuZXh0SW5qZWN0b3JJZDtcclxufVxyXG52YXIgbGFzdEFVVGFyZ2V0SUQgPSAwO1xyXG5mdW5jdGlvbiBnZXROZXh0QVVUYXJnZXRJRCgpIHtcclxuICAgIHJldHVybiAoKytsYXN0QVVUYXJnZXRJRCkudG9TdHJpbmcoKTtcclxufVxyXG5mdW5jdGlvbiBtYWtlSW50b0luc3RydWN0aW9uVGFyZ2V0KGVsZW1lbnQpIHtcclxuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgdmFyIGF1VGFyZ2V0SUQgPSBnZXROZXh0QVVUYXJnZXRJRCgpO1xyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKHZhbHVlID8gdmFsdWUgKyAnIGF1LXRhcmdldCcgOiAnYXUtdGFyZ2V0JykpO1xyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2F1LXRhcmdldC1pZCcsIGF1VGFyZ2V0SUQpO1xyXG4gICAgcmV0dXJuIGF1VGFyZ2V0SUQ7XHJcbn1cclxuZnVuY3Rpb24gbWFrZVNoYWRvd1Nsb3QoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgaW5zdHJ1Y3Rpb25zLCBwYXJlbnRJbmplY3RvcklkKSB7XHJcbiAgICB2YXIgYXVTaGFkb3dTbG90ID0gRE9NLmNyZWF0ZUVsZW1lbnQoJ2F1LXNoYWRvdy1zbG90Jyk7XHJcbiAgICBET00ucmVwbGFjZU5vZGUoYXVTaGFkb3dTbG90LCBub2RlKTtcclxuICAgIHZhciBhdVRhcmdldElEID0gbWFrZUludG9JbnN0cnVjdGlvblRhcmdldChhdVNoYWRvd1Nsb3QpO1xyXG4gICAgdmFyIGluc3RydWN0aW9uID0gVGFyZ2V0SW5zdHJ1Y3Rpb24uc2hhZG93U2xvdChwYXJlbnRJbmplY3RvcklkKTtcclxuICAgIGluc3RydWN0aW9uLnNsb3ROYW1lID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSB8fCBTaGFkb3dET00uZGVmYXVsdFNsb3RLZXk7XHJcbiAgICBpbnN0cnVjdGlvbi5zbG90RGVzdGluYXRpb24gPSBub2RlLmdldEF0dHJpYnV0ZSgnc2xvdCcpO1xyXG4gICAgaWYgKG5vZGUuaW5uZXJIVE1MLnRyaW0oKSkge1xyXG4gICAgICAgIHZhciBmcmFnbWVudCA9IERPTS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gdm9pZCAwO1xyXG4gICAgICAgIHdoaWxlIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RydWN0aW9uLnNsb3RGYWxsYmFja0ZhY3RvcnkgPSBjb21waWxlci5jb21waWxlKGZyYWdtZW50LCByZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgaW5zdHJ1Y3Rpb25zW2F1VGFyZ2V0SURdID0gaW5zdHJ1Y3Rpb247XHJcbiAgICByZXR1cm4gYXVTaGFkb3dTbG90O1xyXG59XHJcbnZhciBkZWZhdWx0TGV0SGFuZGxlciA9IEJpbmRpbmdMYW5ndWFnZS5wcm90b3R5cGUuY3JlYXRlTGV0RXhwcmVzc2lvbnM7XHJcbnZhciBWaWV3Q29tcGlsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVmlld0NvbXBpbGVyKGJpbmRpbmdMYW5ndWFnZSwgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nTGFuZ3VhZ2UgPSBiaW5kaW5nTGFuZ3VhZ2U7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgICB9XHJcbiAgICBWaWV3Q29tcGlsZXIuaW5qZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBbQmluZGluZ0xhbmd1YWdlLCBWaWV3UmVzb3VyY2VzXTtcclxuICAgIH07XHJcbiAgICBWaWV3Q29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGUgPSBmdW5jdGlvbiAoc291cmNlLCByZXNvdXJjZXMsIGNvbXBpbGVJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHJlc291cmNlcyA9IHJlc291cmNlcyB8fCB0aGlzLnJlc291cmNlcztcclxuICAgICAgICBjb21waWxlSW5zdHJ1Y3Rpb24gPSBjb21waWxlSW5zdHJ1Y3Rpb24gfHwgVmlld0NvbXBpbGVJbnN0cnVjdGlvbi5ub3JtYWw7XHJcbiAgICAgICAgc291cmNlID0gdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgPyBET00uY3JlYXRlVGVtcGxhdGVGcm9tTWFya3VwKHNvdXJjZSkgOiBzb3VyY2U7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQ7XHJcbiAgICAgICAgdmFyIHBhcnQ7XHJcbiAgICAgICAgdmFyIGNhY2hlU2l6ZTtcclxuICAgICAgICBpZiAoc291cmNlLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgcGFydCA9IHNvdXJjZS5nZXRBdHRyaWJ1dGUoJ3BhcnQnKTtcclxuICAgICAgICAgICAgY2FjaGVTaXplID0gc291cmNlLmdldEF0dHJpYnV0ZSgndmlldy1jYWNoZScpO1xyXG4gICAgICAgICAgICBjb250ZW50ID0gRE9NLmFkb3B0Tm9kZShzb3VyY2UuY29udGVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gc291cmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21waWxlSW5zdHJ1Y3Rpb24udGFyZ2V0U2hhZG93RE9NID0gY29tcGlsZUluc3RydWN0aW9uLnRhcmdldFNoYWRvd0RPTSAmJiBGRUFUVVJFLnNoYWRvd0RPTTtcclxuICAgICAgICByZXNvdXJjZXMuX2ludm9rZUhvb2soJ2JlZm9yZUNvbXBpbGUnLCBjb250ZW50LCByZXNvdXJjZXMsIGNvbXBpbGVJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NvbXBpbGVOb2RlKGNvbnRlbnQsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb25zLCBzb3VyY2UsICdyb290JywgIWNvbXBpbGVJbnN0cnVjdGlvbi50YXJnZXRTaGFkb3dET00pO1xyXG4gICAgICAgIHZhciBmaXJzdENoaWxkID0gY29udGVudC5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmIChmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldElkID0gZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2F1LXRhcmdldC1pZCcpO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnMgPSBpbnN0cnVjdGlvbnNbdGFyZ2V0SWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucy5zaGFkb3dTbG90IHx8IGlucy5saWZ0aW5nIHx8IChpbnMuZWxlbWVudEluc3RydWN0aW9uICYmICFpbnMuZWxlbWVudEluc3RydWN0aW9uLmFuY2hvcklzQ29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5zZXJ0QmVmb3JlKERPTS5jcmVhdGVDb21tZW50KCd2aWV3JyksIGZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmYWN0b3J5ID0gbmV3IFZpZXdGYWN0b3J5KGNvbnRlbnQsIGluc3RydWN0aW9ucywgcmVzb3VyY2VzKTtcclxuICAgICAgICBmYWN0b3J5LnN1cnJvZ2F0ZUluc3RydWN0aW9uID0gY29tcGlsZUluc3RydWN0aW9uLmNvbXBpbGVTdXJyb2dhdGUgPyB0aGlzLl9jb21waWxlU3Vycm9nYXRlKHNvdXJjZSwgcmVzb3VyY2VzKSA6IG51bGw7XHJcbiAgICAgICAgZmFjdG9yeS5wYXJ0ID0gcGFydDtcclxuICAgICAgICBpZiAoY2FjaGVTaXplKSB7XHJcbiAgICAgICAgICAgIGZhY3Rvcnkuc2V0Q2FjaGVTaXplKGNhY2hlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc291cmNlcy5faW52b2tlSG9vaygnYWZ0ZXJDb21waWxlJywgZmFjdG9yeSk7XHJcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XHJcbiAgICB9O1xyXG4gICAgVmlld0NvbXBpbGVyLnByb3RvdHlwZS5fY29tcGlsZU5vZGUgPSBmdW5jdGlvbiAobm9kZSwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbnMsIHBhcmVudE5vZGUsIHBhcmVudEluamVjdG9ySWQsIHRhcmdldExpZ2h0RE9NKSB7XHJcbiAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21waWxlRWxlbWVudChub2RlLCByZXNvdXJjZXMsIGluc3RydWN0aW9ucywgcGFyZW50Tm9kZSwgcGFyZW50SW5qZWN0b3JJZCwgdGFyZ2V0TGlnaHRET00pO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IHJlc291cmNlcy5nZXRCaW5kaW5nTGFuZ3VhZ2UodGhpcy5iaW5kaW5nTGFuZ3VhZ2UpLmluc3BlY3RUZXh0Q29udGVudChyZXNvdXJjZXMsIG5vZGUud2hvbGVUZXh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IERPTS5jcmVhdGVFbGVtZW50KCdhdS1tYXJrZXInKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXVUYXJnZXRJRCA9IG1ha2VJbnRvSW5zdHJ1Y3Rpb25UYXJnZXQobWFya2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAobm9kZS5wYXJlbnROb2RlIHx8IHBhcmVudE5vZGUpLmluc2VydEJlZm9yZShtYXJrZXIsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2F1VGFyZ2V0SURdID0gVGFyZ2V0SW5zdHJ1Y3Rpb24uY29udGVudEV4cHJlc3Npb24oZXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUubmV4dFNpYmxpbmcgJiYgbm9kZS5uZXh0U2libGluZy5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAobm9kZS5wYXJlbnROb2RlIHx8IHBhcmVudE5vZGUpLnJlbW92ZUNoaWxkKG5vZGUubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGlsZCA9IHRoaXMuX2NvbXBpbGVOb2RlKGN1cnJlbnRDaGlsZCwgcmVzb3VyY2VzLCBpbnN0cnVjdGlvbnMsIG5vZGUsIHBhcmVudEluamVjdG9ySWQsIHRhcmdldExpZ2h0RE9NKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcclxuICAgIH07XHJcbiAgICBWaWV3Q29tcGlsZXIucHJvdG90eXBlLl9jb21waWxlU3Vycm9nYXRlID0gZnVuY3Rpb24gKG5vZGUsIHJlc291cmNlcykge1xyXG4gICAgICAgIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdMYW5ndWFnZSA9IHJlc291cmNlcy5nZXRCaW5kaW5nTGFuZ3VhZ2UodGhpcy5iaW5kaW5nTGFuZ3VhZ2UpO1xyXG4gICAgICAgIHZhciBrbm93bkF0dHJpYnV0ZTtcclxuICAgICAgICB2YXIgcHJvcGVydHk7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgYXR0cjtcclxuICAgICAgICB2YXIgYXR0ck5hbWU7XHJcbiAgICAgICAgdmFyIGF0dHJWYWx1ZTtcclxuICAgICAgICB2YXIgaW5mbztcclxuICAgICAgICB2YXIgdHlwZTtcclxuICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcclxuICAgICAgICB2YXIgZXhwcmVzc2lvbjtcclxuICAgICAgICB2YXIgYmVoYXZpb3JJbnN0cnVjdGlvbnMgPSBbXTtcclxuICAgICAgICB2YXIgdmFsdWVzID0ge307XHJcbiAgICAgICAgdmFyIGhhc1ZhbHVlcyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBwcm92aWRlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBhdHRyID0gYXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XHJcbiAgICAgICAgICAgIGF0dHJWYWx1ZSA9IGF0dHIudmFsdWU7XHJcbiAgICAgICAgICAgIGluZm8gPSBiaW5kaW5nTGFuZ3VhZ2UuaW5zcGVjdEF0dHJpYnV0ZShyZXNvdXJjZXMsIHRhZ05hbWUsIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICB0eXBlID0gcmVzb3VyY2VzLmdldEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcclxuICAgICAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGtub3duQXR0cmlidXRlID0gcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChrbm93bkF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gdHlwZS5hdHRyaWJ1dGVzW2tub3duQXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5kZWZhdWx0QmluZGluZ01vZGUgPSBwcm9wZXJ0eS5kZWZhdWx0QmluZGluZ01vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5mby5jb21tYW5kICYmICFpbmZvLmV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uY29tbWFuZCA9IHByb3BlcnR5Lmhhc09wdGlvbnMgPyAnb3B0aW9ucycgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmNvbW1hbmQgJiYgKGluZm8uY29tbWFuZCAhPT0gJ29wdGlvbnMnKSAmJiB0eXBlLnByaW1hcnlQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByaW1hcnlQcm9wZXJ0eSA9IHR5cGUucHJpbWFyeVByb3BlcnR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBpbmZvLmF0dHJOYW1lID0gcHJpbWFyeVByb3BlcnR5LmF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uZGVmYXVsdEJpbmRpbmdNb2RlID0gcHJpbWFyeVByb3BlcnR5LmRlZmF1bHRCaW5kaW5nTW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGJpbmRpbmdMYW5ndWFnZS5jcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbihyZXNvdXJjZXMsIG5vZGUsIGluZm8sIHVuZGVmaW5lZCwgdHlwZSk7XHJcbiAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RydWN0aW9uLmFsdGVyZWRBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHJlc291cmNlcy5nZXRBdHRyaWJ1dGUoaW5zdHJ1Y3Rpb24uYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RydWN0aW9uLmRpc2NyZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlndXJlUHJvcGVydGllcyhpbnN0cnVjdGlvbiwgcmVzb3VyY2VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubGlmdHNDb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgcGxhY2UgYSB0ZW1wbGF0ZSBjb250cm9sbGVyIG9uIGEgc3Vycm9nYXRlIGVsZW1lbnQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWhhdmlvckluc3RydWN0aW9ucy5wdXNoKGluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luc3RydWN0aW9uLmF0dHJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbiA9IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGF0dHJOYW1lLCB0eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW3Jlc291cmNlcy5tYXBBdHRyaWJ1dGUoYXR0ck5hbWUpXSA9IGF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZS5saWZ0c0NvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBsYWNlIGEgdGVtcGxhdGUgY29udHJvbGxlciBvbiBhIHN1cnJvZ2F0ZSBlbGVtZW50LicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JJbnN0cnVjdGlvbnMucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXR0ck5hbWUgIT09ICdpZCcgJiYgYXR0ck5hbWUgIT09ICdwYXJ0JyAmJiBhdHRyTmFtZSAhPT0gJ3JlcGxhY2UtcGFydCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1thdHRyTmFtZV0gPSBhdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cHJlc3Npb25zLmxlbmd0aCB8fCBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGggfHwgaGFzVmFsdWVzKSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gYmVoYXZpb3JJbnN0cnVjdGlvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBiZWhhdmlvckluc3RydWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnR5cGUuY29tcGlsZSh0aGlzLCByZXNvdXJjZXMsIG5vZGUsIGluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVycy5wdXNoKGluc3RydWN0aW9uLnR5cGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmF0dHJUb1JlbW92ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoZXhwcmVzc2lvbi5hdHRyVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBUYXJnZXRJbnN0cnVjdGlvbi5zdXJyb2dhdGUocHJvdmlkZXJzLCBiZWhhdmlvckluc3RydWN0aW9ucywgZXhwcmVzc2lvbnMsIHZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFZpZXdDb21waWxlci5wcm90b3R5cGUuX2NvbXBpbGVFbGVtZW50ID0gZnVuY3Rpb24gKG5vZGUsIHJlc291cmNlcywgaW5zdHJ1Y3Rpb25zLCBwYXJlbnROb2RlLCBwYXJlbnRJbmplY3RvcklkLCB0YXJnZXRMaWdodERPTSkge1xyXG4gICAgICAgIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb25zID0gW107XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb247XHJcbiAgICAgICAgdmFyIGJlaGF2aW9ySW5zdHJ1Y3Rpb25zID0gW107XHJcbiAgICAgICAgdmFyIHByb3ZpZGVycyA9IFtdO1xyXG4gICAgICAgIHZhciBiaW5kaW5nTGFuZ3VhZ2UgPSByZXNvdXJjZXMuZ2V0QmluZGluZ0xhbmd1YWdlKHRoaXMuYmluZGluZ0xhbmd1YWdlKTtcclxuICAgICAgICB2YXIgbGlmdGluZ0luc3RydWN0aW9uO1xyXG4gICAgICAgIHZhciB2aWV3RmFjdG9yeTtcclxuICAgICAgICB2YXIgdHlwZTtcclxuICAgICAgICB2YXIgZWxlbWVudEluc3RydWN0aW9uO1xyXG4gICAgICAgIHZhciBlbGVtZW50UHJvcGVydHk7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIHZhciBhdHRyO1xyXG4gICAgICAgIHZhciBhdHRyTmFtZTtcclxuICAgICAgICB2YXIgYXR0clZhbHVlO1xyXG4gICAgICAgIHZhciBvcmlnaW5hbEF0dHJOYW1lO1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbjtcclxuICAgICAgICB2YXIgaW5mbztcclxuICAgICAgICB2YXIgcHJvcGVydHk7XHJcbiAgICAgICAgdmFyIGtub3duQXR0cmlidXRlO1xyXG4gICAgICAgIHZhciBhdVRhcmdldElEO1xyXG4gICAgICAgIHZhciBpbmplY3RvcklkO1xyXG4gICAgICAgIGlmICh0YWdOYW1lID09PSAnc2xvdCcpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldExpZ2h0RE9NKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbWFrZVNoYWRvd1Nsb3QodGhpcywgcmVzb3VyY2VzLCBub2RlLCBpbnN0cnVjdGlvbnMsIHBhcmVudEluamVjdG9ySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YWdOYW1lID09PSAndGVtcGxhdGUnKSB7XHJcbiAgICAgICAgICAgIGlmICghKCdjb250ZW50JyBpbiBub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBsYWNlIGEgdGVtcGxhdGUgZWxlbWVudCB3aXRoaW4gJyArIG5vZGUubmFtZXNwYWNlVVJJICsgJyBuYW1lc3BhY2UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2aWV3RmFjdG9yeSA9IHRoaXMuY29tcGlsZShub2RlLCByZXNvdXJjZXMpO1xyXG4gICAgICAgICAgICB2aWV3RmFjdG9yeS5wYXJ0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3BhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSByZXNvdXJjZXMuZ2V0RWxlbWVudChub2RlLmdldEF0dHJpYnV0ZSgnYXMtZWxlbWVudCcpIHx8IHRhZ05hbWUpO1xyXG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2xldCcgJiYgIXR5cGUgJiYgYmluZGluZ0xhbmd1YWdlLmNyZWF0ZUxldEV4cHJlc3Npb25zICE9PSBkZWZhdWx0TGV0SGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMgPSBiaW5kaW5nTGFuZ3VhZ2UuY3JlYXRlTGV0RXhwcmVzc2lvbnMocmVzb3VyY2VzLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIGF1VGFyZ2V0SUQgPSBtYWtlSW50b0luc3RydWN0aW9uVGFyZ2V0KG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2F1VGFyZ2V0SURdID0gVGFyZ2V0SW5zdHJ1Y3Rpb24ubGV0RWxlbWVudChleHByZXNzaW9ucyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudEluc3RydWN0aW9uID0gQmVoYXZpb3JJbnN0cnVjdGlvbi5lbGVtZW50KG5vZGUsIHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgdHlwZS5wcm9jZXNzQXR0cmlidXRlcyh0aGlzLCByZXNvdXJjZXMsIG5vZGUsIGF0dHJpYnV0ZXMsIGVsZW1lbnRJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBiZWhhdmlvckluc3RydWN0aW9ucy5wdXNoKGVsZW1lbnRJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgYXR0ciA9IGF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgIG9yaWdpbmFsQXR0ck5hbWUgPSBhdHRyTmFtZSA9IGF0dHIubmFtZTtcclxuICAgICAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcclxuICAgICAgICAgICAgaW5mbyA9IGJpbmRpbmdMYW5ndWFnZS5pbnNwZWN0QXR0cmlidXRlKHJlc291cmNlcywgdGFnTmFtZSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRMaWdodERPTSAmJiBpbmZvLmF0dHJOYW1lID09PSAnc2xvdCcpIHtcclxuICAgICAgICAgICAgICAgIGluZm8uYXR0ck5hbWUgPSBhdHRyTmFtZSA9ICdhdS1zbG90JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0eXBlID0gcmVzb3VyY2VzLmdldEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcclxuICAgICAgICAgICAgZWxlbWVudFByb3BlcnR5ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGtub3duQXR0cmlidXRlID0gcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChrbm93bkF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gdHlwZS5hdHRyaWJ1dGVzW2tub3duQXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5kZWZhdWx0QmluZGluZ01vZGUgPSBwcm9wZXJ0eS5kZWZhdWx0QmluZGluZ01vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5mby5jb21tYW5kICYmICFpbmZvLmV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uY29tbWFuZCA9IHByb3BlcnR5Lmhhc09wdGlvbnMgPyAnb3B0aW9ucycgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmNvbW1hbmQgJiYgKGluZm8uY29tbWFuZCAhPT0gJ29wdGlvbnMnKSAmJiB0eXBlLnByaW1hcnlQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByaW1hcnlQcm9wZXJ0eSA9IHR5cGUucHJpbWFyeVByb3BlcnR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBpbmZvLmF0dHJOYW1lID0gcHJpbWFyeVByb3BlcnR5LmF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uZGVmYXVsdEJpbmRpbmdNb2RlID0gcHJpbWFyeVByb3BlcnR5LmRlZmF1bHRCaW5kaW5nTW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlbGVtZW50SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRQcm9wZXJ0eSA9IGVsZW1lbnRJbnN0cnVjdGlvbi50eXBlLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5mby5kZWZhdWx0QmluZGluZ01vZGUgPSBlbGVtZW50UHJvcGVydHkuZGVmYXVsdEJpbmRpbmdNb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50UHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uID0gYmluZGluZ0xhbmd1YWdlLmNyZWF0ZUF0dHJpYnV0ZUluc3RydWN0aW9uKHJlc291cmNlcywgbm9kZSwgaW5mbywgZWxlbWVudEluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uID0gYmluZGluZ0xhbmd1YWdlLmNyZWF0ZUF0dHJpYnV0ZUluc3RydWN0aW9uKHJlc291cmNlcywgbm9kZSwgaW5mbywgdW5kZWZpbmVkLCB0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5hbHRlcmVkQXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSByZXNvdXJjZXMuZ2V0QXR0cmlidXRlKGluc3RydWN0aW9uLmF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5kaXNjcmV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goaW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZ3VyZVByb3BlcnRpZXMoaW5zdHJ1Y3Rpb24sIHJlc291cmNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLmxpZnRzQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24ub3JpZ2luYWxBdHRyTmFtZSA9IG9yaWdpbmFsQXR0ck5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWZ0aW5nSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JJbnN0cnVjdGlvbnMucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRJbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luZm8uYXR0ck5hbWVdLnRhcmdldFByb3BlcnR5ID0gZWxlbWVudFByb3BlcnR5Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5zdHJ1Y3Rpb24uYXR0ck5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uID0gQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUoYXR0ck5hbWUsIHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShhdHRyTmFtZSldID0gYXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLmxpZnRzQ29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi5vcmlnaW5hbEF0dHJOYW1lID0gb3JpZ2luYWxBdHRyTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlmdGluZ0luc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JJbnN0cnVjdGlvbnMucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudEluc3RydWN0aW9uLmF0dHJpYnV0ZXNbYXR0ck5hbWVdID0gYXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaWZ0aW5nSW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgbGlmdGluZ0luc3RydWN0aW9uLnZpZXdGYWN0b3J5ID0gdmlld0ZhY3Rvcnk7XHJcbiAgICAgICAgICAgIG5vZGUgPSBsaWZ0aW5nSW5zdHJ1Y3Rpb24udHlwZS5jb21waWxlKHRoaXMsIHJlc291cmNlcywgbm9kZSwgbGlmdGluZ0luc3RydWN0aW9uLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgYXVUYXJnZXRJRCA9IG1ha2VJbnRvSW5zdHJ1Y3Rpb25UYXJnZXQobm9kZSk7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uc1thdVRhcmdldElEXSA9IFRhcmdldEluc3RydWN0aW9uLmxpZnRpbmcocGFyZW50SW5qZWN0b3JJZCwgbGlmdGluZ0luc3RydWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBza2lwQ29udGVudFByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb25zLmxlbmd0aCB8fCBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGluamVjdG9ySWQgPSBiZWhhdmlvckluc3RydWN0aW9ucy5sZW5ndGggPyBnZXROZXh0SW5qZWN0b3JJZCgpIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbiA9IGJlaGF2aW9ySW5zdHJ1Y3Rpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnR5cGUuY29tcGlsZSh0aGlzLCByZXNvdXJjZXMsIG5vZGUsIGluc3RydWN0aW9uLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaChpbnN0cnVjdGlvbi50eXBlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2tpcENvbnRlbnRQcm9jZXNzaW5nID0gc2tpcENvbnRlbnRQcm9jZXNzaW5nIHx8IGluc3RydWN0aW9uLnNraXBDb250ZW50UHJvY2Vzc2luZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5hdHRyVG9SZW1vdmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShleHByZXNzaW9uLmF0dHJUb1JlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXVUYXJnZXRJRCA9IG1ha2VJbnRvSW5zdHJ1Y3Rpb25UYXJnZXQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnNbYXVUYXJnZXRJRF0gPSBUYXJnZXRJbnN0cnVjdGlvbi5ub3JtYWwoaW5qZWN0b3JJZCwgcGFyZW50SW5qZWN0b3JJZCwgcHJvdmlkZXJzLCBiZWhhdmlvckluc3RydWN0aW9ucywgZXhwcmVzc2lvbnMsIGVsZW1lbnRJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNraXBDb250ZW50UHJvY2Vzc2luZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gdGhpcy5fY29tcGlsZU5vZGUoY3VycmVudENoaWxkLCByZXNvdXJjZXMsIGluc3RydWN0aW9ucywgbm9kZSwgaW5qZWN0b3JJZCB8fCBwYXJlbnRJbmplY3RvcklkLCB0YXJnZXRMaWdodERPTSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICB9O1xyXG4gICAgVmlld0NvbXBpbGVyLnByb3RvdHlwZS5fY29uZmlndXJlUHJvcGVydGllcyA9IGZ1bmN0aW9uIChpbnN0cnVjdGlvbiwgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBpbnN0cnVjdGlvbi50eXBlO1xyXG4gICAgICAgIHZhciBhdHRyTmFtZSA9IGluc3RydWN0aW9uLmF0dHJOYW1lO1xyXG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gaW5zdHJ1Y3Rpb24uYXR0cmlidXRlcztcclxuICAgICAgICB2YXIgcHJvcGVydHk7XHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgdmFyIGtub3duQXR0cmlidXRlID0gcmVzb3VyY2VzLm1hcEF0dHJpYnV0ZShhdHRyTmFtZSk7XHJcbiAgICAgICAgaWYgKGtub3duQXR0cmlidXRlICYmIGF0dHJOYW1lIGluIGF0dHJpYnV0ZXMgJiYga25vd25BdHRyaWJ1dGUgIT09IGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNba25vd25BdHRyaWJ1dGVdID0gYXR0cmlidXRlc1thdHRyTmFtZV07XHJcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW2F0dHJOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gdHlwZS5hdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnRhcmdldFByb3BlcnR5ID0gcHJvcGVydHkubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnRhcmdldFByb3BlcnR5ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBWaWV3Q29tcGlsZXI7XHJcbn0oKSk7XG5cbnZhciBWaWV3RW5naW5lSG9va3NSZXNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBWaWV3RW5naW5lSG9va3NSZXNvdXJjZSgpIHtcclxuICAgIH1cclxuICAgIFZpZXdFbmdpbmVIb29rc1Jlc291cmNlLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGNvbnRhaW5lci5nZXQodGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICBWaWV3RW5naW5lSG9va3NSZXNvdXJjZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAocmVnaXN0cnksIG5hbWUpIHtcclxuICAgICAgICByZWdpc3RyeS5yZWdpc3RlclZpZXdFbmdpbmVIb29rcyh0aGlzLmluc3RhbmNlKTtcclxuICAgIH07XHJcbiAgICBWaWV3RW5naW5lSG9va3NSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChjb250YWluZXIsIHRhcmdldCkgeyB9O1xyXG4gICAgVmlld0VuZ2luZUhvb2tzUmVzb3VyY2UuY29udmVudGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUuZW5kc1dpdGgoJ1ZpZXdFbmdpbmVIb29rcycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmlld0VuZ2luZUhvb2tzUmVzb3VyY2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXdFbmdpbmVIb29rc1Jlc291cmNlO1xyXG59KCkpO1xyXG5mdW5jdGlvbiB2aWV3RW5naW5lSG9va3ModGFyZ2V0KSB7XHJcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBuZXcgVmlld0VuZ2luZUhvb2tzUmVzb3VyY2UoKSwgdCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHRhcmdldCA/IGRlY28odGFyZ2V0KSA6IGRlY287XHJcbn1cblxudmFyIFJlc291cmNlTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlc291cmNlTW9kdWxlKG1vZHVsZUlkKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IG1vZHVsZUlkO1xyXG4gICAgICAgIHRoaXMubW9kdWxlSW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFpblJlc291cmNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlc291cmNlcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52aWV3U3RyYXRlZ3kgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25Mb2FkZWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubG9hZENvbnRleHQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgUmVzb3VyY2VNb2R1bGUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLm1haW5SZXNvdXJjZTtcclxuICAgICAgICB2YXIgcmVzb3VyY2VzID0gdGhpcy5yZXNvdXJjZXM7XHJcbiAgICAgICAgdmFyIHZzID0gdGhpcy52aWV3U3RyYXRlZ3k7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjdXJyZW50Lm1ldGFkYXRhLnZpZXdTdHJhdGVneSA9IHZzO1xyXG4gICAgICAgICAgICBjdXJyZW50LmluaXRpYWxpemUoY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzb3VyY2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IHJlc291cmNlc1tpXTtcclxuICAgICAgICAgICAgY3VycmVudC5tZXRhZGF0YS52aWV3U3RyYXRlZ3kgPSB2cztcclxuICAgICAgICAgICAgY3VycmVudC5pbml0aWFsaXplKGNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlc291cmNlTW9kdWxlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChyZWdpc3RyeSwgbmFtZSkge1xyXG4gICAgICAgIHZhciBtYWluID0gdGhpcy5tYWluUmVzb3VyY2U7XHJcbiAgICAgICAgdmFyIHJlc291cmNlcyA9IHRoaXMucmVzb3VyY2VzO1xyXG4gICAgICAgIGlmIChtYWluICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbWFpbi5yZWdpc3RlcihyZWdpc3RyeSwgbmFtZSk7XHJcbiAgICAgICAgICAgIG5hbWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXNvdXJjZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICByZXNvdXJjZXNbaV0ucmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpO1xyXG4gICAgICAgICAgICBuYW1lID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVzb3VyY2VNb2R1bGUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBsb2FkQ29udGV4dCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9uTG9hZGVkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRDb250ZXh0ID09PSBsb2FkQ29udGV4dCA/IFByb21pc2UucmVzb2x2ZSgpIDogdGhpcy5vbkxvYWRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1haW4gPSB0aGlzLm1haW5SZXNvdXJjZTtcclxuICAgICAgICB2YXIgcmVzb3VyY2VzID0gdGhpcy5yZXNvdXJjZXM7XHJcbiAgICAgICAgdmFyIGxvYWRzO1xyXG4gICAgICAgIGlmIChtYWluICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbG9hZHMgPSBuZXcgQXJyYXkocmVzb3VyY2VzLmxlbmd0aCArIDEpO1xyXG4gICAgICAgICAgICBsb2Fkc1swXSA9IG1haW4ubG9hZChjb250YWluZXIsIGxvYWRDb250ZXh0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzb3VyY2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxvYWRzW2kgKyAxXSA9IHJlc291cmNlc1tpXS5sb2FkKGNvbnRhaW5lciwgbG9hZENvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2FkcyA9IG5ldyBBcnJheShyZXNvdXJjZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzb3VyY2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxvYWRzW2ldID0gcmVzb3VyY2VzW2ldLmxvYWQoY29udGFpbmVyLCBsb2FkQ29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2FkQ29udGV4dCA9IGxvYWRDb250ZXh0O1xyXG4gICAgICAgIHRoaXMub25Mb2FkZWQgPSBQcm9taXNlLmFsbChsb2Fkcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub25Mb2FkZWQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc291cmNlTW9kdWxlO1xyXG59KCkpO1xyXG52YXIgUmVzb3VyY2VEZXNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgcmVzb3VyY2VUeXBlTWV0YSkge1xyXG4gICAgICAgIGlmICghcmVzb3VyY2VUeXBlTWV0YSkge1xyXG4gICAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhID0gbWV0YWRhdGEuZ2V0KG1ldGFkYXRhLnJlc291cmNlLCBleHBvcnRlZFZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZVR5cGVNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhID0gbmV3IEh0bWxCZWhhdmlvclJlc291cmNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID0gX2h5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCByZXNvdXJjZVR5cGVNZXRhLCBleHBvcnRlZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVzb3VyY2VUeXBlTWV0YSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZU1ldGEuZWxlbWVudE5hbWUgPSBfaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocmVzb3VyY2VUeXBlTWV0YS5hdHRyaWJ1dGVOYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9IF9oeXBoZW5hdGUoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvdXJjZVR5cGVNZXRhLmF0dHJpYnV0ZU5hbWUgPT09IG51bGwgJiYgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihrZXksIHJlc291cmNlVHlwZU1ldGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFyZXNvdXJjZVR5cGVNZXRhLm5hbWUpIHtcclxuICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YS5uYW1lID0gX2h5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gcmVzb3VyY2VUeXBlTWV0YTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gZXhwb3J0ZWRWYWx1ZTtcclxuICAgIH1cclxuICAgIFJlc291cmNlRGVzY3JpcHRpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5pbml0aWFsaXplKGNvbnRhaW5lciwgdGhpcy52YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgUmVzb3VyY2VEZXNjcmlwdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAocmVnaXN0cnksIG5hbWUpIHtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhLnJlZ2lzdGVyKHJlZ2lzdHJ5LCBuYW1lKTtcclxuICAgIH07XHJcbiAgICBSZXNvdXJjZURlc2NyaXB0aW9uLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgbG9hZENvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YS5sb2FkKGNvbnRhaW5lciwgdGhpcy52YWx1ZSwgbG9hZENvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNvdXJjZURlc2NyaXB0aW9uO1xyXG59KCkpO1xyXG52YXIgTW9kdWxlQW5hbHl6ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTW9kdWxlQW5hbHl6ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB9XHJcbiAgICBNb2R1bGVBbmFseXplci5wcm90b3R5cGUuZ2V0QW5hbHlzaXMgPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVttb2R1bGVJZF07XHJcbiAgICB9O1xyXG4gICAgTW9kdWxlQW5hbHl6ZXIucHJvdG90eXBlLmFuYWx5emUgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG1vZHVsZUluc3RhbmNlLCBtYWluUmVzb3VyY2VLZXkpIHtcclxuICAgICAgICB2YXIgbWFpblJlc291cmNlO1xyXG4gICAgICAgIHZhciBmYWxsYmFja1ZhbHVlO1xyXG4gICAgICAgIHZhciBmYWxsYmFja0tleTtcclxuICAgICAgICB2YXIgcmVzb3VyY2VUeXBlTWV0YTtcclxuICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgIHZhciBleHBvcnRlZFZhbHVlO1xyXG4gICAgICAgIHZhciByZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICB2YXIgY29udmVudGlvbmFsO1xyXG4gICAgICAgIHZhciB2cztcclxuICAgICAgICB2YXIgcmVzb3VyY2VNb2R1bGU7XHJcbiAgICAgICAgcmVzb3VyY2VNb2R1bGUgPSB0aGlzLmNhY2hlW21vZHVsZUlkXTtcclxuICAgICAgICBpZiAocmVzb3VyY2VNb2R1bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlTW9kdWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvdXJjZU1vZHVsZSA9IG5ldyBSZXNvdXJjZU1vZHVsZShtb2R1bGVJZCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZVttb2R1bGVJZF0gPSByZXNvdXJjZU1vZHVsZTtcclxuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZUluc3RhbmNlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIG1vZHVsZUluc3RhbmNlID0geyAnZGVmYXVsdCc6IG1vZHVsZUluc3RhbmNlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtYWluUmVzb3VyY2VLZXkpIHtcclxuICAgICAgICAgICAgbWFpblJlc291cmNlID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24obWFpblJlc291cmNlS2V5LCBtb2R1bGVJbnN0YW5jZVttYWluUmVzb3VyY2VLZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChrZXkgaW4gbW9kdWxlSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgZXhwb3J0ZWRWYWx1ZSA9IG1vZHVsZUluc3RhbmNlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09IG1haW5SZXNvdXJjZUtleSB8fCB0eXBlb2YgZXhwb3J0ZWRWYWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSA9IG1ldGFkYXRhLmdldChtZXRhZGF0YS5yZXNvdXJjZSwgZXhwb3J0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VUeXBlTWV0YSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgVmlld1Jlc291cmNlcy5jb252ZW50aW9uKGV4cG9ydGVkVmFsdWUsIHJlc291cmNlVHlwZU1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhLmF0dHJpYnV0ZU5hbWUgPT09IG51bGwgJiYgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5jb252ZW50aW9uKGtleSwgcmVzb3VyY2VUeXBlTWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZVR5cGVNZXRhLmF0dHJpYnV0ZU5hbWUgPT09IG51bGwgJiYgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID0gX2h5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghbWFpblJlc291cmNlICYmIHJlc291cmNlVHlwZU1ldGEgaW5zdGFuY2VvZiBIdG1sQmVoYXZpb3JSZXNvdXJjZSAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpblJlc291cmNlID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCBleHBvcnRlZFZhbHVlLCByZXNvdXJjZVR5cGVNZXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgcmVzb3VyY2VUeXBlTWV0YSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZpZXdTdHJhdGVneS5kZWNvcmF0ZXMoZXhwb3J0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZzID0gZXhwb3J0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChleHBvcnRlZFZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWdpc3RyeUVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICB2cyA9IG5ldyBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5KG1vZHVsZUlkLCBleHBvcnRlZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb252ZW50aW9uYWwgPSBWaWV3UmVzb3VyY2VzLmNvbnZlbnRpb24oZXhwb3J0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udmVudGlvbmFsLmVsZW1lbnROYW1lICE9PSBudWxsICYmICFtYWluUmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblJlc291cmNlID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCBleHBvcnRlZFZhbHVlLCBjb252ZW50aW9uYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCBleHBvcnRlZFZhbHVlLCBjb252ZW50aW9uYWwpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBjb252ZW50aW9uYWwsIGV4cG9ydGVkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29udmVudGlvbmFsID0gSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnZlbnRpb25hbC5lbGVtZW50TmFtZSAhPT0gbnVsbCAmJiAhbWFpblJlc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5SZXNvdXJjZSA9IG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgY29udmVudGlvbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5wdXNoKG5ldyBSZXNvdXJjZURlc2NyaXB0aW9uKGtleSwgZXhwb3J0ZWRWYWx1ZSwgY29udmVudGlvbmFsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLmRlZmluZShtZXRhZGF0YS5yZXNvdXJjZSwgY29udmVudGlvbmFsLCBleHBvcnRlZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnZlbnRpb25hbCA9IFZhbHVlQ29udmVydGVyUmVzb3VyY2UuY29udmVudGlvbihrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgVmlld0VuZ2luZUhvb2tzUmVzb3VyY2UuY29udmVudGlvbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2gobmV3IFJlc291cmNlRGVzY3JpcHRpb24oa2V5LCBleHBvcnRlZFZhbHVlLCBjb252ZW50aW9uYWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEucmVzb3VyY2UsIGNvbnZlbnRpb25hbCwgZXhwb3J0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZmFsbGJhY2tWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrVmFsdWUgPSBleHBvcnRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrS2V5ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbWFpblJlc291cmNlICYmIGZhbGxiYWNrVmFsdWUpIHtcclxuICAgICAgICAgICAgbWFpblJlc291cmNlID0gbmV3IFJlc291cmNlRGVzY3JpcHRpb24oZmFsbGJhY2tLZXksIGZhbGxiYWNrVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvdXJjZU1vZHVsZS5tb2R1bGVJbnN0YW5jZSA9IG1vZHVsZUluc3RhbmNlO1xyXG4gICAgICAgIHJlc291cmNlTW9kdWxlLm1haW5SZXNvdXJjZSA9IG1haW5SZXNvdXJjZTtcclxuICAgICAgICByZXNvdXJjZU1vZHVsZS5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgICAgICAgcmVzb3VyY2VNb2R1bGUudmlld1N0cmF0ZWd5ID0gdnM7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlTW9kdWxlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNb2R1bGVBbmFseXplcjtcclxufSgpKTtcblxudmFyIGxvZ2dlciA9IExvZ01hbmFnZXIuZ2V0TG9nZ2VyKCd0ZW1wbGF0aW5nJyk7XHJcbmZ1bmN0aW9uIGVuc3VyZVJlZ2lzdHJ5RW50cnkobG9hZGVyLCB1cmxPclJlZ2lzdHJ5RW50cnkpIHtcclxuICAgIGlmICh1cmxPclJlZ2lzdHJ5RW50cnkgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybE9yUmVnaXN0cnlFbnRyeSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG9hZGVyLmxvYWRUZW1wbGF0ZSh1cmxPclJlZ2lzdHJ5RW50cnkpO1xyXG59XHJcbnZhciBQcm94eVZpZXdGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFByb3h5Vmlld0ZhY3RvcnkocHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh4KSB7IHJldHVybiBfdGhpcy52aWV3RmFjdG9yeSA9IHg7IH0pO1xyXG4gICAgfVxyXG4gICAgUHJveHlWaWV3RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgYmluZGluZ0NvbnRleHQsIGNyZWF0ZUluc3RydWN0aW9uLCBlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKGNvbnRhaW5lciwgYmluZGluZ0NvbnRleHQsIGNyZWF0ZUluc3RydWN0aW9uLCBlbGVtZW50KTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJveHlWaWV3RmFjdG9yeS5wcm90b3R5cGUsIFwiaXNDYWNoaW5nXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld0ZhY3RvcnkuaXNDYWNoaW5nO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFByb3h5Vmlld0ZhY3RvcnkucHJvdG90eXBlLnNldENhY2hlU2l6ZSA9IGZ1bmN0aW9uIChzaXplLCBkb05vdE92ZXJyaWRlSWZBbHJlYWR5U2V0KSB7XHJcbiAgICAgICAgdGhpcy52aWV3RmFjdG9yeS5zZXRDYWNoZVNpemUoc2l6ZSwgZG9Ob3RPdmVycmlkZUlmQWxyZWFkeVNldCk7XHJcbiAgICB9O1xyXG4gICAgUHJveHlWaWV3RmFjdG9yeS5wcm90b3R5cGUuZ2V0Q2FjaGVkVmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3RmFjdG9yeS5nZXRDYWNoZWRWaWV3KCk7XHJcbiAgICB9O1xyXG4gICAgUHJveHlWaWV3RmFjdG9yeS5wcm90b3R5cGUucmV0dXJuVmlld1RvQ2FjaGUgPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHRoaXMudmlld0ZhY3RvcnkucmV0dXJuVmlld1RvQ2FjaGUodmlldyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByb3h5Vmlld0ZhY3Rvcnk7XHJcbn0oKSk7XHJcbnZhciBhdVNsb3RCZWhhdmlvciA9IG51bGw7XHJcbnZhciBWaWV3RW5naW5lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXdFbmdpbmUobG9hZGVyLCBjb250YWluZXIsIHZpZXdDb21waWxlciwgbW9kdWxlQW5hbHl6ZXIsIGFwcFJlc291cmNlcykge1xyXG4gICAgICAgIHRoaXMubG9hZGVyID0gbG9hZGVyO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMudmlld0NvbXBpbGVyID0gdmlld0NvbXBpbGVyO1xyXG4gICAgICAgIHRoaXMubW9kdWxlQW5hbHl6ZXIgPSBtb2R1bGVBbmFseXplcjtcclxuICAgICAgICB0aGlzLmFwcFJlc291cmNlcyA9IGFwcFJlc291cmNlcztcclxuICAgICAgICB0aGlzLl9wbHVnaW5NYXAgPSB7fTtcclxuICAgICAgICBpZiAoYXVTbG90QmVoYXZpb3IgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXVTbG90QmVoYXZpb3IgPSBuZXcgSHRtbEJlaGF2aW9yUmVzb3VyY2UoKTtcclxuICAgICAgICAgICAgYXVTbG90QmVoYXZpb3IuYXR0cmlidXRlTmFtZSA9ICdhdS1zbG90JztcclxuICAgICAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBhdVNsb3RCZWhhdmlvciwgU2xvdEN1c3RvbUF0dHJpYnV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF1U2xvdEJlaGF2aW9yLmluaXRpYWxpemUoY29udGFpbmVyLCBTbG90Q3VzdG9tQXR0cmlidXRlKTtcclxuICAgICAgICBhdVNsb3RCZWhhdmlvci5yZWdpc3RlcihhcHBSZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgVmlld0VuZ2luZS5pbmplY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtMb2FkZXIsIENvbnRhaW5lciwgVmlld0NvbXBpbGVyLCBNb2R1bGVBbmFseXplciwgVmlld1Jlc291cmNlc107XHJcbiAgICB9O1xyXG4gICAgVmlld0VuZ2luZS5wcm90b3R5cGUuYWRkUmVzb3VyY2VQbHVnaW4gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uLCBpbXBsZW1lbnRhdGlvbikge1xyXG4gICAgICAgIHZhciBuYW1lID0gZXh0ZW5zaW9uLnJlcGxhY2UoJy4nLCAnJykgKyAnLXJlc291cmNlLXBsdWdpbic7XHJcbiAgICAgICAgdGhpcy5fcGx1Z2luTWFwW2V4dGVuc2lvbl0gPSBuYW1lO1xyXG4gICAgICAgIHRoaXMubG9hZGVyLmFkZFBsdWdpbihuYW1lLCBpbXBsZW1lbnRhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgVmlld0VuZ2luZS5wcm90b3R5cGUubG9hZFZpZXdGYWN0b3J5ID0gZnVuY3Rpb24gKHVybE9yUmVnaXN0cnlFbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBsb2FkQ29udGV4dCA9IGxvYWRDb250ZXh0IHx8IG5ldyBSZXNvdXJjZUxvYWRDb250ZXh0KCk7XHJcbiAgICAgICAgcmV0dXJuIGVuc3VyZVJlZ2lzdHJ5RW50cnkodGhpcy5sb2FkZXIsIHVybE9yUmVnaXN0cnlFbnRyeSkudGhlbihmdW5jdGlvbiAocmVnaXN0cnlFbnRyeSkge1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gcmVnaXN0cnlFbnRyeS5hZGRyZXNzO1xyXG4gICAgICAgICAgICBpZiAocmVnaXN0cnlFbnRyeS5vblJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxvYWRDb250ZXh0Lmhhc0RlcGVuZGVuY3kodXJsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRDb250ZXh0LmFkZERlcGVuZGVuY3kodXJsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnaXN0cnlFbnRyeS5vblJlYWR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5RW50cnkudGVtcGxhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnaXN0cnlFbnRyeS5vblJlYWR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgUHJveHlWaWV3RmFjdG9yeShyZWdpc3RyeUVudHJ5Lm9uUmVhZHkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2FkQ29udGV4dC5hZGREZXBlbmRlbmN5KHVybCk7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5RW50cnkub25SZWFkeSA9IF90aGlzLmxvYWRUZW1wbGF0ZVJlc291cmNlcyhyZWdpc3RyeUVudHJ5LCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0LCB0YXJnZXQpLnRoZW4oZnVuY3Rpb24gKHJlc291cmNlcykge1xyXG4gICAgICAgICAgICAgICAgcmVnaXN0cnlFbnRyeS5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cnlFbnRyeS50ZW1wbGF0ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RyeUVudHJ5LmZhY3RvcnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXdGYWN0b3J5ID0gX3RoaXMudmlld0NvbXBpbGVyLmNvbXBpbGUocmVnaXN0cnlFbnRyeS50ZW1wbGF0ZSwgcmVzb3VyY2VzLCBjb21waWxlSW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5RW50cnkuZmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5RW50cnkub25SZWFkeTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWaWV3RW5naW5lLnByb3RvdHlwZS5sb2FkVGVtcGxhdGVSZXNvdXJjZXMgPSBmdW5jdGlvbiAocmVnaXN0cnlFbnRyeSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIHJlc291cmNlcyA9IG5ldyBWaWV3UmVzb3VyY2VzKHRoaXMuYXBwUmVzb3VyY2VzLCByZWdpc3RyeUVudHJ5LmFkZHJlc3MpO1xyXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSByZWdpc3RyeUVudHJ5LmRlcGVuZGVuY2llcztcclxuICAgICAgICB2YXIgaW1wb3J0SWRzO1xyXG4gICAgICAgIHZhciBuYW1lcztcclxuICAgICAgICBjb21waWxlSW5zdHJ1Y3Rpb24gPSBjb21waWxlSW5zdHJ1Y3Rpb24gfHwgVmlld0NvbXBpbGVJbnN0cnVjdGlvbi5ub3JtYWw7XHJcbiAgICAgICAgaWYgKGRlcGVuZGVuY2llcy5sZW5ndGggPT09IDAgJiYgIWNvbXBpbGVJbnN0cnVjdGlvbi5hc3NvY2lhdGVkTW9kdWxlSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNvdXJjZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbXBvcnRJZHMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnNyYzsgfSk7XHJcbiAgICAgICAgbmFtZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lm5hbWU7IH0pO1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcImltcG9ydGluZyByZXNvdXJjZXMgZm9yIFwiLmNvbmNhdChyZWdpc3RyeUVudHJ5LmFkZHJlc3MpLCBpbXBvcnRJZHMpO1xyXG4gICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXdNb2RlbFJlcXVpcmVzID0gbWV0YWRhdGEuZ2V0KFZpZXdFbmdpbmUudmlld01vZGVsUmVxdWlyZU1ldGFkYXRhS2V5LCB0YXJnZXQpO1xyXG4gICAgICAgICAgICBpZiAodmlld01vZGVsUmVxdWlyZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZUltcG9ydENvdW50ID0gaW1wb3J0SWRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHZpZXdNb2RlbFJlcXVpcmVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gdmlld01vZGVsUmVxdWlyZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltcG9ydElkID0gdHlwZW9mIHJlcSA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IE9yaWdpbi5nZXQocmVxKS5tb2R1bGVJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlbGF0aXZlVG9GaWxlKHJlcS5zcmMgfHwgcmVxLCByZWdpc3RyeUVudHJ5LmFkZHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBvcnRJZHMuaW5kZXhPZihpbXBvcnRJZCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydElkcy5wdXNoKGltcG9ydElkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChyZXEuYXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhcImltcG9ydGluZyBWaWV3TW9kZWwgcmVzb3VyY2VzIGZvciBcIi5jb25jYXQoY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCksIGltcG9ydElkcy5zbGljZSh0ZW1wbGF0ZUltcG9ydENvdW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0Vmlld1Jlc291cmNlcyhpbXBvcnRJZHMsIG5hbWVzLCByZXNvdXJjZXMsIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLmltcG9ydFZpZXdNb2RlbFJlc291cmNlID0gZnVuY3Rpb24gKG1vZHVsZUltcG9ydCwgbW9kdWxlTWVtYmVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXIubG9hZE1vZHVsZShtb2R1bGVJbXBvcnQpLnRoZW4oZnVuY3Rpb24gKHZpZXdNb2RlbE1vZHVsZSkge1xyXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZElkID0gT3JpZ2luLmdldCh2aWV3TW9kZWxNb2R1bGUpLm1vZHVsZUlkO1xyXG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VNb2R1bGUgPSBfdGhpcy5tb2R1bGVBbmFseXplci5hbmFseXplKG5vcm1hbGl6ZWRJZCwgdmlld01vZGVsTW9kdWxlLCBtb2R1bGVNZW1iZXIpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc291cmNlTW9kdWxlLm1haW5SZXNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdmlldyBtb2RlbCBmb3VuZCBpbiBtb2R1bGUgXFxcIlwiLmNvbmNhdChtb2R1bGVJbXBvcnQsIFwiXFxcIi5cIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc291cmNlTW9kdWxlLmluaXRpYWxpemUoX3RoaXMuY29udGFpbmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlTW9kdWxlLm1haW5SZXNvdXJjZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWaWV3RW5naW5lLnByb3RvdHlwZS5pbXBvcnRWaWV3UmVzb3VyY2VzID0gZnVuY3Rpb24gKG1vZHVsZUlkcywgbmFtZXMsIHJlc291cmNlcywgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgbG9hZENvbnRleHQgPSBsb2FkQ29udGV4dCB8fCBuZXcgUmVzb3VyY2VMb2FkQ29udGV4dCgpO1xyXG4gICAgICAgIGNvbXBpbGVJbnN0cnVjdGlvbiA9IGNvbXBpbGVJbnN0cnVjdGlvbiB8fCBWaWV3Q29tcGlsZUluc3RydWN0aW9uLm5vcm1hbDtcclxuICAgICAgICBtb2R1bGVJZHMgPSBtb2R1bGVJZHMubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiBfdGhpcy5fYXBwbHlMb2FkZXJQbHVnaW4oeCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5sb2FkQWxsTW9kdWxlcyhtb2R1bGVJZHMpLnRoZW4oZnVuY3Rpb24gKGltcG9ydHMpIHtcclxuICAgICAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgICAgIHZhciBpaTtcclxuICAgICAgICAgICAgdmFyIGFuYWx5c2lzO1xyXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZElkO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIGFzc29jaWF0ZWRNb2R1bGU7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5jb250YWluZXI7XHJcbiAgICAgICAgICAgIHZhciBtb2R1bGVBbmFseXplciA9IF90aGlzLm1vZHVsZUFuYWx5emVyO1xyXG4gICAgICAgICAgICB2YXIgYWxsQW5hbHlzaXMgPSBuZXcgQXJyYXkoaW1wb3J0cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGltcG9ydHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGltcG9ydHNbaV07XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkSWQgPSBPcmlnaW4uZ2V0KGN1cnJlbnQpLm1vZHVsZUlkO1xyXG4gICAgICAgICAgICAgICAgYW5hbHlzaXMgPSBtb2R1bGVBbmFseXplci5hbmFseXplKG5vcm1hbGl6ZWRJZCwgY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICBhbmFseXNpcy5pbml0aWFsaXplKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBhbmFseXNpcy5yZWdpc3RlcihyZXNvdXJjZXMsIG5hbWVzW2ldKTtcclxuICAgICAgICAgICAgICAgIGFsbEFuYWx5c2lzW2ldID0gYW5hbHlzaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbXBpbGVJbnN0cnVjdGlvbi5hc3NvY2lhdGVkTW9kdWxlSWQpIHtcclxuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRNb2R1bGUgPSBtb2R1bGVBbmFseXplci5nZXRBbmFseXNpcyhjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChhc3NvY2lhdGVkTW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZE1vZHVsZS5yZWdpc3RlcihyZXNvdXJjZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gYWxsQW5hbHlzaXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgYWxsQW5hbHlzaXNbaV0gPSBhbGxBbmFseXNpc1tpXS5sb2FkKGNvbnRhaW5lciwgbG9hZENvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhbGxBbmFseXNpcykudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvdXJjZXM7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZpZXdFbmdpbmUucHJvdG90eXBlLl9hcHBseUxvYWRlclBsdWdpbiA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGlkLmxhc3RJbmRleE9mKCcuJyk7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgZXh0ID0gaWQuc3Vic3RyaW5nKGluZGV4KTtcclxuICAgICAgICAgICAgdmFyIHBsdWdpbk5hbWUgPSB0aGlzLl9wbHVnaW5NYXBbZXh0XTtcclxuICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5hcHBseVBsdWdpblRvVXJsKGlkLCBwbHVnaW5OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgfTtcclxuICAgIFZpZXdFbmdpbmUudmlld01vZGVsUmVxdWlyZU1ldGFkYXRhS2V5ID0gJ2F1cmVsaWE6dmlldy1tb2RlbC1yZXF1aXJlJztcclxuICAgIHJldHVybiBWaWV3RW5naW5lO1xyXG59KCkpO1xuXG52YXIgQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKGJlaGF2aW9yLCBpbnN0cnVjdGlvbiwgdmlld01vZGVsLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmJlaGF2aW9yID0gYmVoYXZpb3I7XHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uO1xyXG4gICAgICAgIHRoaXMudmlld01vZGVsID0gdmlld01vZGVsO1xyXG4gICAgICAgIHRoaXMuaXNBdHRhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudmlldyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50RXZlbnRzID0gY29udGFpbmVyLmVsZW1lbnRFdmVudHMgfHwgbnVsbDtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXJMb29rdXAgPSBiZWhhdmlvci5vYnNlcnZlckxvY2F0b3IuZ2V0T3JDcmVhdGVPYnNlcnZlcnNMb29rdXAodmlld01vZGVsKTtcclxuICAgICAgICB2YXIgaGFuZGxlc0JpbmQgPSBiZWhhdmlvci5oYW5kbGVzQmluZDtcclxuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGluc3RydWN0aW9uLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgdmFyIGJvdW5kUHJvcGVydGllcyA9IHRoaXMuYm91bmRQcm9wZXJ0aWVzID0gW107XHJcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBiZWhhdmlvci5wcm9wZXJ0aWVzO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICBiZWhhdmlvci5fZW5zdXJlUHJvcGVydGllc0RlZmluZWQodmlld01vZGVsLCBvYnNlcnZlckxvb2t1cCk7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgcHJvcGVydGllc1tpXS5faW5pdGlhbGl6ZSh2aWV3TW9kZWwsIG9ic2VydmVyTG9va3VwLCBhdHRyaWJ1dGVzLCBoYW5kbGVzQmluZCwgYm91bmRQcm9wZXJ0aWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5jcmVhdGVkID0gZnVuY3Rpb24gKG93bmluZ1ZpZXcpIHtcclxuICAgICAgICBpZiAodGhpcy5iZWhhdmlvci5oYW5kbGVzQ3JlYXRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5jcmVhdGVkKG93bmluZ1ZpZXcsIHRoaXMudmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmF1dG9tYXRlID0gZnVuY3Rpb24gKG92ZXJyaWRlQ29udGV4dCwgb3duaW5nVmlldykge1xyXG4gICAgICAgIHRoaXMudmlldy5iaW5kaW5nQ29udGV4dCA9IHRoaXMudmlld01vZGVsO1xyXG4gICAgICAgIHRoaXMudmlldy5vdmVycmlkZUNvbnRleHQgPSBvdmVycmlkZUNvbnRleHQgfHwgY3JlYXRlT3ZlcnJpZGVDb250ZXh0KHRoaXMudmlld01vZGVsKTtcclxuICAgICAgICB0aGlzLnZpZXcuX2lzVXNlckNvbnRyb2xsZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmJlaGF2aW9yLmhhbmRsZXNDcmVhdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsLmNyZWF0ZWQob3duaW5nVmlldyB8fCBudWxsLCB0aGlzLnZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJpbmQodGhpcy52aWV3KTtcclxuICAgIH07XHJcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHNraXBTZWxmU3Vic2NyaWJlciA9IHRoaXMuYmVoYXZpb3IuaGFuZGxlc0JpbmQ7XHJcbiAgICAgICAgdmFyIGJvdW5kUHJvcGVydGllcyA9IHRoaXMuYm91bmRQcm9wZXJ0aWVzO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgeDtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXI7XHJcbiAgICAgICAgdmFyIHNlbGZTdWJzY3JpYmVyO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGUgPT09IHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBib3VuZFByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICB4ID0gYm91bmRQcm9wZXJ0aWVzW2ldO1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IHgub2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgIHNlbGZTdWJzY3JpYmVyID0gb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXI7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLnB1Ymxpc2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHNraXBTZWxmU3Vic2NyaWJlcikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHguYmluZGluZy5iaW5kKHNjb3BlKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY2FsbCgpO1xyXG4gICAgICAgICAgICBvYnNlcnZlci5wdWJsaXNoaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuc2VsZlN1YnNjcmliZXIgPSBzZWxmU3Vic2NyaWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICBpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChza2lwU2VsZlN1YnNjcmliZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy52aWV3TW9kZWxTY29wZSA9IHNjb3BlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbCA9PT0gc2NvcGUub3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZUNvbnRleHQgPSBzY29wZS5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pbnN0cnVjdGlvbi5pbmhlcml0QmluZGluZ0NvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZU92ZXJyaWRlQ29udGV4dCh0aGlzLnZpZXdNb2RlbCwgc2NvcGUub3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZU92ZXJyaWRlQ29udGV4dCh0aGlzLnZpZXdNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZUNvbnRleHQuX19wYXJlbnRPdmVycmlkZUNvbnRleHQgPSBzY29wZS5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy52aWV3LmJpbmQodGhpcy52aWV3TW9kZWwsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNraXBTZWxmU3Vic2NyaWJlcikge1xyXG4gICAgICAgICAgICBvdmVycmlkZUNvbnRleHQgPSBzY29wZS5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgICAgIGlmIChzY29wZS5vdmVycmlkZUNvbnRleHQuX19wYXJlbnRPdmVycmlkZUNvbnRleHQgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgJiYgdGhpcy52aWV3TW9kZWwudmlld0ZhY3RvcnkgJiYgdGhpcy52aWV3TW9kZWwudmlld0ZhY3RvcnkuZmFjdG9yeUNyZWF0ZUluc3RydWN0aW9uLnBhcnRSZXBsYWNlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlQ29udGV4dCA9IE9iamVjdC5hc3NpZ24oe30sIHNjb3BlLm92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZUNvbnRleHQucGFyZW50T3ZlcnJpZGVDb250ZXh0ID0gc2NvcGUub3ZlcnJpZGVDb250ZXh0Ll9fcGFyZW50T3ZlcnJpZGVDb250ZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsLmJpbmQoc2NvcGUuYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIHZhciBib3VuZFByb3BlcnRpZXMgPSB0aGlzLmJvdW5kUHJvcGVydGllcztcclxuICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHZhciBpaSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2NvcGUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcudW5iaW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYmVoYXZpb3IuaGFuZGxlc1VuYmluZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwudW5iaW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudEV2ZW50cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50RXZlbnRzLmRpc3Bvc2VBbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGJvdW5kUHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBib3VuZFByb3BlcnRpZXNbaV0uYmluZGluZy51bmJpbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5hdHRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0F0dGFjaGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0F0dGFjaGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5iZWhhdmlvci5oYW5kbGVzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwuYXR0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudmlldyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcuYXR0YWNoZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuZGV0YWNoZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlldyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmRldGFjaGVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYmVoYXZpb3IuaGFuZGxlc0RldGFjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5kZXRhY2hlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb250cm9sbGVyO1xyXG59KCkpO1xuXG52YXIgbGFzdFByb3ZpZGVySWQgPSAwO1xyXG5mdW5jdGlvbiBuZXh0UHJvdmlkZXJJZCgpIHtcclxuICAgIHJldHVybiArK2xhc3RQcm92aWRlcklkO1xyXG59XHJcbmZ1bmN0aW9uIGRvUHJvY2Vzc0NvbnRlbnQoKSB7IHJldHVybiB0cnVlOyB9XHJcbmZ1bmN0aW9uIGRvUHJvY2Vzc0F0dHJpYnV0ZXMoKSB7IH1cclxudmFyIEh0bWxCZWhhdmlvclJlc291cmNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0bWxCZWhhdmlvclJlc291cmNlKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudE5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVEZWZhdWx0QmluZGluZ01vZGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5saWZ0c0NvbnRlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRhcmdldFNoYWRvd0RPTSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2hhZG93RE9NT3B0aW9ucyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzQXR0cmlidXRlcyA9IGRvUHJvY2Vzc0F0dHJpYnV0ZXM7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzQ29udGVudCA9IGRvUHJvY2Vzc0NvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy51c2VzU2hhZG93RE9NID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGlsZEJpbmRpbmdzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhhc0R5bmFtaWNPcHRpb25zID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJsZXNzID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gW107XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcmltYXJ5UHJvcGVydHkgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBleGlzdGluZykge1xyXG4gICAgICAgIHZhciBiZWhhdmlvcjtcclxuICAgICAgICBpZiAobmFtZS5lbmRzV2l0aCgnQ3VzdG9tQXR0cmlidXRlJykpIHtcclxuICAgICAgICAgICAgYmVoYXZpb3IgPSBleGlzdGluZyB8fCBuZXcgSHRtbEJlaGF2aW9yUmVzb3VyY2UoKTtcclxuICAgICAgICAgICAgYmVoYXZpb3IuYXR0cmlidXRlTmFtZSA9IF9oeXBoZW5hdGUobmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxNSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmFtZS5lbmRzV2l0aCgnQ3VzdG9tRWxlbWVudCcpKSB7XHJcbiAgICAgICAgICAgIGJlaGF2aW9yID0gZXhpc3RpbmcgfHwgbmV3IEh0bWxCZWhhdmlvclJlc291cmNlKCk7XHJcbiAgICAgICAgICAgIGJlaGF2aW9yLmVsZW1lbnROYW1lID0gX2h5cGhlbmF0ZShuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCAtIDEzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiZWhhdmlvcjtcclxuICAgIH07XHJcbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuYWRkQ2hpbGRCaW5kaW5nID0gZnVuY3Rpb24gKGJlaGF2aW9yKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRCaW5kaW5ncyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkQmluZGluZ3MgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGlsZEJpbmRpbmdzLnB1c2goYmVoYXZpb3IpO1xyXG4gICAgfTtcclxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIHByb3RvID0gdGFyZ2V0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHRoaXMucHJvcGVydGllcztcclxuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHRoaXMuYXR0cmlidXRlTmFtZTtcclxuICAgICAgICB2YXIgYXR0cmlidXRlRGVmYXVsdEJpbmRpbmdNb2RlID0gdGhpcy5hdHRyaWJ1dGVEZWZhdWx0QmluZGluZ01vZGU7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIHZhciBjdXJyZW50O1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRhcmdldC5fX3Byb3ZpZGVySWRfXyA9IG5leHRQcm92aWRlcklkKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBjb250YWluZXIuZ2V0KE9ic2VydmVyTG9jYXRvcik7XHJcbiAgICAgICAgdGhpcy50YXNrUXVldWUgPSBjb250YWluZXIuZ2V0KFRhc2tRdWV1ZSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy51c2VzU2hhZG93RE9NID0gdGhpcy50YXJnZXRTaGFkb3dET00gJiYgRkVBVFVSRS5zaGFkb3dET007XHJcbiAgICAgICAgdGhpcy5oYW5kbGVzQ3JlYXRlZCA9ICgnY3JlYXRlZCcgaW4gcHJvdG8pO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlc0JpbmQgPSAoJ2JpbmQnIGluIHByb3RvKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXNVbmJpbmQgPSAoJ3VuYmluZCcgaW4gcHJvdG8pO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlc0F0dGFjaGVkID0gKCdhdHRhY2hlZCcgaW4gcHJvdG8pO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlc0RldGFjaGVkID0gKCdkZXRhY2hlZCcgaW4gcHJvdG8pO1xyXG4gICAgICAgIHRoaXMuaHRtbE5hbWUgPSB0aGlzLmVsZW1lbnROYW1lIHx8IHRoaXMuYXR0cmlidXRlTmFtZTtcclxuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG5ldyBCaW5kYWJsZVByb3BlcnR5KHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUhhbmRsZXI6ICd2YWx1ZUNoYW5nZWQnIGluIHByb3RvID8gJ3ZhbHVlQ2hhbmdlZCcgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QmluZGluZ01vZGU6IGF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZVxyXG4gICAgICAgICAgICAgICAgfSkucmVnaXN0ZXJXaXRoKHRhcmdldCwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudCA9IHByb3BlcnRpZXNbMF07XHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMSAmJiBjdXJyZW50Lm5hbWUgPT09ICd2YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuaXNEeW5hbWljID0gY3VycmVudC5oYXNPcHRpb25zID0gdGhpcy5oYXNEeW5hbWljT3B0aW9ucztcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuZGVmaW5lT24odGFyZ2V0LCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllc1tpXS5kZWZpbmVPbih0YXJnZXQsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLnByaW1hcnlQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmltYXJ5UHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgYmluZGFibGUgcHJvcGVydHkgb24gYSBjdXN0b20gZWxlbWVudCBjYW4gYmUgZGVmaW5lZCBhcyB0aGUgZGVmYXVsdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpbWFyeVByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV3IEJpbmRhYmxlUHJvcGVydHkoe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd2YWx1ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGFuZGxlcjogJ3ZhbHVlQ2hhbmdlZCcgaW4gcHJvdG8gPyAndmFsdWVDaGFuZ2VkJyA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBhdHRyaWJ1dGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRCaW5kaW5nTW9kZTogYXR0cmlidXRlRGVmYXVsdEJpbmRpbmdNb2RlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuaGFzT3B0aW9ucyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnJlZ2lzdGVyV2l0aCh0YXJnZXQsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1tpXS5kZWZpbmVPbih0YXJnZXQsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2NvcHlJbmhlcml0ZWRQcm9wZXJ0aWVzKGNvbnRhaW5lciwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHJlZ2lzdHJ5LCBuYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVOYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyQXR0cmlidXRlKG5hbWUgfHwgdGhpcy5hdHRyaWJ1dGVOYW1lLCB0aGlzLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmFsaWFzZXMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWFzZXNcclxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RyeS5yZWdpc3RlckF0dHJpYnV0ZShhbGlhcywgX3RoaXMsIF90aGlzLmF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVnaXN0cnkucmVnaXN0ZXJFbGVtZW50KG5hbWUgfHwgdGhpcy5lbGVtZW50TmFtZSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5hbGlhc2VzID0gZnVuY3Rpb24gKGFsaWFzZXMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9O1xyXG4gICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCB0YXJnZXQsIGxvYWRDb250ZXh0LCB2aWV3U3RyYXRlZ3ksIHRyYW5zaWVudFZpZXcpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvcHRpb25zO1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnROYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZpZXdTdHJhdGVneSA9IGNvbnRhaW5lci5nZXQoVmlld0xvY2F0b3IpLmdldFZpZXdTdHJhdGVneSh2aWV3U3RyYXRlZ3kgfHwgdGhpcy52aWV3U3RyYXRlZ3kgfHwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IG5ldyBWaWV3Q29tcGlsZUluc3RydWN0aW9uKHRoaXMudGFyZ2V0U2hhZG93RE9NLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKCF2aWV3U3RyYXRlZ3kubW9kdWxlSWQpIHtcclxuICAgICAgICAgICAgICAgIHZpZXdTdHJhdGVneS5tb2R1bGVJZCA9IE9yaWdpbi5nZXQodGFyZ2V0KS5tb2R1bGVJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmlld1N0cmF0ZWd5XHJcbiAgICAgICAgICAgICAgICAubG9hZFZpZXdGYWN0b3J5KGNvbnRhaW5lci5nZXQoVmlld0VuZ2luZSksIG9wdGlvbnMsIGxvYWRDb250ZXh0LCB0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmlld0ZhY3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdHJhbnNpZW50VmlldyB8fCAhX3RoaXMudmlld0ZhY3RvcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdGYWN0b3J5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuY29tcGlsZSA9IGZ1bmN0aW9uIChjb21waWxlciwgcmVzb3VyY2VzLCBub2RlLCBpbnN0cnVjdGlvbiwgcGFyZW50Tm9kZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmxpZnRzQ29udGVudCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RydWN0aW9uLnZpZXdGYWN0b3J5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBET00uY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IERPTS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVTaXplID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXctY2FjaGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3BhcnQnKTtcclxuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGluc3RydWN0aW9uLm9yaWdpbmFsQXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgRE9NLnJlcGxhY2VOb2RlKHRlbXBsYXRlLCBub2RlLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkgPSBjb21waWxlci5jb21waWxlKGZyYWdtZW50LCByZXNvdXJjZXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi52aWV3RmFjdG9yeS5wYXJ0ID0gcGFydDtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgncGFydCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnZpZXdGYWN0b3J5LnNldENhY2hlU2l6ZShjYWNoZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCd2aWV3LWNhY2hlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBub2RlID0gdGVtcGxhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5lbGVtZW50TmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgcGFydFJlcGxhY2VtZW50cyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9jZXNzQ29udGVudChjb21waWxlciwgcmVzb3VyY2VzLCBub2RlLCBpbnN0cnVjdGlvbikgJiYgbm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudEVsZW1lbnQgPSB0aGlzLnVzZXNTaGFkb3dET00gPyBudWxsIDogRE9NLmNyZWF0ZUVsZW1lbnQoJ2F1LWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0U2libGluZyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIHZhciB0b1JlcGxhY2UgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNpYmxpbmcgPSBjdXJyZW50Q2hpbGQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDaGlsZC50YWdOYW1lID09PSAnVEVNUExBVEUnICYmICh0b1JlcGxhY2UgPSBjdXJyZW50Q2hpbGQuZ2V0QXR0cmlidXRlKCdyZXBsYWNlLXBhcnQnKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydFJlcGxhY2VtZW50c1t0b1JlcGxhY2VdID0gY29tcGlsZXIuY29tcGlsZShjdXJyZW50Q2hpbGQsIHJlc291cmNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERPTS5yZW1vdmVOb2RlKGN1cnJlbnRDaGlsZCwgcGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnBhcnRSZXBsYWNlbWVudHMgPSBwYXJ0UmVwbGFjZW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb250ZW50RWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoaWxkLm5vZGVUeXBlID09PSAzICYmIF9pc0FsbFdoaXRlc3BhY2UoY3VycmVudENoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NLnJlbW92ZU5vZGUoY3VycmVudENoaWxkLCBwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGN1cnJlbnRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENoaWxkID0gbmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudEVsZW1lbnQgIT09IG51bGwgJiYgY29udGVudEVsZW1lbnQuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChjb250ZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbi5za2lwQ29udGVudFByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLnNraXBDb250ZW50UHJvY2Vzc2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIXRoaXMucHJvY2Vzc0NvbnRlbnQoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgaW5zdHJ1Y3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLnNraXBDb250ZW50UHJvY2Vzc2luZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBpbnN0cnVjdGlvbiwgZWxlbWVudCwgYmluZGluZ3MpIHtcclxuICAgICAgICB2YXIgdmlld0hvc3Q7XHJcbiAgICAgICAgdmFyIGF1ID0gbnVsbDtcclxuICAgICAgICBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24ubm9ybWFsO1xyXG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IG51bGw7XHJcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5ncyB8fCBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnROYW1lICE9PSBudWxsICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXNlc1NoYWRvd0RPTSkge1xyXG4gICAgICAgICAgICAgICAgdmlld0hvc3QgPSBlbGVtZW50LmF0dGFjaFNoYWRvdyh0aGlzLnNoYWRvd0RPTU9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoRE9NLmJvdW5kYXJ5LCB2aWV3SG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3SG9zdCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRTaGFkb3dET00pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShET00uYm91bmRhcnksIHZpZXdIb3N0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmF1ID0gYXUgPSBlbGVtZW50LmF1IHx8IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmlld01vZGVsID0gaW5zdHJ1Y3Rpb24udmlld01vZGVsIHx8IGNvbnRhaW5lci5nZXQodGhpcy50YXJnZXQpO1xyXG4gICAgICAgIHZhciBjb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIodGhpcywgaW5zdHJ1Y3Rpb24sIHZpZXdNb2RlbCwgY29udGFpbmVyKTtcclxuICAgICAgICB2YXIgY2hpbGRCaW5kaW5ncyA9IHRoaXMuY2hpbGRCaW5kaW5ncztcclxuICAgICAgICB2YXIgdmlld0ZhY3Rvcnk7XHJcbiAgICAgICAgaWYgKHRoaXMubGlmdHNDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGF1LmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmVsZW1lbnROYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZpZXdGYWN0b3J5ID0gaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkgfHwgdGhpcy52aWV3RmFjdG9yeTtcclxuICAgICAgICAgICAgY29udGFpbmVyLnZpZXdNb2RlbCA9IHZpZXdNb2RlbDtcclxuICAgICAgICAgICAgaWYgKHZpZXdGYWN0b3J5KSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcgPSB2aWV3RmFjdG9yeS5jcmVhdGUoY29udGFpbmVyLCBpbnN0cnVjdGlvbiwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGF1LmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIudmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy51c2VzU2hhZG93RE9NICYmIChlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxIHx8IGVsZW1lbnQuY29udGVudEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50RWxlbWVudCA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXSB8fCBlbGVtZW50LmNvbnRlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuY29udGVudFZpZXcgPSB7IGZyYWdtZW50OiBjb250ZW50RWxlbWVudCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudC5wYXJlbnROb2RlICYmIERPTS5yZW1vdmVOb2RlKGNvbnRlbnRFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0aW9uLmFuY2hvcklzQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZEJpbmRpbmdzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjaGlsZEJpbmRpbmdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuYWRkQmluZGluZyhjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShlbGVtZW50LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuYXBwZW5kTm9kZXNUbyh2aWV3SG9zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuaW5zZXJ0Tm9kZXNCZWZvcmUodmlld0hvc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkQmluZGluZ3MgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjaGlsZEJpbmRpbmdzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShlbGVtZW50LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29udHJvbGxlci52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRCaW5kaW5ncyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNoaWxkQmluZGluZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuYWRkQmluZGluZyhjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShpbnN0cnVjdGlvbi5ob3N0LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGRCaW5kaW5ncyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRCaW5kaW5ncy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShpbnN0cnVjdGlvbi5ob3N0LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGlsZEJpbmRpbmdzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNoaWxkQmluZGluZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChjaGlsZEJpbmRpbmdzW2ldLmNyZWF0ZShlbGVtZW50LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXVbdGhpcy5odG1sTmFtZV0gPSBjb250cm9sbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24uaW5pdGlhdGVkQnlCZWhhdmlvciAmJiB2aWV3RmFjdG9yeSkge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyLnZpZXcuY3JlYXRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29udHJvbGxlcjtcclxuICAgIH07XHJcbiAgICBIdG1sQmVoYXZpb3JSZXNvdXJjZS5wcm90b3R5cGUuX2Vuc3VyZVByb3BlcnRpZXNEZWZpbmVkID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsb29rdXApIHtcclxuICAgICAgICB2YXIgcHJvcGVydGllcztcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyO1xyXG4gICAgICAgIGlmICgnX19wcm9wZXJ0aWVzRGVmaW5lZF9fJyBpbiBsb29rdXApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb29rdXAuX19wcm9wZXJ0aWVzRGVmaW5lZF9fID0gdHJ1ZTtcclxuICAgICAgICBwcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0gcHJvcGVydGllc1tpXS5jcmVhdGVPYnNlcnZlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsb29rdXBbb2JzZXJ2ZXIucHJvcGVydHlOYW1lXSA9IG9ic2VydmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEh0bWxCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5fY29weUluaGVyaXRlZFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoY29udGFpbmVyLCB0YXJnZXQpIHtcclxuICAgICAgICB2YXIgYmVoYXZpb3I7XHJcbiAgICAgICAgdmFyIGRlcml2ZWQgPSB0YXJnZXQ7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldC5wcm90b3R5cGUpO1xyXG4gICAgICAgICAgICB0YXJnZXQgPSBwcm90byAmJiBwcm90by5jb25zdHJ1Y3RvcjtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiZWhhdmlvciA9IG1ldGFkYXRhLmdldE93bihtZXRhZGF0YS5yZXNvdXJjZSwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKGJlaGF2aW9yKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBiZWhhdmlvci5pbml0aWFsaXplKGNvbnRhaW5lciwgdGFyZ2V0KTtcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpLCBpaSkge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IGJlaGF2aW9yLnByb3BlcnRpZXNbaV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzXzEucHJvcGVydGllcy5zb21lKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLm5hbWUgPT09IHByb3AubmFtZTsgfSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3IEJpbmRhYmxlUHJvcGVydHkocHJvcCkucmVnaXN0ZXJXaXRoKGRlcml2ZWQsIHRoaXNfMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBiZWhhdmlvci5wcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgX2xvb3BfMShpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEh0bWxCZWhhdmlvclJlc291cmNlO1xyXG59KCkpO1xuXG5mdW5jdGlvbiByZWdpc3Rlcihsb29rdXAsIG5hbWUsIHJlc291cmNlLCB0eXBlKSB7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZXhpc3RpbmcgPSBsb29rdXBbbmFtZV07XHJcbiAgICBpZiAoZXhpc3RpbmcpIHtcclxuICAgICAgICBpZiAoZXhpc3RpbmcgIT09IHJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byByZWdpc3RlciBcIi5jb25jYXQodHlwZSwgXCIgd2hlbiBvbmUgd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzLiBOYW1lOiBcIikuY29uY2F0KG5hbWUsIFwiLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxvb2t1cFtuYW1lXSA9IHJlc291cmNlO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQmVoYXZpb3JOYW1lKG5hbWUsIHR5cGUpIHtcclxuICAgIGlmICgvW0EtWl0vLnRlc3QobmFtZSkpIHtcclxuICAgICAgICB2YXIgbmV3TmFtZSA9IF9oeXBoZW5hdGUobmFtZSk7XHJcbiAgICAgICAgTG9nTWFuYWdlclxyXG4gICAgICAgICAgICAuZ2V0TG9nZ2VyKCd0ZW1wbGF0aW5nJylcclxuICAgICAgICAgICAgLndhcm4oXCInXCIuY29uY2F0KG5hbWUsIFwiJyBpcyBub3QgYSB2YWxpZCBcIikuY29uY2F0KHR5cGUsIFwiIG5hbWUgYW5kIGhhcyBiZWVuIGNvbnZlcnRlZCB0byAnXCIpLmNvbmNhdChuZXdOYW1lLCBcIicuIFVwcGVyLWNhc2UgbGV0dGVycyBhcmUgbm90IGFsbG93ZWQgYmVjYXVzZSB0aGUgRE9NIGlzIG5vdCBjYXNlLXNlbnNpdGl2ZS5cIikpO1xyXG4gICAgICAgIHJldHVybiBuZXdOYW1lO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWU7XHJcbn1cclxudmFyIGNvbnZlbnRpb25NYXJrID0gJ19fYXVfcmVzb3VyY2VfXyc7XHJcbnZhciBWaWV3UmVzb3VyY2VzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZpZXdSZXNvdXJjZXMocGFyZW50LCB2aWV3VXJsKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nTGFuZ3VhZ2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50IHx8IG51bGw7XHJcbiAgICAgICAgdGhpcy5oYXNQYXJlbnQgPSB0aGlzLnBhcmVudCAhPT0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpZXdVcmwgPSB2aWV3VXJsIHx8ICcnO1xyXG4gICAgICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0ge1xyXG4gICAgICAgICAgICB2YWx1ZUNvbnZlcnRlcnM6IHRoaXMuZ2V0VmFsdWVDb252ZXJ0ZXIuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgYmluZGluZ0JlaGF2aW9yczogdGhpcy5nZXRCaW5kaW5nQmVoYXZpb3IuYmluZCh0aGlzKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICB0aGlzLnZhbHVlQ29udmVydGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nQmVoYXZpb3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuYmVmb3JlQ29tcGlsZSA9IHRoaXMuYWZ0ZXJDb21waWxlID0gdGhpcy5iZWZvcmVDcmVhdGUgPSB0aGlzLmFmdGVyQ3JlYXRlID0gdGhpcy5iZWZvcmVCaW5kID0gdGhpcy5iZWZvcmVVbmJpbmQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIFZpZXdSZXNvdXJjZXMuY29udmVudGlvbiA9IGZ1bmN0aW9uICh0YXJnZXQsIGV4aXN0aW5nKSB7XHJcbiAgICAgICAgdmFyIHJlc291cmNlO1xyXG4gICAgICAgIGlmIChleGlzdGluZyAmJiBjb252ZW50aW9uTWFyayBpbiBleGlzdGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgnJHJlc291cmNlJyBpbiB0YXJnZXQpIHtcclxuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHRhcmdldC4kcmVzb3VyY2U7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UgPSBleGlzdGluZyB8fCBuZXcgSHRtbEJlaGF2aW9yUmVzb3VyY2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc291cmNlW2NvbnZlbnRpb25NYXJrXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc291cmNlLmVsZW1lbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UuZWxlbWVudE5hbWUgPSB2YWxpZGF0ZUJlaGF2aW9yTmFtZShjb25maWcsICdjdXN0b20gZWxlbWVudCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcuY2FsbCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0geyBuYW1lOiBjb25maWcgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2VUeXBlID0gY29uZmlnLnR5cGUgfHwgJ2VsZW1lbnQnO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVfMSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChyZXNvdXJjZVR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbGVtZW50JzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdHRyaWJ1dGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IGV4aXN0aW5nIHx8IG5ldyBIdG1sQmVoYXZpb3JSZXNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZVtjb252ZW50aW9uTWFya10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VUeXBlID09PSAnZWxlbWVudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzb3VyY2UuZWxlbWVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZS5lbGVtZW50TmFtZSA9IG5hbWVfMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRlQmVoYXZpb3JOYW1lKG5hbWVfMSwgJ2N1c3RvbSBlbGVtZW50JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfaHlwaGVuYXRlKHRhcmdldC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzb3VyY2UuYXR0cmlidXRlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlLmF0dHJpYnV0ZU5hbWUgPSBuYW1lXzFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWxpZGF0ZUJlaGF2aW9yTmFtZShuYW1lXzEsICdjdXN0b20gYXR0cmlidXRlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfaHlwaGVuYXRlKHRhcmdldC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3RlbXBsYXRlQ29udHJvbGxlcicgaW4gY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcubGlmdHNDb250ZW50ID0gY29uZmlnLnRlbXBsYXRlQ29udHJvbGxlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcudGVtcGxhdGVDb250cm9sbGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnZGVmYXVsdEJpbmRpbmdNb2RlJyBpbiBjb25maWcgJiYgcmVzb3VyY2UuYXR0cmlidXRlRGVmYXVsdEJpbmRpbmdNb2RlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hdHRyaWJ1dGVEZWZhdWx0QmluZGluZ01vZGUgPSBjb25maWcuZGVmYXVsdEJpbmRpbmdNb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5kZWZhdWx0QmluZGluZ01vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc291cmNlLCBjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2YWx1ZUNvbnZlcnRlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gbmV3IFZhbHVlQ29udmVydGVyUmVzb3VyY2UoY2FtZWxDYXNlKG5hbWVfMSB8fCB0YXJnZXQubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdiaW5kaW5nQmVoYXZpb3InOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IG5ldyBCaW5kaW5nQmVoYXZpb3JSZXNvdXJjZShjYW1lbENhc2UobmFtZV8xIHx8IHRhcmdldC5uYW1lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZXdFbmdpbmVIb29rcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gbmV3IFZpZXdFbmdpbmVIb29rc1Jlc291cmNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGFibGVzID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyB1bmRlZmluZWQgOiBjb25maWcuYmluZGFibGVzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQcm9wcyA9IHJlc291cmNlLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShiaW5kYWJsZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gYmluZGFibGVzLmxlbmd0aDsgaWkgPiBpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSBiaW5kYWJsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvcCB8fCAodHlwZW9mIHByb3AgIT09ICdzdHJpbmcnICYmICFwcm9wLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJpbmRhYmxlIHByb3BlcnR5IGF0IFxcXCJcIi5jb25jYXQoaSwgXCJcXFwiIGZvciBjbGFzcyBcXFwiXCIpLmNvbmNhdCh0YXJnZXQubmFtZSwgXCJcXFwiLiBFeHBlY3RlZCBlaXRoZXIgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IHdpdGggXFxcIm5hbWVcXFwiIHByb3BlcnR5LlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Byb3AgPSBuZXcgQmluZGFibGVQcm9wZXJ0eShwcm9wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gY3VycmVudFByb3BzLmxlbmd0aDsgamogPiBqOyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UHJvcHNbal0ubmFtZSA9PT0gbmV3UHJvcC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Byb3AucmVnaXN0ZXJXaXRoKHRhcmdldCwgcmVzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzb3VyY2U7XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuX3RyeUFkZEhvb2sgPSBmdW5jdGlvbiAob2JqLCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bmMgPSBvYmpbbmFtZV0uYmluZChvYmopO1xyXG4gICAgICAgICAgICB2YXIgY291bnRlciA9IDE7XHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFja05hbWUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzW2NhbGxiYWNrTmFtZSA9IG5hbWUgKyBjb3VudGVyLnRvU3RyaW5nKCldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpc1tjYWxsYmFja05hbWVdID0gZnVuYztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuX2ludm9rZUhvb2sgPSBmdW5jdGlvbiAobmFtZSwgb25lLCB0d28sIHRocmVlLCBmb3VyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzUGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9pbnZva2VIb29rKG5hbWUsIG9uZSwgdHdvLCB0aHJlZSwgZm91cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXNbbmFtZSArICcxJ10ob25lLCB0d28sIHRocmVlLCBmb3VyKTtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrTmFtZSA9IG5hbWUgKyAnMic7XHJcbiAgICAgICAgICAgIGlmICh0aGlzW2NhbGxiYWNrTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbY2FsbGJhY2tOYW1lXShvbmUsIHR3bywgdGhyZWUsIGZvdXIpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tOYW1lID0gbmFtZSArICczJztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzW2NhbGxiYWNrTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW2NhbGxiYWNrTmFtZV0ob25lLCB0d28sIHRocmVlLCBmb3VyKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXNbY2FsbGJhY2tOYW1lID0gbmFtZSArIGNvdW50ZXIudG9TdHJpbmcoKV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NhbGxiYWNrTmFtZV0ob25lLCB0d28sIHRocmVlLCBmb3VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWdpc3RlclZpZXdFbmdpbmVIb29rcyA9IGZ1bmN0aW9uIChob29rcykge1xyXG4gICAgICAgIHRoaXMuX3RyeUFkZEhvb2soaG9va3MsICdiZWZvcmVDb21waWxlJyk7XHJcbiAgICAgICAgdGhpcy5fdHJ5QWRkSG9vayhob29rcywgJ2FmdGVyQ29tcGlsZScpO1xyXG4gICAgICAgIHRoaXMuX3RyeUFkZEhvb2soaG9va3MsICdiZWZvcmVDcmVhdGUnKTtcclxuICAgICAgICB0aGlzLl90cnlBZGRIb29rKGhvb2tzLCAnYWZ0ZXJDcmVhdGUnKTtcclxuICAgICAgICB0aGlzLl90cnlBZGRIb29rKGhvb2tzLCAnYmVmb3JlQmluZCcpO1xyXG4gICAgICAgIHRoaXMuX3RyeUFkZEhvb2soaG9va3MsICdiZWZvcmVVbmJpbmQnKTtcclxuICAgIH07XHJcbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5nZXRCaW5kaW5nTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoYmluZGluZ0xhbmd1YWdlRmFsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iaW5kaW5nTGFuZ3VhZ2UgfHwgKHRoaXMuYmluZGluZ0xhbmd1YWdlID0gYmluZGluZ0xhbmd1YWdlRmFsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLnBhdGNoSW5QYXJlbnQgPSBmdW5jdGlvbiAobmV3UGFyZW50KSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsUGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBuZXdQYXJlbnQgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmhhc1BhcmVudCA9IHRoaXMucGFyZW50ICE9PSBudWxsO1xyXG4gICAgICAgIGlmIChuZXdQYXJlbnQucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5ld1BhcmVudC5wYXJlbnQgPSBvcmlnaW5hbFBhcmVudDtcclxuICAgICAgICAgICAgbmV3UGFyZW50Lmhhc1BhcmVudCA9IG9yaWdpbmFsUGFyZW50ICE9PSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWxhdGl2ZVRvVmlldyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlVG9GaWxlKHBhdGgsIHRoaXMudmlld1VybCk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUucmVnaXN0ZXJFbGVtZW50ID0gZnVuY3Rpb24gKHRhZ05hbWUsIGJlaGF2aW9yKSB7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcy5lbGVtZW50cywgdGFnTmFtZSwgYmVoYXZpb3IsICdhbiBFbGVtZW50Jyk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uICh0YWdOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbdGFnTmFtZV0gfHwgKHRoaXMuaGFzUGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0RWxlbWVudCh0YWdOYW1lKSA6IG51bGwpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLm1hcEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXBbYXR0cmlidXRlXSB8fCAodGhpcy5oYXNQYXJlbnQgPyB0aGlzLnBhcmVudC5tYXBBdHRyaWJ1dGUoYXR0cmlidXRlKSA6IG51bGwpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLnJlZ2lzdGVyQXR0cmlidXRlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZSwgYmVoYXZpb3IsIGtub3duQXR0cmlidXRlKSB7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVNYXBbYXR0cmlidXRlXSA9IGtub3duQXR0cmlidXRlO1xyXG4gICAgICAgIHJlZ2lzdGVyKHRoaXMuYXR0cmlidXRlcywgYXR0cmlidXRlLCBiZWhhdmlvciwgJ2FuIEF0dHJpYnV0ZScpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gfHwgKHRoaXMuaGFzUGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgOiBudWxsKTtcclxuICAgIH07XHJcbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWdpc3RlclZhbHVlQ29udmVydGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlQ29udmVydGVyKSB7XHJcbiAgICAgICAgcmVnaXN0ZXIodGhpcy52YWx1ZUNvbnZlcnRlcnMsIG5hbWUsIHZhbHVlQ29udmVydGVyLCAnYSBWYWx1ZUNvbnZlcnRlcicpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLmdldFZhbHVlQ29udmVydGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUNvbnZlcnRlcnNbbmFtZV0gfHwgKHRoaXMuaGFzUGFyZW50ID8gdGhpcy5wYXJlbnQuZ2V0VmFsdWVDb252ZXJ0ZXIobmFtZSkgOiBudWxsKTtcclxuICAgIH07XHJcbiAgICBWaWV3UmVzb3VyY2VzLnByb3RvdHlwZS5yZWdpc3RlckJpbmRpbmdCZWhhdmlvciA9IGZ1bmN0aW9uIChuYW1lLCBiaW5kaW5nQmVoYXZpb3IpIHtcclxuICAgICAgICByZWdpc3Rlcih0aGlzLmJpbmRpbmdCZWhhdmlvcnMsIG5hbWUsIGJpbmRpbmdCZWhhdmlvciwgJ2EgQmluZGluZ0JlaGF2aW9yJyk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuZ2V0QmluZGluZ0JlaGF2aW9yID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iaW5kaW5nQmVoYXZpb3JzW25hbWVdIHx8ICh0aGlzLmhhc1BhcmVudCA/IHRoaXMucGFyZW50LmdldEJpbmRpbmdCZWhhdmlvcihuYW1lKSA6IG51bGwpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLnJlZ2lzdGVyVmFsdWUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICByZWdpc3Rlcih0aGlzLnZhbHVlcywgbmFtZSwgdmFsdWUsICdhIHZhbHVlJyk7XHJcbiAgICB9O1xyXG4gICAgVmlld1Jlc291cmNlcy5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1tuYW1lXSB8fCAodGhpcy5oYXNQYXJlbnQgPyB0aGlzLnBhcmVudC5nZXRWYWx1ZShuYW1lKSA6IG51bGwpO1xyXG4gICAgfTtcclxuICAgIFZpZXdSZXNvdXJjZXMucHJvdG90eXBlLmF1dG9SZWdpc3RlciA9IGZ1bmN0aW9uIChjb250YWluZXIsIGltcGwpIHtcclxuICAgICAgICB2YXIgcmVzb3VyY2VUeXBlTWV0YSA9IG1ldGFkYXRhLmdldE93bihtZXRhZGF0YS5yZXNvdXJjZSwgaW1wbCk7XHJcbiAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEpIHtcclxuICAgICAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEgaW5zdGFuY2VvZiBIdG1sQmVoYXZpb3JSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgVmlld1Jlc291cmNlcy5jb252ZW50aW9uKGltcGwsIHJlc291cmNlVHlwZU1ldGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihpbXBsLm5hbWUsIHJlc291cmNlVHlwZU1ldGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlVHlwZU1ldGEuYXR0cmlidXRlTmFtZSA9PT0gbnVsbCAmJiByZXNvdXJjZVR5cGVNZXRhLmVsZW1lbnROYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9IF9oeXBoZW5hdGUoaW1wbC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSA9IFZpZXdSZXNvdXJjZXMuY29udmVudGlvbihpbXBsKVxyXG4gICAgICAgICAgICAgICAgfHwgSHRtbEJlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihpbXBsLm5hbWUpXHJcbiAgICAgICAgICAgICAgICB8fCBWYWx1ZUNvbnZlcnRlclJlc291cmNlLmNvbnZlbnRpb24oaW1wbC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgfHwgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UuY29udmVudGlvbihpbXBsLm5hbWUpXHJcbiAgICAgICAgICAgICAgICB8fCBWaWV3RW5naW5lSG9va3NSZXNvdXJjZS5jb252ZW50aW9uKGltcGwubmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2VUeXBlTWV0YSkge1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YSA9IG5ldyBIdG1sQmVoYXZpb3JSZXNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlTWV0YS5lbGVtZW50TmFtZSA9IF9oeXBoZW5hdGUoaW1wbC5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEucmVzb3VyY2UsIHJlc291cmNlVHlwZU1ldGEsIGltcGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvdXJjZVR5cGVNZXRhLmluaXRpYWxpemUoY29udGFpbmVyLCBpbXBsKTtcclxuICAgICAgICByZXNvdXJjZVR5cGVNZXRhLnJlZ2lzdGVyKHRoaXMsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc291cmNlVHlwZU1ldGE7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXdSZXNvdXJjZXM7XHJcbn0oKSk7XG5cbnZhciB2aWV3U3RyYXRlZ3kgPSBwcm90b2NvbC5jcmVhdGUoJ2F1cmVsaWE6dmlldy1zdHJhdGVneScsIHtcclxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCEodHlwZW9mIHRhcmdldC5sb2FkVmlld0ZhY3RvcnkgPT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnVmlldyBzdHJhdGVnaWVzIG11c3QgaW1wbGVtZW50OiBsb2FkVmlld0ZhY3Rvcnkodmlld0VuZ2luZTogVmlld0VuZ2luZSwgY29tcGlsZUluc3RydWN0aW9uOiBWaWV3Q29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dD86IFJlc291cmNlTG9hZENvbnRleHQpOiBQcm9taXNlPFZpZXdGYWN0b3J5Pic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGNvbXBvc2U6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoISh0eXBlb2YgdGFyZ2V0Lm1ha2VSZWxhdGl2ZVRvID09PSAnZnVuY3Rpb24nKSkge1xyXG4gICAgICAgICAgICB0YXJnZXQubWFrZVJlbGF0aXZlVG8gPSBQTEFURk9STS5ub29wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbnZhciBSZWxhdGl2ZVZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWxhdGl2ZVZpZXdTdHJhdGVneShwYXRoKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLmFic29sdXRlUGF0aCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBSZWxhdGl2ZVZpZXdTdHJhdGVneS5wcm90b3R5cGUubG9hZFZpZXdGYWN0b3J5ID0gZnVuY3Rpb24gKHZpZXdFbmdpbmUsIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQsIHRhcmdldCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFic29sdXRlUGF0aCA9PT0gbnVsbCAmJiB0aGlzLm1vZHVsZUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJzb2x1dGVQYXRoID0gcmVsYXRpdmVUb0ZpbGUodGhpcy5wYXRoLCB0aGlzLm1vZHVsZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCA9IHRoaXMubW9kdWxlSWQ7XHJcbiAgICAgICAgcmV0dXJuIHZpZXdFbmdpbmUubG9hZFZpZXdGYWN0b3J5KHRoaXMuYWJzb2x1dGVQYXRoIHx8IHRoaXMucGF0aCwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICBSZWxhdGl2ZVZpZXdTdHJhdGVneS5wcm90b3R5cGUubWFrZVJlbGF0aXZlVG8gPSBmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmFic29sdXRlUGF0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFic29sdXRlUGF0aCA9IHJlbGF0aXZlVG9GaWxlKHRoaXMucGF0aCwgZmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlbGF0aXZlVmlld1N0cmF0ZWd5ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgdmlld1N0cmF0ZWd5KClcclxuICAgIF0sIFJlbGF0aXZlVmlld1N0cmF0ZWd5KTtcclxuICAgIHJldHVybiBSZWxhdGl2ZVZpZXdTdHJhdGVneTtcclxufSgpKTtcclxudmFyIENvbnZlbnRpb25hbFZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3kodmlld0xvY2F0b3IsIG9yaWdpbikge1xyXG4gICAgICAgIHRoaXMubW9kdWxlSWQgPSBvcmlnaW4ubW9kdWxlSWQ7XHJcbiAgICAgICAgdGhpcy52aWV3VXJsID0gdmlld0xvY2F0b3IuY29udmVydE9yaWdpblRvVmlld1VybChvcmlnaW4pO1xyXG4gICAgfVxyXG4gICAgQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5LnByb3RvdHlwZS5sb2FkVmlld0ZhY3RvcnkgPSBmdW5jdGlvbiAodmlld0VuZ2luZSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCA9IHRoaXMubW9kdWxlSWQ7XHJcbiAgICAgICAgcmV0dXJuIHZpZXdFbmdpbmUubG9hZFZpZXdGYWN0b3J5KHRoaXMudmlld1VybCwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3kgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICB2aWV3U3RyYXRlZ3koKVxyXG4gICAgXSwgQ29udmVudGlvbmFsVmlld1N0cmF0ZWd5KTtcclxuICAgIHJldHVybiBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3k7XHJcbn0oKSk7XHJcbnZhciBOb1ZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb1ZpZXdTdHJhdGVneShkZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSB7XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXMgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY3lCYXNlVXJsID0gZGVwZW5kZW5jeUJhc2VVcmwgfHwgJyc7XHJcbiAgICB9XHJcbiAgICBOb1ZpZXdTdHJhdGVneS5wcm90b3R5cGUubG9hZFZpZXdGYWN0b3J5ID0gZnVuY3Rpb24gKHZpZXdFbmdpbmUsIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQsIHRhcmdldCkge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMuZW50cnk7XHJcbiAgICAgICAgdmFyIGRlcGVuZGVuY2llcyA9IHRoaXMuZGVwZW5kZW5jaWVzO1xyXG4gICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5mYWN0b3J5SXNSZWFkeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVudHJ5ID0gZW50cnkgPSBuZXcgVGVtcGxhdGVSZWdpc3RyeUVudHJ5KHRoaXMubW9kdWxlSWQgfHwgdGhpcy5kZXBlbmRlbmN5QmFzZVVybCk7XHJcbiAgICAgICAgZW50cnkuZGVwZW5kZW5jaWVzID0gW107XHJcbiAgICAgICAgZW50cnkudGVtcGxhdGVJc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGRlcGVuZGVuY2llcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBkZXBlbmRlbmNpZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuYWRkRGVwZW5kZW5jeShjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmFkZERlcGVuZGVuY3koY3VycmVudC5mcm9tLCBjdXJyZW50LmFzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkID0gdGhpcy5tb2R1bGVJZDtcclxuICAgICAgICByZXR1cm4gdmlld0VuZ2luZS5sb2FkVmlld0ZhY3RvcnkoZW50cnksIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQsIHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgTm9WaWV3U3RyYXRlZ3kgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICB2aWV3U3RyYXRlZ3koKVxyXG4gICAgXSwgTm9WaWV3U3RyYXRlZ3kpO1xyXG4gICAgcmV0dXJuIE5vVmlld1N0cmF0ZWd5O1xyXG59KCkpO1xyXG52YXIgVGVtcGxhdGVSZWdpc3RyeVZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5KG1vZHVsZUlkLCBlbnRyeSkge1xyXG4gICAgICAgIHRoaXMubW9kdWxlSWQgPSBtb2R1bGVJZDtcclxuICAgICAgICB0aGlzLmVudHJ5ID0gZW50cnk7XHJcbiAgICB9XHJcbiAgICBUZW1wbGF0ZVJlZ2lzdHJ5Vmlld1N0cmF0ZWd5LnByb3RvdHlwZS5sb2FkVmlld0ZhY3RvcnkgPSBmdW5jdGlvbiAodmlld0VuZ2luZSwgY29tcGlsZUluc3RydWN0aW9uLCBsb2FkQ29udGV4dCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5lbnRyeTtcclxuICAgICAgICBpZiAoZW50cnkuZmFjdG9yeUlzUmVhZHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbnRyeS5mYWN0b3J5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29tcGlsZUluc3RydWN0aW9uLmFzc29jaWF0ZWRNb2R1bGVJZCA9IHRoaXMubW9kdWxlSWQ7XHJcbiAgICAgICAgcmV0dXJuIHZpZXdFbmdpbmUubG9hZFZpZXdGYWN0b3J5KGVudHJ5LCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0LCB0YXJnZXQpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRlUmVnaXN0cnlWaWV3U3RyYXRlZ3kgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICB2aWV3U3RyYXRlZ3koKVxyXG4gICAgXSwgVGVtcGxhdGVSZWdpc3RyeVZpZXdTdHJhdGVneSk7XHJcbiAgICByZXR1cm4gVGVtcGxhdGVSZWdpc3RyeVZpZXdTdHJhdGVneTtcclxufSgpKTtcclxudmFyIElubGluZVZpZXdTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmxpbmVWaWV3U3RyYXRlZ3kobWFya3VwLCBkZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSB7XHJcbiAgICAgICAgdGhpcy5tYXJrdXAgPSBtYXJrdXA7XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXMgfHwgbnVsbDtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY3lCYXNlVXJsID0gZGVwZW5kZW5jeUJhc2VVcmwgfHwgJyc7XHJcbiAgICB9XHJcbiAgICBJbmxpbmVWaWV3U3RyYXRlZ3kucHJvdG90eXBlLmxvYWRWaWV3RmFjdG9yeSA9IGZ1bmN0aW9uICh2aWV3RW5naW5lLCBjb21waWxlSW5zdHJ1Y3Rpb24sIGxvYWRDb250ZXh0LCB0YXJnZXQpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLmVudHJ5O1xyXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSB0aGlzLmRlcGVuZGVuY2llcztcclxuICAgICAgICBpZiAoZW50cnkgJiYgZW50cnkuZmFjdG9yeUlzUmVhZHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbnRyeS5mYWN0b3J5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbnRyeSA9IGVudHJ5ID0gbmV3IFRlbXBsYXRlUmVnaXN0cnlFbnRyeSh0aGlzLm1vZHVsZUlkIHx8IHRoaXMuZGVwZW5kZW5jeUJhc2VVcmwpO1xyXG4gICAgICAgIGVudHJ5LnRlbXBsYXRlID0gRE9NLmNyZWF0ZVRlbXBsYXRlRnJvbU1hcmt1cCh0aGlzLm1hcmt1cCk7XHJcbiAgICAgICAgaWYgKGRlcGVuZGVuY2llcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBkZXBlbmRlbmNpZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuYWRkRGVwZW5kZW5jeShjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmFkZERlcGVuZGVuY3koY3VycmVudC5mcm9tLCBjdXJyZW50LmFzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb21waWxlSW5zdHJ1Y3Rpb24uYXNzb2NpYXRlZE1vZHVsZUlkID0gdGhpcy5tb2R1bGVJZDtcclxuICAgICAgICByZXR1cm4gdmlld0VuZ2luZS5sb2FkVmlld0ZhY3RvcnkoZW50cnksIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQsIHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgSW5saW5lVmlld1N0cmF0ZWd5ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgdmlld1N0cmF0ZWd5KClcclxuICAgIF0sIElubGluZVZpZXdTdHJhdGVneSk7XHJcbiAgICByZXR1cm4gSW5saW5lVmlld1N0cmF0ZWd5O1xyXG59KCkpO1xyXG52YXIgU3RhdGljVmlld1N0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0YXRpY1ZpZXdTdHJhdGVneShjb25maWcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgfHwgKGNvbmZpZyBpbnN0YW5jZW9mIERPTS5FbGVtZW50ICYmIGNvbmZpZy50YWdOYW1lID09PSAnVEVNUExBVEUnKSkge1xyXG4gICAgICAgICAgICBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogY29uZmlnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBjb25maWcudGVtcGxhdGU7XHJcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBjb25maWcuZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuZmFjdG9yeUlzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uUmVhZHkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubW9kdWxlSWQgPSAndW5kZWZpbmVkJztcclxuICAgIH1cclxuICAgIFN0YXRpY1ZpZXdTdHJhdGVneS5wcm90b3R5cGUubG9hZFZpZXdGYWN0b3J5ID0gZnVuY3Rpb24gKHZpZXdFbmdpbmUsIGNvbXBpbGVJbnN0cnVjdGlvbiwgbG9hZENvbnRleHQsIHRhcmdldCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZmFjdG9yeUlzUmVhZHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmZhY3RvcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgJGRlcHMgPSB0aGlzLmRlcGVuZGVuY2llcztcclxuICAgICAgICB2YXIgZGVwcyA9IHR5cGVvZiAkZGVwcyA9PT0gJ2Z1bmN0aW9uJyA/ICRkZXBzKCkgOiAkZGVwcztcclxuICAgICAgICBkZXBzID0gZGVwcyA/IGRlcHMgOiBbXTtcclxuICAgICAgICBkZXBzID0gQXJyYXkuaXNBcnJheShkZXBzKSA/IGRlcHMgOiBbZGVwc107XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGRlcHMpLnRoZW4oZnVuY3Rpb24gKGRlcGVuZGVuY2llcykge1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdmlld0VuZ2luZS5jb250YWluZXI7XHJcbiAgICAgICAgICAgIHZhciBhcHBSZXNvdXJjZXMgPSB2aWV3RW5naW5lLmFwcFJlc291cmNlcztcclxuICAgICAgICAgICAgdmFyIHZpZXdDb21waWxlciA9IHZpZXdFbmdpbmUudmlld0NvbXBpbGVyO1xyXG4gICAgICAgICAgICB2YXIgdmlld1Jlc291cmNlcyA9IG5ldyBWaWV3UmVzb3VyY2VzKGFwcFJlc291cmNlcyk7XHJcbiAgICAgICAgICAgIHZhciByZXNvdXJjZTtcclxuICAgICAgICAgICAgdmFyIGVsRGVwcyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3UmVzb3VyY2VzLmF1dG9SZWdpc3Rlcihjb250YWluZXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbmNpZXNfMSA9IGRlcGVuZGVuY2llczsgX2kgPCBkZXBlbmRlbmNpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZXAgPSBkZXBlbmRlbmNpZXNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gdmlld1Jlc291cmNlcy5hdXRvUmVnaXN0ZXIoY29udGFpbmVyLCBkZXApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZS5lbGVtZW50TmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbERlcHMucHVzaChyZXNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVwICYmIHR5cGVvZiBkZXAgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwb3J0ZWQgPSBkZXBba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleHBvcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UgPSB2aWV3UmVzb3VyY2VzLmF1dG9SZWdpc3Rlcihjb250YWluZXIsIGV4cG9ydGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZS5lbGVtZW50TmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsRGVwcy5wdXNoKHJlc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRlcGVuZGVuY3kgbmVpdGhlciBmdW5jdGlvbiBub3Igb2JqZWN0LiBSZWNlaXZlZDogXFxcIlwiLmNvbmNhdCh0eXBlb2YgZGVwLCBcIlxcXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbERlcHMubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwubG9hZChjb250YWluZXIsIGVsLnRhcmdldCk7IH0pKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmYWN0b3J5ID0gX3RoaXMudGVtcGxhdGUgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICA/IHZpZXdDb21waWxlci5jb21waWxlKF90aGlzLnRlbXBsYXRlLCB2aWV3UmVzb3VyY2VzLCBjb21waWxlSW5zdHJ1Y3Rpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZmFjdG9yeUlzUmVhZHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZmFjdG9yeSA9IGZhY3Rvcnk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3RhdGljVmlld1N0cmF0ZWd5ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgdmlld1N0cmF0ZWd5KClcclxuICAgIF0sIFN0YXRpY1ZpZXdTdHJhdGVneSk7XHJcbiAgICByZXR1cm4gU3RhdGljVmlld1N0cmF0ZWd5O1xyXG59KCkpO1xuXG5mdW5jdGlvbiByZW1vdmUodmlld1Nsb3QsIHByZXZpb3VzKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwcmV2aW91cylcclxuICAgICAgICA/IHZpZXdTbG90LnJlbW92ZU1hbnkocHJldmlvdXMsIHRydWUpXHJcbiAgICAgICAgOiB2aWV3U2xvdC5yZW1vdmUocHJldmlvdXMsIHRydWUpO1xyXG59XHJcbnZhciBTd2FwU3RyYXRlZ2llcyA9IHtcclxuICAgIGJlZm9yZTogZnVuY3Rpb24gKHZpZXdTbG90LCBwcmV2aW91cywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKHByZXZpb3VzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgID8gY2FsbGJhY2soKVxyXG4gICAgICAgICAgICA6IGNhbGxiYWNrKCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUodmlld1Nsb3QsIHByZXZpb3VzKTsgfSk7XHJcbiAgICB9LFxyXG4gICAgd2l0aDogZnVuY3Rpb24gKHZpZXdTbG90LCBwcmV2aW91cywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKHByZXZpb3VzID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgID8gY2FsbGJhY2soKVxyXG4gICAgICAgICAgICA6IFByb21pc2UuYWxsKFtyZW1vdmUodmlld1Nsb3QsIHByZXZpb3VzKSwgY2FsbGJhY2soKV0pO1xyXG4gICAgfSxcclxuICAgIGFmdGVyOiBmdW5jdGlvbiAodmlld1Nsb3QsIHByZXZpb3VzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmlld1Nsb3QucmVtb3ZlQWxsKHRydWUpKS50aGVuKGNhbGxiYWNrKTtcclxuICAgIH1cclxufTtcblxuZnVuY3Rpb24gdHJ5QWN0aXZhdGVWaWV3TW9kZWwoY29udGV4dCkge1xyXG4gICAgaWYgKGNvbnRleHQuc2tpcEFjdGl2YXRpb24gfHwgdHlwZW9mIGNvbnRleHQudmlld01vZGVsLmFjdGl2YXRlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRleHQudmlld01vZGVsLmFjdGl2YXRlKGNvbnRleHQubW9kZWwpIHx8IFByb21pc2UucmVzb2x2ZSgpO1xyXG59XHJcbnZhciBDb21wb3NpdGlvbkVuZ2luZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvbkVuZ2luZSh2aWV3RW5naW5lLCB2aWV3TG9jYXRvcikge1xyXG4gICAgICAgIHRoaXMudmlld0VuZ2luZSA9IHZpZXdFbmdpbmU7XHJcbiAgICAgICAgdGhpcy52aWV3TG9jYXRvciA9IHZpZXdMb2NhdG9yO1xyXG4gICAgfVxyXG4gICAgQ29tcG9zaXRpb25FbmdpbmUucHJvdG90eXBlLl9zd2FwID0gZnVuY3Rpb24gKGNvbnRleHQsIHZpZXcpIHtcclxuICAgICAgICB2YXIgc3dhcFN0cmF0ZWd5ID0gU3dhcFN0cmF0ZWdpZXNbY29udGV4dC5zd2FwT3JkZXJdIHx8IFN3YXBTdHJhdGVnaWVzLmFmdGVyO1xyXG4gICAgICAgIHZhciBwcmV2aW91c1ZpZXdzID0gY29udGV4dC52aWV3U2xvdC5jaGlsZHJlbi5zbGljZSgpO1xyXG4gICAgICAgIHJldHVybiBzd2FwU3RyYXRlZ3koY29udGV4dC52aWV3U2xvdCwgcHJldmlvdXNWaWV3cywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnRleHQudmlld1Nsb3QuYWRkKHZpZXcpKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmN1cnJlbnRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jdXJyZW50Q29udHJvbGxlci51bmJpbmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Ob3RpZmllcikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb3NpdGlvblRyYW5zYWN0aW9uTm90aWZpZXIuZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9zaXRpb25FbmdpbmUucHJvdG90eXBlLl9jcmVhdGVDb250cm9sbGVyQW5kU3dhcCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb250cm9sbGVyKGNvbnRleHQpLnRoZW4oZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuY29tcG9zaXRpb25UcmFuc2FjdGlvbk93bmVyc2hpcFRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW5cclxuICAgICAgICAgICAgICAgICAgICAud2FpdEZvckNvbXBvc2l0aW9uQ29tcGxldGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmF1dG9tYXRlKGNvbnRleHQub3ZlcnJpZGVDb250ZXh0LCBjb250ZXh0Lm93bmluZ1ZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fc3dhcChjb250ZXh0LCBjb250cm9sbGVyLnZpZXcpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cm9sbGVyOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250cm9sbGVyLmF1dG9tYXRlKGNvbnRleHQub3ZlcnJpZGVDb250ZXh0LCBjb250ZXh0Lm93bmluZ1ZpZXcpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuX3N3YXAoY29udGV4dCwgY29udHJvbGxlci52aWV3KS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyb2xsZXI7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2l0aW9uRW5naW5lLnByb3RvdHlwZS5jcmVhdGVDb250cm9sbGVyID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjaGlsZENvbnRhaW5lcjtcclxuICAgICAgICB2YXIgdmlld01vZGVsO1xyXG4gICAgICAgIHZhciB2aWV3TW9kZWxSZXNvdXJjZTtcclxuICAgICAgICB2YXIgbTtcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICAuZW5zdXJlVmlld01vZGVsKGNvbnRleHQpXHJcbiAgICAgICAgICAgIC50aGVuKHRyeUFjdGl2YXRlVmlld01vZGVsKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyID0gY29udGV4dC5jaGlsZENvbnRhaW5lcjtcclxuICAgICAgICAgICAgdmlld01vZGVsID0gY29udGV4dC52aWV3TW9kZWw7XHJcbiAgICAgICAgICAgIHZpZXdNb2RlbFJlc291cmNlID0gY29udGV4dC52aWV3TW9kZWxSZXNvdXJjZTtcclxuICAgICAgICAgICAgbSA9IHZpZXdNb2RlbFJlc291cmNlLm1ldGFkYXRhO1xyXG4gICAgICAgICAgICB2YXIgdmlld1N0cmF0ZWd5ID0gX3RoaXMudmlld0xvY2F0b3IuZ2V0Vmlld1N0cmF0ZWd5KGNvbnRleHQudmlldyB8fCB2aWV3TW9kZWwpO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC52aWV3UmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3U3RyYXRlZ3kubWFrZVJlbGF0aXZlVG8oY29udGV4dC52aWV3UmVzb3VyY2VzLnZpZXdVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtLmxvYWQoY2hpbGRDb250YWluZXIsIHZpZXdNb2RlbFJlc291cmNlLnZhbHVlLCBudWxsLCB2aWV3U3RyYXRlZ3ksIHRydWUpO1xyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZpZXdGYWN0b3J5KSB7IHJldHVybiBtLmNyZWF0ZShjaGlsZENvbnRhaW5lciwgQmVoYXZpb3JJbnN0cnVjdGlvbi5keW5hbWljKGNvbnRleHQuaG9zdCwgdmlld01vZGVsLCB2aWV3RmFjdG9yeSkpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb21wb3NpdGlvbkVuZ2luZS5wcm90b3R5cGUuZW5zdXJlVmlld01vZGVsID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgY2hpbGRDb250YWluZXIgPSBjb250ZXh0LmNoaWxkQ29udGFpbmVyID0gKGNvbnRleHQuY2hpbGRDb250YWluZXIgfHwgY29udGV4dC5jb250YWluZXIuY3JlYXRlQ2hpbGQoKSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnZpZXdNb2RlbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29udGV4dC52aWV3TW9kZWwgPSBjb250ZXh0LnZpZXdSZXNvdXJjZXNcclxuICAgICAgICAgICAgICAgID8gY29udGV4dC52aWV3UmVzb3VyY2VzLnJlbGF0aXZlVG9WaWV3KGNvbnRleHQudmlld01vZGVsKVxyXG4gICAgICAgICAgICAgICAgOiBjb250ZXh0LnZpZXdNb2RlbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld0VuZ2luZS5pbXBvcnRWaWV3TW9kZWxSZXNvdXJjZShjb250ZXh0LnZpZXdNb2RlbCkudGhlbihmdW5jdGlvbiAodmlld01vZGVsUmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLmF1dG9SZWdpc3Rlcih2aWV3TW9kZWxSZXNvdXJjZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5ob3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRDb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShET00uRWxlbWVudCwgY29udGV4dC5ob3N0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQudmlld01vZGVsID0gY2hpbGRDb250YWluZXIudmlld01vZGVsID0gY2hpbGRDb250YWluZXIuZ2V0KHZpZXdNb2RlbFJlc291cmNlLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQudmlld01vZGVsUmVzb3VyY2UgPSB2aWV3TW9kZWxSZXNvdXJjZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN0b3IgPSBjb250ZXh0LnZpZXdNb2RlbC5jb25zdHJ1Y3RvcjtcclxuICAgICAgICB2YXIgaXNDbGFzcyA9IHR5cGVvZiBjb250ZXh0LnZpZXdNb2RlbCA9PT0gJ2Z1bmN0aW9uJztcclxuICAgICAgICBpZiAoaXNDbGFzcykge1xyXG4gICAgICAgICAgICBjdG9yID0gY29udGV4dC52aWV3TW9kZWw7XHJcbiAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLmF1dG9SZWdpc3RlcihjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG0gPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIGN0b3IpO1xyXG4gICAgICAgIG0uZWxlbWVudE5hbWUgPSBtLmVsZW1lbnROYW1lIHx8ICdkeW5hbWljLWVsZW1lbnQnO1xyXG4gICAgICAgIG0uaW5pdGlhbGl6ZShpc0NsYXNzID8gY2hpbGRDb250YWluZXIgOiAoY29udGV4dC5jb250YWluZXIgfHwgY2hpbGRDb250YWluZXIpLCBjdG9yKTtcclxuICAgICAgICBjb250ZXh0LnZpZXdNb2RlbFJlc291cmNlID0geyBtZXRhZGF0YTogbSwgdmFsdWU6IGN0b3IgfTtcclxuICAgICAgICBpZiAoY29udGV4dC5ob3N0KSB7XHJcbiAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoRE9NLkVsZW1lbnQsIGNvbnRleHQuaG9zdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoaWxkQ29udGFpbmVyLnZpZXdNb2RlbCA9IGNvbnRleHQudmlld01vZGVsID0gaXNDbGFzcyA/IGNoaWxkQ29udGFpbmVyLmdldChjdG9yKSA6IGNvbnRleHQudmlld01vZGVsO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9zaXRpb25FbmdpbmUucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgY29udGV4dC5jaGlsZENvbnRhaW5lciA9IGNvbnRleHQuY2hpbGRDb250YWluZXIgfHwgY29udGV4dC5jb250YWluZXIuY3JlYXRlQ2hpbGQoKTtcclxuICAgICAgICBjb250ZXh0LnZpZXcgPSB0aGlzLnZpZXdMb2NhdG9yLmdldFZpZXdTdHJhdGVneShjb250ZXh0LnZpZXcpO1xyXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IGNvbnRleHQuY2hpbGRDb250YWluZXIuZ2V0KENvbXBvc2l0aW9uVHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIHZhciBjb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW4gPSB0cmFuc2FjdGlvbi50cnlDYXB0dXJlKCk7XHJcbiAgICAgICAgaWYgKGNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbikge1xyXG4gICAgICAgICAgICBjb250ZXh0LmNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbiA9IGNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyID0gdHJhbnNhY3Rpb24uZW5saXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZXh0LnZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQ29udHJvbGxlckFuZFN3YXAoY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbnRleHQudmlldykge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC52aWV3UmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnZpZXcubWFrZVJlbGF0aXZlVG8oY29udGV4dC52aWV3UmVzb3VyY2VzLnZpZXdVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnZpZXcubG9hZFZpZXdGYWN0b3J5KHRoaXMudmlld0VuZ2luZSwgbmV3IFZpZXdDb21waWxlSW5zdHJ1Y3Rpb24oKSkudGhlbihmdW5jdGlvbiAodmlld0ZhY3RvcnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2aWV3RmFjdG9yeS5jcmVhdGUoY29udGV4dC5jaGlsZENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuYmluZChjb250ZXh0LmJpbmRpbmdDb250ZXh0LCBjb250ZXh0Lm92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5jb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW4ud2FpdEZvckNvbXBvc2l0aW9uQ29tcGxldGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fc3dhcChjb250ZXh0LCByZXN1bHQpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiByZXN1bHQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zd2FwKGNvbnRleHQsIHJlc3VsdCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiByZXN1bHQ7IH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29udGV4dC52aWV3U2xvdCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnZpZXdTbG90LnJlbW92ZUFsbCgpO1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5jb21wb3NpdGlvblRyYW5zYWN0aW9uTm90aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyLmRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2l0aW9uRW5naW5lID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgaW5qZWN0KFZpZXdFbmdpbmUsIFZpZXdMb2NhdG9yKVxyXG4gICAgXSwgQ29tcG9zaXRpb25FbmdpbmUpO1xyXG4gICAgcmV0dXJuIENvbXBvc2l0aW9uRW5naW5lO1xyXG59KCkpO1xuXG52YXIgYW5pbWF0aW9uRXZlbnQgPSB7XHJcbiAgICBlbnRlckJlZ2luOiAnYW5pbWF0aW9uOmVudGVyOmJlZ2luJyxcclxuICAgIGVudGVyQWN0aXZlOiAnYW5pbWF0aW9uOmVudGVyOmFjdGl2ZScsXHJcbiAgICBlbnRlckRvbmU6ICdhbmltYXRpb246ZW50ZXI6ZG9uZScsXHJcbiAgICBlbnRlclRpbWVvdXQ6ICdhbmltYXRpb246ZW50ZXI6dGltZW91dCcsXHJcbiAgICBsZWF2ZUJlZ2luOiAnYW5pbWF0aW9uOmxlYXZlOmJlZ2luJyxcclxuICAgIGxlYXZlQWN0aXZlOiAnYW5pbWF0aW9uOmxlYXZlOmFjdGl2ZScsXHJcbiAgICBsZWF2ZURvbmU6ICdhbmltYXRpb246bGVhdmU6ZG9uZScsXHJcbiAgICBsZWF2ZVRpbWVvdXQ6ICdhbmltYXRpb246bGVhdmU6dGltZW91dCcsXHJcbiAgICBzdGFnZ2VyTmV4dDogJ2FuaW1hdGlvbjpzdGFnZ2VyOm5leHQnLFxyXG4gICAgcmVtb3ZlQ2xhc3NCZWdpbjogJ2FuaW1hdGlvbjpyZW1vdmUtY2xhc3M6YmVnaW4nLFxyXG4gICAgcmVtb3ZlQ2xhc3NBY3RpdmU6ICdhbmltYXRpb246cmVtb3ZlLWNsYXNzOmFjdGl2ZScsXHJcbiAgICByZW1vdmVDbGFzc0RvbmU6ICdhbmltYXRpb246cmVtb3ZlLWNsYXNzOmRvbmUnLFxyXG4gICAgcmVtb3ZlQ2xhc3NUaW1lb3V0OiAnYW5pbWF0aW9uOnJlbW92ZS1jbGFzczp0aW1lb3V0JyxcclxuICAgIGFkZENsYXNzQmVnaW46ICdhbmltYXRpb246YWRkLWNsYXNzOmJlZ2luJyxcclxuICAgIGFkZENsYXNzQWN0aXZlOiAnYW5pbWF0aW9uOmFkZC1jbGFzczphY3RpdmUnLFxyXG4gICAgYWRkQ2xhc3NEb25lOiAnYW5pbWF0aW9uOmFkZC1jbGFzczpkb25lJyxcclxuICAgIGFkZENsYXNzVGltZW91dDogJ2FuaW1hdGlvbjphZGQtY2xhc3M6dGltZW91dCcsXHJcbiAgICBhbmltYXRlQmVnaW46ICdhbmltYXRpb246YW5pbWF0ZTpiZWdpbicsXHJcbiAgICBhbmltYXRlQWN0aXZlOiAnYW5pbWF0aW9uOmFuaW1hdGU6YWN0aXZlJyxcclxuICAgIGFuaW1hdGVEb25lOiAnYW5pbWF0aW9uOmFuaW1hdGU6ZG9uZScsXHJcbiAgICBhbmltYXRlVGltZW91dDogJ2FuaW1hdGlvbjphbmltYXRlOnRpbWVvdXQnLFxyXG4gICAgc2VxdWVuY2VCZWdpbjogJ2FuaW1hdGlvbjpzZXF1ZW5jZTpiZWdpbicsXHJcbiAgICBzZXF1ZW5jZURvbmU6ICdhbmltYXRpb246c2VxdWVuY2U6ZG9uZSdcclxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRPYnNlcnZlckRlY29yYXRvcihzZWxlY3Rvck9yQ29uZmlnLCBhbGwpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICB2YXIgYWN0dWFsVGFyZ2V0ID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyB0YXJnZXQuY29uc3RydWN0b3IgOiB0YXJnZXQ7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIGFjdHVhbFRhcmdldCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rvck9yQ29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBzZWxlY3Rvck9yQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yT3JDb25maWcsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZWN0b3JPckNvbmZpZy5hbGwgPSBhbGw7XHJcbiAgICAgICAgci5hZGRDaGlsZEJpbmRpbmcobmV3IENoaWxkT2JzZXJ2ZXIoc2VsZWN0b3JPckNvbmZpZykpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvck9yQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlQ2hpbGRPYnNlcnZlckRlY29yYXRvcihzZWxlY3Rvck9yQ29uZmlnLCB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiBjaGlsZChzZWxlY3Rvck9yQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlQ2hpbGRPYnNlcnZlckRlY29yYXRvcihzZWxlY3Rvck9yQ29uZmlnLCBmYWxzZSk7XHJcbn1cclxudmFyIENoaWxkT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hpbGRPYnNlcnZlcihjb25maWcpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLmNoYW5nZUhhbmRsZXIgPSBjb25maWcuY2hhbmdlSGFuZGxlciB8fCB0aGlzLm5hbWUgKyAnQ2hhbmdlZCc7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IGNvbmZpZy5zZWxlY3RvcjtcclxuICAgICAgICB0aGlzLmFsbCA9IGNvbmZpZy5hbGw7XHJcbiAgICB9XHJcbiAgICBDaGlsZE9ic2VydmVyLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAodmlld0hvc3QsIHZpZXdNb2RlbCwgY29udHJvbGxlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hpbGRPYnNlcnZlckJpbmRlcih0aGlzLnNlbGVjdG9yLCB2aWV3SG9zdCwgdGhpcy5uYW1lLCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIsIHRoaXMuY2hhbmdlSGFuZGxlciwgdGhpcy5hbGwpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDaGlsZE9ic2VydmVyO1xyXG59KCkpO1xyXG52YXIgbm9NdXRhdGlvbnMgPSBbXTtcclxuZnVuY3Rpb24gdHJhY2tNdXRhdGlvbihncm91cGVkTXV0YXRpb25zLCBiaW5kZXIsIHJlY29yZCkge1xyXG4gICAgdmFyIG11dGF0aW9ucyA9IGdyb3VwZWRNdXRhdGlvbnMuZ2V0KGJpbmRlcik7XHJcbiAgICBpZiAoIW11dGF0aW9ucykge1xyXG4gICAgICAgIG11dGF0aW9ucyA9IFtdO1xyXG4gICAgICAgIGdyb3VwZWRNdXRhdGlvbnMuc2V0KGJpbmRlciwgbXV0YXRpb25zKTtcclxuICAgIH1cclxuICAgIG11dGF0aW9ucy5wdXNoKHJlY29yZCk7XHJcbn1cclxuZnVuY3Rpb24gb25DaGlsZENoYW5nZShtdXRhdGlvbnMsIG9ic2VydmVyKSB7XHJcbiAgICB2YXIgYmluZGVycyA9IG9ic2VydmVyLmJpbmRlcnM7XHJcbiAgICB2YXIgYmluZGVyc0xlbmd0aCA9IGJpbmRlcnMubGVuZ3RoO1xyXG4gICAgdmFyIGdyb3VwZWRNdXRhdGlvbnMgPSBuZXcgTWFwKCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBtdXRhdGlvbnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgIHZhciByZWNvcmQgPSBtdXRhdGlvbnNbaV07XHJcbiAgICAgICAgdmFyIGFkZGVkID0gcmVjb3JkLmFkZGVkTm9kZXM7XHJcbiAgICAgICAgdmFyIHJlbW92ZWQgPSByZWNvcmQucmVtb3ZlZE5vZGVzO1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IHJlbW92ZWQubGVuZ3RoOyBqIDwgamo7ICsraikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHJlbW92ZWRbal07XHJcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJpbmRlcnNMZW5ndGg7ICsraykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiaW5kZXIgPSBiaW5kZXJzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5kZXIub25SZW1vdmUobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tNdXRhdGlvbihncm91cGVkTXV0YXRpb25zLCBiaW5kZXIsIHJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGFkZGVkLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBhZGRlZFtqXTtcclxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYmluZGVyc0xlbmd0aDsgKytrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpbmRlciA9IGJpbmRlcnNba107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRlci5vbkFkZChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja011dGF0aW9uKGdyb3VwZWRNdXRhdGlvbnMsIGJpbmRlciwgcmVjb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBncm91cGVkTXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uUmVjb3JkcywgYmluZGVyKSB7XHJcbiAgICAgICAgaWYgKGJpbmRlci5pc0JvdW5kICYmIGJpbmRlci5jaGFuZ2VIYW5kbGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGJpbmRlci52aWV3TW9kZWxbYmluZGVyLmNoYW5nZUhhbmRsZXJdKG11dGF0aW9uUmVjb3Jkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxudmFyIENoaWxkT2JzZXJ2ZXJCaW5kZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hpbGRPYnNlcnZlckJpbmRlcihzZWxlY3Rvciwgdmlld0hvc3QsIHByb3BlcnR5LCB2aWV3TW9kZWwsIGNvbnRyb2xsZXIsIGNoYW5nZUhhbmRsZXIsIGFsbCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuICAgICAgICB0aGlzLnZpZXdIb3N0ID0gdmlld0hvc3Q7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xyXG4gICAgICAgIHRoaXMudmlld01vZGVsID0gdmlld01vZGVsO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyID0gY2hhbmdlSGFuZGxlciBpbiB2aWV3TW9kZWwgPyBjaGFuZ2VIYW5kbGVyIDogbnVsbDtcclxuICAgICAgICB0aGlzLnVzZXNTaGFkb3dET00gPSBjb250cm9sbGVyLmJlaGF2aW9yLnVzZXNTaGFkb3dET007XHJcbiAgICAgICAgdGhpcy5hbGwgPSBhbGw7XHJcbiAgICAgICAgaWYgKCF0aGlzLnVzZXNTaGFkb3dET00gJiYgY29udHJvbGxlci52aWV3ICYmIGNvbnRyb2xsZXIudmlldy5jb250ZW50Vmlldykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRWaWV3ID0gY29udHJvbGxlci52aWV3LmNvbnRlbnRWaWV3O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50VmlldyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIENoaWxkT2JzZXJ2ZXJCaW5kZXIucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmIChlbGVtZW50Lm1hdGNoZXModGhpcy5zZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudFZpZXcgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50VmlldyA9IHRoaXMuY29udGVudFZpZXc7XHJcbiAgICAgICAgICAgIHZhciBhc3NpZ25lZFNsb3QgPSBlbGVtZW50LmF1QXNzaWduZWRTbG90O1xyXG4gICAgICAgICAgICBpZiAoYXNzaWduZWRTbG90ICYmIGFzc2lnbmVkU2xvdC5wcm9qZWN0RnJvbUFuY2hvcnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbmNob3JzID0gYXNzaWduZWRTbG90LnByb2plY3RGcm9tQW5jaG9ycztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFuY2hvcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmNob3JzW2ldLmF1T3duZXJWaWV3ID09PSBjb250ZW50Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYXVPd25lclZpZXcgPT09IGNvbnRlbnRWaWV3O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgQ2hpbGRPYnNlcnZlckJpbmRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XHJcbiAgICAgICAgdmFyIHZpZXdIb3N0ID0gdGhpcy52aWV3SG9zdDtcclxuICAgICAgICB2YXIgdmlld01vZGVsID0gdGhpcy52aWV3TW9kZWw7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gdmlld0hvc3QuX19jaGlsZE9ic2VydmVyX187XHJcbiAgICAgICAgaWYgKCFvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IHZpZXdIb3N0Ll9fY2hpbGRPYnNlcnZlcl9fID0gRE9NLmNyZWF0ZU11dGF0aW9uT2JzZXJ2ZXIob25DaGlsZENoYW5nZSk7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogIXRoaXMudXNlc1NoYWRvd0RPTVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHZpZXdIb3N0LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuYmluZGVycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZlci5iaW5kZXJzLnB1c2godGhpcyk7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlc1NoYWRvd0RPTSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHZpZXdIb3N0LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHZpZXdNb2RlbFt0aGlzLnByb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgIGlmICghaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IHZpZXdNb2RlbFt0aGlzLnByb3BlcnR5XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMuc3BsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaGVzKGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goY3VycmVudC5hdSAmJiBjdXJyZW50LmF1LmNvbnRyb2xsZXIgPyBjdXJyZW50LmF1LmNvbnRyb2xsZXIudmlld01vZGVsIDogY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5nZUhhbmRsZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFt0aGlzLmNoYW5nZUhhbmRsZXJdKG5vTXV0YXRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hlcyhjdXJyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjdXJyZW50LmF1ICYmIGN1cnJlbnQuYXUuY29udHJvbGxlciA/IGN1cnJlbnQuYXUuY29udHJvbGxlci52aWV3TW9kZWwgOiBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFt0aGlzLnByb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFuZ2VIYW5kbGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFt0aGlzLmNoYW5nZUhhbmRsZXJdKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENoaWxkT2JzZXJ2ZXJCaW5kZXIucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5tYXRjaGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuYXUgJiYgZWxlbWVudC5hdS5jb250cm9sbGVyID8gZWxlbWVudC5hdS5jb250cm9sbGVyLnZpZXdNb2RlbCA6IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gKHRoaXMudmlld01vZGVsW3RoaXMucHJvcGVydHldIHx8ICh0aGlzLnZpZXdNb2RlbFt0aGlzLnByb3BlcnR5XSA9IFtdKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMudmlld01vZGVsW3RoaXMucHJvcGVydHldO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxbdGhpcy5wcm9wZXJ0eV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNCb3VuZCAmJiB0aGlzLmNoYW5nZUhhbmRsZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFt0aGlzLmNoYW5nZUhhbmRsZXJdKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgQ2hpbGRPYnNlcnZlckJpbmRlci5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1hdGNoZXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudC5hdSAmJiBlbGVtZW50LmF1LmNvbnRyb2xsZXIgPyBlbGVtZW50LmF1LmNvbnRyb2xsZXIudmlld01vZGVsIDogZWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSAodGhpcy52aWV3TW9kZWxbdGhpcy5wcm9wZXJ0eV0gfHwgKHRoaXMudmlld01vZGVsW3RoaXMucHJvcGVydHldID0gW10pKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdG9yID09PSAnKicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hlcyhwcmV2KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXRlbXMuc3BsaWNlKGluZGV4LCAwLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbFt0aGlzLnByb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0JvdW5kICYmIHRoaXMuY2hhbmdlSGFuZGxlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxbdGhpcy5jaGFuZ2VIYW5kbGVyXSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIENoaWxkT2JzZXJ2ZXJCaW5kZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcclxuICAgICAgICB2YXIgY2hpbGRPYnNlcnZlciA9IHRoaXMudmlld0hvc3QuX19jaGlsZE9ic2VydmVyX187XHJcbiAgICAgICAgaWYgKGNoaWxkT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIGJpbmRlcnMgPSBjaGlsZE9ic2VydmVyLmJpbmRlcnM7XHJcbiAgICAgICAgICAgIGlmIChiaW5kZXJzICYmIGJpbmRlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gYmluZGVycy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBiaW5kZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGJpbmRlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRPYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3SG9zdC5fX2NoaWxkT2JzZXJ2ZXJfXyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudXNlc1NoYWRvd0RPTSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxbdGhpcy5wcm9wZXJ0eV0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDaGlsZE9ic2VydmVyQmluZGVyO1xyXG59KCkpO1xuXG52YXIgRWxlbWVudENvbmZpZ1Jlc291cmNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVsZW1lbnRDb25maWdSZXNvdXJjZSgpIHtcclxuICAgIH1cclxuICAgIEVsZW1lbnRDb25maWdSZXNvdXJjZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChjb250YWluZXIsIHRhcmdldCkgeyB9O1xyXG4gICAgRWxlbWVudENvbmZpZ1Jlc291cmNlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChyZWdpc3RyeSwgbmFtZSkgeyB9O1xyXG4gICAgRWxlbWVudENvbmZpZ1Jlc291cmNlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IG5ldyB0YXJnZXQoKTtcclxuICAgICAgICB2YXIgZXZlbnRNYW5hZ2VyID0gY29udGFpbmVyLmdldChFdmVudE1hbmFnZXIpO1xyXG4gICAgICAgIGV2ZW50TWFuYWdlci5yZWdpc3RlckVsZW1lbnRDb25maWcoY29uZmlnKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRWxlbWVudENvbmZpZ1Jlc291cmNlO1xyXG59KCkpO1xuXG5mdW5jdGlvbiByZXNvdXJjZShpbnN0YW5jZU9yQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHZhciBpc0NvbmZpZyA9IHR5cGVvZiBpbnN0YW5jZU9yQ29uZmlnID09PSAnc3RyaW5nJyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5zdGFuY2VPckNvbmZpZykgPT09IE9iamVjdC5wcm90b3R5cGU7XHJcbiAgICAgICAgaWYgKGlzQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC4kcmVzb3VyY2UgPSBpbnN0YW5jZU9yQ29uZmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBpbnN0YW5jZU9yQ29uZmlnLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gYmVoYXZpb3Iob3ZlcnJpZGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKG92ZXJyaWRlIGluc3RhbmNlb2YgSHRtbEJlaGF2aW9yUmVzb3VyY2UpIHtcclxuICAgICAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBvdmVycmlkZSwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByID0gbWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24obWV0YWRhdGEucmVzb3VyY2UsIEh0bWxCZWhhdmlvclJlc291cmNlLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHIsIG92ZXJyaWRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbUVsZW1lbnQobmFtZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB2YXIgciA9IG1ldGFkYXRhLmdldE9yQ3JlYXRlT3duKG1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdGFyZ2V0KTtcclxuICAgICAgICByLmVsZW1lbnROYW1lID0gdmFsaWRhdGVCZWhhdmlvck5hbWUobmFtZSwgJ2N1c3RvbSBlbGVtZW50Jyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbUF0dHJpYnV0ZShuYW1lLCBkZWZhdWx0QmluZGluZ01vZGUsIGFsaWFzZXMpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHRhcmdldCk7XHJcbiAgICAgICAgci5hdHRyaWJ1dGVOYW1lID0gdmFsaWRhdGVCZWhhdmlvck5hbWUobmFtZSwgJ2N1c3RvbSBhdHRyaWJ1dGUnKTtcclxuICAgICAgICByLmF0dHJpYnV0ZURlZmF1bHRCaW5kaW5nTW9kZSA9IGRlZmF1bHRCaW5kaW5nTW9kZTtcclxuICAgICAgICByLmFsaWFzZXMgPSBhbGlhc2VzO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0ZW1wbGF0ZUNvbnRyb2xsZXIodGFyZ2V0KSB7XHJcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHQpO1xyXG4gICAgICAgIHIubGlmdHNDb250ZW50ID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gdGFyZ2V0ID8gZGVjbyh0YXJnZXQpIDogZGVjbztcclxufVxyXG5mdW5jdGlvbiBiaW5kYWJsZShuYW1lT3JDb25maWdPclRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XHJcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleTIsIGRlc2NyaXB0b3IyKSB7XHJcbiAgICAgICAgdmFyIGFjdHVhbFRhcmdldCA9IGtleTIgPyB0YXJnZXQuY29uc3RydWN0b3IgOiB0YXJnZXQ7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIGFjdHVhbFRhcmdldCk7XHJcbiAgICAgICAgdmFyIHByb3A7XHJcbiAgICAgICAgaWYgKGtleTIpIHtcclxuICAgICAgICAgICAgbmFtZU9yQ29uZmlnT3JUYXJnZXQgPSBuYW1lT3JDb25maWdPclRhcmdldCB8fCB7fTtcclxuICAgICAgICAgICAgbmFtZU9yQ29uZmlnT3JUYXJnZXQubmFtZSA9IGtleTI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3AgPSBuZXcgQmluZGFibGVQcm9wZXJ0eShuYW1lT3JDb25maWdPclRhcmdldCk7XHJcbiAgICAgICAgcmV0dXJuIHByb3AucmVnaXN0ZXJXaXRoKGFjdHVhbFRhcmdldCwgciwgZGVzY3JpcHRvcjIpO1xyXG4gICAgfTtcclxuICAgIGlmICghbmFtZU9yQ29uZmlnT3JUYXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gZGVjbztcclxuICAgIH1cclxuICAgIGlmIChrZXkpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gbmFtZU9yQ29uZmlnT3JUYXJnZXQ7XHJcbiAgICAgICAgbmFtZU9yQ29uZmlnT3JUYXJnZXQgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBkZWNvKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWNvO1xyXG59XHJcbmZ1bmN0aW9uIGR5bmFtaWNPcHRpb25zKHRhcmdldCkge1xyXG4gICAgdmFyIGRlY28gPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHZhciByID0gbWV0YWRhdGEuZ2V0T3JDcmVhdGVPd24obWV0YWRhdGEucmVzb3VyY2UsIEh0bWxCZWhhdmlvclJlc291cmNlLCB0KTtcclxuICAgICAgICByLmhhc0R5bmFtaWNPcHRpb25zID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gdGFyZ2V0ID8gZGVjbyh0YXJnZXQpIDogZGVjbztcclxufVxyXG52YXIgZGVmYXVsdFNoYWRvd0RPTU9wdGlvbnMgPSB7IG1vZGU6ICdvcGVuJyB9O1xyXG5mdW5jdGlvbiB1c2VTaGFkb3dET00odGFyZ2V0T3JPcHRpb25zKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB0YXJnZXRPck9wdGlvbnMgPT09ICdmdW5jdGlvbicgfHwgIXRhcmdldE9yT3B0aW9uc1xyXG4gICAgICAgID8gZGVmYXVsdFNoYWRvd0RPTU9wdGlvbnNcclxuICAgICAgICA6IHRhcmdldE9yT3B0aW9ucztcclxuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB2YXIgciA9IG1ldGFkYXRhLmdldE9yQ3JlYXRlT3duKG1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdCk7XHJcbiAgICAgICAgci50YXJnZXRTaGFkb3dET00gPSB0cnVlO1xyXG4gICAgICAgIHIuc2hhZG93RE9NT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHR5cGVvZiB0YXJnZXRPck9wdGlvbnMgPT09ICdmdW5jdGlvbicgPyBkZWNvKHRhcmdldE9yT3B0aW9ucykgOiBkZWNvO1xyXG59XHJcbmZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVzKHByb2Nlc3Nvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHQpO1xyXG4gICAgICAgIHIucHJvY2Vzc0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgYXR0cmlidXRlcywgZWxlbWVudEluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzb3IoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgYXR0cmlidXRlcywgZWxlbWVudEluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIExvZ01hbmFnZXIuZ2V0TG9nZ2VyKCd0ZW1wbGF0aW5nJykuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZG9Ob3RQcm9jZXNzQ29udGVudCgpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbmZ1bmN0aW9uIHByb2Nlc3NDb250ZW50KHByb2Nlc3Nvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdmFyIHIgPSBtZXRhZGF0YS5nZXRPckNyZWF0ZU93bihtZXRhZGF0YS5yZXNvdXJjZSwgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIHQpO1xyXG4gICAgICAgIHIucHJvY2Vzc0NvbnRlbnQgPSBwcm9jZXNzb3IgPyBmdW5jdGlvbiAoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgaW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzb3IoY29tcGlsZXIsIHJlc291cmNlcywgbm9kZSwgaW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgTG9nTWFuYWdlci5nZXRMb2dnZXIoJ3RlbXBsYXRpbmcnKS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IDogZG9Ob3RQcm9jZXNzQ29udGVudDtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY29udGFpbmVybGVzcyh0YXJnZXQpIHtcclxuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB2YXIgciA9IG1ldGFkYXRhLmdldE9yQ3JlYXRlT3duKG1ldGFkYXRhLnJlc291cmNlLCBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgdCk7XHJcbiAgICAgICAgci5jb250YWluZXJsZXNzID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gdGFyZ2V0ID8gZGVjbyh0YXJnZXQpIDogZGVjbztcclxufVxyXG5mdW5jdGlvbiB1c2VWaWV3U3RyYXRlZ3koc3RyYXRlZ3kpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgbWV0YWRhdGEuZGVmaW5lKFZpZXdMb2NhdG9yLnZpZXdTdHJhdGVneU1ldGFkYXRhS2V5LCBzdHJhdGVneSwgdGFyZ2V0KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdXNlVmlldyhwYXRoKSB7XHJcbiAgICByZXR1cm4gdXNlVmlld1N0cmF0ZWd5KG5ldyBSZWxhdGl2ZVZpZXdTdHJhdGVneShwYXRoKSk7XHJcbn1cclxuZnVuY3Rpb24gaW5saW5lVmlldyhtYXJrdXAsIGRlcGVuZGVuY2llcywgZGVwZW5kZW5jeUJhc2VVcmwpIHtcclxuICAgIHJldHVybiB1c2VWaWV3U3RyYXRlZ3kobmV3IElubGluZVZpZXdTdHJhdGVneShtYXJrdXAsIGRlcGVuZGVuY2llcywgZGVwZW5kZW5jeUJhc2VVcmwpKTtcclxufVxyXG5mdW5jdGlvbiBub1ZpZXcodGFyZ2V0T3JEZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSB7XHJcbiAgICB2YXIgdGFyZ2V0O1xyXG4gICAgdmFyIGRlcGVuZGVuY2llcztcclxuICAgIGlmICh0eXBlb2YgdGFyZ2V0T3JEZXBlbmRlbmNpZXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0YXJnZXQgPSB0YXJnZXRPckRlcGVuZGVuY2llcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGRlcGVuZGVuY2llcyA9IHRhcmdldE9yRGVwZW5kZW5jaWVzO1xyXG4gICAgICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHZhciBkZWNvID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICBtZXRhZGF0YS5kZWZpbmUoVmlld0xvY2F0b3Iudmlld1N0cmF0ZWd5TWV0YWRhdGFLZXksIG5ldyBOb1ZpZXdTdHJhdGVneShkZXBlbmRlbmNpZXMsIGRlcGVuZGVuY3lCYXNlVXJsKSwgdCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHRhcmdldCA/IGRlY28odGFyZ2V0KSA6IGRlY287XHJcbn1cclxuZnVuY3Rpb24gdmlldyh0ZW1wbGF0ZU9yQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHRhcmdldC4kdmlldyA9IHRlbXBsYXRlT3JDb25maWc7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGVsZW1lbnRDb25maWcodGFyZ2V0KSB7XHJcbiAgICB2YXIgZGVjbyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBuZXcgRWxlbWVudENvbmZpZ1Jlc291cmNlKCksIHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB0YXJnZXQgPyBkZWNvKHRhcmdldCkgOiBkZWNvO1xyXG59XHJcbmZ1bmN0aW9uIHZpZXdSZXNvdXJjZXMoKSB7XHJcbiAgICB2YXIgcmVzb3VyY2VzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHJlc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBtZXRhZGF0YS5kZWZpbmUoVmlld0VuZ2luZS52aWV3TW9kZWxSZXF1aXJlTWV0YWRhdGFLZXksIHJlc291cmNlcywgdGFyZ2V0KTtcclxuICAgIH07XHJcbn1cblxudmFyIFRlbXBsYXRpbmdFbmdpbmUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGVtcGxhdGluZ0VuZ2luZShjb250YWluZXIsIG1vZHVsZUFuYWx5emVyLCB2aWV3Q29tcGlsZXIsIGNvbXBvc2l0aW9uRW5naW5lKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuX21vZHVsZUFuYWx5emVyID0gbW9kdWxlQW5hbHl6ZXI7XHJcbiAgICAgICAgdGhpcy5fdmlld0NvbXBpbGVyID0gdmlld0NvbXBpbGVyO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uRW5naW5lID0gY29tcG9zaXRpb25FbmdpbmU7XHJcbiAgICAgICAgY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoQW5pbWF0b3IsIEFuaW1hdG9yLmluc3RhbmNlID0gbmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgfVxyXG4gICAgVGVtcGxhdGluZ0VuZ2luZS5wcm90b3R5cGUuY29uZmlndXJlQW5pbWF0b3IgPSBmdW5jdGlvbiAoYW5pbWF0b3IpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIudW5yZWdpc3RlcihBbmltYXRvcik7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoQW5pbWF0b3IsIEFuaW1hdG9yLmluc3RhbmNlID0gYW5pbWF0b3IpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdFbmdpbmUucHJvdG90eXBlLmNvbXBvc2UgPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wb3NpdGlvbkVuZ2luZS5jb21wb3NlKGNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdFbmdpbmUucHJvdG90eXBlLmVuaGFuY2UgPSBmdW5jdGlvbiAoaW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24gaW5zdGFuY2VvZiBET00uRWxlbWVudCkge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbiA9IHsgZWxlbWVudDogaW5zdHJ1Y3Rpb24gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbXBpbGVySW5zdHJ1Y3Rpb25zID0geyBsZXRFeHByZXNzaW9uczogW10gfTtcclxuICAgICAgICB2YXIgcmVzb3VyY2VzID0gaW5zdHJ1Y3Rpb24ucmVzb3VyY2VzIHx8IHRoaXMuX2NvbnRhaW5lci5nZXQoVmlld1Jlc291cmNlcyk7XHJcbiAgICAgICAgdGhpcy5fdmlld0NvbXBpbGVyLl9jb21waWxlTm9kZShpbnN0cnVjdGlvbi5lbGVtZW50LCByZXNvdXJjZXMsIGNvbXBpbGVySW5zdHJ1Y3Rpb25zLCBpbnN0cnVjdGlvbi5lbGVtZW50LnBhcmVudE5vZGUsICdyb290JywgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGZhY3RvcnkgPSBuZXcgVmlld0ZhY3RvcnkoaW5zdHJ1Y3Rpb24uZWxlbWVudCwgY29tcGlsZXJJbnN0cnVjdGlvbnMsIHJlc291cmNlcyk7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGluc3RydWN0aW9uLmNvbnRhaW5lciB8fCB0aGlzLl9jb250YWluZXIuY3JlYXRlQ2hpbGQoKTtcclxuICAgICAgICB2YXIgdmlldyA9IGZhY3RvcnkuY3JlYXRlKGNvbnRhaW5lciwgQmVoYXZpb3JJbnN0cnVjdGlvbi5lbmhhbmNlKCkpO1xyXG4gICAgICAgIHZpZXcuYmluZChpbnN0cnVjdGlvbi5iaW5kaW5nQ29udGV4dCB8fCB7fSwgaW5zdHJ1Y3Rpb24ub3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICB2aWV3LmZpcnN0Q2hpbGQgPSB2aWV3Lmxhc3RDaGlsZCA9IHZpZXcuZnJhZ21lbnQ7XHJcbiAgICAgICAgdmlldy5mcmFnbWVudCA9IERPTS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgdmlldy5hdHRhY2hlZCgpO1xyXG4gICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdFbmdpbmUuaW5qZWN0ID0gW0NvbnRhaW5lciwgTW9kdWxlQW5hbHl6ZXIsIFZpZXdDb21waWxlciwgQ29tcG9zaXRpb25FbmdpbmVdO1xyXG4gICAgcmV0dXJuIFRlbXBsYXRpbmdFbmdpbmU7XHJcbn0oKSk7XG5cbmV4cG9ydCB7IEFuaW1hdG9yLCBCZWhhdmlvckluc3RydWN0aW9uLCBCZWhhdmlvclByb3BlcnR5T2JzZXJ2ZXIsIEJpbmRhYmxlUHJvcGVydHksIEJpbmRpbmdMYW5ndWFnZSwgQm91bmRWaWV3RmFjdG9yeSwgQ29tcG9zaXRpb25FbmdpbmUsIENvbXBvc2l0aW9uVHJhbnNhY3Rpb24sIENvbXBvc2l0aW9uVHJhbnNhY3Rpb25Ob3RpZmllciwgQ29tcG9zaXRpb25UcmFuc2FjdGlvbk93bmVyc2hpcFRva2VuLCBDb250cm9sbGVyLCBDb252ZW50aW9uYWxWaWV3U3RyYXRlZ3ksIEVsZW1lbnRDb25maWdSZXNvdXJjZSwgRWxlbWVudEV2ZW50cywgSHRtbEJlaGF2aW9yUmVzb3VyY2UsIElubGluZVZpZXdTdHJhdGVneSwgTW9kdWxlQW5hbHl6ZXIsIE5vVmlld1N0cmF0ZWd5LCBQYXNzVGhyb3VnaFNsb3QsIFJlbGF0aXZlVmlld1N0cmF0ZWd5LCBSZXNvdXJjZURlc2NyaXB0aW9uLCBSZXNvdXJjZUxvYWRDb250ZXh0LCBSZXNvdXJjZU1vZHVsZSwgU2hhZG93RE9NLCBTaGFkb3dTbG90LCBTbG90Q3VzdG9tQXR0cmlidXRlLCBTdGF0aWNWaWV3U3RyYXRlZ3ksIFN3YXBTdHJhdGVnaWVzLCBUYXJnZXRJbnN0cnVjdGlvbiwgVGVtcGxhdGVSZWdpc3RyeVZpZXdTdHJhdGVneSwgVGVtcGxhdGluZ0VuZ2luZSwgVmlldywgVmlld0NvbXBpbGVJbnN0cnVjdGlvbiwgVmlld0NvbXBpbGVyLCBWaWV3RW5naW5lLCBWaWV3RW5naW5lSG9va3NSZXNvdXJjZSwgVmlld0ZhY3RvcnksIFZpZXdMb2NhdG9yLCBWaWV3UmVzb3VyY2VzLCBWaWV3U2xvdCwgX2h5cGhlbmF0ZSwgX2lzQWxsV2hpdGVzcGFjZSwgYW5pbWF0aW9uRXZlbnQsIGJlaGF2aW9yLCBiaW5kYWJsZSwgY2hpbGQsIGNoaWxkcmVuLCBjb250YWluZXJsZXNzLCBjdXN0b21BdHRyaWJ1dGUsIGN1c3RvbUVsZW1lbnQsIGR5bmFtaWNPcHRpb25zLCBlbGVtZW50Q29uZmlnLCBpbmxpbmVWaWV3LCBub1ZpZXcsIHByb2Nlc3NBdHRyaWJ1dGVzLCBwcm9jZXNzQ29udGVudCwgcmVzb3VyY2UsIHRlbXBsYXRlQ29udHJvbGxlciwgdXNlU2hhZG93RE9NLCB1c2VWaWV3LCB1c2VWaWV3U3RyYXRlZ3ksIHZhbGlkYXRlQmVoYXZpb3JOYW1lLCB2aWV3LCB2aWV3RW5naW5lSG9va3MsIHZpZXdSZXNvdXJjZXMsIHZpZXdTdHJhdGVneSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVyZWxpYS10ZW1wbGF0aW5nLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtdGVtcGxhdGluZy9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtdGVtcGxhdGluZy5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiXG5cbmV4cG9ydCB2YXIgbG9nTGV2ZWwgPSB7XG4gIG5vbmU6IDAsXG4gIGVycm9yOiAxMCxcbiAgd2FybjogMjAsXG4gIGluZm86IDMwLFxuICBkZWJ1ZzogNDBcbn07XG5cbnZhciBsb2dnZXJzID0ge307XG52YXIgYXBwZW5kZXJzID0gW107XG52YXIgZ2xvYmFsRGVmYXVsdExldmVsID0gbG9nTGV2ZWwubm9uZTtcblxudmFyIHN0YW5kYXJkTGV2ZWxzID0gWydub25lJywgJ2Vycm9yJywgJ3dhcm4nLCAnaW5mbycsICdkZWJ1ZyddO1xuZnVuY3Rpb24gaXNTdGFuZGFyZExldmVsKGxldmVsKSB7XG4gIHJldHVybiBzdGFuZGFyZExldmVscy5maWx0ZXIoZnVuY3Rpb24gKGwpIHtcbiAgICByZXR1cm4gbCA9PT0gbGV2ZWw7XG4gIH0pLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZEFyZ3MoKSB7XG4gIHJldHVybiBbdGhpc10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xufVxuXG5mdW5jdGlvbiBsb2dGYWN0b3J5KGxldmVsKSB7XG4gIHZhciB0aHJlc2hvbGQgPSBsb2dMZXZlbFtsZXZlbF07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYXJncyA9IGFwcGVuZEFyZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgaSA9IGFwcGVuZGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIF9hcHBlbmRlcnMkaTtcblxuICAgICAgKF9hcHBlbmRlcnMkaSA9IGFwcGVuZGVyc1tpXSlbbGV2ZWxdLmFwcGx5KF9hcHBlbmRlcnMkaSwgYXJncyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBsb2dGYWN0b3J5Q3VzdG9tKGxldmVsKSB7XG4gIHZhciB0aHJlc2hvbGQgPSBsb2dMZXZlbFtsZXZlbF07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYXJncyA9IGFwcGVuZEFyZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgaSA9IGFwcGVuZGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIGFwcGVuZGVyID0gYXBwZW5kZXJzW2ldO1xuICAgICAgaWYgKGFwcGVuZGVyW2xldmVsXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFwcGVuZGVyW2xldmVsXS5hcHBseShhcHBlbmRlciwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb25uZWN0TG9nZ2VycygpIHtcbiAgdmFyIHByb3RvID0gTG9nZ2VyLnByb3RvdHlwZTtcbiAgZm9yICh2YXIgX2xldmVsIGluIGxvZ0xldmVsKSB7XG4gICAgaWYgKGlzU3RhbmRhcmRMZXZlbChfbGV2ZWwpKSB7XG4gICAgICBpZiAoX2xldmVsICE9PSAnbm9uZScpIHtcbiAgICAgICAgcHJvdG9bX2xldmVsXSA9IGxvZ0ZhY3RvcnkoX2xldmVsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHJvdG9bX2xldmVsXSA9IGxvZ0ZhY3RvcnlDdXN0b20oX2xldmVsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzY29ubmVjdExvZ2dlcnMoKSB7XG4gIHZhciBwcm90byA9IExvZ2dlci5wcm90b3R5cGU7XG4gIGZvciAodmFyIF9sZXZlbDIgaW4gbG9nTGV2ZWwpIHtcbiAgICBpZiAoX2xldmVsMiAhPT0gJ25vbmUnKSB7XG4gICAgICBwcm90b1tfbGV2ZWwyXSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKGlkKSB7XG4gIHJldHVybiBsb2dnZXJzW2lkXSB8fCBuZXcgTG9nZ2VyKGlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFwcGVuZGVyKGFwcGVuZGVyKSB7XG4gIGlmIChhcHBlbmRlcnMucHVzaChhcHBlbmRlcikgPT09IDEpIHtcbiAgICBjb25uZWN0TG9nZ2VycygpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBcHBlbmRlcihhcHBlbmRlcikge1xuICBhcHBlbmRlcnMgPSBhcHBlbmRlcnMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGEgIT09IGFwcGVuZGVyO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcGVuZGVycygpIHtcbiAgcmV0dXJuIFtdLmNvbmNhdChhcHBlbmRlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBcHBlbmRlcnMoKSB7XG4gIGFwcGVuZGVycyA9IFtdO1xuICBkaXNjb25uZWN0TG9nZ2VycygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3VzdG9tTGV2ZWwobmFtZSwgdmFsdWUpIHtcbiAgaWYgKGxvZ0xldmVsW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBFcnJvcignTG9nIGxldmVsIFwiJyArIG5hbWUgKyAnXCIgYWxyZWFkeSBleGlzdHMuJyk7XG4gIH1cblxuICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gIH1cblxuICBsb2dMZXZlbFtuYW1lXSA9IHZhbHVlO1xuXG4gIGlmIChhcHBlbmRlcnMubGVuZ3RoID4gMCkge1xuICAgIGNvbm5lY3RMb2dnZXJzKCk7XG4gIH0gZWxzZSB7XG4gICAgTG9nZ2VyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICgpIHt9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDdXN0b21MZXZlbChuYW1lKSB7XG4gIGlmIChsb2dMZXZlbFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzU3RhbmRhcmRMZXZlbChuYW1lKSkge1xuICAgIHRocm93IEVycm9yKCdCdWlsdC1pbiBsb2cgbGV2ZWwgXCInICsgbmFtZSArICdcIiBjYW5ub3QgYmUgcmVtb3ZlZC4nKTtcbiAgfVxuXG4gIGRlbGV0ZSBsb2dMZXZlbFtuYW1lXTtcbiAgZGVsZXRlIExvZ2dlci5wcm90b3R5cGVbbmFtZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRMZXZlbChsZXZlbCkge1xuICBnbG9iYWxEZWZhdWx0TGV2ZWwgPSBsZXZlbDtcbiAgZm9yICh2YXIga2V5IGluIGxvZ2dlcnMpIHtcbiAgICBsb2dnZXJzW2tleV0uc2V0TGV2ZWwobGV2ZWwpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMZXZlbCgpIHtcbiAgcmV0dXJuIGdsb2JhbERlZmF1bHRMZXZlbDtcbn1cblxuZXhwb3J0IHZhciBMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExvZ2dlcihpZCkge1xuICAgIFxuXG4gICAgdmFyIGNhY2hlZCA9IGxvZ2dlcnNbaWRdO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuXG4gICAgbG9nZ2Vyc1tpZF0gPSB0aGlzO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmxldmVsID0gZ2xvYmFsRGVmYXVsdExldmVsO1xuICB9XG5cbiAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKG1lc3NhZ2UpIHt9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIGluZm8obWVzc2FnZSkge307XG5cbiAgTG9nZ2VyLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gd2FybihtZXNzYWdlKSB7fTtcblxuICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge307XG5cbiAgTG9nZ2VyLnByb3RvdHlwZS5zZXRMZXZlbCA9IGZ1bmN0aW9uIHNldExldmVsKGxldmVsKSB7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuaXNEZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbiBpc0RlYnVnRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbCA9PT0gbG9nTGV2ZWwuZGVidWc7XG4gIH07XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXVyZWxpYS1sb2dnaW5nL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS1sb2dnaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJleHBvcnQgeyBfZ2V0QXJyYXlPYnNlcnZlciBhcyBnZXRBcnJheU9ic2VydmVyIH07XG5leHBvcnQgeyBfZ2V0TWFwT2JzZXJ2ZXIgYXMgZ2V0TWFwT2JzZXJ2ZXIgfTtcbmV4cG9ydCB7IF9nZXRTZXRPYnNlcnZlciBhcyBnZXRTZXRPYnNlcnZlciB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZGVjLCBfZGVjMiwgX2NsYXNzLCBfZGVjMywgX2NsYXNzMiwgX2RlYzQsIF9jbGFzczMsIF9kZWM1LCBfY2xhc3M1LCBfZGVjNiwgX2NsYXNzNywgX2RlYzcsIF9jbGFzczgsIF9kZWM4LCBfY2xhc3M5LCBfZGVjOSwgX2NsYXNzMTAsIF9jbGFzczEyLCBfdGVtcCwgX2RlYzEwLCBfY2xhc3MxMywgX2NsYXNzMTQsIF90ZW1wMjtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cblxuaW1wb3J0ICogYXMgTG9nTWFuYWdlciBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuaW1wb3J0IHsgUExBVEZPUk0sIERPTSB9IGZyb20gJ2F1cmVsaWEtcGFsJztcbmltcG9ydCB7IFRhc2tRdWV1ZSB9IGZyb20gJ2F1cmVsaWEtdGFzay1xdWV1ZSc7XG5pbXBvcnQgeyBtZXRhZGF0YSB9IGZyb20gJ2F1cmVsaWEtbWV0YWRhdGEnO1xuXG5leHBvcnQgdmFyIHRhcmdldENvbnRleHQgPSAnQmluZGluZzp0YXJnZXQnO1xuZXhwb3J0IHZhciBzb3VyY2VDb250ZXh0ID0gJ0JpbmRpbmc6c291cmNlJztcblxudmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2UobmFtZSkge1xuICBpZiAobmFtZSBpbiBtYXApIHtcbiAgICByZXR1cm4gbWFwW25hbWVdO1xuICB9XG4gIHZhciByZXN1bHQgPSBuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zbGljZSgxKS5yZXBsYWNlKC9bXy4tXShcXHd8JCkvZywgZnVuY3Rpb24gKF8sIHgpIHtcbiAgICByZXR1cm4geC50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbiAgbWFwW25hbWVdID0gcmVzdWx0O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3ZlcnJpZGVDb250ZXh0KGJpbmRpbmdDb250ZXh0LCBwYXJlbnRPdmVycmlkZUNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kaW5nQ29udGV4dDogYmluZGluZ0NvbnRleHQsXG4gICAgcGFyZW50T3ZlcnJpZGVDb250ZXh0OiBwYXJlbnRPdmVycmlkZUNvbnRleHQgfHwgbnVsbFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dEZvcihuYW1lLCBzY29wZSwgYW5jZXN0b3IpIHtcbiAgdmFyIG9jID0gc2NvcGUub3ZlcnJpZGVDb250ZXh0O1xuXG4gIGlmIChhbmNlc3Rvcikge1xuICAgIHdoaWxlIChhbmNlc3RvciAmJiBvYykge1xuICAgICAgYW5jZXN0b3ItLTtcbiAgICAgIG9jID0gb2MucGFyZW50T3ZlcnJpZGVDb250ZXh0O1xuICAgIH1cbiAgICBpZiAoYW5jZXN0b3IgfHwgIW9jKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZSBpbiBvYyA/IG9jIDogb2MuYmluZGluZ0NvbnRleHQ7XG4gIH1cblxuICB3aGlsZSAob2MgJiYgIShuYW1lIGluIG9jKSAmJiAhKG9jLmJpbmRpbmdDb250ZXh0ICYmIG5hbWUgaW4gb2MuYmluZGluZ0NvbnRleHQpKSB7XG4gICAgb2MgPSBvYy5wYXJlbnRPdmVycmlkZUNvbnRleHQ7XG4gIH1cbiAgaWYgKG9jKSB7XG4gICAgcmV0dXJuIG5hbWUgaW4gb2MgPyBvYyA6IG9jLmJpbmRpbmdDb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlLmJpbmRpbmdDb250ZXh0IHx8IHNjb3BlLm92ZXJyaWRlQ29udGV4dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNjb3BlRm9yVGVzdChiaW5kaW5nQ29udGV4dCwgcGFyZW50QmluZGluZ0NvbnRleHQpIHtcbiAgaWYgKHBhcmVudEJpbmRpbmdDb250ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRpbmdDb250ZXh0OiBiaW5kaW5nQ29udGV4dCxcbiAgICAgIG92ZXJyaWRlQ29udGV4dDogY3JlYXRlT3ZlcnJpZGVDb250ZXh0KGJpbmRpbmdDb250ZXh0LCBjcmVhdGVPdmVycmlkZUNvbnRleHQocGFyZW50QmluZGluZ0NvbnRleHQpKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBiaW5kaW5nQ29udGV4dDogYmluZGluZ0NvbnRleHQsXG4gICAgb3ZlcnJpZGVDb250ZXh0OiBjcmVhdGVPdmVycmlkZUNvbnRleHQoYmluZGluZ0NvbnRleHQpXG4gIH07XG59XG5cbnZhciBzbG90TmFtZXMgPSBbXTtcbnZhciB2ZXJzaW9uU2xvdE5hbWVzID0gW107XG52YXIgbGFzdFNsb3QgPSAtMTtcbmZ1bmN0aW9uIGVuc3VyZUVub3VnaFNsb3ROYW1lcyhjdXJyZW50U2xvdCkge1xuICBpZiAoY3VycmVudFNsb3QgPT09IGxhc3RTbG90KSB7XG4gICAgbGFzdFNsb3QgKz0gNTtcbiAgICB2YXIgaWkgPSBzbG90TmFtZXMubGVuZ3RoID0gdmVyc2lvblNsb3ROYW1lcy5sZW5ndGggPSBsYXN0U2xvdCArIDE7XG4gICAgZm9yICh2YXIgaSA9IGN1cnJlbnRTbG90ICsgMTsgaSA8IGlpOyArK2kpIHtcbiAgICAgIHNsb3ROYW1lc1tpXSA9ICdfb2JzZXJ2ZXInICsgaTtcbiAgICAgIHZlcnNpb25TbG90TmFtZXNbaV0gPSAnX29ic2VydmVyVmVyc2lvbicgKyBpO1xuICAgIH1cbiAgfVxufVxuZW5zdXJlRW5vdWdoU2xvdE5hbWVzKC0xKTtcblxuZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgdmFyIG9ic2VydmVyU2xvdHMgPSB0aGlzLl9vYnNlcnZlclNsb3RzID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5fb2JzZXJ2ZXJTbG90cztcbiAgdmFyIGkgPSBvYnNlcnZlclNsb3RzO1xuICB3aGlsZSAoaS0tICYmIHRoaXNbc2xvdE5hbWVzW2ldXSAhPT0gb2JzZXJ2ZXIpIHt9XG5cbiAgaWYgKGkgPT09IC0xKSB7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKHRoaXNbc2xvdE5hbWVzW2ldXSkge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICB0aGlzW3Nsb3ROYW1lc1tpXV0gPSBvYnNlcnZlcjtcbiAgICBvYnNlcnZlci5zdWJzY3JpYmUoc291cmNlQ29udGV4dCwgdGhpcyk7XG5cbiAgICBpZiAoaSA9PT0gb2JzZXJ2ZXJTbG90cykge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJTbG90cyA9IGkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl92ZXJzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl92ZXJzaW9uID0gMDtcbiAgfVxuICB0aGlzW3ZlcnNpb25TbG90TmFtZXNbaV1dID0gdGhpcy5fdmVyc2lvbjtcbiAgZW5zdXJlRW5vdWdoU2xvdE5hbWVzKGkpO1xufVxuXG5mdW5jdGlvbiBvYnNlcnZlUHJvcGVydHkob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICBhZGRPYnNlcnZlci5jYWxsKHRoaXMsIG9ic2VydmVyKTtcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZUFycmF5KGFycmF5KSB7XG4gIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldEFycmF5T2JzZXJ2ZXIoYXJyYXkpO1xuICBhZGRPYnNlcnZlci5jYWxsKHRoaXMsIG9ic2VydmVyKTtcbn1cblxuZnVuY3Rpb24gdW5vYnNlcnZlKGFsbCkge1xuICB2YXIgaSA9IHRoaXMuX29ic2VydmVyU2xvdHM7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoYWxsIHx8IHRoaXNbdmVyc2lvblNsb3ROYW1lc1tpXV0gIT09IHRoaXMuX3ZlcnNpb24pIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHRoaXNbc2xvdE5hbWVzW2ldXTtcbiAgICAgIHRoaXNbc2xvdE5hbWVzW2ldXSA9IG51bGw7XG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoc291cmNlQ29udGV4dCwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0YWJsZSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucHJvdG90eXBlLm9ic2VydmVQcm9wZXJ0eSA9IG9ic2VydmVQcm9wZXJ0eTtcbiAgICB0YXJnZXQucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IG9ic2VydmVBcnJheTtcbiAgICB0YXJnZXQucHJvdG90eXBlLnVub2JzZXJ2ZSA9IHVub2JzZXJ2ZTtcbiAgICB0YXJnZXQucHJvdG90eXBlLmFkZE9ic2VydmVyID0gYWRkT2JzZXJ2ZXI7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIHF1ZXVlZCA9IHt9O1xudmFyIG5leHRJZCA9IDA7XG52YXIgbWluaW11bUltbWVkaWF0ZSA9IDEwMDtcbnZhciBmcmFtZUJ1ZGdldCA9IDE1O1xuXG52YXIgaXNGbHVzaFJlcXVlc3RlZCA9IGZhbHNlO1xudmFyIGltbWVkaWF0ZSA9IDA7XG5cbmZ1bmN0aW9uIGZsdXNoKGFuaW1hdGlvbkZyYW1lU3RhcnQpIHtcbiAgdmFyIGxlbmd0aCA9IHF1ZXVlLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIHZhciBiaW5kaW5nID0gcXVldWVbaV07XG4gICAgcXVldWVkW2JpbmRpbmcuX19jb25uZWN0UXVldWVJZF0gPSBmYWxzZTtcbiAgICBiaW5kaW5nLmNvbm5lY3QodHJ1ZSk7XG4gICAgaSsrO1xuXG4gICAgaWYgKGkgJSAxMDAgPT09IDAgJiYgUExBVEZPUk0ucGVyZm9ybWFuY2Uubm93KCkgLSBhbmltYXRpb25GcmFtZVN0YXJ0ID4gZnJhbWVCdWRnZXQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBxdWV1ZS5zcGxpY2UoMCwgaSk7XG5cbiAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgIFBMQVRGT1JNLnJlcXVlc3RBbmltYXRpb25GcmFtZShmbHVzaCk7XG4gIH0gZWxzZSB7XG4gICAgaXNGbHVzaFJlcXVlc3RlZCA9IGZhbHNlO1xuICAgIGltbWVkaWF0ZSA9IDA7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVCaW5kaW5nQ29ubmVjdChiaW5kaW5nKSB7XG4gIGlmIChpbW1lZGlhdGUgPCBtaW5pbXVtSW1tZWRpYXRlKSB7XG4gICAgaW1tZWRpYXRlKys7XG4gICAgYmluZGluZy5jb25uZWN0KGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaWQgPSBiaW5kaW5nLl9fY29ubmVjdFF1ZXVlSWQ7XG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlkID0gbmV4dElkO1xuICAgICAgbmV4dElkKys7XG4gICAgICBiaW5kaW5nLl9fY29ubmVjdFF1ZXVlSWQgPSBpZDtcbiAgICB9XG5cbiAgICBpZiAoIXF1ZXVlZFtpZF0pIHtcbiAgICAgIHF1ZXVlLnB1c2goYmluZGluZyk7XG4gICAgICBxdWV1ZWRbaWRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc0ZsdXNoUmVxdWVzdGVkKSB7XG4gICAgaXNGbHVzaFJlcXVlc3RlZCA9IHRydWU7XG4gICAgUExBVEZPUk0ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZsdXNoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29ubmVjdFF1ZXVlVGhyZXNob2xkKHZhbHVlKSB7XG4gIG1pbmltdW1JbW1lZGlhdGUgPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUNvbm5lY3RRdWV1ZSgpIHtcbiAgc2V0Q29ubmVjdFF1ZXVlVGhyZXNob2xkKDEwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNhYmxlQ29ubmVjdFF1ZXVlKCkge1xuICBzZXRDb25uZWN0UXVldWVUaHJlc2hvbGQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29ubmVjdFF1ZXVlU2l6ZSgpIHtcbiAgcmV0dXJuIHF1ZXVlLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSkge1xuICBpZiAodGhpcy5oYXNTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIXRoaXMuX2NvbnRleHQwKSB7XG4gICAgdGhpcy5fY29udGV4dDAgPSBjb250ZXh0O1xuICAgIHRoaXMuX2NhbGxhYmxlMCA9IGNhbGxhYmxlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghdGhpcy5fY29udGV4dDEpIHtcbiAgICB0aGlzLl9jb250ZXh0MSA9IGNvbnRleHQ7XG4gICAgdGhpcy5fY2FsbGFibGUxID0gY2FsbGFibGU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCF0aGlzLl9jb250ZXh0Mikge1xuICAgIHRoaXMuX2NvbnRleHQyID0gY29udGV4dDtcbiAgICB0aGlzLl9jYWxsYWJsZTIgPSBjYWxsYWJsZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIXRoaXMuX2NvbnRleHRzUmVzdCkge1xuICAgIHRoaXMuX2NvbnRleHRzUmVzdCA9IFtjb250ZXh0XTtcbiAgICB0aGlzLl9jYWxsYWJsZXNSZXN0ID0gW2NhbGxhYmxlXTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0aGlzLl9jb250ZXh0c1Jlc3QucHVzaChjb250ZXh0KTtcbiAgdGhpcy5fY2FsbGFibGVzUmVzdC5wdXNoKGNhbGxhYmxlKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgaWYgKHRoaXMuX2NvbnRleHQwID09PSBjb250ZXh0ICYmIHRoaXMuX2NhbGxhYmxlMCA9PT0gY2FsbGFibGUpIHtcbiAgICB0aGlzLl9jb250ZXh0MCA9IG51bGw7XG4gICAgdGhpcy5fY2FsbGFibGUwID0gbnVsbDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGhpcy5fY29udGV4dDEgPT09IGNvbnRleHQgJiYgdGhpcy5fY2FsbGFibGUxID09PSBjYWxsYWJsZSkge1xuICAgIHRoaXMuX2NvbnRleHQxID0gbnVsbDtcbiAgICB0aGlzLl9jYWxsYWJsZTEgPSBudWxsO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0aGlzLl9jb250ZXh0MiA9PT0gY29udGV4dCAmJiB0aGlzLl9jYWxsYWJsZTIgPT09IGNhbGxhYmxlKSB7XG4gICAgdGhpcy5fY29udGV4dDIgPSBudWxsO1xuICAgIHRoaXMuX2NhbGxhYmxlMiA9IG51bGw7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGNhbGxhYmxlcyA9IHRoaXMuX2NhbGxhYmxlc1Jlc3Q7XG4gIGlmIChjYWxsYWJsZXMgPT09IHVuZGVmaW5lZCB8fCBjYWxsYWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBjb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzUmVzdDtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoIShjYWxsYWJsZXNbaV0gPT09IGNhbGxhYmxlICYmIGNvbnRleHRzW2ldID09PSBjb250ZXh0KSAmJiBjYWxsYWJsZXMubGVuZ3RoID4gaSkge1xuICAgIGkrKztcbiAgfVxuICBpZiAoaSA+PSBjYWxsYWJsZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnRleHRzLnNwbGljZShpLCAxKTtcbiAgY2FsbGFibGVzLnNwbGljZShpLCAxKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBhcnJheVBvb2wxID0gW107XG52YXIgYXJyYXlQb29sMiA9IFtdO1xudmFyIHBvb2xVdGlsaXphdGlvbiA9IFtdO1xuXG5mdW5jdGlvbiBjYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gIHZhciBjb250ZXh0MCA9IHRoaXMuX2NvbnRleHQwO1xuICB2YXIgY2FsbGFibGUwID0gdGhpcy5fY2FsbGFibGUwO1xuICB2YXIgY29udGV4dDEgPSB0aGlzLl9jb250ZXh0MTtcbiAgdmFyIGNhbGxhYmxlMSA9IHRoaXMuX2NhbGxhYmxlMTtcbiAgdmFyIGNvbnRleHQyID0gdGhpcy5fY29udGV4dDI7XG4gIHZhciBjYWxsYWJsZTIgPSB0aGlzLl9jYWxsYWJsZTI7XG4gIHZhciBsZW5ndGggPSB0aGlzLl9jb250ZXh0c1Jlc3QgPyB0aGlzLl9jb250ZXh0c1Jlc3QubGVuZ3RoIDogMDtcbiAgdmFyIGNvbnRleHRzUmVzdCA9IHZvaWQgMDtcbiAgdmFyIGNhbGxhYmxlc1Jlc3QgPSB2b2lkIDA7XG4gIHZhciBwb29sSW5kZXggPSB2b2lkIDA7XG4gIHZhciBpID0gdm9pZCAwO1xuICBpZiAobGVuZ3RoKSB7XG4gICAgcG9vbEluZGV4ID0gcG9vbFV0aWxpemF0aW9uLmxlbmd0aDtcbiAgICB3aGlsZSAocG9vbEluZGV4LS0gJiYgcG9vbFV0aWxpemF0aW9uW3Bvb2xJbmRleF0pIHt9XG4gICAgaWYgKHBvb2xJbmRleCA8IDApIHtcbiAgICAgIHBvb2xJbmRleCA9IHBvb2xVdGlsaXphdGlvbi5sZW5ndGg7XG4gICAgICBjb250ZXh0c1Jlc3QgPSBbXTtcbiAgICAgIGNhbGxhYmxlc1Jlc3QgPSBbXTtcbiAgICAgIHBvb2xVdGlsaXphdGlvbi5wdXNoKHRydWUpO1xuICAgICAgYXJyYXlQb29sMS5wdXNoKGNvbnRleHRzUmVzdCk7XG4gICAgICBhcnJheVBvb2wyLnB1c2goY2FsbGFibGVzUmVzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvb2xVdGlsaXphdGlvbltwb29sSW5kZXhdID0gdHJ1ZTtcbiAgICAgIGNvbnRleHRzUmVzdCA9IGFycmF5UG9vbDFbcG9vbEluZGV4XTtcbiAgICAgIGNhbGxhYmxlc1Jlc3QgPSBhcnJheVBvb2wyW3Bvb2xJbmRleF07XG4gICAgfVxuXG4gICAgaSA9IGxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb250ZXh0c1Jlc3RbaV0gPSB0aGlzLl9jb250ZXh0c1Jlc3RbaV07XG4gICAgICBjYWxsYWJsZXNSZXN0W2ldID0gdGhpcy5fY2FsbGFibGVzUmVzdFtpXTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGV4dDApIHtcbiAgICBpZiAoY2FsbGFibGUwKSB7XG4gICAgICBjYWxsYWJsZTAuY2FsbChjb250ZXh0MCwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dDAobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRleHQxKSB7XG4gICAgaWYgKGNhbGxhYmxlMSkge1xuICAgICAgY2FsbGFibGUxLmNhbGwoY29udGV4dDEsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQxKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChjb250ZXh0Mikge1xuICAgIGlmIChjYWxsYWJsZTIpIHtcbiAgICAgIGNhbGxhYmxlMi5jYWxsKGNvbnRleHQyLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0MihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAobGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2FsbGFibGUgPSBjYWxsYWJsZXNSZXN0W2ldO1xuICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0c1Jlc3RbaV07XG4gICAgICBpZiAoY2FsbGFibGUpIHtcbiAgICAgICAgY2FsbGFibGUuY2FsbChjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dChuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgICAgY29udGV4dHNSZXN0W2ldID0gbnVsbDtcbiAgICAgIGNhbGxhYmxlc1Jlc3RbaV0gPSBudWxsO1xuICAgIH1cbiAgICBwb29sVXRpbGl6YXRpb25bcG9vbEluZGV4XSA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1N1YnNjcmliZXJzKCkge1xuICByZXR1cm4gISEodGhpcy5fY29udGV4dDAgfHwgdGhpcy5fY29udGV4dDEgfHwgdGhpcy5fY29udGV4dDIgfHwgdGhpcy5fY29udGV4dHNSZXN0ICYmIHRoaXMuX2NvbnRleHRzUmVzdC5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBoYXNTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gIHZhciBoYXMgPSB0aGlzLl9jb250ZXh0MCA9PT0gY29udGV4dCAmJiB0aGlzLl9jYWxsYWJsZTAgPT09IGNhbGxhYmxlIHx8IHRoaXMuX2NvbnRleHQxID09PSBjb250ZXh0ICYmIHRoaXMuX2NhbGxhYmxlMSA9PT0gY2FsbGFibGUgfHwgdGhpcy5fY29udGV4dDIgPT09IGNvbnRleHQgJiYgdGhpcy5fY2FsbGFibGUyID09PSBjYWxsYWJsZTtcbiAgaWYgKGhhcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IHZvaWQgMDtcbiAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHNSZXN0O1xuICBpZiAoIWNvbnRleHRzIHx8IChpbmRleCA9IGNvbnRleHRzLmxlbmd0aCkgPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGNhbGxhYmxlcyA9IHRoaXMuX2NhbGxhYmxlc1Jlc3Q7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKGNvbnRleHRzW2luZGV4XSA9PT0gY29udGV4dCAmJiBjYWxsYWJsZXNbaW5kZXhdID09PSBjYWxsYWJsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZXJDb2xsZWN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5wcm90b3R5cGUuYWRkU3Vic2NyaWJlciA9IGFkZFN1YnNjcmliZXI7XG4gICAgdGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpYmVyID0gcmVtb3ZlU3Vic2NyaWJlcjtcbiAgICB0YXJnZXQucHJvdG90eXBlLmNhbGxTdWJzY3JpYmVycyA9IGNhbGxTdWJzY3JpYmVycztcbiAgICB0YXJnZXQucHJvdG90eXBlLmhhc1N1YnNjcmliZXJzID0gaGFzU3Vic2NyaWJlcnM7XG4gICAgdGFyZ2V0LnByb3RvdHlwZS5oYXNTdWJzY3JpYmVyID0gaGFzU3Vic2NyaWJlcjtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBFeHByZXNzaW9uT2JzZXJ2ZXIgPSAoX2RlYyA9IGNvbm5lY3RhYmxlKCksIF9kZWMyID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYyhfY2xhc3MgPSBfZGVjMihfY2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV4cHJlc3Npb25PYnNlcnZlcihzY29wZSwgZXhwcmVzc2lvbiwgb2JzZXJ2ZXJMb2NhdG9yLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBcblxuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xuICB9XG5cbiAgRXhwcmVzc2lvbk9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zY29wZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9O1xuXG4gIEV4cHJlc3Npb25PYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMuZXhwcmVzc2lvbi5hc3NpZ24odGhpcy5zY29wZSwgbmV3VmFsdWUpO1xuICB9O1xuXG4gIEV4cHJlc3Npb25PYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy5leHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc2NvcGUsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc2NvcGUpO1xuICAgIH1cbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIGNvbnRleHQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICBfdGhpcy51bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIEV4cHJlc3Npb25PYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICh0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpICYmICF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMudW5vYnNlcnZlKHRydWUpO1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgRXhwcmVzc2lvbk9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zY29wZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWU7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5jYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5fdmVyc2lvbisrO1xuICAgIHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc2NvcGUpO1xuICAgIHRoaXMudW5vYnNlcnZlKGZhbHNlKTtcbiAgfTtcblxuICByZXR1cm4gRXhwcmVzc2lvbk9ic2VydmVyO1xufSgpKSB8fCBfY2xhc3MpIHx8IF9jbGFzcyk7XG5cbmZ1bmN0aW9uIGlzSW5kZXgocykge1xuICByZXR1cm4gK3MgPT09IHMgPj4+IDA7XG59XG5cbmZ1bmN0aW9uIHRvTnVtYmVyKHMpIHtcbiAgcmV0dXJuICtzO1xufVxuXG5mdW5jdGlvbiBuZXdTcGxpY2UoaW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICBhZGRlZENvdW50OiBhZGRlZENvdW50XG4gIH07XG59XG5cbnZhciBFRElUX0xFQVZFID0gMDtcbnZhciBFRElUX1VQREFURSA9IDE7XG52YXIgRURJVF9BREQgPSAyO1xudmFyIEVESVRfREVMRVRFID0gMztcblxuZnVuY3Rpb24gQXJyYXlTcGxpY2UoKSB7fVxuXG5BcnJheVNwbGljZS5wcm90b3R5cGUgPSB7XG4gIGNhbGNFZGl0RGlzdGFuY2VzOiBmdW5jdGlvbiBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICAgIHZhciByb3dDb3VudCA9IG9sZEVuZCAtIG9sZFN0YXJ0ICsgMTtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0ICsgMTtcbiAgICB2YXIgZGlzdGFuY2VzID0gbmV3IEFycmF5KHJvd0NvdW50KTtcbiAgICB2YXIgbm9ydGggPSB2b2lkIDA7XG4gICAgdmFyIHdlc3QgPSB2b2lkIDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd0NvdW50OyArK2kpIHtcbiAgICAgIGRpc3RhbmNlc1tpXSA9IG5ldyBBcnJheShjb2x1bW5Db3VudCk7XG4gICAgICBkaXN0YW5jZXNbaV1bMF0gPSBpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sdW1uQ291bnQ7ICsraikge1xuICAgICAgZGlzdGFuY2VzWzBdW2pdID0gajtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgcm93Q291bnQ7ICsrX2kpIHtcbiAgICAgIGZvciAodmFyIF9qID0gMTsgX2ogPCBjb2x1bW5Db3VudDsgKytfaikge1xuICAgICAgICBpZiAodGhpcy5lcXVhbHMoY3VycmVudFtjdXJyZW50U3RhcnQgKyBfaiAtIDFdLCBvbGRbb2xkU3RhcnQgKyBfaSAtIDFdKSkge1xuICAgICAgICAgIGRpc3RhbmNlc1tfaV1bX2pdID0gZGlzdGFuY2VzW19pIC0gMV1bX2ogLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3J0aCA9IGRpc3RhbmNlc1tfaSAtIDFdW19qXSArIDE7XG4gICAgICAgICAgd2VzdCA9IGRpc3RhbmNlc1tfaV1bX2ogLSAxXSArIDE7XG4gICAgICAgICAgZGlzdGFuY2VzW19pXVtfal0gPSBub3J0aCA8IHdlc3QgPyBub3J0aCA6IHdlc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGlzdGFuY2VzO1xuICB9LFxuXG4gIHNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlczogZnVuY3Rpb24gc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzKGRpc3RhbmNlcykge1xuICAgIHZhciBpID0gZGlzdGFuY2VzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGogPSBkaXN0YW5jZXNbMF0ubGVuZ3RoIC0gMTtcbiAgICB2YXIgY3VycmVudCA9IGRpc3RhbmNlc1tpXVtqXTtcbiAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICB3aGlsZSAoaSA+IDAgfHwgaiA+IDApIHtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGVkaXRzLnB1c2goRURJVF9BREQpO1xuICAgICAgICBqLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbm9ydGhXZXN0ID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICB2YXIgd2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1bal07XG4gICAgICB2YXIgbm9ydGggPSBkaXN0YW5jZXNbaV1baiAtIDFdO1xuXG4gICAgICB2YXIgbWluID0gdm9pZCAwO1xuICAgICAgaWYgKHdlc3QgPCBub3J0aCkge1xuICAgICAgICBtaW4gPSB3ZXN0IDwgbm9ydGhXZXN0ID8gd2VzdCA6IG5vcnRoV2VzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbiA9IG5vcnRoIDwgbm9ydGhXZXN0ID8gbm9ydGggOiBub3J0aFdlc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChtaW4gPT09IG5vcnRoV2VzdCkge1xuICAgICAgICBpZiAobm9ydGhXZXN0ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgZWRpdHMucHVzaChFRElUX0xFQVZFKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlZGl0cy5wdXNoKEVESVRfVVBEQVRFKTtcbiAgICAgICAgICBjdXJyZW50ID0gbm9ydGhXZXN0O1xuICAgICAgICB9XG4gICAgICAgIGktLTtcbiAgICAgICAgai0tO1xuICAgICAgfSBlbHNlIGlmIChtaW4gPT09IHdlc3QpIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY3VycmVudCA9IHdlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgICAgai0tO1xuICAgICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRpdHMucmV2ZXJzZSgpO1xuICAgIHJldHVybiBlZGl0cztcbiAgfSxcblxuICBjYWxjU3BsaWNlczogZnVuY3Rpb24gY2FsY1NwbGljZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpIHtcbiAgICB2YXIgcHJlZml4Q291bnQgPSAwO1xuICAgIHZhciBzdWZmaXhDb3VudCA9IDA7XG5cbiAgICB2YXIgbWluTGVuZ3RoID0gTWF0aC5taW4oY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCwgb2xkRW5kIC0gb2xkU3RhcnQpO1xuICAgIGlmIChjdXJyZW50U3RhcnQgPT09IDAgJiYgb2xkU3RhcnQgPT09IDApIHtcbiAgICAgIHByZWZpeENvdW50ID0gdGhpcy5zaGFyZWRQcmVmaXgoY3VycmVudCwgb2xkLCBtaW5MZW5ndGgpO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50RW5kID09PSBjdXJyZW50Lmxlbmd0aCAmJiBvbGRFbmQgPT09IG9sZC5sZW5ndGgpIHtcbiAgICAgIHN1ZmZpeENvdW50ID0gdGhpcy5zaGFyZWRTdWZmaXgoY3VycmVudCwgb2xkLCBtaW5MZW5ndGggLSBwcmVmaXhDb3VudCk7XG4gICAgfVxuXG4gICAgY3VycmVudFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICAgIG9sZFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICAgIGN1cnJlbnRFbmQgLT0gc3VmZml4Q291bnQ7XG4gICAgb2xkRW5kIC09IHN1ZmZpeENvdW50O1xuXG4gICAgaWYgKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQgPT09IDAgJiYgb2xkRW5kIC0gb2xkU3RhcnQgPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFN0YXJ0ID09PSBjdXJyZW50RW5kKSB7XG4gICAgICB2YXIgX3NwbGljZSA9IG5ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCAwKTtcbiAgICAgIHdoaWxlIChvbGRTdGFydCA8IG9sZEVuZCkge1xuICAgICAgICBfc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkU3RhcnQrK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW19zcGxpY2VdO1xuICAgIH0gZWxzZSBpZiAob2xkU3RhcnQgPT09IG9sZEVuZCkge1xuICAgICAgcmV0dXJuIFtuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCldO1xuICAgIH1cblxuICAgIHZhciBvcHMgPSB0aGlzLnNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyh0aGlzLmNhbGNFZGl0RGlzdGFuY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSk7XG5cbiAgICB2YXIgc3BsaWNlID0gdW5kZWZpbmVkO1xuICAgIHZhciBzcGxpY2VzID0gW107XG4gICAgdmFyIGluZGV4ID0gY3VycmVudFN0YXJ0O1xuICAgIHZhciBvbGRJbmRleCA9IG9sZFN0YXJ0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzd2l0Y2ggKG9wc1tpXSkge1xuICAgICAgICBjYXNlIEVESVRfTEVBVkU6XG4gICAgICAgICAgaWYgKHNwbGljZSkge1xuICAgICAgICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgICAgICAgICBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVESVRfVVBEQVRFOlxuICAgICAgICAgIGlmICghc3BsaWNlKSB7XG4gICAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzcGxpY2UuYWRkZWRDb3VudCsrO1xuICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRJbmRleF0pO1xuICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRURJVF9BREQ6XG4gICAgICAgICAgaWYgKCFzcGxpY2UpIHtcbiAgICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFRElUX0RFTEVURTpcbiAgICAgICAgICBpZiAoIXNwbGljZSkge1xuICAgICAgICAgICAgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgICBvbGRJbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzcGxpY2UpIHtcbiAgICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgIH1cbiAgICByZXR1cm4gc3BsaWNlcztcbiAgfSxcblxuICBzaGFyZWRQcmVmaXg6IGZ1bmN0aW9uIHNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIHNlYXJjaExlbmd0aCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICghdGhpcy5lcXVhbHMoY3VycmVudFtpXSwgb2xkW2ldKSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VhcmNoTGVuZ3RoO1xuICB9LFxuXG4gIHNoYXJlZFN1ZmZpeDogZnVuY3Rpb24gc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4MSA9IGN1cnJlbnQubGVuZ3RoO1xuICAgIHZhciBpbmRleDIgPSBvbGQubGVuZ3RoO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgd2hpbGUgKGNvdW50IDwgc2VhcmNoTGVuZ3RoICYmIHRoaXMuZXF1YWxzKGN1cnJlbnRbLS1pbmRleDFdLCBvbGRbLS1pbmRleDJdKSkge1xuICAgICAgY291bnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH0sXG5cbiAgY2FsY3VsYXRlU3BsaWNlczogZnVuY3Rpb24gY2FsY3VsYXRlU3BsaWNlcyhjdXJyZW50LCBwcmV2aW91cykge1xuICAgIHJldHVybiB0aGlzLmNhbGNTcGxpY2VzKGN1cnJlbnQsIDAsIGN1cnJlbnQubGVuZ3RoLCBwcmV2aW91cywgMCwgcHJldmlvdXMubGVuZ3RoKTtcbiAgfSxcblxuICBlcXVhbHM6IGZ1bmN0aW9uIGVxdWFscyhjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgICByZXR1cm4gY3VycmVudFZhbHVlID09PSBwcmV2aW91c1ZhbHVlO1xuICB9XG59O1xuXG52YXIgYXJyYXlTcGxpY2UgPSBuZXcgQXJyYXlTcGxpY2UoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTcGxpY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gIHJldHVybiBhcnJheVNwbGljZS5jYWxjU3BsaWNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCk7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdChzdGFydDEsIGVuZDEsIHN0YXJ0MiwgZW5kMikge1xuICBpZiAoZW5kMSA8IHN0YXJ0MiB8fCBlbmQyIDwgc3RhcnQxKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgaWYgKGVuZDEgPT09IHN0YXJ0MiB8fCBlbmQyID09PSBzdGFydDEpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChzdGFydDEgPCBzdGFydDIpIHtcbiAgICBpZiAoZW5kMSA8IGVuZDIpIHtcbiAgICAgIHJldHVybiBlbmQxIC0gc3RhcnQyO1xuICAgIH1cblxuICAgIHJldHVybiBlbmQyIC0gc3RhcnQyO1xuICB9XG5cbiAgaWYgKGVuZDIgPCBlbmQxKSB7XG4gICAgcmV0dXJuIGVuZDIgLSBzdGFydDE7XG4gIH1cblxuICByZXR1cm4gZW5kMSAtIHN0YXJ0MTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU3BsaWNlKHNwbGljZXMsIGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KSB7XG4gIHZhciBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQpO1xuXG4gIHZhciBpbnNlcnRlZCA9IGZhbHNlO1xuICB2YXIgaW5zZXJ0aW9uT2Zmc2V0ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY3VycmVudCA9IHNwbGljZXNbaV07XG4gICAgY3VycmVudC5pbmRleCArPSBpbnNlcnRpb25PZmZzZXQ7XG5cbiAgICBpZiAoaW5zZXJ0ZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpbnRlcnNlY3RDb3VudCA9IGludGVyc2VjdChzcGxpY2UuaW5kZXgsIHNwbGljZS5pbmRleCArIHNwbGljZS5yZW1vdmVkLmxlbmd0aCwgY3VycmVudC5pbmRleCwgY3VycmVudC5pbmRleCArIGN1cnJlbnQuYWRkZWRDb3VudCk7XG5cbiAgICBpZiAoaW50ZXJzZWN0Q291bnQgPj0gMCkge1xuXG4gICAgICBzcGxpY2VzLnNwbGljZShpLCAxKTtcbiAgICAgIGktLTtcblxuICAgICAgaW5zZXJ0aW9uT2Zmc2V0IC09IGN1cnJlbnQuYWRkZWRDb3VudCAtIGN1cnJlbnQucmVtb3ZlZC5sZW5ndGg7XG5cbiAgICAgIHNwbGljZS5hZGRlZENvdW50ICs9IGN1cnJlbnQuYWRkZWRDb3VudCAtIGludGVyc2VjdENvdW50O1xuICAgICAgdmFyIGRlbGV0ZUNvdW50ID0gc3BsaWNlLnJlbW92ZWQubGVuZ3RoICsgY3VycmVudC5yZW1vdmVkLmxlbmd0aCAtIGludGVyc2VjdENvdW50O1xuXG4gICAgICBpZiAoIXNwbGljZS5hZGRlZENvdW50ICYmICFkZWxldGVDb3VudCkge1xuICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3VycmVudFJlbW92ZWQgPSBjdXJyZW50LnJlbW92ZWQ7XG5cbiAgICAgICAgaWYgKHNwbGljZS5pbmRleCA8IGN1cnJlbnQuaW5kZXgpIHtcbiAgICAgICAgICB2YXIgcHJlcGVuZCA9IHNwbGljZS5yZW1vdmVkLnNsaWNlKDAsIGN1cnJlbnQuaW5kZXggLSBzcGxpY2UuaW5kZXgpO1xuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHByZXBlbmQsIGN1cnJlbnRSZW1vdmVkKTtcbiAgICAgICAgICBjdXJyZW50UmVtb3ZlZCA9IHByZXBlbmQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BsaWNlLmluZGV4ICsgc3BsaWNlLnJlbW92ZWQubGVuZ3RoID4gY3VycmVudC5pbmRleCArIGN1cnJlbnQuYWRkZWRDb3VudCkge1xuICAgICAgICAgIHZhciBhcHBlbmQgPSBzcGxpY2UucmVtb3ZlZC5zbGljZShjdXJyZW50LmluZGV4ICsgY3VycmVudC5hZGRlZENvdW50IC0gc3BsaWNlLmluZGV4KTtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShjdXJyZW50UmVtb3ZlZCwgYXBwZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNwbGljZS5yZW1vdmVkID0gY3VycmVudFJlbW92ZWQ7XG4gICAgICAgIGlmIChjdXJyZW50LmluZGV4IDwgc3BsaWNlLmluZGV4KSB7XG4gICAgICAgICAgc3BsaWNlLmluZGV4ID0gY3VycmVudC5pbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3BsaWNlLmluZGV4IDwgY3VycmVudC5pbmRleCkge1xuXG4gICAgICBpbnNlcnRlZCA9IHRydWU7XG5cbiAgICAgIHNwbGljZXMuc3BsaWNlKGksIDAsIHNwbGljZSk7XG4gICAgICBpKys7XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzcGxpY2UuYWRkZWRDb3VudCAtIHNwbGljZS5yZW1vdmVkLmxlbmd0aDtcbiAgICAgIGN1cnJlbnQuaW5kZXggKz0gb2Zmc2V0O1xuICAgICAgaW5zZXJ0aW9uT2Zmc2V0ICs9IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICBpZiAoIWluc2VydGVkKSB7XG4gICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFNwbGljZXMoYXJyYXksIGNoYW5nZVJlY29yZHMpIHtcbiAgdmFyIHNwbGljZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZVJlY29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVjb3JkID0gY2hhbmdlUmVjb3Jkc1tpXTtcbiAgICBzd2l0Y2ggKHJlY29yZC50eXBlKSB7XG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBtZXJnZVNwbGljZShzcGxpY2VzLCByZWNvcmQuaW5kZXgsIHJlY29yZC5yZW1vdmVkLnNsaWNlKCksIHJlY29yZC5hZGRlZENvdW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhZGQnOlxuICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgIGlmICghaXNJbmRleChyZWNvcmQubmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmRleCA9IHRvTnVtYmVyKHJlY29yZC5uYW1lKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VTcGxpY2Uoc3BsaWNlcywgaW5kZXgsIFtyZWNvcmQub2xkVmFsdWVdLCByZWNvcmQudHlwZSA9PT0gJ2RlbGV0ZScgPyAwIDogMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCByZWNvcmQgdHlwZTogJyArIEpTT04uc3RyaW5naWZ5KHJlY29yZCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3BsaWNlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3RBcnJheVNwbGljZXMoYXJyYXksIGNoYW5nZVJlY29yZHMpIHtcbiAgdmFyIHNwbGljZXMgPSBbXTtcblxuICBjcmVhdGVJbml0aWFsU3BsaWNlcyhhcnJheSwgY2hhbmdlUmVjb3JkcykuZm9yRWFjaChmdW5jdGlvbiAoc3BsaWNlKSB7XG4gICAgaWYgKHNwbGljZS5hZGRlZENvdW50ID09PSAxICYmIHNwbGljZS5yZW1vdmVkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHNwbGljZS5yZW1vdmVkWzBdICE9PSBhcnJheVtzcGxpY2UuaW5kZXhdKSB7XG4gICAgICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3BsaWNlcyA9IHNwbGljZXMuY29uY2F0KGNhbGNTcGxpY2VzKGFycmF5LCBzcGxpY2UuaW5kZXgsIHNwbGljZS5pbmRleCArIHNwbGljZS5hZGRlZENvdW50LCBzcGxpY2UucmVtb3ZlZCwgMCwgc3BsaWNlLnJlbW92ZWQubGVuZ3RoKSk7XG4gIH0pO1xuXG4gIHJldHVybiBzcGxpY2VzO1xufVxuXG5mdW5jdGlvbiBuZXdSZWNvcmQodHlwZSwgb2JqZWN0LCBrZXksIG9sZFZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBvYmplY3Q6IG9iamVjdCxcbiAgICBrZXk6IGtleSxcbiAgICBvbGRWYWx1ZTogb2xkVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYW5nZVJlY29yZHMobWFwKSB7XG4gIHZhciBlbnRyaWVzID0gbmV3IEFycmF5KG1hcC5zaXplKTtcbiAgdmFyIGtleXMgPSBtYXAua2V5cygpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBpdGVtID0gdm9pZCAwO1xuXG4gIHdoaWxlIChpdGVtID0ga2V5cy5uZXh0KCkpIHtcbiAgICBpZiAoaXRlbS5kb25lKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBlbnRyaWVzW2ldID0gbmV3UmVjb3JkKCdhZGRlZCcsIG1hcCwgaXRlbS52YWx1ZSk7XG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIGVudHJpZXM7XG59XG5cbmV4cG9ydCB2YXIgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyID0gKF9kZWMzID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzMoX2NsYXNzMiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyKHRhc2tRdWV1ZSwgY29sbGVjdGlvbikge1xuICAgIFxuXG4gICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XG4gICAgdGhpcy5xdWV1ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNoYW5nZVJlY29yZHMgPSBudWxsO1xuICAgIHRoaXMub2xkQ29sbGVjdGlvbiA9IG51bGw7XG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmxlbmd0aFByb3BlcnR5TmFtZSA9IGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBNYXAgfHwgY29sbGVjdGlvbiBpbnN0YW5jZW9mIFNldCA/ICdzaXplJyA6ICdsZW5ndGgnO1xuICB9XG5cbiAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9O1xuXG4gIE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIHRoaXMucmVtb3ZlU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH07XG5cbiAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5hZGRDaGFuZ2VSZWNvcmQgPSBmdW5jdGlvbiBhZGRDaGFuZ2VSZWNvcmQoY2hhbmdlUmVjb3JkKSB7XG4gICAgaWYgKCF0aGlzLmhhc1N1YnNjcmliZXJzKCkgJiYgIXRoaXMubGVuZ3RoT2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlUmVjb3JkLnR5cGUgPT09ICdzcGxpY2UnKSB7XG4gICAgICB2YXIgaW5kZXggPSBjaGFuZ2VSZWNvcmQuaW5kZXg7XG4gICAgICB2YXIgYXJyYXlMZW5ndGggPSBjaGFuZ2VSZWNvcmQub2JqZWN0Lmxlbmd0aDtcbiAgICAgIGlmIChpbmRleCA+IGFycmF5TGVuZ3RoKSB7XG4gICAgICAgIGluZGV4ID0gYXJyYXlMZW5ndGggLSBjaGFuZ2VSZWNvcmQuYWRkZWRDb3VudDtcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gYXJyYXlMZW5ndGggKyBjaGFuZ2VSZWNvcmQucmVtb3ZlZC5sZW5ndGggKyBpbmRleCAtIGNoYW5nZVJlY29yZC5hZGRlZENvdW50O1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG4gICAgICBjaGFuZ2VSZWNvcmQuaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jaGFuZ2VSZWNvcmRzID09PSBudWxsKSB7XG4gICAgICB0aGlzLmNoYW5nZVJlY29yZHMgPSBbY2hhbmdlUmVjb3JkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFuZ2VSZWNvcmRzLnB1c2goY2hhbmdlUmVjb3JkKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucXVldWVkKSB7XG4gICAgICB0aGlzLnF1ZXVlZCA9IHRydWU7XG4gICAgICB0aGlzLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5mbHVzaENoYW5nZVJlY29yZHMgPSBmdW5jdGlvbiBmbHVzaENoYW5nZVJlY29yZHMoKSB7XG4gICAgaWYgKHRoaXMuY2hhbmdlUmVjb3JkcyAmJiB0aGlzLmNoYW5nZVJlY29yZHMubGVuZ3RoIHx8IHRoaXMub2xkQ29sbGVjdGlvbikge1xuICAgICAgdGhpcy5jYWxsKCk7XG4gICAgfVxuICB9O1xuXG4gIE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldChvbGRDb2xsZWN0aW9uKSB7XG4gICAgdGhpcy5vbGRDb2xsZWN0aW9uID0gb2xkQ29sbGVjdGlvbjtcblxuICAgIGlmICh0aGlzLmhhc1N1YnNjcmliZXJzKCkgJiYgIXRoaXMucXVldWVkKSB7XG4gICAgICB0aGlzLnF1ZXVlZCA9IHRydWU7XG4gICAgICB0aGlzLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5nZXRMZW5ndGhPYnNlcnZlciA9IGZ1bmN0aW9uIGdldExlbmd0aE9ic2VydmVyKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aE9ic2VydmVyIHx8ICh0aGlzLmxlbmd0aE9ic2VydmVyID0gbmV3IENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcih0aGlzLmNvbGxlY3Rpb24pKTtcbiAgfTtcblxuICBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiBjYWxsKCkge1xuICAgIHZhciBjaGFuZ2VSZWNvcmRzID0gdGhpcy5jaGFuZ2VSZWNvcmRzO1xuICAgIHZhciBvbGRDb2xsZWN0aW9uID0gdGhpcy5vbGRDb2xsZWN0aW9uO1xuICAgIHZhciByZWNvcmRzID0gdm9pZCAwO1xuXG4gICAgdGhpcy5xdWV1ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNoYW5nZVJlY29yZHMgPSBbXTtcbiAgICB0aGlzLm9sZENvbGxlY3Rpb24gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuaGFzU3Vic2NyaWJlcnMoKSkge1xuICAgICAgaWYgKG9sZENvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbiBpbnN0YW5jZW9mIE1hcCB8fCB0aGlzLmNvbGxlY3Rpb24gaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICByZWNvcmRzID0gZ2V0Q2hhbmdlUmVjb3JkcyhvbGRDb2xsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWNvcmRzID0gY2FsY1NwbGljZXModGhpcy5jb2xsZWN0aW9uLCAwLCB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoLCBvbGRDb2xsZWN0aW9uLCAwLCBvbGRDb2xsZWN0aW9uLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmNvbGxlY3Rpb24gaW5zdGFuY2VvZiBNYXAgfHwgdGhpcy5jb2xsZWN0aW9uIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgcmVjb3JkcyA9IGNoYW5nZVJlY29yZHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjb3JkcyA9IHByb2plY3RBcnJheVNwbGljZXModGhpcy5jb2xsZWN0aW9uLCBjaGFuZ2VSZWNvcmRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhyZWNvcmRzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGhPYnNlcnZlcikge1xuICAgICAgdGhpcy5sZW5ndGhPYnNlcnZlci5jYWxsKHRoaXMuY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyO1xufSgpKSB8fCBfY2xhc3MyKTtcblxuZXhwb3J0IHZhciBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIgPSAoX2RlYzQgPSBzdWJzY3JpYmVyQ29sbGVjdGlvbigpLCBfZGVjNChfY2xhc3MzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIoY29sbGVjdGlvbikge1xuICAgIFxuXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB0aGlzLmxlbmd0aFByb3BlcnR5TmFtZSA9IGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBNYXAgfHwgY29sbGVjdGlvbiBpbnN0YW5jZW9mIFNldCA/ICdzaXplJyA6ICdsZW5ndGgnO1xuICAgIHRoaXMuY3VycmVudFZhbHVlID0gY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV07XG4gIH1cblxuICBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV07XG4gIH07XG5cbiAgQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5jb2xsZWN0aW9uW3RoaXMubGVuZ3RoUHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICB9O1xuXG4gIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgdGhpcy5hZGRTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKTtcbiAgfTtcblxuICBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICB0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9O1xuXG4gIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIGNhbGwobmV3VmFsdWUpIHtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIHRoaXMuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcjtcbn0oKSkgfHwgX2NsYXNzMyk7XG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIHBvcCA9IGFycmF5UHJvdG8ucG9wO1xudmFyIHB1c2ggPSBhcnJheVByb3RvLnB1c2g7XG52YXIgcmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcbnZhciBzaGlmdCA9IGFycmF5UHJvdG8uc2hpZnQ7XG52YXIgc29ydCA9IGFycmF5UHJvdG8uc29ydDtcbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcbnZhciB1bnNoaWZ0ID0gYXJyYXlQcm90by51bnNoaWZ0O1xuXG5pZiAoYXJyYXlQcm90by5fX2F1X3BhdGNoZWRfXykge1xuICBMb2dNYW5hZ2VyLmdldExvZ2dlcignYXJyYXktb2JzZXJ2YXRpb24nKS53YXJuKCdEZXRlY3RlZCAybmQgYXR0ZW1wdCBvZiBwYXRjaGluZyBhcnJheSBmcm9tIEF1cmVsaWEgYmluZGluZy4nICsgJyBUaGlzIGlzIHByb2JhYmx5IGNhdXNlZCBieSBkZXBlbmRlbmN5IG1pc21hdGNoIGJldHdlZW4gY29yZSBtb2R1bGVzIGFuZCBhIDNyZCBwYXJ0eSBwbHVnaW4uJyArICcgUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXVyZWxpYS9jbGkvcHVsbC85MDYgaWYgeW91IGFyZSB1c2luZyB3ZWJwYWNrLicpO1xufSBlbHNlIHtcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheVByb3RvLCAnX19hdV9wYXRjaGVkX18nLCB7IHZhbHVlOiAxIH0pO1xuICBhcnJheVByb3RvLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm90RW1wdHkgPSB0aGlzLmxlbmd0aCA+IDA7XG4gICAgdmFyIG1ldGhvZENhbGxSZXN1bHQgPSBwb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAobm90RW1wdHkgJiYgdGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18uYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgbmFtZTogdGhpcy5sZW5ndGgsXG4gICAgICAgIG9sZFZhbHVlOiBtZXRob2RDYWxsUmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gIH07XG5cbiAgYXJyYXlQcm90by5wdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gcHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnc3BsaWNlJyxcbiAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICBpbmRleDogdGhpcy5sZW5ndGggLSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xuXG4gIGFycmF5UHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2xkQXJyYXkgPSB2b2lkIDA7XG4gICAgaWYgKHRoaXMuX19hcnJheV9vYnNlcnZlcl9fICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX19hcnJheV9vYnNlcnZlcl9fLmZsdXNoQ2hhbmdlUmVjb3JkcygpO1xuICAgICAgb2xkQXJyYXkgPSB0aGlzLnNsaWNlKCk7XG4gICAgfVxuICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gcmV2ZXJzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5yZXNldChvbGRBcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xuXG4gIGFycmF5UHJvdG8uc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vdEVtcHR5ID0gdGhpcy5sZW5ndGggPiAwO1xuICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAobm90RW1wdHkgJiYgdGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18uYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgbmFtZTogMCxcbiAgICAgICAgb2xkVmFsdWU6IG1ldGhvZENhbGxSZXN1bHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnNvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9sZEFycmF5ID0gdm9pZCAwO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5mbHVzaENoYW5nZVJlY29yZHMoKTtcbiAgICAgIG9sZEFycmF5ID0gdGhpcy5zbGljZSgpO1xuICAgIH1cbiAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IHNvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18ucmVzZXQob2xkQXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnNwbGljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IHNwbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnc3BsaWNlJyxcbiAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICBpbmRleDogK2FyZ3VtZW50c1swXSxcbiAgICAgICAgcmVtb3ZlZDogbWV0aG9kQ2FsbFJlc3VsdCxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHMubGVuZ3RoIC0gMiA6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnVuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1ldGhvZENhbGxSZXN1bHQgPSB1bnNoaWZ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHRoaXMuX19hcnJheV9vYnNlcnZlcl9fICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX19hcnJheV9vYnNlcnZlcl9fLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgIHR5cGU6ICdzcGxpY2UnLFxuICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfZ2V0QXJyYXlPYnNlcnZlcih0YXNrUXVldWUsIGFycmF5KSB7XG4gIHJldHVybiBNb2RpZnlBcnJheU9ic2VydmVyLmZvcih0YXNrUXVldWUsIGFycmF5KTtcbn1cblxudmFyIE1vZGlmeUFycmF5T2JzZXJ2ZXIgPSBmdW5jdGlvbiAoX01vZGlmeUNvbGxlY3Rpb25PYnNlKSB7XG4gIF9pbmhlcml0cyhNb2RpZnlBcnJheU9ic2VydmVyLCBfTW9kaWZ5Q29sbGVjdGlvbk9ic2UpO1xuXG4gIGZ1bmN0aW9uIE1vZGlmeUFycmF5T2JzZXJ2ZXIodGFza1F1ZXVlLCBhcnJheSkge1xuICAgIFxuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Nb2RpZnlDb2xsZWN0aW9uT2JzZS5jYWxsKHRoaXMsIHRhc2tRdWV1ZSwgYXJyYXkpKTtcbiAgfVxuXG4gIE1vZGlmeUFycmF5T2JzZXJ2ZXIuZm9yID0gZnVuY3Rpb24gX2Zvcih0YXNrUXVldWUsIGFycmF5KSB7XG4gICAgaWYgKCEoJ19fYXJyYXlfb2JzZXJ2ZXJfXycgaW4gYXJyYXkpKSB7XG4gICAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX19hcnJheV9vYnNlcnZlcl9fJywge1xuICAgICAgICB2YWx1ZTogTW9kaWZ5QXJyYXlPYnNlcnZlci5jcmVhdGUodGFza1F1ZXVlLCBhcnJheSksXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5Ll9fYXJyYXlfb2JzZXJ2ZXJfXztcbiAgfTtcblxuICBNb2RpZnlBcnJheU9ic2VydmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSh0YXNrUXVldWUsIGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBNb2RpZnlBcnJheU9ic2VydmVyKHRhc2tRdWV1ZSwgYXJyYXkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RpZnlBcnJheU9ic2VydmVyO1xufShNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIpO1xuXG5leHBvcnQgdmFyIEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV4cHJlc3Npb24oKSB7XG4gICAgXG5cbiAgICB0aGlzLmlzQXNzaWduYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgRXhwcmVzc2lvbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zLCBhcmdzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCaW5kaW5nIGV4cHJlc3Npb24gXCInICsgdGhpcyArICdcIiBjYW5ub3QgYmUgZXZhbHVhdGVkLicpO1xuICB9O1xuXG4gIEV4cHJlc3Npb24ucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignQmluZGluZyBleHByZXNzaW9uIFwiJyArIHRoaXMgKyAnXCIgY2Fubm90IGJlIGFzc2lnbmVkIHRvLicpO1xuICB9O1xuXG4gIEV4cHJlc3Npb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBGRUFUVVJFX05PX1VOUEFSU0VSID09PSAndW5kZWZpbmVkJyA/IF9VbnBhcnNlci51bnBhcnNlKHRoaXMpIDogRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgcmV0dXJuIEV4cHJlc3Npb247XG59KCk7XG5cbmV4cG9ydCB2YXIgQmluZGluZ0JlaGF2aW9yID0gZnVuY3Rpb24gKF9FeHByZXNzaW9uKSB7XG4gIF9pbmhlcml0cyhCaW5kaW5nQmVoYXZpb3IsIF9FeHByZXNzaW9uKTtcblxuICBmdW5jdGlvbiBCaW5kaW5nQmVoYXZpb3IoZXhwcmVzc2lvbiwgbmFtZSwgYXJncykge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIF90aGlzMy5uYW1lID0gbmFtZTtcbiAgICBfdGhpczMuYXJncyA9IGFyZ3M7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIEJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb24uYXNzaWduKHNjb3BlLCB2YWx1ZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRCaW5kaW5nQmVoYXZpb3IodGhpcyk7XG4gIH07XG5cbiAgQmluZGluZ0JlaGF2aW9yLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgfTtcblxuICBCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKGJpbmRpbmcsIHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBpZiAodGhpcy5leHByZXNzaW9uLmV4cHJlc3Npb24gJiYgdGhpcy5leHByZXNzaW9uLmJpbmQpIHtcbiAgICAgIHRoaXMuZXhwcmVzc2lvbi5iaW5kKGJpbmRpbmcsIHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cbiAgICB2YXIgYmVoYXZpb3IgPSBsb29rdXBGdW5jdGlvbnMuYmluZGluZ0JlaGF2aW9ycyh0aGlzLm5hbWUpO1xuICAgIGlmICghYmVoYXZpb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gQmluZGluZ0JlaGF2aW9yIG5hbWVkIFwiJyArIHRoaXMubmFtZSArICdcIiB3YXMgZm91bmQhJyk7XG4gICAgfVxuICAgIHZhciBiZWhhdmlvcktleSA9ICdiZWhhdmlvci0nICsgdGhpcy5uYW1lO1xuICAgIGlmIChiaW5kaW5nW2JlaGF2aW9yS2V5XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGJpbmRpbmcgYmVoYXZpb3IgbmFtZWQgXCInICsgdGhpcy5uYW1lICsgJ1wiIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byBcIicgKyB0aGlzLmV4cHJlc3Npb24gKyAnXCInKTtcbiAgICB9XG4gICAgYmluZGluZ1tiZWhhdmlvcktleV0gPSBiZWhhdmlvcjtcbiAgICBiZWhhdmlvci5iaW5kLmFwcGx5KGJlaGF2aW9yLCBbYmluZGluZywgc2NvcGVdLmNvbmNhdChldmFsTGlzdChzY29wZSwgdGhpcy5hcmdzLCBiaW5kaW5nLmxvb2t1cEZ1bmN0aW9ucykpKTtcbiAgfTtcblxuICBCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZChiaW5kaW5nLCBzY29wZSkge1xuICAgIHZhciBiZWhhdmlvcktleSA9ICdiZWhhdmlvci0nICsgdGhpcy5uYW1lO1xuICAgIGJpbmRpbmdbYmVoYXZpb3JLZXldLnVuYmluZChiaW5kaW5nLCBzY29wZSk7XG4gICAgYmluZGluZ1tiZWhhdmlvcktleV0gPSBudWxsO1xuICAgIGlmICh0aGlzLmV4cHJlc3Npb24uZXhwcmVzc2lvbiAmJiB0aGlzLmV4cHJlc3Npb24udW5iaW5kKSB7XG4gICAgICB0aGlzLmV4cHJlc3Npb24udW5iaW5kKGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEJpbmRpbmdCZWhhdmlvcjtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgVmFsdWVDb252ZXJ0ZXIgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24yKSB7XG4gIF9pbmhlcml0cyhWYWx1ZUNvbnZlcnRlciwgX0V4cHJlc3Npb24yKTtcblxuICBmdW5jdGlvbiBWYWx1ZUNvbnZlcnRlcihleHByZXNzaW9uLCBuYW1lLCBhcmdzKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXM0ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V4cHJlc3Npb24yLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXM0LmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIF90aGlzNC5uYW1lID0gbmFtZTtcbiAgICBfdGhpczQuYXJncyA9IGFyZ3M7XG4gICAgX3RoaXM0LmFsbEFyZ3MgPSBbZXhwcmVzc2lvbl0uY29uY2F0KGFyZ3MpO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICBWYWx1ZUNvbnZlcnRlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbnZlcnRlciA9IGxvb2t1cEZ1bmN0aW9ucy52YWx1ZUNvbnZlcnRlcnModGhpcy5uYW1lKTtcbiAgICBpZiAoIWNvbnZlcnRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBWYWx1ZUNvbnZlcnRlciBuYW1lZCBcIicgKyB0aGlzLm5hbWUgKyAnXCIgd2FzIGZvdW5kIScpO1xuICAgIH1cblxuICAgIGlmICgndG9WaWV3JyBpbiBjb252ZXJ0ZXIpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIudG9WaWV3LmFwcGx5KGNvbnZlcnRlciwgZXZhbExpc3Qoc2NvcGUsIHRoaXMuYWxsQXJncywgbG9va3VwRnVuY3Rpb25zKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWxsQXJnc1swXS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBWYWx1ZUNvbnZlcnRlci5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHNjb3BlLCB2YWx1ZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbnZlcnRlciA9IGxvb2t1cEZ1bmN0aW9ucy52YWx1ZUNvbnZlcnRlcnModGhpcy5uYW1lKTtcbiAgICBpZiAoIWNvbnZlcnRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBWYWx1ZUNvbnZlcnRlciBuYW1lZCBcIicgKyB0aGlzLm5hbWUgKyAnXCIgd2FzIGZvdW5kIScpO1xuICAgIH1cblxuICAgIGlmICgnZnJvbVZpZXcnIGluIGNvbnZlcnRlcikge1xuICAgICAgdmFsdWUgPSBjb252ZXJ0ZXIuZnJvbVZpZXcuYXBwbHkoY29udmVydGVyLCBbdmFsdWVdLmNvbmNhdChldmFsTGlzdChzY29wZSwgdGhpcy5hcmdzLCBsb29rdXBGdW5jdGlvbnMpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWxsQXJnc1swXS5hc3NpZ24oc2NvcGUsIHZhbHVlLCBsb29rdXBGdW5jdGlvbnMpO1xuICB9O1xuXG4gIFZhbHVlQ29udmVydGVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0VmFsdWVDb252ZXJ0ZXIodGhpcyk7XG4gIH07XG5cbiAgVmFsdWVDb252ZXJ0ZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdmFyIGV4cHJlc3Npb25zID0gdGhpcy5hbGxBcmdzO1xuICAgIHZhciBpID0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGV4cHJlc3Npb25zW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIH1cbiAgICB2YXIgY29udmVydGVyID0gYmluZGluZy5sb29rdXBGdW5jdGlvbnMudmFsdWVDb252ZXJ0ZXJzKHRoaXMubmFtZSk7XG4gICAgaWYgKCFjb252ZXJ0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gVmFsdWVDb252ZXJ0ZXIgbmFtZWQgXCInICsgdGhpcy5uYW1lICsgJ1wiIHdhcyBmb3VuZCEnKTtcbiAgICB9XG4gICAgdmFyIHNpZ25hbHMgPSBjb252ZXJ0ZXIuc2lnbmFscztcbiAgICBpZiAoc2lnbmFscyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGkgPSBzaWduYWxzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25uZWN0QmluZGluZ1RvU2lnbmFsKGJpbmRpbmcsIHNpZ25hbHNbaV0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVmFsdWVDb252ZXJ0ZXI7XG59KEV4cHJlc3Npb24pO1xuXG5leHBvcnQgdmFyIEFzc2lnbiA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjMpIHtcbiAgX2luaGVyaXRzKEFzc2lnbiwgX0V4cHJlc3Npb24zKTtcblxuICBmdW5jdGlvbiBBc3NpZ24odGFyZ2V0LCB2YWx1ZSkge1xuICAgIFxuXG4gICAgdmFyIF90aGlzNSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uMy5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzNS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgX3RoaXM1LnZhbHVlID0gdmFsdWU7XG4gICAgX3RoaXM1LmlzQXNzaWduYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzNTtcbiAgfVxuXG4gIEFzc2lnbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0LmFzc2lnbihzY29wZSwgdGhpcy52YWx1ZS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSk7XG4gIH07XG5cbiAgQXNzaWduLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzdG9yKSB7XG4gICAgdmlzdG9yLnZpc2l0QXNzaWduKHRoaXMpO1xuICB9O1xuXG4gIEFzc2lnbi5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHt9O1xuXG4gIEFzc2lnbi5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHNjb3BlLCB2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUuYXNzaWduKHNjb3BlLCB2YWx1ZSk7XG4gICAgdGhpcy50YXJnZXQuYXNzaWduKHNjb3BlLCB2YWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2lnbjtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgQ29uZGl0aW9uYWwgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb240KSB7XG4gIF9pbmhlcml0cyhDb25kaXRpb25hbCwgX0V4cHJlc3Npb240KTtcblxuICBmdW5jdGlvbiBDb25kaXRpb25hbChjb25kaXRpb24sIHllcywgbm8pIHtcbiAgICBcblxuICAgIHZhciBfdGhpczYgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjQuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczYuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIF90aGlzNi55ZXMgPSB5ZXM7XG4gICAgX3RoaXM2Lm5vID0gbm87XG4gICAgcmV0dXJuIF90aGlzNjtcbiAgfVxuXG4gIENvbmRpdGlvbmFsLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gISF0aGlzLmNvbmRpdGlvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSA/IHRoaXMueWVzLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIDogdGhpcy5uby5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBDb25kaXRpb25hbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdENvbmRpdGlvbmFsKHRoaXMpO1xuICB9O1xuXG4gIENvbmRpdGlvbmFsLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMuY29uZGl0aW9uLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIGlmICh0aGlzLmNvbmRpdGlvbi5ldmFsdWF0ZShzY29wZSkpIHtcbiAgICAgIHRoaXMueWVzLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWw7XG59KEV4cHJlc3Npb24pO1xuXG5leHBvcnQgdmFyIEFjY2Vzc1RoaXMgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb241KSB7XG4gIF9pbmhlcml0cyhBY2Nlc3NUaGlzLCBfRXhwcmVzc2lvbjUpO1xuXG4gIGZ1bmN0aW9uIEFjY2Vzc1RoaXMoYW5jZXN0b3IpIHtcbiAgICBcblxuICAgIHZhciBfdGhpczcgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjUuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczcuYW5jZXN0b3IgPSBhbmNlc3RvcjtcbiAgICByZXR1cm4gX3RoaXM3O1xuICB9XG5cbiAgQWNjZXNzVGhpcy5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdmFyIG9jID0gc2NvcGUub3ZlcnJpZGVDb250ZXh0O1xuICAgIHZhciBpID0gdGhpcy5hbmNlc3RvcjtcbiAgICB3aGlsZSAoaS0tICYmIG9jKSB7XG4gICAgICBvYyA9IG9jLnBhcmVudE92ZXJyaWRlQ29udGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGkgPCAxICYmIG9jID8gb2MuYmluZGluZ0NvbnRleHQgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgQWNjZXNzVGhpcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdEFjY2Vzc1RoaXModGhpcyk7XG4gIH07XG5cbiAgQWNjZXNzVGhpcy5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHt9O1xuXG4gIHJldHVybiBBY2Nlc3NUaGlzO1xufShFeHByZXNzaW9uKTtcblxuZXhwb3J0IHZhciBBY2Nlc3NTY29wZSA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjYpIHtcbiAgX2luaGVyaXRzKEFjY2Vzc1Njb3BlLCBfRXhwcmVzc2lvbjYpO1xuXG4gIGZ1bmN0aW9uIEFjY2Vzc1Njb3BlKG5hbWUsIGFuY2VzdG9yKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXM4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V4cHJlc3Npb242LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXM4Lm5hbWUgPSBuYW1lO1xuICAgIF90aGlzOC5hbmNlc3RvciA9IGFuY2VzdG9yO1xuICAgIF90aGlzOC5pc0Fzc2lnbmFibGUgPSB0cnVlO1xuICAgIHJldHVybiBfdGhpczg7XG4gIH1cblxuICBBY2Nlc3NTY29wZS5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIHJldHVybiBjb250ZXh0W3RoaXMubmFtZV07XG4gIH07XG5cbiAgQWNjZXNzU2NvcGUucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICB2YXIgY29udGV4dCA9IGdldENvbnRleHRGb3IodGhpcy5uYW1lLCBzY29wZSwgdGhpcy5hbmNlc3Rvcik7XG4gICAgcmV0dXJuIGNvbnRleHQgPyBjb250ZXh0W3RoaXMubmFtZV0gPSB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICBBY2Nlc3NTY29wZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdEFjY2Vzc1Njb3BlKHRoaXMpO1xuICB9O1xuXG4gIEFjY2Vzc1Njb3BlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHZhciBjb250ZXh0ID0gZ2V0Q29udGV4dEZvcih0aGlzLm5hbWUsIHNjb3BlLCB0aGlzLmFuY2VzdG9yKTtcbiAgICBiaW5kaW5nLm9ic2VydmVQcm9wZXJ0eShjb250ZXh0LCB0aGlzLm5hbWUpO1xuICB9O1xuXG4gIHJldHVybiBBY2Nlc3NTY29wZTtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgQWNjZXNzTWVtYmVyID0gZnVuY3Rpb24gKF9FeHByZXNzaW9uNykge1xuICBfaW5oZXJpdHMoQWNjZXNzTWVtYmVyLCBfRXhwcmVzc2lvbjcpO1xuXG4gIGZ1bmN0aW9uIEFjY2Vzc01lbWJlcihvYmplY3QsIG5hbWUpIHtcbiAgICBcblxuICAgIHZhciBfdGhpczkgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjcuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczkub2JqZWN0ID0gb2JqZWN0O1xuICAgIF90aGlzOS5uYW1lID0gbmFtZTtcbiAgICBfdGhpczkuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXM5O1xuICB9XG5cbiAgQWNjZXNzTWVtYmVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICByZXR1cm4gaW5zdGFuY2UgPT09IG51bGwgfHwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCA/IGluc3RhbmNlIDogaW5zdGFuY2VbdGhpcy5uYW1lXTtcbiAgfTtcblxuICBBY2Nlc3NNZW1iZXIucHJvdG90eXBlLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSk7XG5cbiAgICBpZiAoaW5zdGFuY2UgPT09IG51bGwgfHwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdGFuY2UgPSB7fTtcbiAgICAgIHRoaXMub2JqZWN0LmFzc2lnbihzY29wZSwgaW5zdGFuY2UpO1xuICAgIH1cblxuICAgIGluc3RhbmNlW3RoaXMubmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgQWNjZXNzTWVtYmVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QWNjZXNzTWVtYmVyKHRoaXMpO1xuICB9O1xuXG4gIEFjY2Vzc01lbWJlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLm9iamVjdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB2YXIgb2JqID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUpO1xuICAgIGlmIChvYmopIHtcbiAgICAgIGJpbmRpbmcub2JzZXJ2ZVByb3BlcnR5KG9iaiwgdGhpcy5uYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEFjY2Vzc01lbWJlcjtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgQWNjZXNzS2V5ZWQgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb244KSB7XG4gIF9pbmhlcml0cyhBY2Nlc3NLZXllZCwgX0V4cHJlc3Npb244KTtcblxuICBmdW5jdGlvbiBBY2Nlc3NLZXllZChvYmplY3QsIGtleSkge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMTAgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjguY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczEwLm9iamVjdCA9IG9iamVjdDtcbiAgICBfdGhpczEwLmtleSA9IGtleTtcbiAgICBfdGhpczEwLmlzQXNzaWduYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzMTA7XG4gIH1cblxuICBBY2Nlc3NLZXllZC5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgdmFyIGxvb2t1cCA9IHRoaXMua2V5LmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIHJldHVybiBnZXRLZXllZChpbnN0YW5jZSwgbG9va3VwKTtcbiAgfTtcblxuICBBY2Nlc3NLZXllZC5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHNjb3BlLCB2YWx1ZSkge1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXMub2JqZWN0LmV2YWx1YXRlKHNjb3BlKTtcbiAgICB2YXIgbG9va3VwID0gdGhpcy5rZXkuZXZhbHVhdGUoc2NvcGUpO1xuICAgIHJldHVybiBzZXRLZXllZChpbnN0YW5jZSwgbG9va3VwLCB2YWx1ZSk7XG4gIH07XG5cbiAgQWNjZXNzS2V5ZWQucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRBY2Nlc3NLZXllZCh0aGlzKTtcbiAgfTtcblxuICBBY2Nlc3NLZXllZC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLm9iamVjdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB2YXIgb2JqID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUpO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgIHRoaXMua2V5LmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgICAgdmFyIGtleSA9IHRoaXMua2V5LmV2YWx1YXRlKHNjb3BlKTtcblxuICAgICAgaWYgKGtleSAhPT0gbnVsbCAmJiBrZXkgIT09IHVuZGVmaW5lZCAmJiAhKEFycmF5LmlzQXJyYXkob2JqKSAmJiB0eXBlb2Yga2V5ID09PSAnbnVtYmVyJykpIHtcbiAgICAgICAgYmluZGluZy5vYnNlcnZlUHJvcGVydHkob2JqLCBrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQWNjZXNzS2V5ZWQ7XG59KEV4cHJlc3Npb24pO1xuXG5leHBvcnQgdmFyIENhbGxTY29wZSA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjkpIHtcbiAgX2luaGVyaXRzKENhbGxTY29wZSwgX0V4cHJlc3Npb245KTtcblxuICBmdW5jdGlvbiBDYWxsU2NvcGUobmFtZSwgYXJncywgYW5jZXN0b3IpIHtcbiAgICBcblxuICAgIHZhciBfdGhpczExID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V4cHJlc3Npb245LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMxMS5uYW1lID0gbmFtZTtcbiAgICBfdGhpczExLmFyZ3MgPSBhcmdzO1xuICAgIF90aGlzMTEuYW5jZXN0b3IgPSBhbmNlc3RvcjtcbiAgICByZXR1cm4gX3RoaXMxMTtcbiAgfVxuXG4gIENhbGxTY29wZS5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zLCBtdXN0RXZhbHVhdGUpIHtcbiAgICB2YXIgYXJncyA9IGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgdmFyIGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIHZhciBmdW5jID0gZ2V0RnVuY3Rpb24oY29udGV4dCwgdGhpcy5uYW1lLCBtdXN0RXZhbHVhdGUpO1xuICAgIGlmIChmdW5jKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBDYWxsU2NvcGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDYWxsU2NvcGUodGhpcyk7XG4gIH07XG5cbiAgQ2FsbFNjb3BlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHZhciBhcmdzID0gdGhpcy5hcmdzO1xuICAgIHZhciBpID0gYXJncy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgYXJnc1tpXS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENhbGxTY29wZTtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgQ2FsbE1lbWJlciA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjEwKSB7XG4gIF9pbmhlcml0cyhDYWxsTWVtYmVyLCBfRXhwcmVzc2lvbjEwKTtcblxuICBmdW5jdGlvbiBDYWxsTWVtYmVyKG9iamVjdCwgbmFtZSwgYXJncykge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMTIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjEwLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMxMi5vYmplY3QgPSBvYmplY3Q7XG4gICAgX3RoaXMxMi5uYW1lID0gbmFtZTtcbiAgICBfdGhpczEyLmFyZ3MgPSBhcmdzO1xuICAgIHJldHVybiBfdGhpczEyO1xuICB9XG5cbiAgQ2FsbE1lbWJlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zLCBtdXN0RXZhbHVhdGUpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICB2YXIgYXJncyA9IGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgdmFyIGZ1bmMgPSBnZXRGdW5jdGlvbihpbnN0YW5jZSwgdGhpcy5uYW1lLCBtdXN0RXZhbHVhdGUpO1xuICAgIGlmIChmdW5jKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShpbnN0YW5jZSwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgQ2FsbE1lbWJlci5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdENhbGxNZW1iZXIodGhpcyk7XG4gIH07XG5cbiAgQ2FsbE1lbWJlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLm9iamVjdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB2YXIgb2JqID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUpO1xuICAgIGlmIChnZXRGdW5jdGlvbihvYmosIHRoaXMubmFtZSwgZmFsc2UpKSB7XG4gICAgICB2YXIgYXJncyA9IHRoaXMuYXJncztcbiAgICAgIHZhciBpID0gYXJncy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGFyZ3NbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDYWxsTWVtYmVyO1xufShFeHByZXNzaW9uKTtcblxuZXhwb3J0IHZhciBDYWxsRnVuY3Rpb24gPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xMSkge1xuICBfaW5oZXJpdHMoQ2FsbEZ1bmN0aW9uLCBfRXhwcmVzc2lvbjExKTtcblxuICBmdW5jdGlvbiBDYWxsRnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMTMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjExLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMxMy5mdW5jID0gZnVuYztcbiAgICBfdGhpczEzLmFyZ3MgPSBhcmdzO1xuICAgIHJldHVybiBfdGhpczEzO1xuICB9XG5cbiAgQ2FsbEZ1bmN0aW9uLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMsIG11c3RFdmFsdWF0ZSkge1xuICAgIHZhciBmdW5jID0gdGhpcy5mdW5jLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgZXZhbExpc3Qoc2NvcGUsIHRoaXMuYXJncywgbG9va3VwRnVuY3Rpb25zKSk7XG4gICAgfVxuICAgIGlmICghbXVzdEV2YWx1YXRlICYmIChmdW5jID09PSBudWxsIHx8IGZ1bmMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmZ1bmMgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH07XG5cbiAgQ2FsbEZ1bmN0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0Q2FsbEZ1bmN0aW9uKHRoaXMpO1xuICB9O1xuXG4gIENhbGxGdW5jdGlvbi5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLmZ1bmMuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgdmFyIGZ1bmMgPSB0aGlzLmZ1bmMuZXZhbHVhdGUoc2NvcGUpO1xuICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgICB2YXIgaSA9IGFyZ3MubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBhcmdzW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQ2FsbEZ1bmN0aW9uO1xufShFeHByZXNzaW9uKTtcblxuZXhwb3J0IHZhciBCaW5hcnkgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xMikge1xuICBfaW5oZXJpdHMoQmluYXJ5LCBfRXhwcmVzc2lvbjEyKTtcblxuICBmdW5jdGlvbiBCaW5hcnkob3BlcmF0aW9uLCBsZWZ0LCByaWdodCkge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMTQgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjEyLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMxNC5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgX3RoaXMxNC5sZWZ0ID0gbGVmdDtcbiAgICBfdGhpczE0LnJpZ2h0ID0gcmlnaHQ7XG4gICAgcmV0dXJuIF90aGlzMTQ7XG4gIH1cblxuICBCaW5hcnkucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5sZWZ0LmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuXG4gICAgc3dpdGNoICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgY2FzZSAnJiYnOlxuICAgICAgICByZXR1cm4gbGVmdCAmJiB0aGlzLnJpZ2h0LmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgICAgY2FzZSAnfHwnOlxuICAgICAgICByZXR1cm4gbGVmdCB8fCB0aGlzLnJpZ2h0LmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciByaWdodCA9IHRoaXMucmlnaHQuZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG5cbiAgICBzd2l0Y2ggKHRoaXMub3BlcmF0aW9uKSB7XG4gICAgICBjYXNlICc9PSc6XG4gICAgICAgIHJldHVybiBsZWZ0ID09IHJpZ2h0O1xuICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0O1xuICAgICAgY2FzZSAnIT0nOlxuICAgICAgICByZXR1cm4gbGVmdCAhPSByaWdodDtcbiAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgIHJldHVybiBsZWZ0ICE9PSByaWdodDtcbiAgICAgIGNhc2UgJ2luc3RhbmNlb2YnOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHJpZ2h0ID09PSAnZnVuY3Rpb24nICYmIGxlZnQgaW5zdGFuY2VvZiByaWdodDtcbiAgICAgIGNhc2UgJ2luJzpcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgcmlnaHQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHJpZ2h0KSkgPT09ICdvYmplY3QnICYmIHJpZ2h0ICE9PSBudWxsICYmIGxlZnQgaW4gcmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGxlZnQgPT09IG51bGwgfHwgcmlnaHQgPT09IG51bGwgfHwgbGVmdCA9PT0gdW5kZWZpbmVkIHx8IHJpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgaWYgKGxlZnQgIT09IG51bGwgJiYgbGVmdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbGVmdDtcbiAgICAgICAgICBpZiAocmlnaHQgIT09IG51bGwgJiYgcmlnaHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHJpZ2h0O1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICBpZiAobGVmdCAhPT0gbnVsbCAmJiBsZWZ0ICE9PSB1bmRlZmluZWQpIHJldHVybiBsZWZ0O1xuICAgICAgICAgIGlmIChyaWdodCAhPT0gbnVsbCAmJiByaWdodCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gMCAtIHJpZ2h0O1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMub3BlcmF0aW9uKSB7XG4gICAgICBjYXNlICcrJzpcbiAgICAgICAgcmV0dXJuIGF1dG9Db252ZXJ0QWRkKGxlZnQsIHJpZ2h0KTtcbiAgICAgIGNhc2UgJy0nOlxuICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0O1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHJldHVybiBsZWZ0ICogcmlnaHQ7XG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgcmV0dXJuIGxlZnQgLyByaWdodDtcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgICByZXR1cm4gbGVmdCAlIHJpZ2h0O1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIHJldHVybiBsZWZ0IDwgcmlnaHQ7XG4gICAgICBjYXNlICc+JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgPiByaWdodDtcbiAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgPD0gcmlnaHQ7XG4gICAgICBjYXNlICc+PSc6XG4gICAgICAgIHJldHVybiBsZWZ0ID49IHJpZ2h0O1xuICAgICAgY2FzZSAnXic6XG4gICAgICAgIHJldHVybiBsZWZ0IF4gcmlnaHQ7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBlcnJvciBbJyArIHRoaXMub3BlcmF0aW9uICsgJ10gbm90IGhhbmRsZWQnKTtcbiAgfTtcblxuICBCaW5hcnkucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRCaW5hcnkodGhpcyk7XG4gIH07XG5cbiAgQmluYXJ5LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMubGVmdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB2YXIgbGVmdCA9IHRoaXMubGVmdC5ldmFsdWF0ZShzY29wZSk7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uID09PSAnJiYnICYmICFsZWZ0IHx8IHRoaXMub3BlcmF0aW9uID09PSAnfHwnICYmIGxlZnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yaWdodC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgfTtcblxuICByZXR1cm4gQmluYXJ5O1xufShFeHByZXNzaW9uKTtcblxuZXhwb3J0IHZhciBVbmFyeSA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjEzKSB7XG4gIF9pbmhlcml0cyhVbmFyeSwgX0V4cHJlc3Npb24xMyk7XG5cbiAgZnVuY3Rpb24gVW5hcnkob3BlcmF0aW9uLCBleHByZXNzaW9uKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXMxNSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uMTMuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczE1Lm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICBfdGhpczE1LmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHJldHVybiBfdGhpczE1O1xuICB9XG5cbiAgVW5hcnkucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgJyEnOlxuICAgICAgICByZXR1cm4gIXRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIGNhc2UgJ3R5cGVvZic6XG4gICAgICAgIHJldHVybiBfdHlwZW9mKHRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSk7XG4gICAgICBjYXNlICd2b2lkJzpcbiAgICAgICAgcmV0dXJuIHZvaWQgdGhpcy5leHByZXNzaW9uLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignSW50ZXJuYWwgZXJyb3IgWycgKyB0aGlzLm9wZXJhdGlvbiArICddIG5vdCBoYW5kbGVkJyk7XG4gIH07XG5cbiAgVW5hcnkucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQcmVmaXgodGhpcyk7XG4gIH07XG5cbiAgVW5hcnkucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdGhpcy5leHByZXNzaW9uLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICB9O1xuXG4gIHJldHVybiBVbmFyeTtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgTGl0ZXJhbFByaW1pdGl2ZSA9IGZ1bmN0aW9uIChfRXhwcmVzc2lvbjE0KSB7XG4gIF9pbmhlcml0cyhMaXRlcmFsUHJpbWl0aXZlLCBfRXhwcmVzc2lvbjE0KTtcblxuICBmdW5jdGlvbiBMaXRlcmFsUHJpbWl0aXZlKHZhbHVlKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXMxNiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uMTQuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczE2LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIF90aGlzMTY7XG4gIH1cblxuICBMaXRlcmFsUHJpbWl0aXZlLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfTtcblxuICBMaXRlcmFsUHJpbWl0aXZlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0TGl0ZXJhbFByaW1pdGl2ZSh0aGlzKTtcbiAgfTtcblxuICBMaXRlcmFsUHJpbWl0aXZlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge307XG5cbiAgcmV0dXJuIExpdGVyYWxQcmltaXRpdmU7XG59KEV4cHJlc3Npb24pO1xuXG5leHBvcnQgdmFyIExpdGVyYWxTdHJpbmcgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xNSkge1xuICBfaW5oZXJpdHMoTGl0ZXJhbFN0cmluZywgX0V4cHJlc3Npb24xNSk7XG5cbiAgZnVuY3Rpb24gTGl0ZXJhbFN0cmluZyh2YWx1ZSkge1xuICAgIFxuXG4gICAgdmFyIF90aGlzMTcgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXhwcmVzc2lvbjE1LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMxNy52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBfdGhpczE3O1xuICB9XG5cbiAgTGl0ZXJhbFN0cmluZy5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH07XG5cbiAgTGl0ZXJhbFN0cmluZy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdExpdGVyYWxTdHJpbmcodGhpcyk7XG4gIH07XG5cbiAgTGl0ZXJhbFN0cmluZy5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHt9O1xuXG4gIHJldHVybiBMaXRlcmFsU3RyaW5nO1xufShFeHByZXNzaW9uKTtcblxuZXhwb3J0IHZhciBMaXRlcmFsVGVtcGxhdGUgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xNikge1xuICBfaW5oZXJpdHMoTGl0ZXJhbFRlbXBsYXRlLCBfRXhwcmVzc2lvbjE2KTtcblxuICBmdW5jdGlvbiBMaXRlcmFsVGVtcGxhdGUoY29va2VkLCBleHByZXNzaW9ucywgcmF3LCB0YWcpIHtcbiAgICBcblxuICAgIHZhciBfdGhpczE4ID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V4cHJlc3Npb24xNi5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzMTguY29va2VkID0gY29va2VkO1xuICAgIF90aGlzMTguZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucyB8fCBbXTtcbiAgICBfdGhpczE4Lmxlbmd0aCA9IF90aGlzMTguZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgIF90aGlzMTgudGFnZ2VkID0gdGFnICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKF90aGlzMTgudGFnZ2VkKSB7XG4gICAgICBfdGhpczE4LmNvb2tlZC5yYXcgPSByYXc7XG4gICAgICBfdGhpczE4LnRhZyA9IHRhZztcbiAgICAgIGlmICh0YWcgaW5zdGFuY2VvZiBBY2Nlc3NTY29wZSkge1xuICAgICAgICBfdGhpczE4LmNvbnRleHRUeXBlID0gJ1Njb3BlJztcbiAgICAgIH0gZWxzZSBpZiAodGFnIGluc3RhbmNlb2YgQWNjZXNzTWVtYmVyIHx8IHRhZyBpbnN0YW5jZW9mIEFjY2Vzc0tleWVkKSB7XG4gICAgICAgIF90aGlzMTguY29udGV4dFR5cGUgPSAnT2JqZWN0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihfdGhpczE4LnRhZyArICcgaXMgbm90IGEgdmFsaWQgdGVtcGxhdGUgdGFnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfdGhpczE4O1xuICB9XG5cbiAgTGl0ZXJhbFRlbXBsYXRlLnByb3RvdHlwZS5nZXRTY29wZUNvbnRleHQgPSBmdW5jdGlvbiBnZXRTY29wZUNvbnRleHQoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHJldHVybiBnZXRDb250ZXh0Rm9yKHRoaXMudGFnLm5hbWUsIHNjb3BlLCB0aGlzLnRhZy5hbmNlc3Rvcik7XG4gIH07XG5cbiAgTGl0ZXJhbFRlbXBsYXRlLnByb3RvdHlwZS5nZXRPYmplY3RDb250ZXh0ID0gZnVuY3Rpb24gZ2V0T2JqZWN0Q29udGV4dChzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudGFnLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBMaXRlcmFsVGVtcGxhdGUucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucywgbXVzdEV2YWx1YXRlKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IHRoaXMuZXhwcmVzc2lvbnNbaV0uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRhZ2dlZCkge1xuICAgICAgdmFyIGZ1bmMgPSB0aGlzLnRhZy5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXNbJ2dldCcgKyB0aGlzLmNvbnRleHRUeXBlICsgJ0NvbnRleHQnXShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbC5hcHBseShmdW5jLCBbY29udGV4dCwgdGhpcy5jb29rZWRdLmNvbmNhdChyZXN1bHRzKSk7XG4gICAgICB9XG4gICAgICBpZiAoIW11c3RFdmFsdWF0ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnRhZyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuY29va2VkWzBdO1xuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRoaXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgcmVzdWx0ID0gU3RyaW5nLnByb3RvdHlwZS5jb25jYXQocmVzdWx0LCByZXN1bHRzW19pMl0sIHRoaXMuY29va2VkW19pMiArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBMaXRlcmFsVGVtcGxhdGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMaXRlcmFsVGVtcGxhdGUodGhpcyk7XG4gIH07XG5cbiAgTGl0ZXJhbFRlbXBsYXRlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5leHByZXNzaW9uc1tpXS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFnZ2VkKSB7XG4gICAgICB0aGlzLnRhZy5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIExpdGVyYWxUZW1wbGF0ZTtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCB2YXIgTGl0ZXJhbEFycmF5ID0gZnVuY3Rpb24gKF9FeHByZXNzaW9uMTcpIHtcbiAgX2luaGVyaXRzKExpdGVyYWxBcnJheSwgX0V4cHJlc3Npb24xNyk7XG5cbiAgZnVuY3Rpb24gTGl0ZXJhbEFycmF5KGVsZW1lbnRzKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXMxOSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uMTcuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczE5LmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgcmV0dXJuIF90aGlzMTk7XG4gIH1cblxuICBMaXRlcmFsQXJyYXkucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICByZXN1bHRbaV0gPSBlbGVtZW50c1tpXS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIExpdGVyYWxBcnJheS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdExpdGVyYWxBcnJheSh0aGlzKTtcbiAgfTtcblxuICBMaXRlcmFsQXJyYXkucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZWxlbWVudHNbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBMaXRlcmFsQXJyYXk7XG59KEV4cHJlc3Npb24pO1xuXG5leHBvcnQgdmFyIExpdGVyYWxPYmplY3QgPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xOCkge1xuICBfaW5oZXJpdHMoTGl0ZXJhbE9iamVjdCwgX0V4cHJlc3Npb24xOCk7XG5cbiAgZnVuY3Rpb24gTGl0ZXJhbE9iamVjdChrZXlzLCB2YWx1ZXMpIHtcbiAgICBcblxuICAgIHZhciBfdGhpczIwID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V4cHJlc3Npb24xOC5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzMjAua2V5cyA9IGtleXM7XG4gICAgX3RoaXMyMC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgcmV0dXJuIF90aGlzMjA7XG4gIH1cblxuICBMaXRlcmFsT2JqZWN0LnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB7fTtcbiAgICB2YXIga2V5cyA9IHRoaXMua2V5cztcbiAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgaW5zdGFuY2Vba2V5c1tpXV0gPSB2YWx1ZXNbaV0uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xuXG4gIExpdGVyYWxPYmplY3QucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMaXRlcmFsT2JqZWN0KHRoaXMpO1xuICB9O1xuXG4gIExpdGVyYWxPYmplY3QucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMua2V5cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy52YWx1ZXNbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBMaXRlcmFsT2JqZWN0O1xufShFeHByZXNzaW9uKTtcblxuZnVuY3Rpb24gZXZhbExpc3Qoc2NvcGUsIGxpc3QsIGxvb2t1cEZ1bmN0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdFtpXSA9IGxpc3RbaV0uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gYXV0b0NvbnZlcnRBZGQoYSwgYikge1xuICBpZiAoYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgYiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBhICsgYi50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGIgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gYS50b1N0cmluZygpICsgYjtcbiAgICB9XG5cbiAgICByZXR1cm4gYSArIGI7XG4gIH1cblxuICBpZiAoYSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgaWYgKGIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gYjtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBnZXRGdW5jdGlvbihvYmosIG5hbWUsIG11c3RFeGlzdCkge1xuICB2YXIgZnVuYyA9IG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvYmpbbmFtZV07XG4gIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG4gIGlmICghbXVzdEV4aXN0ICYmIChmdW5jID09PSBudWxsIHx8IGZ1bmMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn1cblxuZnVuY3Rpb24gZ2V0S2V5ZWQob2JqLCBrZXkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmpbcGFyc2VJbnQoa2V5LCAxMCldO1xuICB9IGVsc2UgaWYgKG9iaikge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSBlbHNlIGlmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIG9ialtrZXldO1xufVxuXG5mdW5jdGlvbiBzZXRLZXllZChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGtleSwgMTApO1xuXG4gICAgaWYgKG9iai5sZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIG9iai5sZW5ndGggPSBpbmRleCArIDE7XG4gICAgfVxuXG4gICAgb2JqW2luZGV4XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfVW5wYXJzZXIgPSBudWxsO1xuXG5leHBvcnQgeyBfVW5wYXJzZXIgYXMgVW5wYXJzZXIgfTtcbmlmICh0eXBlb2YgRkVBVFVSRV9OT19VTlBBUlNFUiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgX1VucGFyc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVucGFyc2VyKGJ1ZmZlcikge1xuICAgICAgXG5cbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIH1cblxuICAgIFVucGFyc2VyLnVucGFyc2UgPSBmdW5jdGlvbiB1bnBhcnNlKGV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBidWZmZXIgPSBbXTtcbiAgICAgIHZhciB2aXNpdG9yID0gbmV3IF9VbnBhcnNlcihidWZmZXIpO1xuXG4gICAgICBleHByZXNzaW9uLmFjY2VwdCh2aXNpdG9yKTtcblxuICAgICAgcmV0dXJuIGJ1ZmZlci5qb2luKCcnKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUodGV4dCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCh0ZXh0KTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLndyaXRlQXJncyA9IGZ1bmN0aW9uIHdyaXRlQXJncyhhcmdzKSB7XG4gICAgICB0aGlzLndyaXRlKCcoJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgdGhpcy53cml0ZSgnLCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJnc1tpXS5hY2NlcHQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMud3JpdGUoJyknKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QmluZGluZ0JlaGF2aW9yID0gZnVuY3Rpb24gdmlzaXRCaW5kaW5nQmVoYXZpb3IoYmVoYXZpb3IpIHtcbiAgICAgIHZhciBhcmdzID0gYmVoYXZpb3IuYXJncztcblxuICAgICAgYmVoYXZpb3IuZXhwcmVzc2lvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCcmJyArIGJlaGF2aW9yLm5hbWUpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLndyaXRlKCc6Jyk7XG4gICAgICAgIGFyZ3NbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRWYWx1ZUNvbnZlcnRlciA9IGZ1bmN0aW9uIHZpc2l0VmFsdWVDb252ZXJ0ZXIoY29udmVydGVyKSB7XG4gICAgICB2YXIgYXJncyA9IGNvbnZlcnRlci5hcmdzO1xuXG4gICAgICBjb252ZXJ0ZXIuZXhwcmVzc2lvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCd8JyArIGNvbnZlcnRlci5uYW1lKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy53cml0ZSgnOicpO1xuICAgICAgICBhcmdzW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QXNzaWduID0gZnVuY3Rpb24gdmlzaXRBc3NpZ24oYXNzaWduKSB7XG4gICAgICBhc3NpZ24udGFyZ2V0LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJz0nKTtcbiAgICAgIGFzc2lnbi52YWx1ZS5hY2NlcHQodGhpcyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdENvbmRpdGlvbmFsID0gZnVuY3Rpb24gdmlzaXRDb25kaXRpb25hbChjb25kaXRpb25hbCkge1xuICAgICAgY29uZGl0aW9uYWwuY29uZGl0aW9uLmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJz8nKTtcbiAgICAgIGNvbmRpdGlvbmFsLnllcy5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCc6Jyk7XG4gICAgICBjb25kaXRpb25hbC5uby5hY2NlcHQodGhpcyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdEFjY2Vzc1RoaXMgPSBmdW5jdGlvbiB2aXNpdEFjY2Vzc1RoaXMoYWNjZXNzKSB7XG4gICAgICBpZiAoYWNjZXNzLmFuY2VzdG9yID09PSAwKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyR0aGlzJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMud3JpdGUoJyRwYXJlbnQnKTtcbiAgICAgIHZhciBpID0gYWNjZXNzLmFuY2VzdG9yIC0gMTtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy53cml0ZSgnLiRwYXJlbnQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QWNjZXNzU2NvcGUgPSBmdW5jdGlvbiB2aXNpdEFjY2Vzc1Njb3BlKGFjY2Vzcykge1xuICAgICAgdmFyIGkgPSBhY2Nlc3MuYW5jZXN0b3I7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyRwYXJlbnQuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLndyaXRlKGFjY2Vzcy5uYW1lKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QWNjZXNzTWVtYmVyID0gZnVuY3Rpb24gdmlzaXRBY2Nlc3NNZW1iZXIoYWNjZXNzKSB7XG4gICAgICBhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJy4nICsgYWNjZXNzLm5hbWUpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRBY2Nlc3NLZXllZCA9IGZ1bmN0aW9uIHZpc2l0QWNjZXNzS2V5ZWQoYWNjZXNzKSB7XG4gICAgICBhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJ1snKTtcbiAgICAgIGFjY2Vzcy5rZXkuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZSgnXScpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRDYWxsU2NvcGUgPSBmdW5jdGlvbiB2aXNpdENhbGxTY29wZShjYWxsKSB7XG4gICAgICB2YXIgaSA9IGNhbGwuYW5jZXN0b3I7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyRwYXJlbnQuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLndyaXRlKGNhbGwubmFtZSk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRDYWxsRnVuY3Rpb24gPSBmdW5jdGlvbiB2aXNpdENhbGxGdW5jdGlvbihjYWxsKSB7XG4gICAgICBjYWxsLmZ1bmMuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZUFyZ3MoY2FsbC5hcmdzKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0Q2FsbE1lbWJlciA9IGZ1bmN0aW9uIHZpc2l0Q2FsbE1lbWJlcihjYWxsKSB7XG4gICAgICBjYWxsLm9iamVjdC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCcuJyArIGNhbGwubmFtZSk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRQcmVmaXggPSBmdW5jdGlvbiB2aXNpdFByZWZpeChwcmVmaXgpIHtcbiAgICAgIHRoaXMud3JpdGUoJygnICsgcHJlZml4Lm9wZXJhdGlvbik7XG4gICAgICBpZiAocHJlZml4Lm9wZXJhdGlvbi5jaGFyQ29kZUF0KDApID49IDk3KSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyAnKTtcbiAgICAgIH1cbiAgICAgIHByZWZpeC5leHByZXNzaW9uLmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJyknKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0QmluYXJ5ID0gZnVuY3Rpb24gdmlzaXRCaW5hcnkoYmluYXJ5KSB7XG4gICAgICBiaW5hcnkubGVmdC5hY2NlcHQodGhpcyk7XG4gICAgICBpZiAoYmluYXJ5Lm9wZXJhdGlvbi5jaGFyQ29kZUF0KDApID09PSAxMDUpIHtcbiAgICAgICAgdGhpcy53cml0ZSgnICcgKyBiaW5hcnkub3BlcmF0aW9uICsgJyAnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud3JpdGUoYmluYXJ5Lm9wZXJhdGlvbik7XG4gICAgICB9XG4gICAgICBiaW5hcnkucmlnaHQuYWNjZXB0KHRoaXMpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRMaXRlcmFsUHJpbWl0aXZlID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsUHJpbWl0aXZlKGxpdGVyYWwpIHtcbiAgICAgIHRoaXMud3JpdGUoJycgKyBsaXRlcmFsLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbEFycmF5ID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsQXJyYXkobGl0ZXJhbCkge1xuICAgICAgdmFyIGVsZW1lbnRzID0gbGl0ZXJhbC5lbGVtZW50cztcblxuICAgICAgdGhpcy53cml0ZSgnWycpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgICB0aGlzLndyaXRlKCcsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50c1tpXS5hY2NlcHQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMud3JpdGUoJ10nKTtcbiAgICB9O1xuXG4gICAgVW5wYXJzZXIucHJvdG90eXBlLnZpc2l0TGl0ZXJhbE9iamVjdCA9IGZ1bmN0aW9uIHZpc2l0TGl0ZXJhbE9iamVjdChsaXRlcmFsKSB7XG4gICAgICB2YXIga2V5cyA9IGxpdGVyYWwua2V5cztcbiAgICAgIHZhciB2YWx1ZXMgPSBsaXRlcmFsLnZhbHVlcztcblxuICAgICAgdGhpcy53cml0ZSgneycpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMud3JpdGUoJ1xcJycgKyBrZXlzW2ldICsgJ1xcJzonKTtcbiAgICAgICAgdmFsdWVzW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53cml0ZSgnfScpO1xuICAgIH07XG5cbiAgICBVbnBhcnNlci5wcm90b3R5cGUudmlzaXRMaXRlcmFsU3RyaW5nID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsU3RyaW5nKGxpdGVyYWwpIHtcbiAgICAgIHZhciBlc2NhcGVkID0gbGl0ZXJhbC52YWx1ZS5yZXBsYWNlKC8nL2csIFwiXFwnXCIpO1xuICAgICAgdGhpcy53cml0ZSgnXFwnJyArIGVzY2FwZWQgKyAnXFwnJyk7XG4gICAgfTtcblxuICAgIFVucGFyc2VyLnByb3RvdHlwZS52aXNpdExpdGVyYWxUZW1wbGF0ZSA9IGZ1bmN0aW9uIHZpc2l0TGl0ZXJhbFRlbXBsYXRlKGxpdGVyYWwpIHtcbiAgICAgIHZhciBjb29rZWQgPSBsaXRlcmFsLmNvb2tlZCxcbiAgICAgICAgICBleHByZXNzaW9ucyA9IGxpdGVyYWwuZXhwcmVzc2lvbnM7XG5cbiAgICAgIHZhciBsZW5ndGggPSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICB0aGlzLndyaXRlKCdgJyk7XG4gICAgICB0aGlzLndyaXRlKGNvb2tlZFswXSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4cHJlc3Npb25zW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgICAgdGhpcy53cml0ZShjb29rZWRbaSArIDFdKTtcbiAgICAgIH1cbiAgICAgIHRoaXMud3JpdGUoJ2AnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFVucGFyc2VyO1xuICB9KCk7XG59XG5cbmV4cG9ydCB2YXIgRXhwcmVzc2lvbkNsb25lciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXhwcmVzc2lvbkNsb25lcigpIHtcbiAgICBcbiAgfVxuXG4gIEV4cHJlc3Npb25DbG9uZXIucHJvdG90eXBlLmNsb25lRXhwcmVzc2lvbkFycmF5ID0gZnVuY3Rpb24gY2xvbmVFeHByZXNzaW9uQXJyYXkoYXJyYXkpIHtcbiAgICB2YXIgY2xvbmVkQXJyYXkgPSBbXTtcbiAgICB2YXIgaSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjbG9uZWRBcnJheVtpXSA9IGFycmF5W2ldLmFjY2VwdCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lZEFycmF5O1xuICB9O1xuXG4gIEV4cHJlc3Npb25DbG9uZXIucHJvdG90eXBlLnZpc2l0QmluZGluZ0JlaGF2aW9yID0gZnVuY3Rpb24gdmlzaXRCaW5kaW5nQmVoYXZpb3IoYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gbmV3IEJpbmRpbmdCZWhhdmlvcihiZWhhdmlvci5leHByZXNzaW9uLmFjY2VwdCh0aGlzKSwgYmVoYXZpb3IubmFtZSwgdGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShiZWhhdmlvci5hcmdzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRWYWx1ZUNvbnZlcnRlciA9IGZ1bmN0aW9uIHZpc2l0VmFsdWVDb252ZXJ0ZXIoY29udmVydGVyKSB7XG4gICAgcmV0dXJuIG5ldyBWYWx1ZUNvbnZlcnRlcihjb252ZXJ0ZXIuZXhwcmVzc2lvbi5hY2NlcHQodGhpcyksIGNvbnZlcnRlci5uYW1lLCB0aGlzLmNsb25lRXhwcmVzc2lvbkFycmF5KGNvbnZlcnRlci5hcmdzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRBc3NpZ24gPSBmdW5jdGlvbiB2aXNpdEFzc2lnbihhc3NpZ24pIHtcbiAgICByZXR1cm4gbmV3IEFzc2lnbihhc3NpZ24udGFyZ2V0LmFjY2VwdCh0aGlzKSwgYXNzaWduLnZhbHVlLmFjY2VwdCh0aGlzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRDb25kaXRpb25hbCA9IGZ1bmN0aW9uIHZpc2l0Q29uZGl0aW9uYWwoY29uZGl0aW9uYWwpIHtcbiAgICByZXR1cm4gbmV3IENvbmRpdGlvbmFsKGNvbmRpdGlvbmFsLmNvbmRpdGlvbi5hY2NlcHQodGhpcyksIGNvbmRpdGlvbmFsLnllcy5hY2NlcHQodGhpcyksIGNvbmRpdGlvbmFsLm5vLmFjY2VwdCh0aGlzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRBY2Nlc3NUaGlzID0gZnVuY3Rpb24gdmlzaXRBY2Nlc3NUaGlzKGFjY2Vzcykge1xuICAgIHJldHVybiBuZXcgQWNjZXNzVGhpcyhhY2Nlc3MuYW5jZXN0b3IpO1xuICB9O1xuXG4gIEV4cHJlc3Npb25DbG9uZXIucHJvdG90eXBlLnZpc2l0QWNjZXNzU2NvcGUgPSBmdW5jdGlvbiB2aXNpdEFjY2Vzc1Njb3BlKGFjY2Vzcykge1xuICAgIHJldHVybiBuZXcgQWNjZXNzU2NvcGUoYWNjZXNzLm5hbWUsIGFjY2Vzcy5hbmNlc3Rvcik7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRBY2Nlc3NNZW1iZXIgPSBmdW5jdGlvbiB2aXNpdEFjY2Vzc01lbWJlcihhY2Nlc3MpIHtcbiAgICByZXR1cm4gbmV3IEFjY2Vzc01lbWJlcihhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKSwgYWNjZXNzLm5hbWUpO1xuICB9O1xuXG4gIEV4cHJlc3Npb25DbG9uZXIucHJvdG90eXBlLnZpc2l0QWNjZXNzS2V5ZWQgPSBmdW5jdGlvbiB2aXNpdEFjY2Vzc0tleWVkKGFjY2Vzcykge1xuICAgIHJldHVybiBuZXcgQWNjZXNzS2V5ZWQoYWNjZXNzLm9iamVjdC5hY2NlcHQodGhpcyksIGFjY2Vzcy5rZXkuYWNjZXB0KHRoaXMpKTtcbiAgfTtcblxuICBFeHByZXNzaW9uQ2xvbmVyLnByb3RvdHlwZS52aXNpdENhbGxTY29wZSA9IGZ1bmN0aW9uIHZpc2l0Q2FsbFNjb3BlKGNhbGwpIHtcbiAgICByZXR1cm4gbmV3IENhbGxTY29wZShjYWxsLm5hbWUsIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkoY2FsbC5hcmdzKSwgY2FsbC5hbmNlc3Rvcik7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRDYWxsRnVuY3Rpb24gPSBmdW5jdGlvbiB2aXNpdENhbGxGdW5jdGlvbihjYWxsKSB7XG4gICAgcmV0dXJuIG5ldyBDYWxsRnVuY3Rpb24oY2FsbC5mdW5jLmFjY2VwdCh0aGlzKSwgdGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShjYWxsLmFyZ3MpKTtcbiAgfTtcblxuICBFeHByZXNzaW9uQ2xvbmVyLnByb3RvdHlwZS52aXNpdENhbGxNZW1iZXIgPSBmdW5jdGlvbiB2aXNpdENhbGxNZW1iZXIoY2FsbCkge1xuICAgIHJldHVybiBuZXcgQ2FsbE1lbWJlcihjYWxsLm9iamVjdC5hY2NlcHQodGhpcyksIGNhbGwubmFtZSwgdGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShjYWxsLmFyZ3MpKTtcbiAgfTtcblxuICBFeHByZXNzaW9uQ2xvbmVyLnByb3RvdHlwZS52aXNpdFVuYXJ5ID0gZnVuY3Rpb24gdmlzaXRVbmFyeSh1bmFyeSkge1xuICAgIHJldHVybiBuZXcgVW5hcnkocHJlZml4Lm9wZXJhdGlvbiwgcHJlZml4LmV4cHJlc3Npb24uYWNjZXB0KHRoaXMpKTtcbiAgfTtcblxuICBFeHByZXNzaW9uQ2xvbmVyLnByb3RvdHlwZS52aXNpdEJpbmFyeSA9IGZ1bmN0aW9uIHZpc2l0QmluYXJ5KGJpbmFyeSkge1xuICAgIHJldHVybiBuZXcgQmluYXJ5KGJpbmFyeS5vcGVyYXRpb24sIGJpbmFyeS5sZWZ0LmFjY2VwdCh0aGlzKSwgYmluYXJ5LnJpZ2h0LmFjY2VwdCh0aGlzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRMaXRlcmFsUHJpbWl0aXZlID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsUHJpbWl0aXZlKGxpdGVyYWwpIHtcbiAgICByZXR1cm4gbmV3IExpdGVyYWxQcmltaXRpdmUobGl0ZXJhbCk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRMaXRlcmFsQXJyYXkgPSBmdW5jdGlvbiB2aXNpdExpdGVyYWxBcnJheShsaXRlcmFsKSB7XG4gICAgcmV0dXJuIG5ldyBMaXRlcmFsQXJyYXkodGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShsaXRlcmFsLmVsZW1lbnRzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRMaXRlcmFsT2JqZWN0ID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsT2JqZWN0KGxpdGVyYWwpIHtcbiAgICByZXR1cm4gbmV3IExpdGVyYWxPYmplY3QobGl0ZXJhbC5rZXlzLCB0aGlzLmNsb25lRXhwcmVzc2lvbkFycmF5KGxpdGVyYWwudmFsdWVzKSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRMaXRlcmFsU3RyaW5nID0gZnVuY3Rpb24gdmlzaXRMaXRlcmFsU3RyaW5nKGxpdGVyYWwpIHtcbiAgICByZXR1cm4gbmV3IExpdGVyYWxTdHJpbmcobGl0ZXJhbC52YWx1ZSk7XG4gIH07XG5cbiAgRXhwcmVzc2lvbkNsb25lci5wcm90b3R5cGUudmlzaXRMaXRlcmFsVGVtcGxhdGUgPSBmdW5jdGlvbiB2aXNpdExpdGVyYWxUZW1wbGF0ZShsaXRlcmFsKSB7XG4gICAgcmV0dXJuIG5ldyBMaXRlcmFsVGVtcGxhdGUobGl0ZXJhbC5jb29rZWQsIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkobGl0ZXJhbC5leHByZXNzaW9ucyksIGxpdGVyYWwucmF3LCBsaXRlcmFsLnRhZyAmJiBsaXRlcmFsLnRhZy5hY2NlcHQodGhpcykpO1xuICB9O1xuXG4gIHJldHVybiBFeHByZXNzaW9uQ2xvbmVyO1xufSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgdmFyIHZpc2l0b3IgPSBuZXcgRXhwcmVzc2lvbkNsb25lcigpO1xuICByZXR1cm4gZXhwcmVzc2lvbi5hY2NlcHQodmlzaXRvcik7XG59XG5cbmV4cG9ydCB2YXIgYmluZGluZ01vZGUgPSB7XG4gIG9uZVRpbWU6IDAsXG4gIHRvVmlldzogMSxcbiAgb25lV2F5OiAxLFxuICB0d29XYXk6IDIsXG4gIGZyb21WaWV3OiAzXG59O1xuXG5leHBvcnQgdmFyIFBhcnNlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFyc2VyKCkge1xuICAgIFxuXG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2Uoc3JjKSB7XG4gICAgc3JjID0gc3JjIHx8ICcnO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGVbc3JjXSB8fCAodGhpcy5jYWNoZVtzcmNdID0gbmV3IFBhcnNlckltcGxlbWVudGF0aW9uKHNyYykucGFyc2VCaW5kaW5nQmVoYXZpb3IoKSk7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcbn0oKTtcblxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbmV4cG9ydCB2YXIgUGFyc2VySW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIF9jcmVhdGVDbGFzcyhQYXJzZXJJbXBsZW1lbnRhdGlvbiwgW3tcbiAgICBrZXk6ICdyYXcnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3JjLnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuaWR4KTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBQYXJzZXJJbXBsZW1lbnRhdGlvbihzcmMpIHtcbiAgICBcblxuICAgIHRoaXMuaWR4ID0gMDtcblxuICAgIHRoaXMuc3RhcnQgPSAwO1xuXG4gICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgdGhpcy5sZW4gPSBzcmMubGVuZ3RoO1xuXG4gICAgdGhpcy50a24gPSBUJEVPRjtcblxuICAgIHRoaXMudmFsID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5jaCA9IHNyYy5jaGFyQ29kZUF0KDApO1xuICB9XG5cbiAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnBhcnNlQmluZGluZ0JlaGF2aW9yID0gZnVuY3Rpb24gcGFyc2VCaW5kaW5nQmVoYXZpb3IoKSB7XG4gICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICBpZiAodGhpcy50a24gJiBUJEV4cHJlc3Npb25UZXJtaW5hbCkge1xuICAgICAgdGhpcy5lcnIoJ0ludmFsaWQgc3RhcnQgb2YgZXhwcmVzc2lvbicpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZVZhbHVlQ29udmVydGVyKCk7XG4gICAgd2hpbGUgKHRoaXMub3B0KFQkQW1wZXJzYW5kKSkge1xuICAgICAgcmVzdWx0ID0gbmV3IEJpbmRpbmdCZWhhdmlvcihyZXN1bHQsIHRoaXMudmFsLCB0aGlzLnBhcnNlVmFyaWFkaWNBcmdzKCkpO1xuICAgIH1cbiAgICBpZiAodGhpcy50a24gIT09IFQkRU9GKSB7XG4gICAgICB0aGlzLmVycignVW5jb25zdW1lZCB0b2tlbiAnICsgdGhpcy5yYXcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZVZhbHVlQ29udmVydGVyID0gZnVuY3Rpb24gcGFyc2VWYWx1ZUNvbnZlcnRlcigpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB3aGlsZSAodGhpcy5vcHQoVCRCYXIpKSB7XG4gICAgICByZXN1bHQgPSBuZXcgVmFsdWVDb252ZXJ0ZXIocmVzdWx0LCB0aGlzLnZhbCwgdGhpcy5wYXJzZVZhcmlhZGljQXJncygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VWYXJpYWRpY0FyZ3MgPSBmdW5jdGlvbiBwYXJzZVZhcmlhZGljQXJncygpIHtcbiAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAodGhpcy5vcHQoVCRDb2xvbikpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oKSB7XG4gICAgdmFyIGV4cHJTdGFydCA9IHRoaXMuaWR4O1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlQ29uZGl0aW9uYWwoKTtcblxuICAgIHdoaWxlICh0aGlzLnRrbiA9PT0gVCRFcSkge1xuICAgICAgaWYgKCFyZXN1bHQuaXNBc3NpZ25hYmxlKSB7XG4gICAgICAgIHRoaXMuZXJyKCdFeHByZXNzaW9uICcgKyB0aGlzLnNyYy5zbGljZShleHByU3RhcnQsIHRoaXMuc3RhcnQpICsgJyBpcyBub3QgYXNzaWduYWJsZScpO1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIGV4cHJTdGFydCA9IHRoaXMuaWR4O1xuICAgICAgcmVzdWx0ID0gbmV3IEFzc2lnbihyZXN1bHQsIHRoaXMucGFyc2VDb25kaXRpb25hbCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VDb25kaXRpb25hbCA9IGZ1bmN0aW9uIHBhcnNlQ29uZGl0aW9uYWwoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VCaW5hcnkoMCk7XG5cbiAgICBpZiAodGhpcy5vcHQoVCRRdWVzdGlvbikpIHtcbiAgICAgIHZhciB5ZXMgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5leHBlY3QoVCRDb2xvbik7XG4gICAgICByZXN1bHQgPSBuZXcgQ29uZGl0aW9uYWwocmVzdWx0LCB5ZXMsIHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZUJpbmFyeSA9IGZ1bmN0aW9uIHBhcnNlQmluYXJ5KG1pblByZWNlZGVuY2UpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMucGFyc2VMZWZ0SGFuZFNpZGUoMCk7XG5cbiAgICB3aGlsZSAodGhpcy50a24gJiBUJEJpbmFyeU9wKSB7XG4gICAgICB2YXIgb3BUb2tlbiA9IHRoaXMudGtuO1xuICAgICAgaWYgKChvcFRva2VuICYgVCRQcmVjZWRlbmNlKSA8PSBtaW5QcmVjZWRlbmNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIGxlZnQgPSBuZXcgQmluYXJ5KFRva2VuVmFsdWVzW29wVG9rZW4gJiBUJFRva2VuTWFza10sIGxlZnQsIHRoaXMucGFyc2VCaW5hcnkob3BUb2tlbiAmIFQkUHJlY2VkZW5jZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUucGFyc2VMZWZ0SGFuZFNpZGUgPSBmdW5jdGlvbiBwYXJzZUxlZnRIYW5kU2lkZShjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcblxuICAgIHByaW1hcnk6IHN3aXRjaCAodGhpcy50a24pIHtcbiAgICAgIGNhc2UgVCRQbHVzOlxuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKTtcbiAgICAgIGNhc2UgVCRNaW51czpcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5hcnkoJy0nLCBuZXcgTGl0ZXJhbFByaW1pdGl2ZSgwKSwgdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKSk7XG4gICAgICBjYXNlIFQkQmFuZzpcbiAgICAgIGNhc2UgVCRUeXBlb2ZLZXl3b3JkOlxuICAgICAgY2FzZSBUJFZvaWRLZXl3b3JkOlxuICAgICAgICB2YXIgb3AgPSBUb2tlblZhbHVlc1t0aGlzLnRrbiAmIFQkVG9rZW5NYXNrXTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVbmFyeShvcCwgdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKSk7XG4gICAgICBjYXNlIFQkUGFyZW50U2NvcGU6XG4gICAgICAgIHtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgICAgY29udGV4dCsrO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0KFQkUGVyaW9kKSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy50a24gPT09IFQkUGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50a24gJiBUJEFjY2Vzc1Njb3BlVGVybWluYWwpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc1RoaXMoY29udGV4dCAmIEMkQW5jZXN0b3IpO1xuXG4gICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0ICYgQyRTaG9ydGhhbmRQcm9wIHwgQyRUaGlzO1xuICAgICAgICAgICAgICBicmVhayBwcmltYXJ5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5lcnIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICh0aGlzLnRrbiA9PT0gVCRQYXJlbnRTY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBUJElkZW50aWZpZXI6XG4gICAgICAgIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzU2NvcGUodGhpcy52YWwsIGNvbnRleHQgJiBDJEFuY2VzdG9yKTtcbiAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0ICYgQyRTaG9ydGhhbmRQcm9wIHwgQyRTY29wZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBUJFRoaXNTY29wZTpcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc1RoaXMoMCk7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0ICYgQyRTaG9ydGhhbmRQcm9wIHwgQyRUaGlzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVCRMUGFyZW46XG4gICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KFQkUlBhcmVuKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFQkTEJyYWNrZXQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgIHZhciBfZWxlbWVudHMgPSBbXTtcbiAgICAgICAgICBpZiAodGhpcy50a24gIT09IFQkUkJyYWNrZXQpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgX2VsZW1lbnRzLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICB9IHdoaWxlICh0aGlzLm9wdChUJENvbW1hKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZXhwZWN0KFQkUkJyYWNrZXQpO1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBMaXRlcmFsQXJyYXkoX2VsZW1lbnRzKTtcbiAgICAgICAgICBjb250ZXh0ID0gQyRQcmltYXJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFQkTEJyYWNlOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICB3aGlsZSAodGhpcy50a24gIT09IFQkUkJyYWNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50a24gJiBUJElkZW50aWZpZXJPcktleXdvcmQpIHtcbiAgICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5jaCxcbiAgICAgICAgICAgICAgICAgIHRrbiA9IHRoaXMudGtuLFxuICAgICAgICAgICAgICAgICAgaWR4ID0gdGhpcy5pZHg7XG5cbiAgICAgICAgICAgICAga2V5cy5wdXNoKHRoaXMudmFsKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0KFQkQ29sb24pKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaCA9IGNoO1xuICAgICAgICAgICAgICAgIHRoaXMudGtuID0gdGtuO1xuICAgICAgICAgICAgICAgIHRoaXMuaWR4ID0gaWR4O1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGUoQyRTaG9ydGhhbmRQcm9wKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50a24gJiBUJExpdGVyYWwpIHtcbiAgICAgICAgICAgICAga2V5cy5wdXNoKHRoaXMudmFsKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICAgICAgdGhpcy5leHBlY3QoVCRDb2xvbik7XG4gICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5lcnIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRrbiAhPT0gVCRSQnJhY2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5leHBlY3QoVCRDb21tYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZXhwZWN0KFQkUkJyYWNlKTtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbE9iamVjdChrZXlzLCB2YWx1ZXMpO1xuICAgICAgICAgIGNvbnRleHQgPSBDJFByaW1hcnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgVCRTdHJpbmdMaXRlcmFsOlxuICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbFN0cmluZyh0aGlzLnZhbCk7XG4gICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIGNvbnRleHQgPSBDJFByaW1hcnk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUJFRlbXBsYXRlVGFpbDpcbiAgICAgICAgcmVzdWx0ID0gbmV3IExpdGVyYWxUZW1wbGF0ZShbdGhpcy52YWxdKTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFQkVGVtcGxhdGVDb250aW51YXRpb246XG4gICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VUZW1wbGF0ZSgwKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFQkTnVtZXJpY0xpdGVyYWw6XG4gICAgICAgIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbFByaW1pdGl2ZSh0aGlzLnZhbCk7XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFQkTnVsbEtleXdvcmQ6XG4gICAgICBjYXNlIFQkVW5kZWZpbmVkS2V5d29yZDpcbiAgICAgIGNhc2UgVCRUcnVlS2V5d29yZDpcbiAgICAgIGNhc2UgVCRGYWxzZUtleXdvcmQ6XG4gICAgICAgIHJlc3VsdCA9IG5ldyBMaXRlcmFsUHJpbWl0aXZlKFRva2VuVmFsdWVzW3RoaXMudGtuICYgVCRUb2tlbk1hc2tdKTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodGhpcy5pZHggPj0gdGhpcy5sZW4pIHtcbiAgICAgICAgICB0aGlzLmVycignVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXJyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmIEMkU2hvcnRoYW5kUHJvcCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IHRoaXMudmFsO1xuICAgIHdoaWxlICh0aGlzLnRrbiAmIFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbikge1xuICAgICAgc3dpdGNoICh0aGlzLnRrbikge1xuICAgICAgICBjYXNlIFQkUGVyaW9kOlxuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgaWYgKCEodGhpcy50a24gJiBUJElkZW50aWZpZXJPcktleXdvcmQpKSB7XG4gICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuYW1lID0gdGhpcy52YWw7XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0ICYgQyRQcmltYXJ5IHwgKGNvbnRleHQgJiAoQyRUaGlzIHwgQyRTY29wZSkpIDw8IDEgfCBjb250ZXh0ICYgQyRNZW1iZXIgfCAoY29udGV4dCAmIEMkS2V5ZWQpID4+IDEgfCAoY29udGV4dCAmIEMkQ2FsbCkgPj4gMjtcbiAgICAgICAgICBpZiAodGhpcy50a24gPT09IFQkTFBhcmVuKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbnRleHQgJiBDJFNjb3BlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzU2NvcGUobmFtZSwgcmVzdWx0LmFuY2VzdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc01lbWJlcihyZXN1bHQsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBUJExCcmFja2V0OlxuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgY29udGV4dCA9IEMkS2V5ZWQ7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc0tleWVkKHJlc3VsdCwgdGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgdGhpcy5leHBlY3QoVCRSQnJhY2tldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVCRMUGFyZW46XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIHdoaWxlICh0aGlzLnRrbiAhPT0gVCRSUGFyZW4pIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHQoVCRDb21tYSkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZXhwZWN0KFQkUlBhcmVuKTtcbiAgICAgICAgICBpZiAoY29udGV4dCAmIEMkU2NvcGUpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYWxsU2NvcGUobmFtZSwgYXJncywgcmVzdWx0LmFuY2VzdG9yKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQgJiAoQyRNZW1iZXIgfCBDJFByaW1hcnkpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FsbE1lbWJlcihyZXN1bHQsIG5hbWUsIGFyZ3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2FsbEZ1bmN0aW9uKHJlc3VsdCwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRleHQgPSBDJENhbGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVCRUZW1wbGF0ZVRhaWw6XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IExpdGVyYWxUZW1wbGF0ZShbdGhpcy52YWxdLCBbXSwgW3RoaXMucmF3XSwgcmVzdWx0KTtcbiAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFQkVGVtcGxhdGVDb250aW51YXRpb246XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVRlbXBsYXRlKGNvbnRleHQgfCBDJFRhZ2dlZCwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlID0gZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZShjb250ZXh0LCBmdW5jKSB7XG4gICAgdmFyIGNvb2tlZCA9IFt0aGlzLnZhbF07XG4gICAgdmFyIHJhdyA9IGNvbnRleHQgJiBDJFRhZ2dlZCA/IFt0aGlzLnJhd10gOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5leHBlY3QoVCRUZW1wbGF0ZUNvbnRpbnVhdGlvbik7XG4gICAgdmFyIGV4cHJlc3Npb25zID0gW3RoaXMucGFyc2VFeHByZXNzaW9uKCldO1xuXG4gICAgd2hpbGUgKCh0aGlzLnRrbiA9IHRoaXMuc2NhblRlbXBsYXRlVGFpbCgpKSAhPT0gVCRUZW1wbGF0ZVRhaWwpIHtcbiAgICAgIGNvb2tlZC5wdXNoKHRoaXMudmFsKTtcbiAgICAgIGlmIChjb250ZXh0ICYgQyRUYWdnZWQpIHtcbiAgICAgICAgcmF3LnB1c2godGhpcy5yYXcpO1xuICAgICAgfVxuICAgICAgdGhpcy5leHBlY3QoVCRUZW1wbGF0ZUNvbnRpbnVhdGlvbik7XG4gICAgICBleHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIGNvb2tlZC5wdXNoKHRoaXMudmFsKTtcbiAgICBpZiAoY29udGV4dCAmIEMkVGFnZ2VkKSB7XG4gICAgICByYXcucHVzaCh0aGlzLnJhdyk7XG4gICAgfVxuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgcmV0dXJuIG5ldyBMaXRlcmFsVGVtcGxhdGUoY29va2VkLCBleHByZXNzaW9ucywgcmF3LCBmdW5jKTtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUubmV4dFRva2VuID0gZnVuY3Rpb24gbmV4dFRva2VuKCkge1xuICAgIHdoaWxlICh0aGlzLmlkeCA8IHRoaXMubGVuKSB7XG4gICAgICBpZiAodGhpcy5jaCA8PSAweDIwKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLmlkeDtcbiAgICAgIGlmICh0aGlzLmNoID09PSAweDI0IHx8IHRoaXMuY2ggPj0gMHg2MSAmJiB0aGlzLmNoIDw9IDB4N0EpIHtcbiAgICAgICAgdGhpcy50a24gPSB0aGlzLnNjYW5JZGVudGlmaWVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCh0aGlzLnRrbiA9IENoYXJTY2FubmVyc1t0aGlzLmNoXSh0aGlzKSkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRrbiA9IFQkRU9GO1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaCA9IHRoaXMuc3JjLmNoYXJDb2RlQXQoKyt0aGlzLmlkeCk7XG4gIH07XG5cbiAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnNjYW5JZGVudGlmaWVyID0gZnVuY3Rpb24gc2NhbklkZW50aWZpZXIoKSB7XG4gICAgd2hpbGUgKEFzY2lpSWRQYXJ0cy5oYXModGhpcy5uZXh0KCkpIHx8IHRoaXMuY2ggPiAweDdGICYmIElkUGFydHNbdGhpcy5jaF0pIHt9XG5cbiAgICByZXR1cm4gS2V5d29yZExvb2t1cFt0aGlzLnZhbCA9IHRoaXMucmF3XSB8fCBUJElkZW50aWZpZXI7XG4gIH07XG5cbiAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnNjYW5OdW1iZXIgPSBmdW5jdGlvbiBzY2FuTnVtYmVyKGlzRmxvYXQpIHtcbiAgICBpZiAoaXNGbG9hdCkge1xuICAgICAgdGhpcy52YWwgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbCA9IHRoaXMuY2ggLSAweDMwO1xuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpIDw9IDB4MzkgJiYgdGhpcy5jaCA+PSAweDMwKSB7XG4gICAgICAgIHRoaXMudmFsID0gdGhpcy52YWwgKiAxMCArIHRoaXMuY2ggLSAweDMwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Zsb2F0IHx8IHRoaXMuY2ggPT09IDB4MkUpIHtcbiAgICAgIGlmICghaXNGbG9hdCkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFydCA9IHRoaXMuaWR4O1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5jaCAtIDB4MzA7XG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkgPD0gMHgzOSAmJiB0aGlzLmNoID49IDB4MzApIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAqIDEwICsgdGhpcy5jaCAtIDB4MzA7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbCA9IHRoaXMudmFsICsgdmFsdWUgLyBNYXRoLnBvdygxMCwgdGhpcy5pZHggLSBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2ggPT09IDB4NjUgfHwgdGhpcy5jaCA9PT0gMHg0NSkge1xuICAgICAgdmFyIF9zdGFydCA9IHRoaXMuaWR4O1xuXG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmICh0aGlzLmNoID09PSAweDJEIHx8IHRoaXMuY2ggPT09IDB4MkIpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKHRoaXMuY2ggPj0gMHgzMCAmJiB0aGlzLmNoIDw9IDB4MzkpKSB7XG4gICAgICAgIHRoaXMuaWR4ID0gX3N0YXJ0O1xuICAgICAgICB0aGlzLmVycignSW52YWxpZCBleHBvbmVudCcpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpIDw9IDB4MzkgJiYgdGhpcy5jaCA+PSAweDMwKSB7fVxuICAgICAgdGhpcy52YWwgPSBwYXJzZUZsb2F0KHRoaXMuc3JjLnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuaWR4KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFQkTnVtZXJpY0xpdGVyYWw7XG4gIH07XG5cbiAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLnNjYW5TdHJpbmcgPSBmdW5jdGlvbiBzY2FuU3RyaW5nKCkge1xuICAgIHZhciBxdW90ZSA9IHRoaXMuY2g7XG4gICAgdGhpcy5uZXh0KCk7XG5cbiAgICB2YXIgYnVmZmVyID0gdm9pZCAwO1xuICAgIHZhciBtYXJrZXIgPSB0aGlzLmlkeDtcblxuICAgIHdoaWxlICh0aGlzLmNoICE9PSBxdW90ZSkge1xuICAgICAgaWYgKHRoaXMuY2ggPT09IDB4NUMpIHtcbiAgICAgICAgaWYgKCFidWZmZXIpIHtcbiAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlci5wdXNoKHRoaXMuc3JjLnNsaWNlKG1hcmtlciwgdGhpcy5pZHgpKTtcblxuICAgICAgICB0aGlzLm5leHQoKTtcblxuICAgICAgICB2YXIgX3VuZXNjYXBlZCA9IHZvaWQgMDtcblxuICAgICAgICBpZiAodGhpcy5jaCA9PT0gMHg3NSkge1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaWR4ICsgNCA8IHRoaXMubGVuKSB7XG4gICAgICAgICAgICB2YXIgaGV4ID0gdGhpcy5zcmMuc2xpY2UodGhpcy5pZHgsIHRoaXMuaWR4ICsgNCk7XG5cbiAgICAgICAgICAgIGlmICghL1tBLVowLTldezR9L2kudGVzdChoZXgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXJyKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdW5lc2NhcGVkID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICAgICAgICB0aGlzLmlkeCArPSA0O1xuICAgICAgICAgICAgdGhpcy5jaCA9IHRoaXMuc3JjLmNoYXJDb2RlQXQodGhpcy5pZHgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdW5lc2NhcGVkID0gdW5lc2NhcGUodGhpcy5jaCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBidWZmZXIucHVzaChmcm9tQ2hhckNvZGUoX3VuZXNjYXBlZCkpO1xuICAgICAgICBtYXJrZXIgPSB0aGlzLmlkeDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jaCA9PT0gMCB8fCB0aGlzLmlkeCA+PSB0aGlzLmxlbikge1xuICAgICAgICB0aGlzLmVycignVW50ZXJtaW5hdGVkIHF1b3RlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFzdCA9IHRoaXMuc3JjLnNsaWNlKG1hcmtlciwgdGhpcy5pZHgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHZhciB1bmVzY2FwZWQgPSBsYXN0O1xuXG4gICAgaWYgKGJ1ZmZlciAhPT0gbnVsbCAmJiBidWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYnVmZmVyLnB1c2gobGFzdCk7XG4gICAgICB1bmVzY2FwZWQgPSBidWZmZXIuam9pbignJyk7XG4gICAgfVxuXG4gICAgdGhpcy52YWwgPSB1bmVzY2FwZWQ7XG4gICAgcmV0dXJuIFQkU3RyaW5nTGl0ZXJhbDtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuc2NhblRlbXBsYXRlID0gZnVuY3Rpb24gc2NhblRlbXBsYXRlKCkge1xuICAgIHZhciB0YWlsID0gdHJ1ZTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICB3aGlsZSAodGhpcy5uZXh0KCkgIT09IDB4NjApIHtcbiAgICAgIGlmICh0aGlzLmNoID09PSAweDI0KSB7XG4gICAgICAgIGlmICh0aGlzLmlkeCArIDEgPCB0aGlzLmxlbiAmJiB0aGlzLnNyYy5jaGFyQ29kZUF0KHRoaXMuaWR4ICsgMSkgPT09IDB4N0IpIHtcbiAgICAgICAgICB0aGlzLmlkeCsrO1xuICAgICAgICAgIHRhaWwgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gJyQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2ggPT09IDB4NUMpIHtcbiAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZSh1bmVzY2FwZSh0aGlzLm5leHQoKSkpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmNoID09PSAwIHx8IHRoaXMuaWR4ID49IHRoaXMubGVuKSB7XG4gICAgICAgIHRoaXMuZXJyKCdVbnRlcm1pbmF0ZWQgdGVtcGxhdGUgbGl0ZXJhbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZSh0aGlzLmNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnZhbCA9IHJlc3VsdDtcbiAgICBpZiAodGFpbCkge1xuICAgICAgcmV0dXJuIFQkVGVtcGxhdGVUYWlsO1xuICAgIH1cbiAgICByZXR1cm4gVCRUZW1wbGF0ZUNvbnRpbnVhdGlvbjtcbiAgfTtcblxuICBQYXJzZXJJbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUuc2NhblRlbXBsYXRlVGFpbCA9IGZ1bmN0aW9uIHNjYW5UZW1wbGF0ZVRhaWwoKSB7XG4gICAgaWYgKHRoaXMuaWR4ID49IHRoaXMubGVuKSB7XG4gICAgICB0aGlzLmVycignVW50ZXJtaW5hdGVkIHRlbXBsYXRlJyk7XG4gICAgfVxuICAgIHRoaXMuaWR4LS07XG4gICAgcmV0dXJuIHRoaXMuc2NhblRlbXBsYXRlKCk7XG4gIH07XG5cbiAgUGFyc2VySW1wbGVtZW50YXRpb24ucHJvdG90eXBlLmVyciA9IGZ1bmN0aW9uIGVycigpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ1VuZXhwZWN0ZWQgdG9rZW4gJyArIHRoaXMucmF3O1xuICAgIHZhciBjb2x1bW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuc3RhcnQ7XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcnNlciBFcnJvcjogJyArIG1lc3NhZ2UgKyAnIGF0IGNvbHVtbiAnICsgY29sdW1uICsgJyBpbiBleHByZXNzaW9uIFsnICsgdGhpcy5zcmMgKyAnXScpO1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5vcHQgPSBmdW5jdGlvbiBvcHQodG9rZW4pIHtcbiAgICBpZiAodGhpcy50a24gPT09IHRva2VuKSB7XG4gICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFBhcnNlckltcGxlbWVudGF0aW9uLnByb3RvdHlwZS5leHBlY3QgPSBmdW5jdGlvbiBleHBlY3QodG9rZW4pIHtcbiAgICBpZiAodGhpcy50a24gPT09IHRva2VuKSB7XG4gICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycignTWlzc2luZyBleHBlY3RlZCB0b2tlbiAnICsgVG9rZW5WYWx1ZXNbdG9rZW4gJiBUJFRva2VuTWFza10sIHRoaXMuaWR4KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlckltcGxlbWVudGF0aW9uO1xufSgpO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShjb2RlKSB7XG4gIHN3aXRjaCAoY29kZSkge1xuICAgIGNhc2UgMHg2NjpcbiAgICAgIHJldHVybiAweEM7XG4gICAgY2FzZSAweDZFOlxuICAgICAgcmV0dXJuIDB4QTtcbiAgICBjYXNlIDB4NzI6XG4gICAgICByZXR1cm4gMHhEO1xuICAgIGNhc2UgMHg3NDpcbiAgICAgIHJldHVybiAweDk7XG4gICAgY2FzZSAweDc2OlxuICAgICAgcmV0dXJuIDB4QjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvZGU7XG4gIH1cbn1cblxudmFyIEMkVGhpcyA9IDEgPDwgMTA7XG52YXIgQyRTY29wZSA9IDEgPDwgMTE7XG52YXIgQyRNZW1iZXIgPSAxIDw8IDEyO1xudmFyIEMkS2V5ZWQgPSAxIDw8IDEzO1xudmFyIEMkQ2FsbCA9IDEgPDwgMTQ7XG52YXIgQyRQcmltYXJ5ID0gMSA8PCAxNTtcbnZhciBDJFNob3J0aGFuZFByb3AgPSAxIDw8IDE2O1xudmFyIEMkVGFnZ2VkID0gMSA8PCAxNztcblxudmFyIEMkQW5jZXN0b3IgPSAoMSA8PCA5KSAtIDE7XG5cbnZhciBUJFRva2VuTWFzayA9ICgxIDw8IDYpIC0gMTtcblxudmFyIFQkUHJlY1NoaWZ0ID0gNjtcblxudmFyIFQkUHJlY2VkZW5jZSA9IDcgPDwgVCRQcmVjU2hpZnQ7XG5cbnZhciBUJEV4cHJlc3Npb25UZXJtaW5hbCA9IDEgPDwgMTE7XG5cbnZhciBUJENsb3NpbmdUb2tlbiA9IDEgPDwgMTI7XG5cbnZhciBUJE9wZW5pbmdUb2tlbiA9IDEgPDwgMTM7XG5cbnZhciBUJEFjY2Vzc1Njb3BlVGVybWluYWwgPSAxIDw8IDE0O1xudmFyIFQkS2V5d29yZCA9IDEgPDwgMTU7XG52YXIgVCRFT0YgPSAxIDw8IDE2IHwgVCRBY2Nlc3NTY29wZVRlcm1pbmFsIHwgVCRFeHByZXNzaW9uVGVybWluYWw7XG52YXIgVCRJZGVudGlmaWVyID0gMSA8PCAxNztcbnZhciBUJElkZW50aWZpZXJPcktleXdvcmQgPSBUJElkZW50aWZpZXIgfCBUJEtleXdvcmQ7XG52YXIgVCRMaXRlcmFsID0gMSA8PCAxODtcbnZhciBUJE51bWVyaWNMaXRlcmFsID0gMSA8PCAxOSB8IFQkTGl0ZXJhbDtcbnZhciBUJFN0cmluZ0xpdGVyYWwgPSAxIDw8IDIwIHwgVCRMaXRlcmFsO1xudmFyIFQkQmluYXJ5T3AgPSAxIDw8IDIxO1xuXG52YXIgVCRVbmFyeU9wID0gMSA8PCAyMjtcblxudmFyIFQkTWVtYmVyRXhwcmVzc2lvbiA9IDEgPDwgMjM7XG5cbnZhciBUJE1lbWJlck9yQ2FsbEV4cHJlc3Npb24gPSAxIDw8IDI0O1xudmFyIFQkVGVtcGxhdGVUYWlsID0gMSA8PCAyNSB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcbnZhciBUJFRlbXBsYXRlQ29udGludWF0aW9uID0gMSA8PCAyNiB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcblxudmFyIFQkRmFsc2VLZXl3b3JkID0gMCB8IFQkS2V5d29yZCB8IFQkTGl0ZXJhbDtcbnZhciBUJFRydWVLZXl3b3JkID0gMSB8IFQkS2V5d29yZCB8IFQkTGl0ZXJhbDtcbnZhciBUJE51bGxLZXl3b3JkID0gMiB8IFQkS2V5d29yZCB8IFQkTGl0ZXJhbDtcbnZhciBUJFVuZGVmaW5lZEtleXdvcmQgPSAzIHwgVCRLZXl3b3JkIHwgVCRMaXRlcmFsO1xudmFyIFQkVGhpc1Njb3BlID0gNCB8IFQkSWRlbnRpZmllck9yS2V5d29yZDtcbnZhciBUJFBhcmVudFNjb3BlID0gNSB8IFQkSWRlbnRpZmllck9yS2V5d29yZDtcblxudmFyIFQkTFBhcmVuID0gNiB8IFQkT3BlbmluZ1Rva2VuIHwgVCRBY2Nlc3NTY29wZVRlcm1pbmFsIHwgVCRNZW1iZXJPckNhbGxFeHByZXNzaW9uO1xudmFyIFQkTEJyYWNlID0gNyB8IFQkT3BlbmluZ1Rva2VuO1xudmFyIFQkUGVyaW9kID0gOCB8IFQkTWVtYmVyRXhwcmVzc2lvbiB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcbnZhciBUJFJCcmFjZSA9IDkgfCBUJEFjY2Vzc1Njb3BlVGVybWluYWwgfCBUJENsb3NpbmdUb2tlbiB8IFQkRXhwcmVzc2lvblRlcm1pbmFsO1xudmFyIFQkUlBhcmVuID0gMTAgfCBUJEFjY2Vzc1Njb3BlVGVybWluYWwgfCBUJENsb3NpbmdUb2tlbiB8IFQkRXhwcmVzc2lvblRlcm1pbmFsO1xudmFyIFQkQ29tbWEgPSAxMSB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbDtcbnZhciBUJExCcmFja2V0ID0gMTIgfCBUJE9wZW5pbmdUb2tlbiB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbCB8IFQkTWVtYmVyRXhwcmVzc2lvbiB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcbnZhciBUJFJCcmFja2V0ID0gMTMgfCBUJENsb3NpbmdUb2tlbiB8IFQkRXhwcmVzc2lvblRlcm1pbmFsO1xudmFyIFQkQ29sb24gPSAxNCB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbDtcbnZhciBUJFF1ZXN0aW9uID0gMTU7XG5cbnZhciBUJEFtcGVyc2FuZCA9IDE4IHwgVCRBY2Nlc3NTY29wZVRlcm1pbmFsO1xudmFyIFQkQmFyID0gMTkgfCBUJEFjY2Vzc1Njb3BlVGVybWluYWw7XG52YXIgVCRCYXJCYXIgPSAyMCB8IDEgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xudmFyIFQkQW1wZXJzYW5kQW1wZXJzYW5kID0gMjEgfCAyIDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbnZhciBUJENhcmV0ID0gMjIgfCAzIDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbnZhciBUJEVxRXEgPSAyMyB8IDQgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xudmFyIFQkQmFuZ0VxID0gMjQgfCA0IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbnZhciBUJEVxRXFFcSA9IDI1IHwgNCA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRCYW5nRXFFcSA9IDI2IHwgNCA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRMdCA9IDI3IHwgNSA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRHdCA9IDI4IHwgNSA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRMdEVxID0gMjkgfCA1IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbnZhciBUJEd0RXEgPSAzMCB8IDUgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xudmFyIFQkSW5LZXl3b3JkID0gMzEgfCA1IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcCB8IFQkS2V5d29yZDtcbnZhciBUJEluc3RhbmNlT2ZLZXl3b3JkID0gMzIgfCA1IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcCB8IFQkS2V5d29yZDtcbnZhciBUJFBsdXMgPSAzMyB8IDYgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wIHwgVCRVbmFyeU9wO1xudmFyIFQkTWludXMgPSAzNCB8IDYgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wIHwgVCRVbmFyeU9wO1xudmFyIFQkVHlwZW9mS2V5d29yZCA9IDM1IHwgVCRVbmFyeU9wIHwgVCRLZXl3b3JkO1xudmFyIFQkVm9pZEtleXdvcmQgPSAzNiB8IFQkVW5hcnlPcCB8IFQkS2V5d29yZDtcbnZhciBUJFN0YXIgPSAzNyB8IDcgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xudmFyIFQkUGVyY2VudCA9IDM4IHwgNyA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRTbGFzaCA9IDM5IHwgNyA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG52YXIgVCRFcSA9IDQwO1xudmFyIFQkQmFuZyA9IDQxIHwgVCRVbmFyeU9wO1xuXG52YXIgS2V5d29yZExvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5LZXl3b3JkTG9va3VwLnRydWUgPSBUJFRydWVLZXl3b3JkO1xuS2V5d29yZExvb2t1cC5udWxsID0gVCROdWxsS2V5d29yZDtcbktleXdvcmRMb29rdXAuZmFsc2UgPSBUJEZhbHNlS2V5d29yZDtcbktleXdvcmRMb29rdXAudW5kZWZpbmVkID0gVCRVbmRlZmluZWRLZXl3b3JkO1xuS2V5d29yZExvb2t1cC4kdGhpcyA9IFQkVGhpc1Njb3BlO1xuS2V5d29yZExvb2t1cC4kcGFyZW50ID0gVCRQYXJlbnRTY29wZTtcbktleXdvcmRMb29rdXAuaW4gPSBUJEluS2V5d29yZDtcbktleXdvcmRMb29rdXAuaW5zdGFuY2VvZiA9IFQkSW5zdGFuY2VPZktleXdvcmQ7XG5LZXl3b3JkTG9va3VwLnR5cGVvZiA9IFQkVHlwZW9mS2V5d29yZDtcbktleXdvcmRMb29rdXAudm9pZCA9IFQkVm9pZEtleXdvcmQ7XG5cbnZhciBUb2tlblZhbHVlcyA9IFtmYWxzZSwgdHJ1ZSwgbnVsbCwgdW5kZWZpbmVkLCAnJHRoaXMnLCAnJHBhcmVudCcsICcoJywgJ3snLCAnLicsICd9JywgJyknLCAnLCcsICdbJywgJ10nLCAnOicsICc/JywgJ1xcJycsICdcIicsICcmJywgJ3wnLCAnfHwnLCAnJiYnLCAnXicsICc9PScsICchPScsICc9PT0nLCAnIT09JywgJzwnLCAnPicsICc8PScsICc+PScsICdpbicsICdpbnN0YW5jZW9mJywgJysnLCAnLScsICd0eXBlb2YnLCAndm9pZCcsICcqJywgJyUnLCAnLycsICc9JywgJyEnXTtcblxudmFyIGNvZGVzID0ge1xuICBBc2NpaUlkUGFydDogWzB4MjQsIDAsIDB4MzAsIDB4M0EsIDB4NDEsIDB4NUIsIDB4NUYsIDAsIDB4NjEsIDB4N0JdLFxuICBJZFN0YXJ0OiBbMHgyNCwgMCwgMHg0MSwgMHg1QiwgMHg1RiwgMCwgMHg2MSwgMHg3QiwgMHhBQSwgMCwgMHhCQSwgMCwgMHhDMCwgMHhENywgMHhEOCwgMHhGNywgMHhGOCwgMHgyQjksIDB4MkUwLCAweDJFNSwgMHgxRDAwLCAweDFEMjYsIDB4MUQyQywgMHgxRDVELCAweDFENjIsIDB4MUQ2NiwgMHgxRDZCLCAweDFENzgsIDB4MUQ3OSwgMHgxREJGLCAweDFFMDAsIDB4MUYwMCwgMHgyMDcxLCAwLCAweDIwN0YsIDAsIDB4MjA5MCwgMHgyMDlELCAweDIxMkEsIDB4MjEyQywgMHgyMTMyLCAwLCAweDIxNEUsIDAsIDB4MjE2MCwgMHgyMTg5LCAweDJDNjAsIDB4MkM4MCwgMHhBNzIyLCAweEE3ODgsIDB4QTc4QiwgMHhBN0FGLCAweEE3QjAsIDB4QTdCOCwgMHhBN0Y3LCAweEE4MDAsIDB4QUIzMCwgMHhBQjVCLCAweEFCNUMsIDB4QUI2NSwgMHhGQjAwLCAweEZCMDcsIDB4RkYyMSwgMHhGRjNCLCAweEZGNDEsIDB4RkY1Ql0sXG4gIERpZ2l0OiBbMHgzMCwgMHgzQV0sXG4gIFNraXA6IFswLCAweDIxLCAweDdGLCAweEExXVxufTtcblxuZnVuY3Rpb24gZGVjb21wcmVzcyhsb29rdXAsIHNldCwgY29tcHJlc3NlZCwgdmFsdWUpIHtcbiAgdmFyIHJhbmdlQ291bnQgPSBjb21wcmVzc2VkLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZUNvdW50OyBpICs9IDIpIHtcbiAgICB2YXIgc3RhcnQgPSBjb21wcmVzc2VkW2ldO1xuICAgIHZhciBlbmQgPSBjb21wcmVzc2VkW2kgKyAxXTtcbiAgICBlbmQgPSBlbmQgPiAwID8gZW5kIDogc3RhcnQgKyAxO1xuICAgIGlmIChsb29rdXApIHtcbiAgICAgIHZhciBqID0gc3RhcnQ7XG4gICAgICB3aGlsZSAoaiA8IGVuZCkge1xuICAgICAgICBsb29rdXBbal0gPSB2YWx1ZTtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2V0KSB7XG4gICAgICBmb3IgKHZhciBjaCA9IHN0YXJ0OyBjaCA8IGVuZDsgY2grKykge1xuICAgICAgICBzZXQuYWRkKGNoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmV0dXJuVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcC5uZXh0KCk7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9O1xufVxuZnVuY3Rpb24gdW5leHBlY3RlZENoYXJhY3RlcihwKSB7XG4gIHAuZXJyKCdVbmV4cGVjdGVkIGNoYXJhY3RlciBbJyArIGZyb21DaGFyQ29kZShwLmNoKSArICddJyk7XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgQXNjaWlJZFBhcnRzID0gbmV3IFNldCgpO1xuZGVjb21wcmVzcyhudWxsLCBBc2NpaUlkUGFydHMsIGNvZGVzLkFzY2lpSWRQYXJ0LCB0cnVlKTtcblxudmFyIElkUGFydHMgPSBuZXcgVWludDhBcnJheSgweEZGRkYpO1xuZGVjb21wcmVzcyhJZFBhcnRzLCBudWxsLCBjb2Rlcy5JZFN0YXJ0LCAxKTtcbmRlY29tcHJlc3MoSWRQYXJ0cywgbnVsbCwgY29kZXMuRGlnaXQsIDEpO1xuXG52YXIgQ2hhclNjYW5uZXJzID0gbmV3IEFycmF5KDB4RkZGRik7XG52YXIgY2kgPSAwO1xud2hpbGUgKGNpIDwgMHhGRkZGKSB7XG4gIENoYXJTY2FubmVyc1tjaV0gPSB1bmV4cGVjdGVkQ2hhcmFjdGVyO1xuICBjaSsrO1xufVxuXG5kZWNvbXByZXNzKENoYXJTY2FubmVycywgbnVsbCwgY29kZXMuU2tpcCwgZnVuY3Rpb24gKHApIHtcbiAgcC5uZXh0KCk7XG4gIHJldHVybiBudWxsO1xufSk7XG5kZWNvbXByZXNzKENoYXJTY2FubmVycywgbnVsbCwgY29kZXMuSWRTdGFydCwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc2NhbklkZW50aWZpZXIoKTtcbn0pO1xuZGVjb21wcmVzcyhDaGFyU2Nhbm5lcnMsIG51bGwsIGNvZGVzLkRpZ2l0LCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zY2FuTnVtYmVyKGZhbHNlKTtcbn0pO1xuXG5DaGFyU2Nhbm5lcnNbMHgyMl0gPSBDaGFyU2Nhbm5lcnNbMHgyN10gPSBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zY2FuU3RyaW5nKCk7XG59O1xuQ2hhclNjYW5uZXJzWzB4NjBdID0gZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc2NhblRlbXBsYXRlKCk7XG59O1xuXG5DaGFyU2Nhbm5lcnNbMHgyMV0gPSBmdW5jdGlvbiAocCkge1xuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRCYW5nO1xuICB9XG4gIGlmIChwLm5leHQoKSAhPT0gMHgzRCkge1xuICAgIHJldHVybiBUJEJhbmdFcTtcbiAgfVxuICBwLm5leHQoKTtcbiAgcmV0dXJuIFQkQmFuZ0VxRXE7XG59O1xuXG5DaGFyU2Nhbm5lcnNbMHgzRF0gPSBmdW5jdGlvbiAocCkge1xuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRFcTtcbiAgfVxuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRFcUVxO1xuICB9XG4gIHAubmV4dCgpO1xuICByZXR1cm4gVCRFcUVxRXE7XG59O1xuXG5DaGFyU2Nhbm5lcnNbMHgyNl0gPSBmdW5jdGlvbiAocCkge1xuICBpZiAocC5uZXh0KCkgIT09IDB4MjYpIHtcbiAgICByZXR1cm4gVCRBbXBlcnNhbmQ7XG4gIH1cbiAgcC5uZXh0KCk7XG4gIHJldHVybiBUJEFtcGVyc2FuZEFtcGVyc2FuZDtcbn07XG5cbkNoYXJTY2FubmVyc1sweDdDXSA9IGZ1bmN0aW9uIChwKSB7XG4gIGlmIChwLm5leHQoKSAhPT0gMHg3Qykge1xuICAgIHJldHVybiBUJEJhcjtcbiAgfVxuICBwLm5leHQoKTtcbiAgcmV0dXJuIFQkQmFyQmFyO1xufTtcblxuQ2hhclNjYW5uZXJzWzB4MkVdID0gZnVuY3Rpb24gKHApIHtcbiAgaWYgKHAubmV4dCgpIDw9IDB4MzkgJiYgcC5jaCA+PSAweDMwKSB7XG4gICAgcmV0dXJuIHAuc2Nhbk51bWJlcih0cnVlKTtcbiAgfVxuICByZXR1cm4gVCRQZXJpb2Q7XG59O1xuXG5DaGFyU2Nhbm5lcnNbMHgzQ10gPSBmdW5jdGlvbiAocCkge1xuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRMdDtcbiAgfVxuICBwLm5leHQoKTtcbiAgcmV0dXJuIFQkTHRFcTtcbn07XG5cbkNoYXJTY2FubmVyc1sweDNFXSA9IGZ1bmN0aW9uIChwKSB7XG4gIGlmIChwLm5leHQoKSAhPT0gMHgzRCkge1xuICAgIHJldHVybiBUJEd0O1xuICB9XG4gIHAubmV4dCgpO1xuICByZXR1cm4gVCRHdEVxO1xufTtcblxuQ2hhclNjYW5uZXJzWzB4MjVdID0gcmV0dXJuVG9rZW4oVCRQZXJjZW50KTtcbkNoYXJTY2FubmVyc1sweDI4XSA9IHJldHVyblRva2VuKFQkTFBhcmVuKTtcbkNoYXJTY2FubmVyc1sweDI5XSA9IHJldHVyblRva2VuKFQkUlBhcmVuKTtcbkNoYXJTY2FubmVyc1sweDJBXSA9IHJldHVyblRva2VuKFQkU3Rhcik7XG5DaGFyU2Nhbm5lcnNbMHgyQl0gPSByZXR1cm5Ub2tlbihUJFBsdXMpO1xuQ2hhclNjYW5uZXJzWzB4MkNdID0gcmV0dXJuVG9rZW4oVCRDb21tYSk7XG5DaGFyU2Nhbm5lcnNbMHgyRF0gPSByZXR1cm5Ub2tlbihUJE1pbnVzKTtcbkNoYXJTY2FubmVyc1sweDJGXSA9IHJldHVyblRva2VuKFQkU2xhc2gpO1xuQ2hhclNjYW5uZXJzWzB4M0FdID0gcmV0dXJuVG9rZW4oVCRDb2xvbik7XG5DaGFyU2Nhbm5lcnNbMHgzRl0gPSByZXR1cm5Ub2tlbihUJFF1ZXN0aW9uKTtcbkNoYXJTY2FubmVyc1sweDVCXSA9IHJldHVyblRva2VuKFQkTEJyYWNrZXQpO1xuQ2hhclNjYW5uZXJzWzB4NURdID0gcmV0dXJuVG9rZW4oVCRSQnJhY2tldCk7XG5DaGFyU2Nhbm5lcnNbMHg1RV0gPSByZXR1cm5Ub2tlbihUJENhcmV0KTtcbkNoYXJTY2FubmVyc1sweDdCXSA9IHJldHVyblRva2VuKFQkTEJyYWNlKTtcbkNoYXJTY2FubmVyc1sweDdEXSA9IHJldHVyblRva2VuKFQkUkJyYWNlKTtcblxudmFyIG1hcFByb3RvID0gTWFwLnByb3RvdHlwZTtcblxuZnVuY3Rpb24gX2dldE1hcE9ic2VydmVyKHRhc2tRdWV1ZSwgbWFwKSB7XG4gIHJldHVybiBNb2RpZnlNYXBPYnNlcnZlci5mb3IodGFza1F1ZXVlLCBtYXApO1xufVxuXG52YXIgTW9kaWZ5TWFwT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoX01vZGlmeUNvbGxlY3Rpb25PYnNlMikge1xuICBfaW5oZXJpdHMoTW9kaWZ5TWFwT2JzZXJ2ZXIsIF9Nb2RpZnlDb2xsZWN0aW9uT2JzZTIpO1xuXG4gIGZ1bmN0aW9uIE1vZGlmeU1hcE9ic2VydmVyKHRhc2tRdWV1ZSwgbWFwKSB7XG4gICAgXG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX01vZGlmeUNvbGxlY3Rpb25PYnNlMi5jYWxsKHRoaXMsIHRhc2tRdWV1ZSwgbWFwKSk7XG4gIH1cblxuICBNb2RpZnlNYXBPYnNlcnZlci5mb3IgPSBmdW5jdGlvbiBfZm9yKHRhc2tRdWV1ZSwgbWFwKSB7XG4gICAgaWYgKCEoJ19fbWFwX29ic2VydmVyX18nIGluIG1hcCkpIHtcbiAgICAgIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkobWFwLCAnX19tYXBfb2JzZXJ2ZXJfXycsIHtcbiAgICAgICAgdmFsdWU6IE1vZGlmeU1hcE9ic2VydmVyLmNyZWF0ZSh0YXNrUXVldWUsIG1hcCksXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcC5fX21hcF9vYnNlcnZlcl9fO1xuICB9O1xuXG4gIE1vZGlmeU1hcE9ic2VydmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSh0YXNrUXVldWUsIG1hcCkge1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNb2RpZnlNYXBPYnNlcnZlcih0YXNrUXVldWUsIG1hcCk7XG5cbiAgICB2YXIgcHJvdG8gPSBtYXBQcm90bztcbiAgICBpZiAocHJvdG8uc2V0ICE9PSBtYXAuc2V0IHx8IHByb3RvLmRlbGV0ZSAhPT0gbWFwLmRlbGV0ZSB8fCBwcm90by5jbGVhciAhPT0gbWFwLmNsZWFyKSB7XG4gICAgICBwcm90byA9IHtcbiAgICAgICAgc2V0OiBtYXAuc2V0LFxuICAgICAgICBkZWxldGU6IG1hcC5kZWxldGUsXG4gICAgICAgIGNsZWFyOiBtYXAuY2xlYXJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbWFwLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoYXNWYWx1ZSA9IG1hcC5oYXMoYXJndW1lbnRzWzBdKTtcbiAgICAgIHZhciB0eXBlID0gaGFzVmFsdWUgPyAndXBkYXRlJyA6ICdhZGQnO1xuICAgICAgdmFyIG9sZFZhbHVlID0gbWFwLmdldChhcmd1bWVudHNbMF0pO1xuICAgICAgdmFyIG1ldGhvZENhbGxSZXN1bHQgPSBwcm90by5zZXQuYXBwbHkobWFwLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKCFoYXNWYWx1ZSB8fCBvbGRWYWx1ZSAhPT0gbWFwLmdldChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBvYmplY3Q6IG1hcCxcbiAgICAgICAgICBrZXk6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBvbGRWYWx1ZTogb2xkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgbWFwLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoYXNWYWx1ZSA9IG1hcC5oYXMoYXJndW1lbnRzWzBdKTtcbiAgICAgIHZhciBvbGRWYWx1ZSA9IG1hcC5nZXQoYXJndW1lbnRzWzBdKTtcbiAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gcHJvdG8uZGVsZXRlLmFwcGx5KG1hcCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgIG9iamVjdDogbWFwLFxuICAgICAgICAgIGtleTogYXJndW1lbnRzWzBdLFxuICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgIH07XG5cbiAgICBtYXAuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IHByb3RvLmNsZWFyLmFwcGx5KG1hcCwgYXJndW1lbnRzKTtcbiAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgIHR5cGU6ICdjbGVhcicsXG4gICAgICAgIG9iamVjdDogbWFwXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgIH07XG5cbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGlmeU1hcE9ic2VydmVyO1xufShNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIpO1xuXG52YXIgZW1Mb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcignZXZlbnQtbWFuYWdlcicpO1xuXG5mdW5jdGlvbiBmaW5kT3JpZ2luYWxFdmVudFRhcmdldChldmVudCkge1xuICByZXR1cm4gZXZlbnQuY29tcG9zZWRQYXRoICYmIGV2ZW50LmNvbXBvc2VkUGF0aCgpWzBdIHx8IGV2ZW50LmRlZXBQYXRoICYmIGV2ZW50LmRlZXBQYXRoKClbMF0gfHwgZXZlbnQucGF0aCAmJiBldmVudC5wYXRoWzBdIHx8IGV2ZW50LnRhcmdldDtcbn1cblxuZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICB0aGlzLnN0YW5kYXJkU3RvcFByb3BhZ2F0aW9uKCk7XG4gIHRoaXMucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2FwdHVyZWRFdmVudChldmVudCkge1xuICBldmVudC5wcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZTtcbiAgdmFyIHRhcmdldCA9IGZpbmRPcmlnaW5hbEV2ZW50VGFyZ2V0KGV2ZW50KTtcblxuICB2YXIgb3JkZXJlZENhbGxiYWNrcyA9IFtdO1xuXG4gIHdoaWxlICh0YXJnZXQpIHtcbiAgICBpZiAodGFyZ2V0LmNhcHR1cmVkQ2FsbGJhY2tzKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSB0YXJnZXQuY2FwdHVyZWRDYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAhPT0gc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgZXZlbnQuc3RhbmRhcmRTdG9wUHJvcGFnYXRpb24gPSBldmVudC5zdG9wUHJvcGFnYXRpb247XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB9XG4gICAgICAgIG9yZGVyZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICB9XG4gIGZvciAodmFyIGkgPSBvcmRlcmVkQ2FsbGJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAhZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkOyBpLS0pIHtcbiAgICB2YXIgb3JkZXJlZENhbGxiYWNrID0gb3JkZXJlZENhbGxiYWNrc1tpXTtcbiAgICBpZiAoJ2hhbmRsZUV2ZW50JyBpbiBvcmRlcmVkQ2FsbGJhY2spIHtcbiAgICAgIG9yZGVyZWRDYWxsYmFjay5oYW5kbGVFdmVudChldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRDYWxsYmFjayhldmVudCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBDYXB0dXJlZEhhbmRsZXJFbnRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FwdHVyZWRIYW5kbGVyRW50cnkoZXZlbnROYW1lKSB7XG4gICAgXG5cbiAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgfVxuXG4gIENhcHR1cmVkSGFuZGxlckVudHJ5LnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgdGhpcy5jb3VudCsrO1xuXG4gICAgaWYgKHRoaXMuY291bnQgPT09IDEpIHtcbiAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCBoYW5kbGVDYXB0dXJlZEV2ZW50LCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgQ2FwdHVyZWRIYW5kbGVyRW50cnkucHJvdG90eXBlLmRlY3JlbWVudCA9IGZ1bmN0aW9uIGRlY3JlbWVudCgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgZW1Mb2dnZXIud2FybignVGhlIHNhbWUgRXZlbnRMaXN0ZW5lciB3YXMgZGlzcG9zZWQgbXVsdGlwbGUgdGltZXMuJyk7XG4gICAgfSBlbHNlIGlmICgtLXRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIERPTS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCBoYW5kbGVDYXB0dXJlZEV2ZW50LCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENhcHR1cmVkSGFuZGxlckVudHJ5O1xufSgpO1xuXG52YXIgRGVsZWdhdGVIYW5kbGVyRW50cnkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERlbGVnYXRlSGFuZGxlckVudHJ5KGV2ZW50TmFtZSwgZXZlbnRNYW5hZ2VyKSB7XG4gICAgXG5cbiAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgfVxuXG4gIERlbGVnYXRlSGFuZGxlckVudHJ5LnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IGZpbmRPcmlnaW5hbEV2ZW50VGFyZ2V0KGV2ZW50KTtcblxuICAgIHdoaWxlICh0YXJnZXQgJiYgIWV2ZW50LnByb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgaWYgKHRhcmdldC5kZWxlZ2F0ZWRDYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrc1tldmVudC50eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAhPT0gc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdGFuZGFyZFN0b3BQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdoYW5kbGVFdmVudCcgaW4gY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB2YXIgc2hvdWxkRXNjYXBlU2hhZG93Um9vdCA9IHRoaXMuZXZlbnRNYW5hZ2VyLmVzY2FwZVNoYWRvd1Jvb3QgJiYgcGFyZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdDtcblxuICAgICAgdGFyZ2V0ID0gc2hvdWxkRXNjYXBlU2hhZG93Um9vdCA/IHBhcmVudC5ob3N0IDogcGFyZW50O1xuICAgIH1cbiAgfTtcblxuICBEZWxlZ2F0ZUhhbmRsZXJFbnRyeS5wcm90b3R5cGUuaW5jcmVtZW50ID0gZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICAgIHRoaXMuY291bnQrKztcblxuICAgIGlmICh0aGlzLmNvdW50ID09PSAxKSB7XG4gICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcywgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICBEZWxlZ2F0ZUhhbmRsZXJFbnRyeS5wcm90b3R5cGUuZGVjcmVtZW50ID0gZnVuY3Rpb24gZGVjcmVtZW50KCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICBlbUxvZ2dlci53YXJuKCdUaGUgc2FtZSBFdmVudExpc3RlbmVyIHdhcyBkaXNwb3NlZCBtdWx0aXBsZSB0aW1lcy4nKTtcbiAgICB9IGVsc2UgaWYgKC0tdGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIERlbGVnYXRlSGFuZGxlckVudHJ5O1xufSgpO1xuXG52YXIgRGVsZWdhdGlvbkVudHJ5SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGVsZWdhdGlvbkVudHJ5SGFuZGxlcihlbnRyeSwgbG9va3VwLCB0YXJnZXRFdmVudCkge1xuICAgIFxuXG4gICAgdGhpcy5lbnRyeSA9IGVudHJ5O1xuICAgIHRoaXMubG9va3VwID0gbG9va3VwO1xuICAgIHRoaXMudGFyZ2V0RXZlbnQgPSB0YXJnZXRFdmVudDtcbiAgfVxuXG4gIERlbGVnYXRpb25FbnRyeUhhbmRsZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmxvb2t1cFt0aGlzLnRhcmdldEV2ZW50XSkge1xuICAgICAgdGhpcy5lbnRyeS5kZWNyZW1lbnQoKTtcbiAgICAgIHRoaXMubG9va3VwW3RoaXMudGFyZ2V0RXZlbnRdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1Mb2dnZXIud2FybignQ2FsbGluZyAuZGlzcG9zZSgpIG9uIGFscmVhZHkgZGlzcG9zZWQgZXZlbnRMaXN0ZW5lcicpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRGVsZWdhdGlvbkVudHJ5SGFuZGxlcjtcbn0oKTtcblxudmFyIEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRIYW5kbGVyKHRhcmdldCwgdGFyZ2V0RXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgXG5cbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnRhcmdldEV2ZW50ID0gdGFyZ2V0RXZlbnQ7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgRXZlbnRIYW5kbGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudGFyZ2V0RXZlbnQsIHRoaXMuY2FsbGJhY2spO1xuICB9O1xuXG4gIHJldHVybiBFdmVudEhhbmRsZXI7XG59KCk7XG5cbnZhciBEZWZhdWx0RXZlbnRTdHJhdGVneSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGVmYXVsdEV2ZW50U3RyYXRlZ3koZXZlbnRNYW5hZ2VyKSB7XG4gICAgXG5cbiAgICB0aGlzLmRlbGVnYXRlZEhhbmRsZXJzID0ge307XG4gICAgdGhpcy5jYXB0dXJlZEhhbmRsZXJzID0ge307XG5cbiAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgfVxuXG4gIERlZmF1bHRFdmVudFN0cmF0ZWd5LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2ssIHN0cmF0ZWd5LCBkaXNwb3NhYmxlKSB7XG4gICAgdmFyIGRlbGVnYXRlZEhhbmRsZXJzID0gdm9pZCAwO1xuICAgIHZhciBjYXB0dXJlZEhhbmRsZXJzID0gdm9pZCAwO1xuICAgIHZhciBoYW5kbGVyRW50cnkgPSB2b2lkIDA7XG5cbiAgICBpZiAoc3RyYXRlZ3kgPT09IGRlbGVnYXRpb25TdHJhdGVneS5idWJibGluZykge1xuICAgICAgZGVsZWdhdGVkSGFuZGxlcnMgPSB0aGlzLmRlbGVnYXRlZEhhbmRsZXJzO1xuICAgICAgaGFuZGxlckVudHJ5ID0gZGVsZWdhdGVkSGFuZGxlcnNbdGFyZ2V0RXZlbnRdIHx8IChkZWxlZ2F0ZWRIYW5kbGVyc1t0YXJnZXRFdmVudF0gPSBuZXcgRGVsZWdhdGVIYW5kbGVyRW50cnkodGFyZ2V0RXZlbnQsIHRoaXMuZXZlbnRNYW5hZ2VyKSk7XG4gICAgICB2YXIgZGVsZWdhdGVkQ2FsbGJhY2tzID0gdGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyB8fCAodGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyA9IHt9KTtcbiAgICAgIGlmICghZGVsZWdhdGVkQ2FsbGJhY2tzW3RhcmdldEV2ZW50XSkge1xuICAgICAgICBoYW5kbGVyRW50cnkuaW5jcmVtZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbUxvZ2dlci53YXJuKCdPdmVycmlkaW5nIHByZXZpb3VzIGNhbGxiYWNrIGZvciBldmVudCBsaXN0ZW5lcicsIHsgZXZlbnQ6IHRhcmdldEV2ZW50LCBjYWxsYmFjazogY2FsbGJhY2ssIHByZXZpb3VzQ2FsbGJhY2s6IGRlbGVnYXRlZENhbGxiYWNrc1t0YXJnZXRFdmVudF0gfSk7XG4gICAgICB9XG4gICAgICBkZWxlZ2F0ZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gY2FsbGJhY2s7XG5cbiAgICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVsZWdhdGlvbkVudHJ5SGFuZGxlcihoYW5kbGVyRW50cnksIGRlbGVnYXRlZENhbGxiYWNrcywgdGFyZ2V0RXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVyRW50cnkuZGVjcmVtZW50KCk7XG4gICAgICAgIGRlbGVnYXRlZENhbGxiYWNrc1t0YXJnZXRFdmVudF0gPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHN0cmF0ZWd5ID09PSBkZWxlZ2F0aW9uU3RyYXRlZ3kuY2FwdHVyaW5nKSB7XG4gICAgICBjYXB0dXJlZEhhbmRsZXJzID0gdGhpcy5jYXB0dXJlZEhhbmRsZXJzO1xuICAgICAgaGFuZGxlckVudHJ5ID0gY2FwdHVyZWRIYW5kbGVyc1t0YXJnZXRFdmVudF0gfHwgKGNhcHR1cmVkSGFuZGxlcnNbdGFyZ2V0RXZlbnRdID0gbmV3IENhcHR1cmVkSGFuZGxlckVudHJ5KHRhcmdldEV2ZW50KSk7XG4gICAgICB2YXIgY2FwdHVyZWRDYWxsYmFja3MgPSB0YXJnZXQuY2FwdHVyZWRDYWxsYmFja3MgfHwgKHRhcmdldC5jYXB0dXJlZENhbGxiYWNrcyA9IHt9KTtcbiAgICAgIGlmICghY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdKSB7XG4gICAgICAgIGhhbmRsZXJFbnRyeS5pbmNyZW1lbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtTG9nZ2VyLmVycm9yKCdhbHJlYWR5IGhhdmUgYSBjYWxsYmFjayBmb3IgZXZlbnQnLCB7IGV2ZW50OiB0YXJnZXRFdmVudCwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xuICAgICAgfVxuICAgICAgY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gY2FsbGJhY2s7XG5cbiAgICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVsZWdhdGlvbkVudHJ5SGFuZGxlcihoYW5kbGVyRW50cnksIGNhcHR1cmVkQ2FsbGJhY2tzLCB0YXJnZXRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhbmRsZXJFbnRyeS5kZWNyZW1lbnQoKTtcbiAgICAgICAgY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodGFyZ2V0RXZlbnQsIGNhbGxiYWNrKTtcblxuICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gbmV3IEV2ZW50SGFuZGxlcih0YXJnZXQsIHRhcmdldEV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRhcmdldEV2ZW50LCBjYWxsYmFjayk7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gRGVmYXVsdEV2ZW50U3RyYXRlZ3k7XG59KCk7XG5cbmV4cG9ydCB2YXIgZGVsZWdhdGlvblN0cmF0ZWd5ID0ge1xuICBub25lOiAwLFxuICBjYXB0dXJpbmc6IDEsXG4gIGJ1YmJsaW5nOiAyXG59O1xuXG5leHBvcnQgdmFyIEV2ZW50TWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRNYW5hZ2VyKCkge1xuICAgIHZhciBlc2NhcGVTaGFkb3dSb290ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIFxuXG4gICAgdGhpcy5lbGVtZW50SGFuZGxlckxvb2t1cCA9IHt9O1xuICAgIHRoaXMuZXZlbnRTdHJhdGVneUxvb2t1cCA9IHt9O1xuICAgIHRoaXMuZXNjYXBlU2hhZG93Um9vdCA9IGVzY2FwZVNoYWRvd1Jvb3Q7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRWxlbWVudENvbmZpZyh7XG4gICAgICB0YWdOYW1lOiAnaW5wdXQnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB2YWx1ZTogWydjaGFuZ2UnLCAnaW5wdXQnXSxcbiAgICAgICAgY2hlY2tlZDogWydjaGFuZ2UnLCAnaW5wdXQnXSxcbiAgICAgICAgZmlsZXM6IFsnY2hhbmdlJywgJ2lucHV0J11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJFbGVtZW50Q29uZmlnKHtcbiAgICAgIHRhZ05hbWU6ICd0ZXh0YXJlYScsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHZhbHVlOiBbJ2NoYW5nZScsICdpbnB1dCddXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRWxlbWVudENvbmZpZyh7XG4gICAgICB0YWdOYW1lOiAnc2VsZWN0JyxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdmFsdWU6IFsnY2hhbmdlJ11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJFbGVtZW50Q29uZmlnKHtcbiAgICAgIHRhZ05hbWU6ICdjb250ZW50IGVkaXRhYmxlJyxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdmFsdWU6IFsnY2hhbmdlJywgJ2lucHV0JywgJ2JsdXInLCAna2V5dXAnLCAncGFzdGUnXVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgdGFnTmFtZTogJ3Njcm9sbGFibGUgZWxlbWVudCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHNjcm9sbFRvcDogWydzY3JvbGwnXSxcbiAgICAgICAgc2Nyb2xsTGVmdDogWydzY3JvbGwnXVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5kZWZhdWx0RXZlbnRTdHJhdGVneSA9IG5ldyBEZWZhdWx0RXZlbnRTdHJhdGVneSh0aGlzKTtcbiAgfVxuXG4gIEV2ZW50TWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXJFbGVtZW50Q29uZmlnID0gZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50Q29uZmlnKGNvbmZpZykge1xuICAgIHZhciB0YWdOYW1lID0gY29uZmlnLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgcHJvcGVydGllcyA9IGNvbmZpZy5wcm9wZXJ0aWVzO1xuICAgIHZhciBwcm9wZXJ0eU5hbWUgPSB2b2lkIDA7XG5cbiAgICB2YXIgbG9va3VwID0gdGhpcy5lbGVtZW50SGFuZGxlckxvb2t1cFt0YWdOYW1lXSA9IHt9O1xuXG4gICAgZm9yIChwcm9wZXJ0eU5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuICAgICAgICBsb29rdXBbcHJvcGVydHlOYW1lXSA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlckV2ZW50U3RyYXRlZ3kgPSBmdW5jdGlvbiByZWdpc3RlckV2ZW50U3RyYXRlZ3koZXZlbnROYW1lLCBzdHJhdGVneSkge1xuICAgIHRoaXMuZXZlbnRTdHJhdGVneUxvb2t1cFtldmVudE5hbWVdID0gc3RyYXRlZ3k7XG4gIH07XG5cbiAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5nZXRFbGVtZW50SGFuZGxlciA9IGZ1bmN0aW9uIGdldEVsZW1lbnRIYW5kbGVyKHRhcmdldCwgcHJvcGVydHlOYW1lKSB7XG4gICAgdmFyIHRhZ05hbWUgPSB2b2lkIDA7XG4gICAgdmFyIGxvb2t1cCA9IHRoaXMuZWxlbWVudEhhbmRsZXJMb29rdXA7XG5cbiAgICBpZiAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgIHRhZ05hbWUgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAobG9va3VwW3RhZ05hbWVdICYmIGxvb2t1cFt0YWdOYW1lXVtwcm9wZXJ0eU5hbWVdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRTdWJzY3JpYmVyKGxvb2t1cFt0YWdOYW1lXVtwcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3RleHRDb250ZW50JyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRTdWJzY3JpYmVyKGxvb2t1cFsnY29udGVudCBlZGl0YWJsZSddLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3Njcm9sbFRvcCcgfHwgcHJvcGVydHlOYW1lID09PSAnc2Nyb2xsTGVmdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFdmVudFN1YnNjcmliZXIobG9va3VwWydzY3JvbGxhYmxlIGVsZW1lbnQnXVtwcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBFdmVudE1hbmFnZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHRhcmdldCwgdGFyZ2V0RXZlbnQsIGNhbGxiYWNrT3JMaXN0ZW5lciwgZGVsZWdhdGUsIGRpc3Bvc2FibGUpIHtcbiAgICByZXR1cm4gKHRoaXMuZXZlbnRTdHJhdGVneUxvb2t1cFt0YXJnZXRFdmVudF0gfHwgdGhpcy5kZWZhdWx0RXZlbnRTdHJhdGVneSkuc3Vic2NyaWJlKHRhcmdldCwgdGFyZ2V0RXZlbnQsIGNhbGxiYWNrT3JMaXN0ZW5lciwgZGVsZWdhdGUsIGRpc3Bvc2FibGUpO1xuICB9O1xuXG4gIHJldHVybiBFdmVudE1hbmFnZXI7XG59KCk7XG5cbmV4cG9ydCB2YXIgRXZlbnRTdWJzY3JpYmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFdmVudFN1YnNjcmliZXIoZXZlbnRzKSB7XG4gICAgXG5cbiAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuaGFuZGxlciA9IG51bGw7XG4gIH1cblxuICBFdmVudFN1YnNjcmliZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShlbGVtZW50LCBjYWxsYmFja09yTGlzdGVuZXIpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaGFuZGxlciA9IGNhbGxiYWNrT3JMaXN0ZW5lcjtcblxuICAgIHZhciBldmVudHMgPSB0aGlzLmV2ZW50cztcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBldmVudHMubGVuZ3RoOyBpaSA+IGk7ICsraSkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgY2FsbGJhY2tPckxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgRXZlbnRTdWJzY3JpYmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgIHZhciBjYWxsYmFja09yTGlzdGVuZXIgPSB0aGlzLmhhbmRsZXI7XG4gICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGV2ZW50cy5sZW5ndGg7IGlpID4gaTsgKytpKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBjYWxsYmFja09yTGlzdGVuZXIpO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmhhbmRsZXIgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiBFdmVudFN1YnNjcmliZXI7XG59KCk7XG5cbmV4cG9ydCB2YXIgRGlydHlDaGVja2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXJ0eUNoZWNrZXIoKSB7XG4gICAgXG5cbiAgICB0aGlzLnRyYWNrZWQgPSBbXTtcbiAgICB0aGlzLmNoZWNrRGVsYXkgPSAxMjA7XG4gIH1cblxuICBEaXJ0eUNoZWNrZXIucHJvdG90eXBlLmFkZFByb3BlcnR5ID0gZnVuY3Rpb24gYWRkUHJvcGVydHkocHJvcGVydHkpIHtcbiAgICB2YXIgdHJhY2tlZCA9IHRoaXMudHJhY2tlZDtcblxuICAgIHRyYWNrZWQucHVzaChwcm9wZXJ0eSk7XG5cbiAgICBpZiAodHJhY2tlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuc2NoZWR1bGVEaXJ0eUNoZWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIERpcnR5Q2hlY2tlci5wcm90b3R5cGUucmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIHZhciB0cmFja2VkID0gdGhpcy50cmFja2VkO1xuICAgIHRyYWNrZWQuc3BsaWNlKHRyYWNrZWQuaW5kZXhPZihwcm9wZXJ0eSksIDEpO1xuICB9O1xuXG4gIERpcnR5Q2hlY2tlci5wcm90b3R5cGUuc2NoZWR1bGVEaXJ0eUNoZWNrID0gZnVuY3Rpb24gc2NoZWR1bGVEaXJ0eUNoZWNrKCkge1xuICAgIHZhciBfdGhpczIyID0gdGhpcztcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzMjIuY2hlY2soKTtcbiAgICB9LCB0aGlzLmNoZWNrRGVsYXkpO1xuICB9O1xuXG4gIERpcnR5Q2hlY2tlci5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICB2YXIgdHJhY2tlZCA9IHRoaXMudHJhY2tlZDtcbiAgICB2YXIgaSA9IHRyYWNrZWQubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0cmFja2VkW2ldO1xuXG4gICAgICBpZiAoY3VycmVudC5pc0RpcnR5KCkpIHtcbiAgICAgICAgY3VycmVudC5jYWxsKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrZWQubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlRGlydHlDaGVjaygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRGlydHlDaGVja2VyO1xufSgpO1xuXG5leHBvcnQgdmFyIERpcnR5Q2hlY2tQcm9wZXJ0eSA9IChfZGVjNSA9IHN1YnNjcmliZXJDb2xsZWN0aW9uKCksIF9kZWM1KF9jbGFzczUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpcnR5Q2hlY2tQcm9wZXJ0eShkaXJ0eUNoZWNrZXIsIG9iaiwgcHJvcGVydHlOYW1lKSB7XG4gICAgXG5cbiAgICB0aGlzLmRpcnR5Q2hlY2tlciA9IGRpcnR5Q2hlY2tlcjtcbiAgICB0aGlzLm9iaiA9IG9iajtcbiAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgfVxuXG4gIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmpbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICB9O1xuXG4gIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICB9O1xuXG4gIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoKSB7XG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuXG4gICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICB9O1xuXG4gIERpcnR5Q2hlY2tQcm9wZXJ0eS5wcm90b3R5cGUuaXNEaXJ0eSA9IGZ1bmN0aW9uIGlzRGlydHkoKSB7XG4gICAgcmV0dXJuIHRoaXMub2xkVmFsdWUgIT09IHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgfTtcblxuICBEaXJ0eUNoZWNrUHJvcGVydHkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgdGhpcy5kaXJ0eUNoZWNrZXIuYWRkUHJvcGVydHkodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH07XG5cbiAgRGlydHlDaGVja1Byb3BlcnR5LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZlU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSkgJiYgIXRoaXMuaGFzU3Vic2NyaWJlcnMoKSkge1xuICAgICAgdGhpcy5kaXJ0eUNoZWNrZXIucmVtb3ZlUHJvcGVydHkodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBEaXJ0eUNoZWNrUHJvcGVydHk7XG59KCkpIHx8IF9jbGFzczUpO1xuXG52YXIgbG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoJ3Byb3BlcnR5LW9ic2VydmF0aW9uJyk7XG5cbmV4cG9ydCB2YXIgcHJvcGVydHlBY2Nlc3NvciA9IHtcbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKG9iaiwgcHJvcGVydHlOYW1lKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wZXJ0eU5hbWVdO1xuICB9LFxuICBzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUodmFsdWUsIG9iaiwgcHJvcGVydHlOYW1lKSB7XG4gICAgb2JqW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBQcmltaXRpdmVPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJpbWl0aXZlT2JzZXJ2ZXIocHJpbWl0aXZlLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBcblxuICAgIHRoaXMuZG9Ob3RDYWNoZSA9IHRydWU7XG5cbiAgICB0aGlzLnByaW1pdGl2ZSA9IHByaW1pdGl2ZTtcbiAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgfVxuXG4gIFByaW1pdGl2ZU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnByaW1pdGl2ZVt0aGlzLnByb3BlcnR5TmFtZV07XG4gIH07XG5cbiAgUHJpbWl0aXZlT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUoKSB7XG4gICAgdmFyIHR5cGUgPSBfdHlwZW9mKHRoaXMucHJpbWl0aXZlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSAnICsgdGhpcy5wcm9wZXJ0eU5hbWUgKyAnIHByb3BlcnR5IG9mIGEgJyArIHR5cGUgKyAnICgnICsgdGhpcy5wcmltaXRpdmUgKyAnKSBjYW5ub3QgYmUgYXNzaWduZWQuJyk7XG4gIH07XG5cbiAgUHJpbWl0aXZlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHt9O1xuXG4gIFByaW1pdGl2ZU9ic2VydmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge307XG5cbiAgcmV0dXJuIFByaW1pdGl2ZU9ic2VydmVyO1xufSgpO1xuXG5leHBvcnQgdmFyIFNldHRlck9ic2VydmVyID0gKF9kZWM2ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzYoX2NsYXNzNyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2V0dGVyT2JzZXJ2ZXIodGFza1F1ZXVlLCBvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIFxuXG4gICAgdGhpcy50YXNrUXVldWUgPSB0YXNrUXVldWU7XG4gICAgdGhpcy5vYmogPSBvYmo7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgdGhpcy5xdWV1ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9ic2VydmluZyA9IGZhbHNlO1xuICB9XG5cbiAgU2V0dGVyT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgfTtcblxuICBTZXR0ZXJPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICB9O1xuXG4gIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5nZXR0ZXJWYWx1ZSA9IGZ1bmN0aW9uIGdldHRlclZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRWYWx1ZTtcbiAgfTtcblxuICBTZXR0ZXJPYnNlcnZlci5wcm90b3R5cGUuc2V0dGVyVmFsdWUgPSBmdW5jdGlvbiBzZXR0ZXJWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMuY3VycmVudFZhbHVlO1xuXG4gICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLnF1ZXVlZCkge1xuICAgICAgICB0aGlzLm9sZFZhbHVlID0gb2xkVmFsdWU7XG4gICAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50YXNrUXVldWUucXVldWVNaWNyb1Rhc2sodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbCgpIHtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMub2xkVmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgIHRoaXMucXVldWVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICB9O1xuXG4gIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAoIXRoaXMub2JzZXJ2aW5nKSB7XG4gICAgICB0aGlzLmNvbnZlcnRQcm9wZXJ0eSgpO1xuICAgIH1cbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9O1xuXG4gIFNldHRlck9ic2VydmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgdGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKTtcbiAgfTtcblxuICBTZXR0ZXJPYnNlcnZlci5wcm90b3R5cGUuY29udmVydFByb3BlcnR5ID0gZnVuY3Rpb24gY29udmVydFByb3BlcnR5KCkge1xuICAgIHRoaXMub2JzZXJ2aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXTtcbiAgICB0aGlzLnNldFZhbHVlID0gdGhpcy5zZXR0ZXJWYWx1ZTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5nZXR0ZXJWYWx1ZTtcblxuICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9iaiwgdGhpcy5wcm9wZXJ0eU5hbWUsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRoaXMucHJvcGVydHlOYW1lIGluIHRoaXMub2JqID8gdGhpcy5vYmoucHJvcGVydHlJc0VudW1lcmFibGUodGhpcy5wcm9wZXJ0eU5hbWUpIDogdHJ1ZSxcbiAgICAgIGdldDogdGhpcy5nZXRWYWx1ZS5iaW5kKHRoaXMpLFxuICAgICAgc2V0OiB0aGlzLnNldFZhbHVlLmJpbmQodGhpcylcbiAgICB9KSkge1xuICAgICAgbG9nZ2VyLndhcm4oJ0Nhbm5vdCBvYnNlcnZlIHByb3BlcnR5IFxcJycgKyB0aGlzLnByb3BlcnR5TmFtZSArICdcXCcgb2Ygb2JqZWN0JywgdGhpcy5vYmopO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2V0dGVyT2JzZXJ2ZXI7XG59KCkpIHx8IF9jbGFzczcpO1xuXG5leHBvcnQgdmFyIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIoZWxlbWVudCwgcHJvcGVydHlOYW1lLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgXG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gIH1cblxuICBYTGlua0F0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICB9O1xuXG4gIFhMaW5rQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgdGhpcy5hdHRyaWJ1dGVOYW1lLCBuZXdWYWx1ZSk7XG4gIH07XG5cbiAgWExpbmtBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignT2JzZXJ2YXRpb24gb2YgYSBcIicgKyB0aGlzLmVsZW1lbnQubm9kZU5hbWUgKyAnXCIgZWxlbWVudFxcJ3MgXCInICsgdGhpcy5wcm9wZXJ0eU5hbWUgKyAnXCIgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfTtcblxuICByZXR1cm4gWExpbmtBdHRyaWJ1dGVPYnNlcnZlcjtcbn0oKTtcblxuZXhwb3J0IHZhciBkYXRhQXR0cmlidXRlQWNjZXNzb3IgPSB7XG4gIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZShvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIHJldHVybiBvYmouZ2V0QXR0cmlidXRlKHByb3BlcnR5TmFtZSk7XG4gIH0sXG4gIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSwgb2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmouc2V0QXR0cmlidXRlKHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHZhciBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERhdGFBdHRyaWJ1dGVPYnNlcnZlcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gIH1cblxuICBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5wcm9wZXJ0eU5hbWUpO1xuICB9O1xuXG4gIERhdGFBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLnByb3BlcnR5TmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMucHJvcGVydHlOYW1lLCBuZXdWYWx1ZSk7XG4gIH07XG5cbiAgRGF0YUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPYnNlcnZhdGlvbiBvZiBhIFwiJyArIHRoaXMuZWxlbWVudC5ub2RlTmFtZSArICdcIiBlbGVtZW50XFwncyBcIicgKyB0aGlzLnByb3BlcnR5TmFtZSArICdcIiBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9O1xuXG4gIHJldHVybiBEYXRhQXR0cmlidXRlT2JzZXJ2ZXI7XG59KCk7XG5cbmV4cG9ydCB2YXIgU3R5bGVPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVPYnNlcnZlcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cbiAgICB0aGlzLnN0eWxlcyA9IG51bGw7XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgfVxuXG4gIFN0eWxlT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICB9O1xuXG4gIFN0eWxlT2JzZXJ2ZXIucHJvdG90eXBlLl9zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9zZXRQcm9wZXJ0eShzdHlsZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJpb3JpdHkgPSAnJztcblxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZS5pbmRleE9mID09PSAnZnVuY3Rpb24nICYmIHZhbHVlLmluZGV4T2YoJyFpbXBvcnRhbnQnKSAhPT0gLTEpIHtcbiAgICAgIHByaW9yaXR5ID0gJ2ltcG9ydGFudCc7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJyFpbXBvcnRhbnQnLCAnJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzdHlsZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcblxuICBTdHlsZU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IHt9O1xuICAgIHZhciBzdHlsZSA9IHZvaWQgMDtcbiAgICB2YXIgdmVyc2lvbiA9IHRoaXMudmVyc2lvbjtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdm9pZCAwO1xuICAgICAgICBmb3IgKHN0eWxlIGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlLmhhc093blByb3BlcnR5KHN0eWxlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVtzdHlsZV07XG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuICctJyArIG0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3R5bGVzW3N0eWxlXSA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShzdHlsZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJ4ID0gL1xccyooW1xcd1xcLV0rKVxccyo6XFxzKigoPzooPzpbXFx3XFwtXStcXChcXHMqKD86XCIoPzpcXFxcXCJ8W15cIl0pKlwifCcoPzpcXFxcJ3xbXiddKSonfFtcXHdcXC1dK1xcKFxccyooPzpeXCIoPzpcXFxcXCJ8W15cIl0pKlwifCcoPzpcXFxcJ3xbXiddKSonfFteXFwpXSopXFwpLD98W15cXCldKilcXCksP3xcIig/OlxcXFxcInxbXlwiXSkqXCJ8Jyg/OlxcXFwnfFteJ10pKid8W147XSopLD9cXHMqKSspOz8vZztcbiAgICAgICAgdmFyIHBhaXIgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICgocGFpciA9IHJ4LmV4ZWMobmV3VmFsdWUpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0eWxlID0gcGFpclsxXTtcbiAgICAgICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdHlsZXNbc3R5bGVdID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShzdHlsZSwgcGFpclsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcbiAgICB0aGlzLnZlcnNpb24gKz0gMTtcblxuICAgIGlmICh2ZXJzaW9uID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmVyc2lvbiAtPSAxO1xuICAgIGZvciAoc3R5bGUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZSkgfHwgc3R5bGVzW3N0eWxlXSAhPT0gdmVyc2lvbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHN0eWxlKTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignT2JzZXJ2YXRpb24gb2YgYSBcIicgKyB0aGlzLmVsZW1lbnQubm9kZU5hbWUgKyAnXCIgZWxlbWVudFxcJ3MgXCInICsgdGhpcy5wcm9wZXJ0eU5hbWUgKyAnXCIgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVPYnNlcnZlcjtcbn0oKTtcblxuZXhwb3J0IHZhciBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyID0gKF9kZWM3ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzcoX2NsYXNzOCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmFsdWVBdHRyaWJ1dGVPYnNlcnZlcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUsIGhhbmRsZXIpIHtcbiAgICBcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICBpZiAocHJvcGVydHlOYW1lID09PSAnZmlsZXMnKSB7XG4gICAgICB0aGlzLnNldFZhbHVlID0gZnVuY3Rpb24gKCkge307XG4gICAgfVxuICB9XG5cbiAgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50W3RoaXMucHJvcGVydHlOYW1lXTtcbiAgfTtcblxuICBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IG5ld1ZhbHVlID09PSBudWxsID8gJycgOiBuZXdWYWx1ZTtcbiAgICBpZiAodGhpcy5lbGVtZW50W3RoaXMucHJvcGVydHlOYW1lXSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHRoaXMuZWxlbWVudFt0aGlzLnByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMubm90aWZ5KCk7XG4gICAgfVxuICB9O1xuXG4gIFZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuICAgIHRoaXMuY2FsbFN1YnNjcmliZXJzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG5cbiAgICB0aGlzLm9sZFZhbHVlID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiBoYW5kbGVFdmVudCgpIHtcbiAgICB0aGlzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH07XG5cbiAgVmFsdWVBdHRyaWJ1dGVPYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICh0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpICYmICF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlci5kaXNwb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyO1xufSgpKSB8fCBfY2xhc3M4KTtcblxudmFyIGNoZWNrZWRBcnJheUNvbnRleHQgPSAnQ2hlY2tlZE9ic2VydmVyOmFycmF5JztcbnZhciBjaGVja2VkVmFsdWVDb250ZXh0ID0gJ0NoZWNrZWRPYnNlcnZlcjp2YWx1ZSc7XG5cbmV4cG9ydCB2YXIgQ2hlY2tlZE9ic2VydmVyID0gKF9kZWM4ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzgoX2NsYXNzOSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2hlY2tlZE9ic2VydmVyKGVsZW1lbnQsIGhhbmRsZXIsIG9ic2VydmVyTG9jYXRvcikge1xuICAgIFxuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICB9XG5cbiAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9O1xuXG4gIENoZWNrZWRPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmICh0aGlzLmluaXRpYWxTeW5jICYmIHRoaXMudmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXJyYXlPYnNlcnZlcikge1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyLnVuc3Vic2NyaWJlKGNoZWNrZWRBcnJheUNvbnRleHQsIHRoaXMpO1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCcgJiYgQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgIHRoaXMuYXJyYXlPYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldEFycmF5T2JzZXJ2ZXIobmV3VmFsdWUpO1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyLnN1YnNjcmliZShjaGVja2VkQXJyYXlDb250ZXh0LCB0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgdGhpcy5zeW5jaHJvbml6ZUVsZW1lbnQoKTtcbiAgICB0aGlzLm5vdGlmeSgpO1xuXG4gICAgaWYgKCF0aGlzLmluaXRpYWxTeW5jKSB7XG4gICAgICB0aGlzLmluaXRpYWxTeW5jID0gdHJ1ZTtcbiAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbChjb250ZXh0LCBzcGxpY2VzKSB7XG4gICAgdGhpcy5zeW5jaHJvbml6ZUVsZW1lbnQoKTtcblxuICAgIGlmICghdGhpcy52YWx1ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnZhbHVlT2JzZXJ2ZXIgPSB0aGlzLmVsZW1lbnQuX19vYnNlcnZlcnNfXy5tb2RlbCB8fCB0aGlzLmVsZW1lbnQuX19vYnNlcnZlcnNfXy52YWx1ZTtcbiAgICAgIGlmICh0aGlzLnZhbHVlT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZU9ic2VydmVyLnN1YnNjcmliZShjaGVja2VkVmFsdWVDb250ZXh0LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5zeW5jaHJvbml6ZUVsZW1lbnQgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZUVsZW1lbnQoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICB2YXIgZWxlbWVudFZhbHVlID0gZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IGVsZW1lbnQubW9kZWwgOiBlbGVtZW50LnZhbHVlO1xuICAgIHZhciBpc1JhZGlvID0gZWxlbWVudC50eXBlID09PSAncmFkaW8nO1xuICAgIHZhciBtYXRjaGVyID0gZWxlbWVudC5tYXRjaGVyIHx8IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICB9O1xuXG4gICAgZWxlbWVudC5jaGVja2VkID0gaXNSYWRpbyAmJiAhIW1hdGNoZXIodmFsdWUsIGVsZW1lbnRWYWx1ZSkgfHwgIWlzUmFkaW8gJiYgdmFsdWUgPT09IHRydWUgfHwgIWlzUmFkaW8gJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gISFtYXRjaGVyKGl0ZW0sIGVsZW1lbnRWYWx1ZSk7XG4gICAgfSkgIT09IC0xO1xuICB9O1xuXG4gIENoZWNrZWRPYnNlcnZlci5wcm90b3R5cGUuc3luY2hyb25pemVWYWx1ZSA9IGZ1bmN0aW9uIHN5bmNocm9uaXplVmFsdWUoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICB2YXIgZWxlbWVudFZhbHVlID0gZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IGVsZW1lbnQubW9kZWwgOiBlbGVtZW50LnZhbHVlO1xuICAgIHZhciBpbmRleCA9IHZvaWQgMDtcbiAgICB2YXIgbWF0Y2hlciA9IGVsZW1lbnQubWF0Y2hlciB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgfTtcblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpbmRleCA9IHZhbHVlLmZpbmRJbmRleChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiAhIW1hdGNoZXIoaXRlbSwgZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChlbGVtZW50LmNoZWNrZWQgJiYgaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgdmFsdWUucHVzaChlbGVtZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LmNoZWNrZWQgJiYgaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBlbGVtZW50LmNoZWNrZWQ7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgIHZhbHVlID0gZWxlbWVudFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubm90aWZ5KCk7XG4gIH07XG5cbiAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2FsbFN1YnNjcmliZXJzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gIH07XG5cbiAgQ2hlY2tlZE9ic2VydmVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KCkge1xuICAgIHRoaXMuc3luY2hyb25pemVWYWx1ZSgpO1xuICB9O1xuXG4gIENoZWNrZWRPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgaWYgKCF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlci5zdWJzY3JpYmUodGhpcy5lbGVtZW50LCB0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hZGRTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKTtcbiAgfTtcblxuICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSAmJiAhdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLmhhbmRsZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBDaGVja2VkT2JzZXJ2ZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy5hcnJheU9ic2VydmVyKSB7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIudW5zdWJzY3JpYmUoY2hlY2tlZEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnZhbHVlT2JzZXJ2ZXIudW5zdWJzY3JpYmUoY2hlY2tlZFZhbHVlQ29udGV4dCwgdGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBDaGVja2VkT2JzZXJ2ZXI7XG59KCkpIHx8IF9jbGFzczkpO1xuXG52YXIgc2VsZWN0QXJyYXlDb250ZXh0ID0gJ1NlbGVjdFZhbHVlT2JzZXJ2ZXI6YXJyYXknO1xuXG5leHBvcnQgdmFyIFNlbGVjdFZhbHVlT2JzZXJ2ZXIgPSAoX2RlYzkgPSBzdWJzY3JpYmVyQ29sbGVjdGlvbigpLCBfZGVjOShfY2xhc3MxMCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VsZWN0VmFsdWVPYnNlcnZlcihlbGVtZW50LCBoYW5kbGVyLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgICBcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG9ic2VydmVyTG9jYXRvcjtcbiAgfVxuXG4gIFNlbGVjdFZhbHVlT2JzZXJ2ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH07XG5cbiAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZWxlbWVudC5tdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBudWxsIG9yIEFycmF5IGluc3RhbmNlcyBjYW4gYmUgYm91bmQgdG8gYSBtdWx0aS1zZWxlY3QuJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFycmF5T2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYXJyYXlPYnNlcnZlci51bnN1YnNjcmliZShzZWxlY3RBcnJheUNvbnRleHQsIHRoaXMpO1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgIHRoaXMuYXJyYXlPYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldEFycmF5T2JzZXJ2ZXIobmV3VmFsdWUpO1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyLnN1YnNjcmliZShzZWxlY3RBcnJheUNvbnRleHQsIHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB0aGlzLnN5bmNocm9uaXplT3B0aW9ucygpO1xuICAgIHRoaXMubm90aWZ5KCk7XG5cbiAgICBpZiAoIXRoaXMuaW5pdGlhbFN5bmMpIHtcbiAgICAgIHRoaXMuaW5pdGlhbFN5bmMgPSB0cnVlO1xuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gY2FsbChjb250ZXh0LCBzcGxpY2VzKSB7XG4gICAgdGhpcy5zeW5jaHJvbml6ZU9wdGlvbnMoKTtcbiAgfTtcblxuICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5zeW5jaHJvbml6ZU9wdGlvbnMgPSBmdW5jdGlvbiBzeW5jaHJvbml6ZU9wdGlvbnMoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB2YXIgaXNBcnJheSA9IHZvaWQgMDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaXNBcnJheSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLmVsZW1lbnQub3B0aW9ucztcbiAgICB2YXIgaSA9IG9wdGlvbnMubGVuZ3RoO1xuICAgIHZhciBtYXRjaGVyID0gdGhpcy5lbGVtZW50Lm1hdGNoZXIgfHwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhID09PSBiO1xuICAgIH07XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLml0ZW0oaSk7XG4gICAgICB2YXIgb3B0aW9uVmFsdWUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ21vZGVsJykgPyBvcHRpb24ubW9kZWwgOiBvcHRpb24udmFsdWU7XG4gICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gISFtYXRjaGVyKG9wdGlvblZhbHVlLCBpdGVtKTtcbiAgICAgICAgfSkgIT09IC0xO1xuICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJztcbiAgICAgIH1cbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9ICEhbWF0Y2hlcihvcHRpb25WYWx1ZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgIGlmIChfcmV0ID09PSAnY29udGludWUnKSBjb250aW51ZTtcbiAgICB9XG4gIH07XG5cbiAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUuc3luY2hyb25pemVWYWx1ZSA9IGZ1bmN0aW9uIHN5bmNocm9uaXplVmFsdWUoKSB7XG4gICAgdmFyIF90aGlzMjMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLmVsZW1lbnQub3B0aW9ucztcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgX29wdGlvbiA9IG9wdGlvbnMuaXRlbShpKTtcbiAgICAgIGlmICghX29wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlLnB1c2goX29wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IF9vcHRpb24ubW9kZWwgOiBfb3B0aW9uLnZhbHVlKTtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgdmFyIF9yZXQyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBtYXRjaGVyID0gX3RoaXMyMy5lbGVtZW50Lm1hdGNoZXIgfHwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgaSA9IDA7XG5cbiAgICAgICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBfdGhpczIzLnZhbHVlW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlLmZpbmRJbmRleChmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhLCBiKTtcbiAgICAgICAgICAgIH0pID09PSAtMSkge1xuICAgICAgICAgICAgICBfdGhpczIzLnZhbHVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgd2hpbGUgKGkgPCBfdGhpczIzLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgX2xvb3AyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgICB2YXIgX2xvb3AzID0gZnVuY3Rpb24gX2xvb3AzKCkge1xuICAgICAgICAgICAgdmFyIGEgPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgIGlmIChfdGhpczIzLnZhbHVlLmZpbmRJbmRleChmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhLCBiKTtcbiAgICAgICAgICAgIH0pID09PSAtMSkge1xuICAgICAgICAgICAgICBfdGhpczIzLnZhbHVlLnB1c2goYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHdoaWxlIChpIDwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBfbG9vcDMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHY6IHZvaWQgMFxuICAgICAgICAgIH07XG4gICAgICAgIH0oKTtcblxuICAgICAgICBpZiAoKHR5cGVvZiBfcmV0MiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3JldDIpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQyLnY7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLm5vdGlmeSgpO1xuICAgIH1cbiAgfTtcblxuICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgdmFyIG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICB2YXIgbmV3VmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgdGhpcy5jYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgfTtcblxuICBTZWxlY3RWYWx1ZU9ic2VydmVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KCkge1xuICAgIHRoaXMuc3luY2hyb25pemVWYWx1ZSgpO1xuICB9O1xuXG4gIFNlbGVjdFZhbHVlT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLmhhbmRsZXIuc3Vic2NyaWJlKHRoaXMuZWxlbWVudCwgdGhpcyk7XG4gICAgfVxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH07XG5cbiAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICh0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpICYmICF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlci5kaXNwb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIFNlbGVjdFZhbHVlT2JzZXJ2ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKCkge1xuICAgIHZhciBfdGhpczI0ID0gdGhpcztcblxuICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBET00uY3JlYXRlTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczI0LnN5bmNocm9uaXplT3B0aW9ucygpO1xuICAgICAgX3RoaXMyNC5zeW5jaHJvbml6ZVZhbHVlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5kb21PYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gIH07XG5cbiAgU2VsZWN0VmFsdWVPYnNlcnZlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgIHRoaXMuZG9tT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuYXJyYXlPYnNlcnZlcikge1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyLnVuc3Vic2NyaWJlKHNlbGVjdEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU2VsZWN0VmFsdWVPYnNlcnZlcjtcbn0oKSkgfHwgX2NsYXNzMTApO1xuXG5leHBvcnQgdmFyIENsYXNzT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENsYXNzT2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgIFxuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmRvTm90Q2FjaGUgPSB0cnVlO1xuICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB0aGlzLnZlcnNpb24gPSAwO1xuICB9XG5cbiAgQ2xhc3NPYnNlcnZlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfTtcblxuICBDbGFzc09ic2VydmVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgdmFyIG5hbWVJbmRleCA9IHRoaXMubmFtZUluZGV4IHx8IHt9O1xuICAgIHZhciB2ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xuICAgIHZhciBuYW1lcyA9IHZvaWQgMDtcbiAgICB2YXIgbmFtZSA9IHZvaWQgMDtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgbmFtZXMgPSBuZXdWYWx1ZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG5hbWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZUluZGV4W25hbWVdID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMubmFtZUluZGV4ID0gbmFtZUluZGV4O1xuICAgIHRoaXMudmVyc2lvbiArPSAxO1xuXG4gICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2ZXJzaW9uIC09IDE7XG4gICAgZm9yIChuYW1lIGluIG5hbWVJbmRleCkge1xuICAgICAgaWYgKCFuYW1lSW5kZXguaGFzT3duUHJvcGVydHkobmFtZSkgfHwgbmFtZUluZGV4W25hbWVdICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIENsYXNzT2JzZXJ2ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09ic2VydmF0aW9uIG9mIGEgXCInICsgdGhpcy5lbGVtZW50Lm5vZGVOYW1lICsgJ1wiIGVsZW1lbnRcXCdzIFwiY2xhc3NcIiBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9O1xuXG4gIHJldHVybiBDbGFzc09ic2VydmVyO1xufSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMoZGVzY3JpcHRvcikge1xuICByZXR1cm4gISEoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmdldCAmJiBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyZVByb3BlcnR5RGVwZW5kZW5jaWVzKGN0b3IsIHByb3BlcnR5TmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdG9yLnByb3RvdHlwZSwgcHJvcGVydHlOYW1lKTtcbiAgZGVzY3JpcHRvci5nZXQuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWRGcm9tKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlc3RbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgZGVzY3JpcHRvci5nZXQuZGVwZW5kZW5jaWVzID0gcmVzdDtcbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBDb21wdXRlZEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoX0V4cHJlc3Npb24xOSkge1xuICBfaW5oZXJpdHMoQ29tcHV0ZWRFeHByZXNzaW9uLCBfRXhwcmVzc2lvbjE5KTtcblxuICBmdW5jdGlvbiBDb21wdXRlZEV4cHJlc3Npb24obmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gICAgXG5cbiAgICB2YXIgX3RoaXMyNSA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FeHByZXNzaW9uMTkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczI1Lm5hbWUgPSBuYW1lO1xuICAgIF90aGlzMjUuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIF90aGlzMjUuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gX3RoaXMyNTtcbiAgfVxuXG4gIENvbXB1dGVkRXhwcmVzc2lvbi5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHNjb3BlLmJpbmRpbmdDb250ZXh0W3RoaXMubmFtZV07XG4gIH07XG5cbiAgQ29tcHV0ZWRFeHByZXNzaW9uLnByb3RvdHlwZS5hc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24oc2NvcGUsIHZhbHVlKSB7XG4gICAgc2NvcGUuYmluZGluZ0NvbnRleHRbdGhpcy5uYW1lXSA9IHZhbHVlO1xuICB9O1xuXG4gIENvbXB1dGVkRXhwcmVzc2lvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gYWNjZXB0KHZpc2l0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICB9O1xuXG4gIENvbXB1dGVkRXhwcmVzc2lvbi5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gdGhpcy5kZXBlbmRlbmNpZXM7XG4gICAgdmFyIGkgPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGRlcGVuZGVuY2llc1tpXS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIENvbXB1dGVkRXhwcmVzc2lvbjtcbn0oRXhwcmVzc2lvbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wdXRlZE9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IGRlc2NyaXB0b3IuZ2V0LmRlcGVuZGVuY2llcztcbiAgaWYgKCEoZGVwZW5kZW5jaWVzIGluc3RhbmNlb2YgQ29tcHV0ZWRFeHByZXNzaW9uKSkge1xuICAgIHZhciBpID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBkZXBlbmRlbmNpZXNbaV0gPSBvYnNlcnZlckxvY2F0b3IucGFyc2VyLnBhcnNlKGRlcGVuZGVuY2llc1tpXSk7XG4gICAgfVxuICAgIGRlcGVuZGVuY2llcyA9IGRlc2NyaXB0b3IuZ2V0LmRlcGVuZGVuY2llcyA9IG5ldyBDb21wdXRlZEV4cHJlc3Npb24ocHJvcGVydHlOYW1lLCBkZXBlbmRlbmNpZXMpO1xuICB9XG5cbiAgdmFyIHNjb3BlID0geyBiaW5kaW5nQ29udGV4dDogb2JqLCBvdmVycmlkZUNvbnRleHQ6IGNyZWF0ZU92ZXJyaWRlQ29udGV4dChvYmopIH07XG4gIHJldHVybiBuZXcgRXhwcmVzc2lvbk9ic2VydmVyKHNjb3BlLCBkZXBlbmRlbmNpZXMsIG9ic2VydmVyTG9jYXRvcik7XG59XG5cbnZhciBzdmdFbGVtZW50cyA9IHZvaWQgMDtcbnZhciBzdmdQcmVzZW50YXRpb25FbGVtZW50cyA9IHZvaWQgMDtcbnZhciBzdmdQcmVzZW50YXRpb25BdHRyaWJ1dGVzID0gdm9pZCAwO1xudmFyIHN2Z0FuYWx5emVyID0gdm9pZCAwO1xuXG5pZiAodHlwZW9mIEZFQVRVUkVfTk9fU1ZHID09PSAndW5kZWZpbmVkJykge1xuICBzdmdFbGVtZW50cyA9IHtcbiAgICBhOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0YXJnZXQnLCAndHJhbnNmb3JtJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFsdEdseXBoOiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZm9ybWF0JywgJ2dseXBoUmVmJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBhbHRHbHlwaERlZjogWydpZCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBhbHRHbHlwaEl0ZW06IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYW5pbWF0ZTogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2F0dHJpYnV0ZU5hbWUnLCAnYXR0cmlidXRlVHlwZScsICdiZWdpbicsICdieScsICdjYWxjTW9kZScsICdkdXInLCAnZW5kJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZmlsbCcsICdmcm9tJywgJ2lkJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYW5pbWF0ZUNvbG9yOiBbJ2FjY3VtdWxhdGUnLCAnYWRkaXRpdmUnLCAnYXR0cmlidXRlTmFtZScsICdhdHRyaWJ1dGVUeXBlJywgJ2JlZ2luJywgJ2J5JywgJ2NhbGNNb2RlJywgJ2R1cicsICdlbmQnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWxsJywgJ2Zyb20nLCAnaWQnLCAna2V5U3BsaW5lcycsICdrZXlUaW1lcycsICdtYXgnLCAnbWluJywgJ29uYmVnaW4nLCAnb25lbmQnLCAnb25sb2FkJywgJ29ucmVwZWF0JywgJ3JlcGVhdENvdW50JywgJ3JlcGVhdER1cicsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdyZXN0YXJ0JywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RvJywgJ3ZhbHVlcycsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBhbmltYXRlTW90aW9uOiBbJ2FjY3VtdWxhdGUnLCAnYWRkaXRpdmUnLCAnYmVnaW4nLCAnYnknLCAnY2FsY01vZGUnLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnZnJvbScsICdpZCcsICdrZXlQb2ludHMnLCAna2V5U3BsaW5lcycsICdrZXlUaW1lcycsICdtYXgnLCAnbWluJywgJ29uYmVnaW4nLCAnb25lbmQnLCAnb25sb2FkJywgJ29ucmVwZWF0JywgJ29yaWdpbicsICdwYXRoJywgJ3JlcGVhdENvdW50JywgJ3JlcGVhdER1cicsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdyZXN0YXJ0JywgJ3JvdGF0ZScsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYW5pbWF0ZVRyYW5zZm9ybTogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2F0dHJpYnV0ZU5hbWUnLCAnYXR0cmlidXRlVHlwZScsICdiZWdpbicsICdieScsICdjYWxjTW9kZScsICdkdXInLCAnZW5kJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZmlsbCcsICdmcm9tJywgJ2lkJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd0eXBlJywgJ3ZhbHVlcycsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBjaXJjbGU6IFsnY2xhc3MnLCAnY3gnLCAnY3knLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3InLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGNsaXBQYXRoOiBbJ2NsYXNzJywgJ2NsaXBQYXRoVW5pdHMnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2NvbG9yLXByb2ZpbGUnOiBbJ2lkJywgJ2xvY2FsJywgJ25hbWUnLCAncmVuZGVyaW5nLWludGVudCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBjdXJzb3I6IFsnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzeXN0ZW1MYW5ndWFnZScsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZGVmczogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGRlc2M6IFsnY2xhc3MnLCAnaWQnLCAnc3R5bGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZWxsaXBzZTogWydjbGFzcycsICdjeCcsICdjeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncngnLCAncnknLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGZlQmxlbmQ6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2luMicsICdtb2RlJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVDb2xvck1hdHJpeDogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3R5cGUnLCAndmFsdWVzJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlQ29tcG9zaXRlOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdpbjInLCAnazEnLCAnazInLCAnazMnLCAnazQnLCAnb3BlcmF0b3InLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUNvbnZvbHZlTWF0cml4OiBbJ2JpYXMnLCAnY2xhc3MnLCAnZGl2aXNvcicsICdlZGdlTW9kZScsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAna2VybmVsTWF0cml4JywgJ2tlcm5lbFVuaXRMZW5ndGgnLCAnb3JkZXInLCAncHJlc2VydmVBbHBoYScsICdyZXN1bHQnLCAnc3R5bGUnLCAndGFyZ2V0WCcsICd0YXJnZXRZJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZURpZmZ1c2VMaWdodGluZzogWydjbGFzcycsICdkaWZmdXNlQ29uc3RhbnQnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2tlcm5lbFVuaXRMZW5ndGgnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3N1cmZhY2VTY2FsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVEaXNwbGFjZW1lbnRNYXA6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2luMicsICdyZXN1bHQnLCAnc2NhbGUnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4Q2hhbm5lbFNlbGVjdG9yJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5JywgJ3lDaGFubmVsU2VsZWN0b3InXSxcbiAgICBmZURpc3RhbnRMaWdodDogWydhemltdXRoJywgJ2VsZXZhdGlvbicsICdpZCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUZsb29kOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlRnVuY0E6IFsnYW1wbGl0dWRlJywgJ2V4cG9uZW50JywgJ2lkJywgJ2ludGVyY2VwdCcsICdvZmZzZXQnLCAnc2xvcGUnLCAndGFibGVWYWx1ZXMnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUZ1bmNCOiBbJ2FtcGxpdHVkZScsICdleHBvbmVudCcsICdpZCcsICdpbnRlcmNlcHQnLCAnb2Zmc2V0JywgJ3Nsb3BlJywgJ3RhYmxlVmFsdWVzJywgJ3R5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVGdW5jRzogWydhbXBsaXR1ZGUnLCAnZXhwb25lbnQnLCAnaWQnLCAnaW50ZXJjZXB0JywgJ29mZnNldCcsICdzbG9wZScsICd0YWJsZVZhbHVlcycsICd0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGZlRnVuY1I6IFsnYW1wbGl0dWRlJywgJ2V4cG9uZW50JywgJ2lkJywgJ2ludGVyY2VwdCcsICdvZmZzZXQnLCAnc2xvcGUnLCAndGFibGVWYWx1ZXMnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUdhdXNzaWFuQmx1cjogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0ZERldmlhdGlvbicsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVJbWFnZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVNZXJnZTogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZU1lcmdlTm9kZTogWydpZCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZU1vcnBob2xvZ3k6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ29wZXJhdG9yJywgJ3JhZGl1cycsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlT2Zmc2V0OiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2hlaWdodCcsICdpZCcsICdpbicsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlUG9pbnRMaWdodDogWydpZCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5JywgJ3onXSxcbiAgICBmZVNwZWN1bGFyTGlnaHRpbmc6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2tlcm5lbFVuaXRMZW5ndGgnLCAncmVzdWx0JywgJ3NwZWN1bGFyQ29uc3RhbnQnLCAnc3BlY3VsYXJFeHBvbmVudCcsICdzdHlsZScsICdzdXJmYWNlU2NhbGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlU3BvdExpZ2h0OiBbJ2lkJywgJ2xpbWl0aW5nQ29uZUFuZ2xlJywgJ3BvaW50c0F0WCcsICdwb2ludHNBdFknLCAncG9pbnRzQXRaJywgJ3NwZWN1bGFyRXhwb25lbnQnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd6J10sXG4gICAgZmVUaWxlOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlVHVyYnVsZW5jZTogWydiYXNlRnJlcXVlbmN5JywgJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdudW1PY3RhdmVzJywgJ3Jlc3VsdCcsICdzZWVkJywgJ3N0aXRjaFRpbGVzJywgJ3N0eWxlJywgJ3R5cGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZpbHRlcjogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbHRlclJlcycsICdmaWx0ZXJVbml0cycsICdoZWlnaHQnLCAnaWQnLCAncHJpbWl0aXZlVW5pdHMnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZvbnQ6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdob3Jpei1hZHYteCcsICdob3Jpei1vcmlnaW4teCcsICdob3Jpei1vcmlnaW4teScsICdpZCcsICdzdHlsZScsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnZm9udC1mYWNlJzogWydhY2NlbnQtaGVpZ2h0JywgJ2FscGhhYmV0aWMnLCAnYXNjZW50JywgJ2Jib3gnLCAnY2FwLWhlaWdodCcsICdkZXNjZW50JywgJ2ZvbnQtZmFtaWx5JywgJ2ZvbnQtc2l6ZScsICdmb250LXN0cmV0Y2gnLCAnZm9udC1zdHlsZScsICdmb250LXZhcmlhbnQnLCAnZm9udC13ZWlnaHQnLCAnaGFuZ2luZycsICdpZCcsICdpZGVvZ3JhcGhpYycsICdtYXRoZW1hdGljYWwnLCAnb3ZlcmxpbmUtcG9zaXRpb24nLCAnb3ZlcmxpbmUtdGhpY2tuZXNzJywgJ3Bhbm9zZS0xJywgJ3Nsb3BlJywgJ3N0ZW1oJywgJ3N0ZW12JywgJ3N0cmlrZXRocm91Z2gtcG9zaXRpb24nLCAnc3RyaWtldGhyb3VnaC10aGlja25lc3MnLCAndW5kZXJsaW5lLXBvc2l0aW9uJywgJ3VuZGVybGluZS10aGlja25lc3MnLCAndW5pY29kZS1yYW5nZScsICd1bml0cy1wZXItZW0nLCAndi1hbHBoYWJldGljJywgJ3YtaGFuZ2luZycsICd2LWlkZW9ncmFwaGljJywgJ3YtbWF0aGVtYXRpY2FsJywgJ3dpZHRocycsICd4LWhlaWdodCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnZm9udC1mYWNlLWZvcm1hdCc6IFsnaWQnLCAnc3RyaW5nJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgICdmb250LWZhY2UtbmFtZSc6IFsnaWQnLCAnbmFtZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnZm9udC1mYWNlLXNyYyc6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZS11cmknOiBbJ2lkJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGZvcmVpZ25PYmplY3Q6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGc6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBnbHlwaDogWydhcmFiaWMtZm9ybScsICdjbGFzcycsICdkJywgJ2dseXBoLW5hbWUnLCAnaG9yaXotYWR2LXgnLCAnaWQnLCAnbGFuZycsICdvcmllbnRhdGlvbicsICdzdHlsZScsICd1bmljb2RlJywgJ3ZlcnQtYWR2LXknLCAndmVydC1vcmlnaW4teCcsICd2ZXJ0LW9yaWdpbi15JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGdseXBoUmVmOiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2Zvcm1hdCcsICdnbHlwaFJlZicsICdpZCcsICdzdHlsZScsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgaGtlcm46IFsnZzEnLCAnZzInLCAnaWQnLCAnaycsICd1MScsICd1MicsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBpbWFnZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBsaW5lOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneDEnLCAneDInLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3kxJywgJ3kyJ10sXG4gICAgbGluZWFyR3JhZGllbnQ6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdncmFkaWVudFRyYW5zZm9ybScsICdncmFkaWVudFVuaXRzJywgJ2lkJywgJ3NwcmVhZE1ldGhvZCcsICdzdHlsZScsICd4MScsICd4MicsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5MScsICd5MiddLFxuICAgIG1hcmtlcjogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ21hcmtlckhlaWdodCcsICdtYXJrZXJVbml0cycsICdtYXJrZXJXaWR0aCcsICdvcmllbnQnLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdyZWZYJywgJ3JlZlknLCAnc3R5bGUnLCAndmlld0JveCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBtYXNrOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ21hc2tDb250ZW50VW5pdHMnLCAnbWFza1VuaXRzJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBtZXRhZGF0YTogWydpZCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnbWlzc2luZy1nbHlwaCc6IFsnY2xhc3MnLCAnZCcsICdob3Jpei1hZHYteCcsICdpZCcsICdzdHlsZScsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBtcGF0aDogWydleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIHBhdGg6IFsnY2xhc3MnLCAnZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncGF0aExlbmd0aCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcGF0dGVybjogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdwYXR0ZXJuQ29udGVudFVuaXRzJywgJ3BhdHRlcm5UcmFuc2Zvcm0nLCAncGF0dGVyblVuaXRzJywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndmlld0JveCcsICd3aWR0aCcsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgcG9seWdvbjogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncG9pbnRzJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBwb2x5bGluZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncG9pbnRzJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICByYWRpYWxHcmFkaWVudDogWydjbGFzcycsICdjeCcsICdjeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2Z4JywgJ2Z5JywgJ2dyYWRpZW50VHJhbnNmb3JtJywgJ2dyYWRpZW50VW5pdHMnLCAnaWQnLCAncicsICdzcHJlYWRNZXRob2QnLCAnc3R5bGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICByZWN0OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncngnLCAncnknLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBzY3JpcHQ6IFsnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICd0eXBlJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIHNldDogWydhdHRyaWJ1dGVOYW1lJywgJ2F0dHJpYnV0ZVR5cGUnLCAnYmVnaW4nLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnaWQnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzdG9wOiBbJ2NsYXNzJywgJ2lkJywgJ29mZnNldCcsICdzdHlsZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzdHlsZTogWydpZCcsICdtZWRpYScsICd0aXRsZScsICd0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIHN2ZzogWydiYXNlUHJvZmlsZScsICdjbGFzcycsICdjb250ZW50U2NyaXB0VHlwZScsICdjb250ZW50U3R5bGVUeXBlJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWJvcnQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZXJyb3InLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ29ucmVzaXplJywgJ29uc2Nyb2xsJywgJ29udW5sb2FkJywgJ29uem9vbScsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3ZlcnNpb24nLCAndmlld0JveCcsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5JywgJ3pvb21BbmRQYW4nXSxcbiAgICBzd2l0Y2g6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzeW1ib2w6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAnc3R5bGUnLCAndmlld0JveCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0ZXh0OiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnbGVuZ3RoQWRqdXN0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAndHJhbnNmb3JtJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICB0ZXh0UGF0aDogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ2xlbmd0aEFkanVzdCcsICdtZXRob2QnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzcGFjaW5nJywgJ3N0YXJ0T2Zmc2V0JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0aXRsZTogWydjbGFzcycsICdpZCcsICdzdHlsZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICB0cmVmOiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnbGVuZ3RoQWRqdXN0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAneCcsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdHNwYW46IFsnY2xhc3MnLCAnZHgnLCAnZHknLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdsZW5ndGhBZGp1c3QnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdyb3RhdGUnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndGV4dExlbmd0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdXNlOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICB2aWV3OiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICd2aWV3Qm94JywgJ3ZpZXdUYXJnZXQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3pvb21BbmRQYW4nXSxcbiAgICB2a2VybjogWydnMScsICdnMicsICdpZCcsICdrJywgJ3UxJywgJ3UyJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddXG4gIH07XG5cblxuICBzdmdQcmVzZW50YXRpb25FbGVtZW50cyA9IHtcbiAgICAnYSc6IHRydWUsXG4gICAgJ2FsdEdseXBoJzogdHJ1ZSxcbiAgICAnYW5pbWF0ZSc6IHRydWUsXG4gICAgJ2FuaW1hdGVDb2xvcic6IHRydWUsXG4gICAgJ2NpcmNsZSc6IHRydWUsXG4gICAgJ2NsaXBQYXRoJzogdHJ1ZSxcbiAgICAnZGVmcyc6IHRydWUsXG4gICAgJ2VsbGlwc2UnOiB0cnVlLFxuICAgICdmZUJsZW5kJzogdHJ1ZSxcbiAgICAnZmVDb2xvck1hdHJpeCc6IHRydWUsXG4gICAgJ2ZlQ29tcG9uZW50VHJhbnNmZXInOiB0cnVlLFxuICAgICdmZUNvbXBvc2l0ZSc6IHRydWUsXG4gICAgJ2ZlQ29udm9sdmVNYXRyaXgnOiB0cnVlLFxuICAgICdmZURpZmZ1c2VMaWdodGluZyc6IHRydWUsXG4gICAgJ2ZlRGlzcGxhY2VtZW50TWFwJzogdHJ1ZSxcbiAgICAnZmVGbG9vZCc6IHRydWUsXG4gICAgJ2ZlR2F1c3NpYW5CbHVyJzogdHJ1ZSxcbiAgICAnZmVJbWFnZSc6IHRydWUsXG4gICAgJ2ZlTWVyZ2UnOiB0cnVlLFxuICAgICdmZU1vcnBob2xvZ3knOiB0cnVlLFxuICAgICdmZU9mZnNldCc6IHRydWUsXG4gICAgJ2ZlU3BlY3VsYXJMaWdodGluZyc6IHRydWUsXG4gICAgJ2ZlVGlsZSc6IHRydWUsXG4gICAgJ2ZlVHVyYnVsZW5jZSc6IHRydWUsXG4gICAgJ2ZpbHRlcic6IHRydWUsXG4gICAgJ2ZvbnQnOiB0cnVlLFxuICAgICdmb3JlaWduT2JqZWN0JzogdHJ1ZSxcbiAgICAnZyc6IHRydWUsXG4gICAgJ2dseXBoJzogdHJ1ZSxcbiAgICAnZ2x5cGhSZWYnOiB0cnVlLFxuICAgICdpbWFnZSc6IHRydWUsXG4gICAgJ2xpbmUnOiB0cnVlLFxuICAgICdsaW5lYXJHcmFkaWVudCc6IHRydWUsXG4gICAgJ21hcmtlcic6IHRydWUsXG4gICAgJ21hc2snOiB0cnVlLFxuICAgICdtaXNzaW5nLWdseXBoJzogdHJ1ZSxcbiAgICAncGF0aCc6IHRydWUsXG4gICAgJ3BhdHRlcm4nOiB0cnVlLFxuICAgICdwb2x5Z29uJzogdHJ1ZSxcbiAgICAncG9seWxpbmUnOiB0cnVlLFxuICAgICdyYWRpYWxHcmFkaWVudCc6IHRydWUsXG4gICAgJ3JlY3QnOiB0cnVlLFxuICAgICdzdG9wJzogdHJ1ZSxcbiAgICAnc3ZnJzogdHJ1ZSxcbiAgICAnc3dpdGNoJzogdHJ1ZSxcbiAgICAnc3ltYm9sJzogdHJ1ZSxcbiAgICAndGV4dCc6IHRydWUsXG4gICAgJ3RleHRQYXRoJzogdHJ1ZSxcbiAgICAndHJlZic6IHRydWUsXG4gICAgJ3RzcGFuJzogdHJ1ZSxcbiAgICAndXNlJzogdHJ1ZVxuICB9O1xuXG4gIHN2Z1ByZXNlbnRhdGlvbkF0dHJpYnV0ZXMgPSB7XG4gICAgJ2FsaWdubWVudC1iYXNlbGluZSc6IHRydWUsXG4gICAgJ2Jhc2VsaW5lLXNoaWZ0JzogdHJ1ZSxcbiAgICAnY2xpcC1wYXRoJzogdHJ1ZSxcbiAgICAnY2xpcC1ydWxlJzogdHJ1ZSxcbiAgICAnY2xpcCc6IHRydWUsXG4gICAgJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyc6IHRydWUsXG4gICAgJ2NvbG9yLWludGVycG9sYXRpb24nOiB0cnVlLFxuICAgICdjb2xvci1wcm9maWxlJzogdHJ1ZSxcbiAgICAnY29sb3ItcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAnY29sb3InOiB0cnVlLFxuICAgICdjdXJzb3InOiB0cnVlLFxuICAgICdkaXJlY3Rpb24nOiB0cnVlLFxuICAgICdkaXNwbGF5JzogdHJ1ZSxcbiAgICAnZG9taW5hbnQtYmFzZWxpbmUnOiB0cnVlLFxuICAgICdlbmFibGUtYmFja2dyb3VuZCc6IHRydWUsXG4gICAgJ2ZpbGwtb3BhY2l0eSc6IHRydWUsXG4gICAgJ2ZpbGwtcnVsZSc6IHRydWUsXG4gICAgJ2ZpbGwnOiB0cnVlLFxuICAgICdmaWx0ZXInOiB0cnVlLFxuICAgICdmbG9vZC1jb2xvcic6IHRydWUsXG4gICAgJ2Zsb29kLW9wYWNpdHknOiB0cnVlLFxuICAgICdmb250LWZhbWlseSc6IHRydWUsXG4gICAgJ2ZvbnQtc2l6ZS1hZGp1c3QnOiB0cnVlLFxuICAgICdmb250LXNpemUnOiB0cnVlLFxuICAgICdmb250LXN0cmV0Y2gnOiB0cnVlLFxuICAgICdmb250LXN0eWxlJzogdHJ1ZSxcbiAgICAnZm9udC12YXJpYW50JzogdHJ1ZSxcbiAgICAnZm9udC13ZWlnaHQnOiB0cnVlLFxuICAgICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJzogdHJ1ZSxcbiAgICAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnOiB0cnVlLFxuICAgICdpbWFnZS1yZW5kZXJpbmcnOiB0cnVlLFxuICAgICdrZXJuaW5nJzogdHJ1ZSxcbiAgICAnbGV0dGVyLXNwYWNpbmcnOiB0cnVlLFxuICAgICdsaWdodGluZy1jb2xvcic6IHRydWUsXG4gICAgJ21hcmtlci1lbmQnOiB0cnVlLFxuICAgICdtYXJrZXItbWlkJzogdHJ1ZSxcbiAgICAnbWFya2VyLXN0YXJ0JzogdHJ1ZSxcbiAgICAnbWFzayc6IHRydWUsXG4gICAgJ29wYWNpdHknOiB0cnVlLFxuICAgICdvdmVyZmxvdyc6IHRydWUsXG4gICAgJ3BvaW50ZXItZXZlbnRzJzogdHJ1ZSxcbiAgICAnc2hhcGUtcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAnc3RvcC1jb2xvcic6IHRydWUsXG4gICAgJ3N0b3Atb3BhY2l0eSc6IHRydWUsXG4gICAgJ3N0cm9rZS1kYXNoYXJyYXknOiB0cnVlLFxuICAgICdzdHJva2UtZGFzaG9mZnNldCc6IHRydWUsXG4gICAgJ3N0cm9rZS1saW5lY2FwJzogdHJ1ZSxcbiAgICAnc3Ryb2tlLWxpbmVqb2luJzogdHJ1ZSxcbiAgICAnc3Ryb2tlLW1pdGVybGltaXQnOiB0cnVlLFxuICAgICdzdHJva2Utb3BhY2l0eSc6IHRydWUsXG4gICAgJ3N0cm9rZS13aWR0aCc6IHRydWUsXG4gICAgJ3N0cm9rZSc6IHRydWUsXG4gICAgJ3RleHQtYW5jaG9yJzogdHJ1ZSxcbiAgICAndGV4dC1kZWNvcmF0aW9uJzogdHJ1ZSxcbiAgICAndGV4dC1yZW5kZXJpbmcnOiB0cnVlLFxuICAgICd1bmljb2RlLWJpZGknOiB0cnVlLFxuICAgICd2aXNpYmlsaXR5JzogdHJ1ZSxcbiAgICAnd29yZC1zcGFjaW5nJzogdHJ1ZSxcbiAgICAnd3JpdGluZy1tb2RlJzogdHJ1ZVxuICB9O1xuXG4gIHZhciBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudChodG1sKSB7XG4gICAgdmFyIGRpdiA9IERPTS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQ7XG4gIH07XG5cbiAgc3ZnQW5hbHl6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU1ZHQW5hbHl6ZXIoKSB7XG4gICAgICBcblxuICAgICAgaWYgKGNyZWF0ZUVsZW1lbnQoJzxzdmc+PGFsdEdseXBoIC8+PC9zdmc+JykuZmlyc3RFbGVtZW50Q2hpbGQubm9kZU5hbWUgPT09ICdhbHRnbHlwaCcgJiYgZWxlbWVudHMuYWx0R2x5cGgpIHtcbiAgICAgICAgZWxlbWVudHMuYWx0Z2x5cGggPSBlbGVtZW50cy5hbHRHbHlwaDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRzLmFsdEdseXBoO1xuICAgICAgICBlbGVtZW50cy5hbHRnbHlwaGRlZiA9IGVsZW1lbnRzLmFsdEdseXBoRGVmO1xuICAgICAgICBkZWxldGUgZWxlbWVudHMuYWx0R2x5cGhEZWY7XG4gICAgICAgIGVsZW1lbnRzLmFsdGdseXBoaXRlbSA9IGVsZW1lbnRzLmFsdEdseXBoSXRlbTtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRzLmFsdEdseXBoSXRlbTtcbiAgICAgICAgZWxlbWVudHMuZ2x5cGhyZWYgPSBlbGVtZW50cy5nbHlwaFJlZjtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRzLmdseXBoUmVmO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNWR0FuYWx5emVyLnByb3RvdHlwZS5pc1N0YW5kYXJkU3ZnQXR0cmlidXRlID0gZnVuY3Rpb24gaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZShub2RlTmFtZSwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgcmV0dXJuIHByZXNlbnRhdGlvbkVsZW1lbnRzW25vZGVOYW1lXSAmJiBwcmVzZW50YXRpb25BdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IGVsZW1lbnRzW25vZGVOYW1lXSAmJiBlbGVtZW50c1tub2RlTmFtZV0uaW5kZXhPZihhdHRyaWJ1dGVOYW1lKSAhPT0gLTE7XG4gICAgfTtcblxuICAgIHJldHVybiBTVkdBbmFseXplcjtcbiAgfSgpO1xufVxuXG5leHBvcnQgdmFyIGVsZW1lbnRzID0gc3ZnRWxlbWVudHM7XG5leHBvcnQgdmFyIHByZXNlbnRhdGlvbkVsZW1lbnRzID0gc3ZnUHJlc2VudGF0aW9uRWxlbWVudHM7XG5leHBvcnQgdmFyIHByZXNlbnRhdGlvbkF0dHJpYnV0ZXMgPSBzdmdQcmVzZW50YXRpb25BdHRyaWJ1dGVzO1xuZXhwb3J0IHZhciBTVkdBbmFseXplciA9IHN2Z0FuYWx5emVyIHx8IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gX2NsYXNzMTEoKSB7XG4gICAgXG4gIH1cblxuICBfY2xhc3MxMS5wcm90b3R5cGUuaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZSA9IGZ1bmN0aW9uIGlzU3RhbmRhcmRTdmdBdHRyaWJ1dGUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiBfY2xhc3MxMTtcbn0oKTtcblxuZXhwb3J0IHZhciBPYnNlcnZlckxvY2F0b3IgPSAoX3RlbXAgPSBfY2xhc3MxMiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT2JzZXJ2ZXJMb2NhdG9yKHRhc2tRdWV1ZSwgZXZlbnRNYW5hZ2VyLCBkaXJ0eUNoZWNrZXIsIHN2Z0FuYWx5emVyLCBwYXJzZXIpIHtcbiAgICBcblxuICAgIHRoaXMudGFza1F1ZXVlID0gdGFza1F1ZXVlO1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gZXZlbnRNYW5hZ2VyO1xuICAgIHRoaXMuZGlydHlDaGVja2VyID0gZGlydHlDaGVja2VyO1xuICAgIHRoaXMuc3ZnQW5hbHl6ZXIgPSBzdmdBbmFseXplcjtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcblxuICAgIHRoaXMuYWRhcHRlcnMgPSBbXTtcbiAgICB0aGlzLmxvZ2dlciA9IExvZ01hbmFnZXIuZ2V0TG9nZ2VyKCdvYnNlcnZlci1sb2NhdG9yJyk7XG4gIH1cblxuICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICB2YXIgb2JzZXJ2ZXJzTG9va3VwID0gb2JqLl9fb2JzZXJ2ZXJzX187XG4gICAgdmFyIG9ic2VydmVyID0gdm9pZCAwO1xuXG4gICAgaWYgKG9ic2VydmVyc0xvb2t1cCAmJiBwcm9wZXJ0eU5hbWUgaW4gb2JzZXJ2ZXJzTG9va3VwKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXJzTG9va3VwW3Byb3BlcnR5TmFtZV07XG4gICAgfVxuXG4gICAgb2JzZXJ2ZXIgPSB0aGlzLmNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuXG4gICAgaWYgKCFvYnNlcnZlci5kb05vdENhY2hlKSB7XG4gICAgICBpZiAob2JzZXJ2ZXJzTG9va3VwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb2JzZXJ2ZXJzTG9va3VwID0gdGhpcy5nZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cChvYmopO1xuICAgICAgfVxuXG4gICAgICBvYnNlcnZlcnNMb29rdXBbcHJvcGVydHlOYW1lXSA9IG9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZlcjtcbiAgfTtcblxuICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldE9yQ3JlYXRlT2JzZXJ2ZXJzTG9va3VwID0gZnVuY3Rpb24gZ2V0T3JDcmVhdGVPYnNlcnZlcnNMb29rdXAob2JqKSB7XG4gICAgcmV0dXJuIG9iai5fX29ic2VydmVyc19fIHx8IHRoaXMuY3JlYXRlT2JzZXJ2ZXJzTG9va3VwKG9iaik7XG4gIH07XG5cbiAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5jcmVhdGVPYnNlcnZlcnNMb29rdXAgPSBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcnNMb29rdXAob2JqKSB7XG4gICAgdmFyIHZhbHVlID0ge307XG5cbiAgICBpZiAoIVJlZmxlY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19vYnNlcnZlcnNfXycsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdDYW5ub3QgYWRkIG9ic2VydmVycyB0byBvYmplY3QnLCBvYmopO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmFkZEFkYXB0ZXIgPSBmdW5jdGlvbiBhZGRBZGFwdGVyKGFkYXB0ZXIpIHtcbiAgICB0aGlzLmFkYXB0ZXJzLnB1c2goYWRhcHRlcik7XG4gIH07XG5cbiAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5nZXRBZGFwdGVyT2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRBZGFwdGVyT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmFkYXB0ZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBhZGFwdGVyID0gdGhpcy5hZGFwdGVyc1tpXTtcbiAgICAgIHZhciBvYnNlcnZlciA9IGFkYXB0ZXIuZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xuICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5jcmVhdGVQcm9wZXJ0eU9ic2VydmVyID0gZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gdm9pZCAwO1xuICAgIHZhciBoYW5kbGVyID0gdm9pZCAwO1xuICAgIHZhciB4bGlua1Jlc3VsdCA9IHZvaWQgMDtcblxuICAgIGlmICghKG9iaiBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJpbWl0aXZlT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBET00uRWxlbWVudCkge1xuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ2NsYXNzJykge1xuICAgICAgICByZXR1cm4gbmV3IENsYXNzT2JzZXJ2ZXIob2JqKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdzdHlsZScgfHwgcHJvcGVydHlOYW1lID09PSAnY3NzJykge1xuICAgICAgICByZXR1cm4gbmV3IFN0eWxlT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgfVxuICAgICAgaGFuZGxlciA9IHRoaXMuZXZlbnRNYW5hZ2VyLmdldEVsZW1lbnRIYW5kbGVyKG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICd2YWx1ZScgJiYgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3RWYWx1ZU9ic2VydmVyKG9iaiwgaGFuZGxlciwgdGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnY2hlY2tlZCcgJiYgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0Jykge1xuICAgICAgICByZXR1cm4gbmV3IENoZWNrZWRPYnNlcnZlcihvYmosIGhhbmRsZXIsIHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIHhsaW5rUmVzdWx0ID0gL154bGluazooLispJC8uZXhlYyhwcm9wZXJ0eU5hbWUpO1xuICAgICAgaWYgKHhsaW5rUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBuZXcgWExpbmtBdHRyaWJ1dGVPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSwgeGxpbmtSZXN1bHRbMV0pO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3JvbGUnICYmIChvYmogaW5zdGFuY2VvZiBET00uRWxlbWVudCB8fCBvYmogaW5zdGFuY2VvZiBET00uU1ZHRWxlbWVudCkgfHwgL15cXHcrOnxeZGF0YS18XmFyaWEtLy50ZXN0KHByb3BlcnR5TmFtZSkgfHwgb2JqIGluc3RhbmNlb2YgRE9NLlNWR0VsZW1lbnQgJiYgdGhpcy5zdmdBbmFseXplci5pc1N0YW5kYXJkU3ZnQXR0cmlidXRlKG9iai5ub2RlTmFtZSwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGFBdHRyaWJ1dGVPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRQcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wZXJ0eU5hbWUpO1xuXG4gICAgaWYgKGhhc0RlY2xhcmVkRGVwZW5kZW5jaWVzKGRlc2NyaXB0b3IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcHV0ZWRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvciwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgIHZhciBleGlzdGluZ0dldHRlck9yU2V0dGVyID0gZGVzY3JpcHRvci5nZXQgfHwgZGVzY3JpcHRvci5zZXQ7XG4gICAgICBpZiAoZXhpc3RpbmdHZXR0ZXJPclNldHRlcikge1xuICAgICAgICBpZiAoZXhpc3RpbmdHZXR0ZXJPclNldHRlci5nZXRPYnNlcnZlcikge1xuICAgICAgICAgIHJldHVybiBleGlzdGluZ0dldHRlck9yU2V0dGVyLmdldE9ic2VydmVyKG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWRhcHRlck9ic2VydmVyID0gdGhpcy5nZXRBZGFwdGVyT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xuICAgICAgICBpZiAoYWRhcHRlck9ic2VydmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGFkYXB0ZXJPYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQcm9wZXJ0eSh0aGlzLmRpcnR5Q2hlY2tlciwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXJyYXlPYnNlcnZlcihvYmopLmdldExlbmd0aE9ic2VydmVyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGlydHlDaGVja1Byb3BlcnR5KHRoaXMuZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdzaXplJykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXBPYnNlcnZlcihvYmopLmdldExlbmd0aE9ic2VydmVyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGlydHlDaGVja1Byb3BlcnR5KHRoaXMuZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdzaXplJykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTZXRPYnNlcnZlcihvYmopLmdldExlbmd0aE9ic2VydmVyKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGlydHlDaGVja1Byb3BlcnR5KHRoaXMuZGlydHlDaGVja2VyLCBvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTZXR0ZXJPYnNlcnZlcih0aGlzLnRhc2tRdWV1ZSwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICB9O1xuXG4gIE9ic2VydmVyTG9jYXRvci5wcm90b3R5cGUuZ2V0QWNjZXNzb3IgPSBmdW5jdGlvbiBnZXRBY2Nlc3NvcihvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBET00uRWxlbWVudCkge1xuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ2NsYXNzJyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdzdHlsZScgfHwgcHJvcGVydHlOYW1lID09PSAnY3NzJyB8fCBwcm9wZXJ0eU5hbWUgPT09ICd2YWx1ZScgJiYgKG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHx8IHByb3BlcnR5TmFtZSA9PT0gJ2NoZWNrZWQnICYmIG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgcHJvcGVydHlOYW1lID09PSAnbW9kZWwnICYmIG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgL154bGluazouKyQvLmV4ZWMocHJvcGVydHlOYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoL15cXHcrOnxeZGF0YS18XmFyaWEtLy50ZXN0KHByb3BlcnR5TmFtZSkgfHwgb2JqIGluc3RhbmNlb2YgRE9NLlNWR0VsZW1lbnQgJiYgdGhpcy5zdmdBbmFseXplci5pc1N0YW5kYXJkU3ZnQXR0cmlidXRlKG9iai5ub2RlTmFtZSwgcHJvcGVydHlOYW1lKSB8fCBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW1nJyAmJiBwcm9wZXJ0eU5hbWUgPT09ICdzcmMnIHx8IG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJyAmJiBwcm9wZXJ0eU5hbWUgPT09ICdocmVmJykge1xuICAgICAgICByZXR1cm4gZGF0YUF0dHJpYnV0ZUFjY2Vzc29yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcGVydHlBY2Nlc3NvcjtcbiAgfTtcblxuICBPYnNlcnZlckxvY2F0b3IucHJvdG90eXBlLmdldEFycmF5T2JzZXJ2ZXIgPSBmdW5jdGlvbiBnZXRBcnJheU9ic2VydmVyKGFycmF5KSB7XG4gICAgcmV0dXJuIF9nZXRBcnJheU9ic2VydmVyKHRoaXMudGFza1F1ZXVlLCBhcnJheSk7XG4gIH07XG5cbiAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5nZXRNYXBPYnNlcnZlciA9IGZ1bmN0aW9uIGdldE1hcE9ic2VydmVyKG1hcCkge1xuICAgIHJldHVybiBfZ2V0TWFwT2JzZXJ2ZXIodGhpcy50YXNrUXVldWUsIG1hcCk7XG4gIH07XG5cbiAgT2JzZXJ2ZXJMb2NhdG9yLnByb3RvdHlwZS5nZXRTZXRPYnNlcnZlciA9IGZ1bmN0aW9uIGdldFNldE9ic2VydmVyKHNldCkge1xuICAgIHJldHVybiBfZ2V0U2V0T2JzZXJ2ZXIodGhpcy50YXNrUXVldWUsIHNldCk7XG4gIH07XG5cbiAgcmV0dXJuIE9ic2VydmVyTG9jYXRvcjtcbn0oKSwgX2NsYXNzMTIuaW5qZWN0ID0gW1Rhc2tRdWV1ZSwgRXZlbnRNYW5hZ2VyLCBEaXJ0eUNoZWNrZXIsIFNWR0FuYWx5emVyLCBQYXJzZXJdLCBfdGVtcCk7XG5cbmV4cG9ydCB2YXIgT2JqZWN0T2JzZXJ2YXRpb25BZGFwdGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIoKSB7XG4gICAgXG4gIH1cblxuICBPYmplY3RPYnNlcnZhdGlvbkFkYXB0ZXIucHJvdG90eXBlLmdldE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXIob2JqZWN0LCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpbmRpbmdBZGFwdGVycyBtdXN0IGltcGxlbWVudCBnZXRPYnNlcnZlcihvYmplY3QsIHByb3BlcnR5TmFtZSkuJyk7XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdE9ic2VydmF0aW9uQWRhcHRlcjtcbn0oKTtcblxuZXhwb3J0IHZhciBCaW5kaW5nRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmluZGluZ0V4cHJlc3Npb24ob2JzZXJ2ZXJMb2NhdG9yLCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlRXhwcmVzc2lvbiwgbW9kZSwgbG9va3VwRnVuY3Rpb25zLCBhdHRyaWJ1dGUpIHtcbiAgICBcblxuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMudGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgdGhpcy5kaXNjcmV0ZSA9IGZhbHNlO1xuICB9XG5cbiAgQmluZGluZ0V4cHJlc3Npb24ucHJvdG90eXBlLmNyZWF0ZUJpbmRpbmcgPSBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgQmluZGluZyh0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5zb3VyY2VFeHByZXNzaW9uLCB0YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHksIHRoaXMubW9kZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBCaW5kaW5nRXhwcmVzc2lvbjtcbn0oKTtcblxuZXhwb3J0IHZhciBCaW5kaW5nID0gKF9kZWMxMCA9IGNvbm5lY3RhYmxlKCksIF9kZWMxMChfY2xhc3MxMyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmluZGluZyhvYnNlcnZlckxvY2F0b3IsIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgdGFyZ2V0UHJvcGVydHksIG1vZGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIFxuXG4gICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgfVxuXG4gIEJpbmRpbmcucHJvdG90eXBlLnVwZGF0ZVRhcmdldCA9IGZ1bmN0aW9uIHVwZGF0ZVRhcmdldCh2YWx1ZSkge1xuICAgIHRoaXMudGFyZ2V0T2JzZXJ2ZXIuc2V0VmFsdWUodmFsdWUsIHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5KTtcbiAgfTtcblxuICBCaW5kaW5nLnByb3RvdHlwZS51cGRhdGVTb3VyY2UgPSBmdW5jdGlvbiB1cGRhdGVTb3VyY2UodmFsdWUpIHtcbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uYXNzaWduKHRoaXMuc291cmNlLCB2YWx1ZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9O1xuXG4gIEJpbmRpbmcucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiBjYWxsKGNvbnRleHQsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmICghdGhpcy5pc0JvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb250ZXh0ID09PSBzb3VyY2VDb250ZXh0KSB7XG4gICAgICBvbGRWYWx1ZSA9IHRoaXMudGFyZ2V0T2JzZXJ2ZXIuZ2V0VmFsdWUodGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHkpO1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQobmV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kZSAhPT0gYmluZGluZ01vZGUub25lVGltZSkge1xuICAgICAgICB0aGlzLl92ZXJzaW9uKys7XG4gICAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc291cmNlKTtcbiAgICAgICAgdGhpcy51bm9ic2VydmUoZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PT0gdGFyZ2V0Q29udGV4dCkge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKSkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNvdXJjZShuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjYWxsIGNvbnRleHQgJyArIGNvbnRleHQpO1xuICB9O1xuXG4gIEJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLmlzQm91bmQpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuICAgIGlmICghdGhpcy50YXJnZXRPYnNlcnZlcikge1xuICAgICAgdmFyIG1ldGhvZCA9IG1vZGUgPT09IGJpbmRpbmdNb2RlLnR3b1dheSB8fCBtb2RlID09PSBiaW5kaW5nTW9kZS5mcm9tVmlldyA/ICdnZXRPYnNlcnZlcicgOiAnZ2V0QWNjZXNzb3InO1xuICAgICAgdGhpcy50YXJnZXRPYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yW21ldGhvZF0odGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cblxuICAgIGlmICgnYmluZCcgaW4gdGhpcy50YXJnZXRPYnNlcnZlcikge1xuICAgICAgdGhpcy50YXJnZXRPYnNlcnZlci5iaW5kKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm1vZGUgIT09IGJpbmRpbmdNb2RlLmZyb21WaWV3KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUoc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgICB0aGlzLnVwZGF0ZVRhcmdldCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG1vZGUgPT09IGJpbmRpbmdNb2RlLm9uZVRpbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IGJpbmRpbmdNb2RlLnRvVmlldykge1xuICAgICAgZW5xdWV1ZUJpbmRpbmdDb25uZWN0KHRoaXMpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gYmluZGluZ01vZGUudHdvV2F5KSB7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uY29ubmVjdCh0aGlzLCBzb3VyY2UpO1xuICAgICAgdGhpcy50YXJnZXRPYnNlcnZlci5zdWJzY3JpYmUodGFyZ2V0Q29udGV4dCwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBiaW5kaW5nTW9kZS5mcm9tVmlldykge1xuICAgICAgdGhpcy50YXJnZXRPYnNlcnZlci5zdWJzY3JpYmUodGFyZ2V0Q29udGV4dCwgdGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIEJpbmRpbmcucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICBpZiAoJ3VuYmluZCcgaW4gdGhpcy50YXJnZXRPYnNlcnZlcikge1xuICAgICAgdGhpcy50YXJnZXRPYnNlcnZlci51bmJpbmQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFyZ2V0T2JzZXJ2ZXIudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudGFyZ2V0T2JzZXJ2ZXIudW5zdWJzY3JpYmUodGFyZ2V0Q29udGV4dCwgdGhpcyk7XG4gICAgfVxuICAgIHRoaXMudW5vYnNlcnZlKHRydWUpO1xuICB9O1xuXG4gIEJpbmRpbmcucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiBjb25uZWN0KGV2YWx1YXRlKSB7XG4gICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2YWx1YXRlKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmNvbm5lY3QodGhpcywgdGhpcy5zb3VyY2UpO1xuICB9O1xuXG4gIHJldHVybiBCaW5kaW5nO1xufSgpKSB8fCBfY2xhc3MxMyk7XG5cbmV4cG9ydCB2YXIgQ2FsbEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhbGxFeHByZXNzaW9uKG9ic2VydmVyTG9jYXRvciwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZUV4cHJlc3Npb24sIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIFxuXG4gICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFByb3BlcnR5O1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gIH1cblxuICBDYWxsRXhwcmVzc2lvbi5wcm90b3R5cGUuY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmcodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBDYWxsKHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCB0aGlzLnNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgdGhpcy50YXJnZXRQcm9wZXJ0eSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBDYWxsRXhwcmVzc2lvbjtcbn0oKTtcblxuZXhwb3J0IHZhciBDYWxsID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYWxsKG9ic2VydmVyTG9jYXRvciwgc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgXG5cbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudGFyZ2V0UHJvcGVydHkgPSBvYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIodGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gIH1cblxuICBDYWxsLnByb3RvdHlwZS5jYWxsU291cmNlID0gZnVuY3Rpb24gY2FsbFNvdXJjZSgkZXZlbnQpIHtcbiAgICB2YXIgb3ZlcnJpZGVDb250ZXh0ID0gdGhpcy5zb3VyY2Uub3ZlcnJpZGVDb250ZXh0O1xuICAgIE9iamVjdC5hc3NpZ24ob3ZlcnJpZGVDb250ZXh0LCAkZXZlbnQpO1xuICAgIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQgPSAkZXZlbnQ7XG4gICAgdmFyIG11c3RFdmFsdWF0ZSA9IHRydWU7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMsIG11c3RFdmFsdWF0ZSk7XG4gICAgZGVsZXRlIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQ7XG4gICAgZm9yICh2YXIgcHJvcCBpbiAkZXZlbnQpIHtcbiAgICAgIGRlbGV0ZSBvdmVycmlkZUNvbnRleHRbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgQ2FsbC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQoc291cmNlKSB7XG4gICAgdmFyIF90aGlzMjYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuaXNCb3VuZCkge1xuICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuICAgIGlmICh0aGlzLnNvdXJjZUV4cHJlc3Npb24uYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQodGhpcywgc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMudGFyZ2V0UHJvcGVydHkuc2V0VmFsdWUoZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgcmV0dXJuIF90aGlzMjYuY2FsbFNvdXJjZSgkZXZlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIENhbGwucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICB0aGlzLnRhcmdldFByb3BlcnR5LnNldFZhbHVlKG51bGwpO1xuICB9O1xuXG4gIHJldHVybiBDYWxsO1xufSgpO1xuXG5leHBvcnQgdmFyIFZhbHVlQ29udmVydGVyUmVzb3VyY2UgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZhbHVlQ29udmVydGVyUmVzb3VyY2UobmFtZSkge1xuICAgIFxuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIFZhbHVlQ29udmVydGVyUmVzb3VyY2UuY29udmVudGlvbiA9IGZ1bmN0aW9uIGNvbnZlbnRpb24obmFtZSkge1xuICAgIGlmIChuYW1lLmVuZHNXaXRoKCdWYWx1ZUNvbnZlcnRlcicpKSB7XG4gICAgICByZXR1cm4gbmV3IFZhbHVlQ29udmVydGVyUmVzb3VyY2UoY2FtZWxDYXNlKG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMTQpKSk7XG4gICAgfVxuICB9O1xuXG4gIFZhbHVlQ29udmVydGVyUmVzb3VyY2UucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiBpbml0aWFsaXplKGNvbnRhaW5lciwgdGFyZ2V0KSB7XG4gICAgdGhpcy5pbnN0YW5jZSA9IGNvbnRhaW5lci5nZXQodGFyZ2V0KTtcbiAgfTtcblxuICBWYWx1ZUNvbnZlcnRlclJlc291cmNlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKHJlZ2lzdHJ5LCBuYW1lKSB7XG4gICAgcmVnaXN0cnkucmVnaXN0ZXJWYWx1ZUNvbnZlcnRlcihuYW1lIHx8IHRoaXMubmFtZSwgdGhpcy5pbnN0YW5jZSk7XG4gIH07XG5cbiAgVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQoY29udGFpbmVyLCB0YXJnZXQpIHt9O1xuXG4gIHJldHVybiBWYWx1ZUNvbnZlcnRlclJlc291cmNlO1xufSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVDb252ZXJ0ZXIobmFtZU9yVGFyZ2V0KSB7XG4gIGlmIChuYW1lT3JUYXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbmFtZU9yVGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEucmVzb3VyY2UsIG5ldyBWYWx1ZUNvbnZlcnRlclJlc291cmNlKG5hbWVPclRhcmdldCksIHRhcmdldCk7XG4gICAgfTtcbiAgfVxuXG4gIG1ldGFkYXRhLmRlZmluZShtZXRhZGF0YS5yZXNvdXJjZSwgbmV3IFZhbHVlQ29udmVydGVyUmVzb3VyY2UoKSwgbmFtZU9yVGFyZ2V0KTtcbn1cblxuZXhwb3J0IHZhciBCaW5kaW5nQmVoYXZpb3JSZXNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UobmFtZSkge1xuICAgIFxuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIEJpbmRpbmdCZWhhdmlvclJlc291cmNlLmNvbnZlbnRpb24gPSBmdW5jdGlvbiBjb252ZW50aW9uKG5hbWUpIHtcbiAgICBpZiAobmFtZS5lbmRzV2l0aCgnQmluZGluZ0JlaGF2aW9yJykpIHtcbiAgICAgIHJldHVybiBuZXcgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UoY2FtZWxDYXNlKG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMTUpKSk7XG4gICAgfVxuICB9O1xuXG4gIEJpbmRpbmdCZWhhdmlvclJlc291cmNlLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gaW5pdGlhbGl6ZShjb250YWluZXIsIHRhcmdldCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBjb250YWluZXIuZ2V0KHRhcmdldCk7XG4gIH07XG5cbiAgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocmVnaXN0cnksIG5hbWUpIHtcbiAgICByZWdpc3RyeS5yZWdpc3RlckJpbmRpbmdCZWhhdmlvcihuYW1lIHx8IHRoaXMubmFtZSwgdGhpcy5pbnN0YW5jZSk7XG4gIH07XG5cbiAgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGNvbnRhaW5lciwgdGFyZ2V0KSB7fTtcblxuICByZXR1cm4gQmluZGluZ0JlaGF2aW9yUmVzb3VyY2U7XG59KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kaW5nQmVoYXZpb3IobmFtZU9yVGFyZ2V0KSB7XG4gIGlmIChuYW1lT3JUYXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbmFtZU9yVGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEucmVzb3VyY2UsIG5ldyBCaW5kaW5nQmVoYXZpb3JSZXNvdXJjZShuYW1lT3JUYXJnZXQpLCB0YXJnZXQpO1xuICAgIH07XG4gIH1cblxuICBtZXRhZGF0YS5kZWZpbmUobWV0YWRhdGEucmVzb3VyY2UsIG5ldyBCaW5kaW5nQmVoYXZpb3JSZXNvdXJjZSgpLCBuYW1lT3JUYXJnZXQpO1xufVxuXG5leHBvcnQgdmFyIExpc3RlbmVyRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGlzdGVuZXJFeHByZXNzaW9uKGV2ZW50TWFuYWdlciwgdGFyZ2V0RXZlbnQsIHNvdXJjZUV4cHJlc3Npb24sIGRlbGVnYXRpb25TdHJhdGVneSwgcHJldmVudERlZmF1bHQsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIFxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIgPSBldmVudE1hbmFnZXI7XG4gICAgdGhpcy50YXJnZXRFdmVudCA9IHRhcmdldEV2ZW50O1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy5kZWxlZ2F0aW9uU3RyYXRlZ3kgPSBkZWxlZ2F0aW9uU3RyYXRlZ3k7XG4gICAgdGhpcy5kaXNjcmV0ZSA9IHRydWU7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xuICB9XG5cbiAgTGlzdGVuZXJFeHByZXNzaW9uLnByb3RvdHlwZS5jcmVhdGVCaW5kaW5nID0gZnVuY3Rpb24gY3JlYXRlQmluZGluZyh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IExpc3RlbmVyKHRoaXMuZXZlbnRNYW5hZ2VyLCB0aGlzLnRhcmdldEV2ZW50LCB0aGlzLmRlbGVnYXRpb25TdHJhdGVneSwgdGhpcy5zb3VyY2VFeHByZXNzaW9uLCB0YXJnZXQsIHRoaXMucHJldmVudERlZmF1bHQsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICByZXR1cm4gTGlzdGVuZXJFeHByZXNzaW9uO1xufSgpO1xuXG5leHBvcnQgdmFyIExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaXN0ZW5lcihldmVudE1hbmFnZXIsIHRhcmdldEV2ZW50LCBkZWxlZ2F0aW9uU3RyYXRlZ3ksIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgcHJldmVudERlZmF1bHQsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIFxuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIgPSBldmVudE1hbmFnZXI7XG4gICAgdGhpcy50YXJnZXRFdmVudCA9IHRhcmdldEV2ZW50O1xuICAgIHRoaXMuZGVsZWdhdGlvblN0cmF0ZWd5ID0gZGVsZWdhdGlvblN0cmF0ZWd5O1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xuICB9XG5cbiAgTGlzdGVuZXIucHJvdG90eXBlLmNhbGxTb3VyY2UgPSBmdW5jdGlvbiBjYWxsU291cmNlKGV2ZW50KSB7XG4gICAgdmFyIG92ZXJyaWRlQ29udGV4dCA9IHRoaXMuc291cmNlLm92ZXJyaWRlQ29udGV4dDtcbiAgICBvdmVycmlkZUNvbnRleHQuJGV2ZW50ID0gZXZlbnQ7XG4gICAgdmFyIG11c3RFdmFsdWF0ZSA9IHRydWU7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMsIG11c3RFdmFsdWF0ZSk7XG4gICAgZGVsZXRlIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQ7XG4gICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSAmJiB0aGlzLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIExpc3RlbmVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy5jYWxsU291cmNlKGV2ZW50KTtcbiAgfTtcblxuICBMaXN0ZW5lci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQoc291cmNlKSB7XG4gICAgaWYgKHRoaXMuaXNCb3VuZCkge1xuICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuICAgIGlmICh0aGlzLnNvdXJjZUV4cHJlc3Npb24uYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQodGhpcywgc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMuX2hhbmRsZXIgPSB0aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldEV2ZW50LCB0aGlzLCB0aGlzLmRlbGVnYXRpb25TdHJhdGVneSwgdHJ1ZSk7XG4gIH07XG5cbiAgTGlzdGVuZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgICB0aGlzLl9oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9oYW5kbGVyID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlzdGVuZXI7XG59KCk7XG5cbmZ1bmN0aW9uIGdldEFVKGVsZW1lbnQpIHtcbiAgdmFyIGF1ID0gZWxlbWVudC5hdTtcblxuICBpZiAoYXUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gQXVyZWxpYSBBUElzIGFyZSBkZWZpbmVkIGZvciB0aGUgZWxlbWVudDogXCInICsgZWxlbWVudC50YWdOYW1lICsgJ1wiLicpO1xuICB9XG5cbiAgcmV0dXJuIGF1O1xufVxuXG5leHBvcnQgdmFyIE5hbWVFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOYW1lRXhwcmVzc2lvbihzb3VyY2VFeHByZXNzaW9uLCBhcGlOYW1lLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBcblxuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy5hcGlOYW1lID0gYXBpTmFtZTtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgICB0aGlzLmRpc2NyZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIE5hbWVFeHByZXNzaW9uLnByb3RvdHlwZS5jcmVhdGVCaW5kaW5nID0gZnVuY3Rpb24gY3JlYXRlQmluZGluZyh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IE5hbWVCaW5kZXIodGhpcy5zb3VyY2VFeHByZXNzaW9uLCBOYW1lRXhwcmVzc2lvbi5sb2NhdGVBUEkodGFyZ2V0LCB0aGlzLmFwaU5hbWUpLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gIH07XG5cbiAgTmFtZUV4cHJlc3Npb24ubG9jYXRlQVBJID0gZnVuY3Rpb24gbG9jYXRlQVBJKGVsZW1lbnQsIGFwaU5hbWUpIHtcbiAgICBzd2l0Y2ggKGFwaU5hbWUpIHtcbiAgICAgIGNhc2UgJ2VsZW1lbnQnOlxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIGNhc2UgJ2NvbnRyb2xsZXInOlxuICAgICAgICByZXR1cm4gZ2V0QVUoZWxlbWVudCkuY29udHJvbGxlcjtcbiAgICAgIGNhc2UgJ3ZpZXctbW9kZWwnOlxuICAgICAgICByZXR1cm4gZ2V0QVUoZWxlbWVudCkuY29udHJvbGxlci52aWV3TW9kZWw7XG4gICAgICBjYXNlICd2aWV3JzpcbiAgICAgICAgcmV0dXJuIGdldEFVKGVsZW1lbnQpLmNvbnRyb2xsZXIudmlldztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRBVShlbGVtZW50KVthcGlOYW1lXTtcblxuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byByZWZlcmVuY2UgXCInICsgYXBpTmFtZSArICdcIiwgYnV0IGl0IHdhcyBub3QgZm91bmQgYW1vbmdzdCB0aGUgdGFyZ2V0XFwncyBBUEkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0LnZpZXdNb2RlbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE5hbWVFeHByZXNzaW9uO1xufSgpO1xuXG52YXIgTmFtZUJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTmFtZUJpbmRlcihzb3VyY2VFeHByZXNzaW9uLCB0YXJnZXQsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIFxuXG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgfVxuXG4gIE5hbWVCaW5kZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLmlzQm91bmQpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKSB7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uYmluZCh0aGlzLCBzb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmFzc2lnbih0aGlzLnNvdXJjZSwgdGhpcy50YXJnZXQsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBOYW1lQmluZGVyLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpID09PSB0aGlzLnRhcmdldCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmFzc2lnbih0aGlzLnNvdXJjZSwgbnVsbCwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTmFtZUJpbmRlcjtcbn0oKTtcblxudmFyIExvb2t1cEZ1bmN0aW9ucyA9IHtcbiAgYmluZGluZ0JlaGF2aW9yczogZnVuY3Rpb24gYmluZGluZ0JlaGF2aW9ycyhuYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHZhbHVlQ29udmVydGVyczogZnVuY3Rpb24gdmFsdWVDb252ZXJ0ZXJzKG5hbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBCaW5kaW5nRW5naW5lID0gKF90ZW1wMiA9IF9jbGFzczE0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCaW5kaW5nRW5naW5lKG9ic2VydmVyTG9jYXRvciwgcGFyc2VyKSB7XG4gICAgXG5cbiAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG9ic2VydmVyTG9jYXRvcjtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgfVxuXG4gIEJpbmRpbmdFbmdpbmUucHJvdG90eXBlLmNyZWF0ZUJpbmRpbmdFeHByZXNzaW9uID0gZnVuY3Rpb24gY3JlYXRlQmluZGluZ0V4cHJlc3Npb24odGFyZ2V0UHJvcGVydHksIHNvdXJjZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgbW9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogYmluZGluZ01vZGUudG9WaWV3O1xuICAgIHZhciBsb29rdXBGdW5jdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IExvb2t1cEZ1bmN0aW9ucztcblxuICAgIHJldHVybiBuZXcgQmluZGluZ0V4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCB0aGlzLnBhcnNlci5wYXJzZShzb3VyY2VFeHByZXNzaW9uKSwgbW9kZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfTtcblxuICBCaW5kaW5nRW5naW5lLnByb3RvdHlwZS5wcm9wZXJ0eU9ic2VydmVyID0gZnVuY3Rpb24gcHJvcGVydHlPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIHZhciBfdGhpczI3ID0gdGhpcztcblxuICAgIHJldHVybiB7XG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfdGhpczI3Lm9ic2VydmVyTG9jYXRvci5nZXRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIG9ic2VydmVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci51bnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgQmluZGluZ0VuZ2luZS5wcm90b3R5cGUuY29sbGVjdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gY29sbGVjdGlvbk9ic2VydmVyKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMyOCA9IHRoaXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gdm9pZCAwO1xuICAgICAgICBpZiAoY29sbGVjdGlvbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBfdGhpczI4Lm9ic2VydmVyTG9jYXRvci5nZXRBcnJheU9ic2VydmVyKGNvbGxlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICBvYnNlcnZlciA9IF90aGlzMjgub2JzZXJ2ZXJMb2NhdG9yLmdldE1hcE9ic2VydmVyKGNvbGxlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICBvYnNlcnZlciA9IF90aGlzMjgub2JzZXJ2ZXJMb2NhdG9yLmdldFNldE9ic2VydmVyKGNvbGxlY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29sbGVjdGlvbiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEFycmF5LCBNYXAgb3IgU2V0LicpO1xuICAgICAgICB9XG4gICAgICAgIG9ic2VydmVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci51bnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgQmluZGluZ0VuZ2luZS5wcm90b3R5cGUuZXhwcmVzc2lvbk9ic2VydmVyID0gZnVuY3Rpb24gZXhwcmVzc2lvbk9ic2VydmVyKGJpbmRpbmdDb250ZXh0LCBleHByZXNzaW9uKSB7XG4gICAgdmFyIHNjb3BlID0geyBiaW5kaW5nQ29udGV4dDogYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dDogY3JlYXRlT3ZlcnJpZGVDb250ZXh0KGJpbmRpbmdDb250ZXh0KSB9O1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbk9ic2VydmVyKHNjb3BlLCB0aGlzLnBhcnNlci5wYXJzZShleHByZXNzaW9uKSwgdGhpcy5vYnNlcnZlckxvY2F0b3IsIExvb2t1cEZ1bmN0aW9ucyk7XG4gIH07XG5cbiAgQmluZGluZ0VuZ2luZS5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uID0gZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXIucGFyc2UoZXhwcmVzc2lvbik7XG4gIH07XG5cbiAgQmluZGluZ0VuZ2luZS5wcm90b3R5cGUucmVnaXN0ZXJBZGFwdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXJBZGFwdGVyKGFkYXB0ZXIpIHtcbiAgICB0aGlzLm9ic2VydmVyTG9jYXRvci5hZGRBZGFwdGVyKGFkYXB0ZXIpO1xuICB9O1xuXG4gIHJldHVybiBCaW5kaW5nRW5naW5lO1xufSgpLCBfY2xhc3MxNC5pbmplY3QgPSBbT2JzZXJ2ZXJMb2NhdG9yLCBQYXJzZXJdLCBfdGVtcDIpO1xuXG52YXIgc2V0UHJvdG8gPSBTZXQucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBfZ2V0U2V0T2JzZXJ2ZXIodGFza1F1ZXVlLCBzZXQpIHtcbiAgcmV0dXJuIE1vZGlmeVNldE9ic2VydmVyLmZvcih0YXNrUXVldWUsIHNldCk7XG59XG5cbnZhciBNb2RpZnlTZXRPYnNlcnZlciA9IGZ1bmN0aW9uIChfTW9kaWZ5Q29sbGVjdGlvbk9ic2UzKSB7XG4gIF9pbmhlcml0cyhNb2RpZnlTZXRPYnNlcnZlciwgX01vZGlmeUNvbGxlY3Rpb25PYnNlMyk7XG5cbiAgZnVuY3Rpb24gTW9kaWZ5U2V0T2JzZXJ2ZXIodGFza1F1ZXVlLCBzZXQpIHtcbiAgICBcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfTW9kaWZ5Q29sbGVjdGlvbk9ic2UzLmNhbGwodGhpcywgdGFza1F1ZXVlLCBzZXQpKTtcbiAgfVxuXG4gIE1vZGlmeVNldE9ic2VydmVyLmZvciA9IGZ1bmN0aW9uIF9mb3IodGFza1F1ZXVlLCBzZXQpIHtcbiAgICBpZiAoISgnX19zZXRfb2JzZXJ2ZXJfXycgaW4gc2V0KSkge1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShzZXQsICdfX3NldF9vYnNlcnZlcl9fJywge1xuICAgICAgICB2YWx1ZTogTW9kaWZ5U2V0T2JzZXJ2ZXIuY3JlYXRlKHRhc2tRdWV1ZSwgc2V0KSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2V0Ll9fc2V0X29ic2VydmVyX187XG4gIH07XG5cbiAgTW9kaWZ5U2V0T2JzZXJ2ZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHRhc2tRdWV1ZSwgc2V0KSB7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE1vZGlmeVNldE9ic2VydmVyKHRhc2tRdWV1ZSwgc2V0KTtcblxuICAgIHZhciBwcm90byA9IHNldFByb3RvO1xuICAgIGlmIChwcm90by5hZGQgIT09IHNldC5hZGQgfHwgcHJvdG8uZGVsZXRlICE9PSBzZXQuZGVsZXRlIHx8IHByb3RvLmNsZWFyICE9PSBzZXQuY2xlYXIpIHtcbiAgICAgIHByb3RvID0ge1xuICAgICAgICBhZGQ6IHNldC5hZGQsXG4gICAgICAgIGRlbGV0ZTogc2V0LmRlbGV0ZSxcbiAgICAgICAgY2xlYXI6IHNldC5jbGVhclxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXQuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHR5cGUgPSAnYWRkJztcbiAgICAgIHZhciBvbGRTaXplID0gc2V0LnNpemU7XG4gICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IHByb3RvLmFkZC5hcHBseShzZXQsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgaGFzVmFsdWUgPSBzZXQuc2l6ZSA9PT0gb2xkU2l6ZTtcbiAgICAgIGlmICghaGFzVmFsdWUpIHtcbiAgICAgICAgb2JzZXJ2ZXIuYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgIG9iamVjdDogc2V0LFxuICAgICAgICAgIHZhbHVlOiBBcnJheS5mcm9tKHNldCkucG9wKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2V0LmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBoYXNWYWx1ZSA9IHNldC5oYXMoYXJndW1lbnRzWzBdKTtcbiAgICAgIHZhciBtZXRob2RDYWxsUmVzdWx0ID0gcHJvdG8uZGVsZXRlLmFwcGx5KHNldCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgIG9iamVjdDogc2V0LFxuICAgICAgICAgIHZhbHVlOiBhcmd1bWVudHNbMF1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2V0LmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG1ldGhvZENhbGxSZXN1bHQgPSBwcm90by5jbGVhci5hcHBseShzZXQsIGFyZ3VtZW50cyk7XG4gICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnY2xlYXInLFxuICAgICAgICBvYmplY3Q6IHNldFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9ic2VydmVyO1xuICB9O1xuXG4gIHJldHVybiBNb2RpZnlTZXRPYnNlcnZlcjtcbn0oTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmFibGUodGFyZ2V0T3JDb25maWcsIGtleSwgZGVzY3JpcHRvcikge1xuICBmdW5jdGlvbiBkZWNvKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLCBjb25maWcpIHtcbiAgICB2YXIgaXNDbGFzc0RlY29yYXRvciA9IGtleSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0NsYXNzRGVjb3JhdG9yKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAga2V5ID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBjb25maWcubmFtZTtcbiAgICB9XG5cbiAgICB2YXIgaW5uZXJQcm9wZXJ0eU5hbWUgPSAnXycgKyBrZXk7XG4gICAgdmFyIGlubmVyUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH07XG5cbiAgICB2YXIgY2FsbGJhY2tOYW1lID0gY29uZmlnICYmIGNvbmZpZy5jaGFuZ2VIYW5kbGVyIHx8IGtleSArICdDaGFuZ2VkJztcblxuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW5uZXJQcm9wZXJ0eURlc2NyaXB0b3IudmFsdWUgPSBkZXNjcmlwdG9yLmluaXRpYWxpemVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc2NyaXB0b3IgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoISgnZW51bWVyYWJsZScgaW4gZGVzY3JpcHRvcikpIHtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGVsZXRlIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgZGVsZXRlIGRlc2NyaXB0b3Iud3JpdGFibGU7XG4gICAgZGVsZXRlIGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXI7XG5cbiAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgaW5uZXJQcm9wZXJ0eU5hbWUsIGlubmVyUHJvcGVydHlEZXNjcmlwdG9yKTtcblxuICAgIGRlc2NyaXB0b3IuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXNbaW5uZXJQcm9wZXJ0eU5hbWVdO1xuICAgIH07XG4gICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXNbaW5uZXJQcm9wZXJ0eU5hbWVdO1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXNbaW5uZXJQcm9wZXJ0eU5hbWVdID0gbmV3VmFsdWU7XG4gICAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGlubmVyUHJvcGVydHlOYW1lLCB7IGVudW1lcmFibGU6IGZhbHNlIH0pO1xuXG4gICAgICBpZiAodGhpc1tjYWxsYmFja05hbWVdKSB7XG4gICAgICAgIHRoaXNbY2FsbGJhY2tOYW1lXShuZXdWYWx1ZSwgb2xkVmFsdWUsIGtleSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlc2NyaXB0b3IuZ2V0LmRlcGVuZGVuY2llcyA9IFtpbm5lclByb3BlcnR5TmFtZV07XG5cbiAgICBpZiAoaXNDbGFzc0RlY29yYXRvcikge1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodCwgaywgZCkge1xuICAgICAgcmV0dXJuIGRlY28odCwgaywgZCwgdGFyZ2V0T3JDb25maWcpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGRlY28odGFyZ2V0T3JDb25maWcsIGtleSwgZGVzY3JpcHRvcik7XG59XG5cbnZhciBzaWduYWxzID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0QmluZGluZ1RvU2lnbmFsKGJpbmRpbmcsIG5hbWUpIHtcbiAgaWYgKCFzaWduYWxzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgc2lnbmFsc1tuYW1lXSA9IDA7XG4gIH1cbiAgYmluZGluZy5vYnNlcnZlUHJvcGVydHkoc2lnbmFscywgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWxCaW5kaW5ncyhuYW1lKSB7XG4gIGlmIChzaWduYWxzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgc2lnbmFsc1tuYW1lXSsrO1xuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtYmluZGluZy9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtYmluZGluZy5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS1iaW5kaW5nXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsIlxuXG5pbXBvcnQgKiBhcyBMb2dNYW5hZ2VyIGZyb20gJ2F1cmVsaWEtbG9nZ2luZyc7XG5cbnZhciBsb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcignZXZlbnQtYWdncmVnYXRvcicpO1xuXG52YXIgSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSGFuZGxlcihtZXNzYWdlVHlwZSwgY2FsbGJhY2spIHtcbiAgICBcblxuICAgIHRoaXMubWVzc2FnZVR5cGUgPSBtZXNzYWdlVHlwZTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICBIYW5kbGVyLnByb3RvdHlwZS5oYW5kbGUgPSBmdW5jdGlvbiBoYW5kbGUobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgdGhpcy5tZXNzYWdlVHlwZSkge1xuICAgICAgdGhpcy5jYWxsYmFjay5jYWxsKG51bGwsIG1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gSGFuZGxlcjtcbn0oKTtcblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soY2FsbGJhY2ssIGRhdGEsIGV2ZW50KSB7XG4gIHRyeSB7XG4gICAgY2FsbGJhY2soZGF0YSwgZXZlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUhhbmRsZXIoaGFuZGxlciwgZGF0YSkge1xuICB0cnkge1xuICAgIGhhbmRsZXIuaGFuZGxlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmVycm9yKGUpO1xuICB9XG59XG5cbmV4cG9ydCB2YXIgRXZlbnRBZ2dyZWdhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFdmVudEFnZ3JlZ2F0b3IoKSB7XG4gICAgXG5cbiAgICB0aGlzLmV2ZW50TG9va3VwID0ge307XG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIEV2ZW50QWdncmVnYXRvci5wcm90b3R5cGUucHVibGlzaCA9IGZ1bmN0aW9uIHB1Ymxpc2goZXZlbnQsIGRhdGEpIHtcbiAgICB2YXIgc3Vic2NyaWJlcnMgPSB2b2lkIDA7XG4gICAgdmFyIGkgPSB2b2lkIDA7XG5cbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50IHdhcyBpbnZhbGlkLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdWJzY3JpYmVycyA9IHRoaXMuZXZlbnRMb29rdXBbZXZlbnRdO1xuICAgICAgaWYgKHN1YnNjcmliZXJzKSB7XG4gICAgICAgIHN1YnNjcmliZXJzID0gc3Vic2NyaWJlcnMuc2xpY2UoKTtcbiAgICAgICAgaSA9IHN1YnNjcmliZXJzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgaW52b2tlQ2FsbGJhY2soc3Vic2NyaWJlcnNbaV0sIGRhdGEsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmVycyA9IHRoaXMubWVzc2FnZUhhbmRsZXJzLnNsaWNlKCk7XG4gICAgICBpID0gc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGludm9rZUhhbmRsZXIoc3Vic2NyaWJlcnNbaV0sIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRXZlbnRBZ2dyZWdhdG9yLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB2b2lkIDA7XG4gICAgdmFyIHN1YnNjcmliZXJzID0gdm9pZCAwO1xuXG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBjaGFubmVsL3R5cGUgd2FzIGludmFsaWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICAgIHN1YnNjcmliZXJzID0gdGhpcy5ldmVudExvb2t1cFtldmVudF0gfHwgKHRoaXMuZXZlbnRMb29rdXBbZXZlbnRdID0gW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVyID0gbmV3IEhhbmRsZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgIHN1YnNjcmliZXJzID0gdGhpcy5tZXNzYWdlSGFuZGxlcnM7XG4gICAgfVxuXG4gICAgc3Vic2NyaWJlcnMucHVzaChoYW5kbGVyKTtcblxuICAgIHJldHVybiB7XG4gICAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICB2YXIgaWR4ID0gc3Vic2NyaWJlcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICBzdWJzY3JpYmVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgRXZlbnRBZ2dyZWdhdG9yLnByb3RvdHlwZS5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24gc3Vic2NyaWJlT25jZShldmVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzY3JpYmUoZXZlbnQsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBzdWIuZGlzcG9zZSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGEsIGIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1YjtcbiAgfTtcblxuICByZXR1cm4gRXZlbnRBZ2dyZWdhdG9yO1xufSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZUV2ZW50c0luKG9iaikge1xuICB2YXIgZWEgPSBuZXcgRXZlbnRBZ2dyZWdhdG9yKCk7XG5cbiAgb2JqLnN1YnNjcmliZU9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGVhLnN1YnNjcmliZU9uY2UoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBvYmouc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBlYS5zdWJzY3JpYmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBvYmoucHVibGlzaCA9IGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgIGVhLnB1Ymxpc2goZXZlbnQsIGRhdGEpO1xuICB9O1xuXG4gIHJldHVybiBlYTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgY29uZmlnLmluc3RhbmNlKEV2ZW50QWdncmVnYXRvciwgaW5jbHVkZUV2ZW50c0luKGNvbmZpZy5hdXJlbGlhKSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtZXZlbnQtYWdncmVnYXRvci9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtZXZlbnQtYWdncmVnYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS1ldmVudC1hZ2dyZWdhdG9yXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsImltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbic7XG5leHBvcnQgKiBmcm9tICdhdXJlbGlhLWJpbmRpbmcnO1xuZXhwb3J0ICogZnJvbSAnYXVyZWxpYS1tZXRhZGF0YSc7XG5pbXBvcnQgeyBIdG1sQmVoYXZpb3JSZXNvdXJjZSwgVmlld0VuZ2luZSwgQmluZGluZ0xhbmd1YWdlLCBUZW1wbGF0aW5nRW5naW5lLCBDb21wb3NpdGlvblRyYW5zYWN0aW9uLCBWaWV3U2xvdCwgVmlld1Jlc291cmNlcyB9IGZyb20gJ2F1cmVsaWEtdGVtcGxhdGluZyc7XG5leHBvcnQgKiBmcm9tICdhdXJlbGlhLXRlbXBsYXRpbmcnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnYXVyZWxpYS1sb2FkZXInO1xuZXhwb3J0ICogZnJvbSAnYXVyZWxpYS1sb2FkZXInO1xuZXhwb3J0ICogZnJvbSAnYXVyZWxpYS10YXNrLXF1ZXVlJztcbmltcG9ydCB7IGpvaW4sIHJlbGF0aXZlVG9GaWxlIH0gZnJvbSAnYXVyZWxpYS1wYXRoJztcbmV4cG9ydCAqIGZyb20gJ2F1cmVsaWEtcGF0aCc7XG5pbXBvcnQgeyBET00sIFBMQVRGT1JNIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuZXhwb3J0ICogZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0ICogYXMgVGhlTG9nTWFuYWdlciBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuZXhwb3J0IHsgVGhlTG9nTWFuYWdlciBhcyBMb2dNYW5hZ2VyIH07XG5cbnZhciBsb2dnZXIgPSBUaGVMb2dNYW5hZ2VyLmdldExvZ2dlcignYXVyZWxpYScpO1xyXG52YXIgZXh0UGF0dGVybiA9IC9cXC5bXi8uXSskLztcclxuZnVuY3Rpb24gcnVuVGFza3MoY29uZmlnLCB0YXNrcykge1xyXG4gICAgdmFyIGN1cnJlbnQ7XHJcbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjdXJyZW50ID0gdGFza3Muc2hpZnQoKTtcclxuICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGN1cnJlbnQoY29uZmlnKSkudGhlbihuZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBuZXh0KCk7XHJcbn1cclxuZnVuY3Rpb24gbG9hZFBsdWdpbihmd0NvbmZpZywgbG9hZGVyLCBpbmZvKSB7XHJcbiAgICBsb2dnZXIuZGVidWcoXCJMb2FkaW5nIHBsdWdpbiBcIi5jb25jYXQoaW5mby5tb2R1bGVJZCwgXCIuXCIpKTtcclxuICAgIGlmICh0eXBlb2YgaW5mby5tb2R1bGVJZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBmd0NvbmZpZy5yZXNvdXJjZXNSZWxhdGl2ZVRvID0gaW5mby5yZXNvdXJjZXNSZWxhdGl2ZVRvO1xyXG4gICAgICAgIHZhciBpZCA9IGluZm8ubW9kdWxlSWQ7XHJcbiAgICAgICAgaWYgKGluZm8ucmVzb3VyY2VzUmVsYXRpdmVUby5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkZXIubm9ybWFsaXplKGluZm8ubW9kdWxlSWQsIGluZm8ucmVzb3VyY2VzUmVsYXRpdmVUb1sxXSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub3JtYWxpemVkSWQpIHsgcmV0dXJuIF9sb2FkUGx1Z2luKG5vcm1hbGl6ZWRJZCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX2xvYWRQbHVnaW4oaWQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGluZm8uY29uZmlndXJlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgaWYgKGZ3Q29uZmlnLmNvbmZpZ3VyZWRQbHVnaW5zLmluZGV4T2YoaW5mby5jb25maWd1cmUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ3Q29uZmlnLmNvbmZpZ3VyZWRQbHVnaW5zLnB1c2goaW5mby5jb25maWd1cmUpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaW5mby5jb25maWd1cmUuY2FsbChudWxsLCBmd0NvbmZpZywgaW5mby5jb25maWcgfHwge30pKTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihpbnZhbGlkQ29uZmlnTXNnKGluZm8ubW9kdWxlSWQgfHwgaW5mby5jb25maWd1cmUsICdwbHVnaW4nKSk7XHJcbiAgICBmdW5jdGlvbiBfbG9hZFBsdWdpbihtb2R1bGVJZCkge1xyXG4gICAgICAgIHJldHVybiBsb2FkZXIubG9hZE1vZHVsZShtb2R1bGVJZCkudGhlbihmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICBpZiAoJ2NvbmZpZ3VyZScgaW4gbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZ3Q29uZmlnLmNvbmZpZ3VyZWRQbHVnaW5zLmluZGV4T2YobS5jb25maWd1cmUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobS5jb25maWd1cmUoZndDb25maWcsIGluZm8uY29uZmlnIHx8IHt9KSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZndDb25maWcuY29uZmlndXJlZFBsdWdpbnMucHVzaChtLmNvbmZpZ3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZndDb25maWcucmVzb3VyY2VzUmVsYXRpdmVUbyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQ29uZmlndXJlZCBwbHVnaW4gXCIuY29uY2F0KGluZm8ubW9kdWxlSWQsIFwiLlwiKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmd0NvbmZpZy5yZXNvdXJjZXNSZWxhdGl2ZVRvID0gbnVsbDtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiTG9hZGVkIHBsdWdpbiBcIi5jb25jYXQoaW5mby5tb2R1bGVJZCwgXCIuXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBsb2FkUmVzb3VyY2VzKGF1cmVsaWEsIHJlc291cmNlc1RvTG9hZCwgYXBwUmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMocmVzb3VyY2VzVG9Mb2FkKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICB2YXIgdmlld0VuZ2luZSA9IGF1cmVsaWEuY29udGFpbmVyLmdldChWaWV3RW5naW5lKTtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhyZXNvdXJjZXNUb0xvYWQpLm1hcChmdW5jdGlvbiAobikgeyByZXR1cm4gX25vcm1hbGl6ZShyZXNvdXJjZXNUb0xvYWRbbl0pOyB9KSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZHMpIHtcclxuICAgICAgICB2YXIgbmFtZXMgPSBbXTtcclxuICAgICAgICB2YXIgaW1wb3J0SWRzID0gW107XHJcbiAgICAgICAgbG9hZHMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xyXG4gICAgICAgICAgICBuYW1lcy5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIGltcG9ydElkcy5wdXNoKGwuaW1wb3J0SWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB2aWV3RW5naW5lLmltcG9ydFZpZXdSZXNvdXJjZXMoaW1wb3J0SWRzLCBuYW1lcywgYXBwUmVzb3VyY2VzKTtcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gX25vcm1hbGl6ZShsb2FkKSB7XHJcbiAgICAgICAgdmFyIG1vZHVsZUlkID0gbG9hZC5tb2R1bGVJZDtcclxuICAgICAgICB2YXIgZXh0ID0gZ2V0RXh0KG1vZHVsZUlkKTtcclxuICAgICAgICBpZiAoaXNPdGhlclJlc291cmNlKG1vZHVsZUlkKSkge1xyXG4gICAgICAgICAgICBtb2R1bGVJZCA9IHJlbW92ZUV4dChtb2R1bGVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhdXJlbGlhLmxvYWRlci5ub3JtYWxpemUobW9kdWxlSWQsIGxvYWQucmVsYXRpdmVUbylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGxvYWQubW9kdWxlSWQsXHJcbiAgICAgICAgICAgICAgICBpbXBvcnRJZDogaXNPdGhlclJlc291cmNlKGxvYWQubW9kdWxlSWQpID8gYWRkT3JpZ2luYWxFeHQobm9ybWFsaXplZCwgZXh0KSA6IG5vcm1hbGl6ZWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzT3RoZXJSZXNvdXJjZShuYW1lKSB7XHJcbiAgICAgICAgdmFyIGV4dCA9IGdldEV4dChuYW1lKTtcclxuICAgICAgICBpZiAoIWV4dClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChleHQgPT09ICcnKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKGV4dCA9PT0gJy5qcycgfHwgZXh0ID09PSAnLnRzJylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlRXh0KG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gbmFtZS5yZXBsYWNlKGV4dFBhdHRlcm4sICcnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE9yaWdpbmFsRXh0KG5vcm1hbGl6ZWQsIGV4dCkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVFeHQobm9ybWFsaXplZCkgKyAnLicgKyBleHQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0RXh0KG5hbWUpIHtcclxuICAgIHZhciBtYXRjaCA9IG5hbWUubWF0Y2goZXh0UGF0dGVybik7XHJcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiAobWF0Y2hbMF0uc3BsaXQoJy4nKSlbMV07XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbG9hZEJlaGF2aW9ycyhjb25maWcpIHtcclxuICAgIHJldHVybiBQcm9taXNlLmFsbChjb25maWcuYmVoYXZpb3JzVG9Mb2FkLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5sb2FkKGNvbmZpZy5jb250YWluZXIsIG0udGFyZ2V0KTsgfSkpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbmZpZy5iZWhhdmlvcnNUb0xvYWQgPSBudWxsO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gYXNzZXJ0UHJvY2Vzc2VkKHBsdWdpbnMpIHtcclxuICAgIGlmIChwbHVnaW5zLnByb2Nlc3NlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBjb25maWcgaW5zdGFuY2UgaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkLiBUbyBsb2FkIG1vcmUgcGx1Z2lucyBvciBnbG9iYWwgcmVzb3VyY2VzLCBjcmVhdGUgYSBuZXcgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiBpbnN0YW5jZS4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbnZhbGlkQ29uZmlnTXNnKGNmZywgdHlwZSkge1xyXG4gICAgcmV0dXJuIFwiSW52YWxpZCBcIi5jb25jYXQodHlwZSwgXCIgW1wiKS5jb25jYXQoY2ZnLCBcIl0sIFwiKS5jb25jYXQodHlwZSwgXCIgbXVzdCBiZSBzcGVjaWZpZWQgYXMgZnVuY3Rpb25zIG9yIHJlbGF0aXZlIG1vZHVsZSBJRHMuXCIpO1xyXG59XHJcbnZhciBGcmFtZXdvcmtDb25maWd1cmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24oYXVyZWxpYSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hdXJlbGlhID0gYXVyZWxpYTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGF1cmVsaWEuY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuaW5mbyA9IFtdO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcmVUYXNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMucG9zdFRhc2tzID0gW107XHJcbiAgICAgICAgdGhpcy5iZWhhdmlvcnNUb0xvYWQgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbmZpZ3VyZWRQbHVnaW5zID0gW107XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXNUb0xvYWQgPSB7fTtcclxuICAgICAgICB0aGlzLnByZVRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gYXVyZWxpYS5sb2FkZXIubm9ybWFsaXplKCdhdXJlbGlhLWJvb3RzdHJhcHBlcicsIHVuZGVmaW5lZClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIF90aGlzLmJvb3RzdHJhcHBlck5hbWUgPSBuYW1lOyB9KTsgfSk7XHJcbiAgICAgICAgdGhpcy5wb3N0VGFzayhmdW5jdGlvbiAoKSB7IHJldHVybiBsb2FkUmVzb3VyY2VzKGF1cmVsaWEsIF90aGlzLnJlc291cmNlc1RvTG9hZCwgYXVyZWxpYS5yZXNvdXJjZXMpOyB9KTtcclxuICAgIH1cclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmluc3RhbmNlID0gZnVuY3Rpb24gKHR5cGUsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZSh0eXBlLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuc2luZ2xldG9uID0gZnVuY3Rpb24gKHR5cGUsIGltcGxlbWVudGF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24odHlwZSwgaW1wbGVtZW50YXRpb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnRyYW5zaWVudCA9IGZ1bmN0aW9uICh0eXBlLCBpbXBsZW1lbnRhdGlvbikge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnJlZ2lzdGVyVHJhbnNpZW50KHR5cGUsIGltcGxlbWVudGF0aW9uKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5wcmVUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgICAgICBhc3NlcnRQcm9jZXNzZWQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcmVUYXNrcy5wdXNoKHRhc2spO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnBvc3RUYXNrID0gZnVuY3Rpb24gKHRhc2spIHtcclxuICAgICAgICBhc3NlcnRQcm9jZXNzZWQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wb3N0VGFza3MucHVzaCh0YXNrKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5mZWF0dXJlID0gZnVuY3Rpb24gKHBsdWdpbiwgY29uZmlnKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHt9OyB9XHJcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgcGx1Z2luKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzSW5kZXggPSAvXFwvaW5kZXgkL2kudGVzdChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZHVsZUlkID0gaGFzSW5kZXggfHwgZ2V0RXh0KHBsdWdpbikgPyBwbHVnaW4gOiBwbHVnaW4gKyAnL2luZGV4JztcclxuICAgICAgICAgICAgICAgIHZhciByb290ID0gaGFzSW5kZXggPyBwbHVnaW4uc2xpY2UoMCwgLTYpIDogcGx1Z2luO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmZvLnB1c2goeyBtb2R1bGVJZDogbW9kdWxlSWQsIHJlc291cmNlc1JlbGF0aXZlVG86IFtyb290LCAnJ10sIGNvbmZpZzogY29uZmlnIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5mby5wdXNoKHsgY29uZmlndXJlOiBwbHVnaW4sIGNvbmZpZzogY29uZmlnIHx8IHt9IH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZENvbmZpZ01zZyhwbHVnaW4sICdmZWF0dXJlJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5nbG9iYWxSZXNvdXJjZXMgPSBmdW5jdGlvbiAocmVzb3VyY2VzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBhc3NlcnRQcm9jZXNzZWQodGhpcyk7XHJcbiAgICAgICAgdmFyIHRvQWRkID0gQXJyYXkuaXNBcnJheShyZXNvdXJjZXMpID8gcmVzb3VyY2VzIDogYXJndW1lbnRzO1xyXG4gICAgICAgIHZhciByZXNvdXJjZTtcclxuICAgICAgICB2YXIgcmVzb3VyY2VzUmVsYXRpdmVUbyA9IHRoaXMucmVzb3VyY2VzUmVsYXRpdmVUbyB8fCBbJycsICcnXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0b0FkZC5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIHJlc291cmNlID0gdG9BZGRbaV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHJlc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IHJlc291cmNlc1JlbGF0aXZlVG9bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyYW5kUGFyZW50ID0gcmVzb3VyY2VzUmVsYXRpdmVUb1sxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZV8xID0gcmVzb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXNvdXJjZS5zdGFydHNXaXRoKCcuLycpIHx8IHJlc291cmNlLnN0YXJ0c1dpdGgoJy4uLycpKSAmJiBwYXJlbnRfMSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZV8xID0gam9pbihwYXJlbnRfMSwgcmVzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc291cmNlc1RvTG9hZFtuYW1lXzFdID0geyBtb2R1bGVJZDogbmFtZV8xLCByZWxhdGl2ZVRvOiBncmFuZFBhcmVudCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRhID0gdGhpcy5hdXJlbGlhLnJlc291cmNlcy5hdXRvUmVnaXN0ZXIodGhpcy5jb250YWluZXIsIHJlc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YSBpbnN0YW5jZW9mIEh0bWxCZWhhdmlvclJlc291cmNlICYmIG1ldGEuZWxlbWVudE5hbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYmVoYXZpb3JzVG9Mb2FkLnB1c2gobWV0YSkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdFRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9hZEJlaGF2aW9ycyhfdGhpcyk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaW52YWxpZENvbmZpZ01zZyhyZXNvdXJjZSwgJ3Jlc291cmNlJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdsb2JhbE5hbWUgPSBmdW5jdGlvbiAocmVzb3VyY2VQYXRoLCBuZXdOYW1lKSB7XHJcbiAgICAgICAgYXNzZXJ0UHJvY2Vzc2VkKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzVG9Mb2FkW3Jlc291cmNlUGF0aF0gPSB7IG1vZHVsZUlkOiBuZXdOYW1lLCByZWxhdGl2ZVRvOiAnJyB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnBsdWdpbiA9IGZ1bmN0aW9uIChwbHVnaW4sIHBsdWdpbkNvbmZpZykge1xyXG4gICAgICAgIGFzc2VydFByb2Nlc3NlZCh0aGlzKTtcclxuICAgICAgICB2YXIgaW5mbztcclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBwbHVnaW4pIHtcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgIGluZm8gPSB7IG1vZHVsZUlkOiBwbHVnaW4sIHJlc291cmNlc1JlbGF0aXZlVG86IFtwbHVnaW4sICcnXSwgY29uZmlnOiBwbHVnaW5Db25maWcgfHwge30gfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XHJcbiAgICAgICAgICAgICAgICBpbmZvID0geyBjb25maWd1cmU6IHBsdWdpbiwgY29uZmlnOiBwbHVnaW5Db25maWcgfHwge30gfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGludmFsaWRDb25maWdNc2cocGx1Z2luLCAncGx1Z2luJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluZm8ucHVzaChpbmZvKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5fYWRkTm9ybWFsaXplZFBsdWdpbiA9IGZ1bmN0aW9uIChuYW1lLCBjb25maWcpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwbHVnaW4gPSB7IG1vZHVsZUlkOiBuYW1lLCByZXNvdXJjZXNSZWxhdGl2ZVRvOiBbbmFtZSwgJyddLCBjb25maWc6IGNvbmZpZyB8fCB7fSB9O1xyXG4gICAgICAgIHRoaXMuaW5mby5wdXNoKHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5wcmVUYXNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlVG8gPSBbbmFtZSwgX3RoaXMuYm9vdHN0cmFwcGVyTmFtZV07XHJcbiAgICAgICAgICAgIHBsdWdpbi5tb2R1bGVJZCA9IG5hbWU7XHJcbiAgICAgICAgICAgIHBsdWdpbi5yZXNvdXJjZXNSZWxhdGl2ZVRvID0gcmVsYXRpdmVUbztcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmRlZmF1bHRCaW5kaW5nTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZE5vcm1hbGl6ZWRQbHVnaW4oJ2F1cmVsaWEtdGVtcGxhdGluZy1iaW5kaW5nJyk7XHJcbiAgICB9O1xyXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUucm91dGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLXRlbXBsYXRpbmctcm91dGVyJyk7XHJcbiAgICB9O1xyXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuaGlzdG9yeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkTm9ybWFsaXplZFBsdWdpbignYXVyZWxpYS1oaXN0b3J5LWJyb3dzZXInKTtcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5kZWZhdWx0UmVzb3VyY2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLXRlbXBsYXRpbmctcmVzb3VyY2VzJyk7XHJcbiAgICB9O1xyXG4gICAgRnJhbWV3b3JrQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuZXZlbnRBZ2dyZWdhdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hZGROb3JtYWxpemVkUGx1Z2luKCdhdXJlbGlhLWV2ZW50LWFnZ3JlZ2F0b3InKTtcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5iYXNpY0NvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdEJpbmRpbmdMYW5ndWFnZSgpLmRlZmF1bHRSZXNvdXJjZXMoKS5ldmVudEFnZ3JlZ2F0b3IoKTtcclxuICAgIH07XHJcbiAgICBGcmFtZXdvcmtDb25maWd1cmF0aW9uLnByb3RvdHlwZS5zdGFuZGFyZENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzaWNDb25maWd1cmF0aW9uKCkuaGlzdG9yeSgpLnJvdXRlcigpO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmRldmVsb3BtZW50TG9nZ2luZyA9IGZ1bmN0aW9uIChsZXZlbCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGxvZ0xldmVsID0gbGV2ZWwgPyBUaGVMb2dNYW5hZ2VyLmxvZ0xldmVsW2xldmVsXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAobG9nTGV2ZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsb2dMZXZlbCA9IFRoZUxvZ01hbmFnZXIubG9nTGV2ZWwuZGVidWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJlVGFzayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5hdXJlbGlhLmxvYWRlci5ub3JtYWxpemUoJ2F1cmVsaWEtbG9nZ2luZy1jb25zb2xlJywgX3RoaXMuYm9vdHN0cmFwcGVyTmFtZSkudGhlbihmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmF1cmVsaWEubG9hZGVyLmxvYWRNb2R1bGUobmFtZSkudGhlbihmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFRoZUxvZ01hbmFnZXIuYWRkQXBwZW5kZXIobmV3IG0uQ29uc29sZUFwcGVuZGVyKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIFRoZUxvZ01hbmFnZXIuc2V0TGV2ZWwobG9nTGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEZyYW1ld29ya0NvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJ1blRhc2tzKHRoaXMsIHRoaXMucHJlVGFza3MpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbG9hZGVyID0gX3RoaXMuYXVyZWxpYS5sb2FkZXI7XHJcbiAgICAgICAgICAgIHZhciBpbmZvID0gX3RoaXMuaW5mbztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGluZm8uc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRQbHVnaW4oX3RoaXMsIGxvYWRlciwgY3VycmVudCkudGhlbihuZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLnByb2Nlc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWd1cmVkUGx1Z2lucyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBydW5UYXNrcyhfdGhpcywgX3RoaXMucG9zdFRhc2tzKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZyYW1ld29ya0NvbmZpZ3VyYXRpb247XHJcbn0oKSk7XG5cbmZ1bmN0aW9uIHByZXZlbnRBY3Rpb25sZXNzRm9ybVN1Ym1pdCgpIHtcclxuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQ7XHJcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRhcmdldC5hY3Rpb247XHJcbiAgICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdmb3JtJyAmJiAhYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIGZhbHNlKTtcclxufVxyXG52YXIgQXVyZWxpYSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdXJlbGlhKGxvYWRlciwgY29udGFpbmVyLCByZXNvdXJjZXMpIHtcclxuICAgICAgICB0aGlzLmxvYWRlciA9IGxvYWRlciB8fCBuZXcgUExBVEZPUk0uTG9hZGVyKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXIgfHwgKG5ldyBDb250YWluZXIoKSkubWFrZUdsb2JhbCgpO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gcmVzb3VyY2VzIHx8IG5ldyBWaWV3UmVzb3VyY2VzKCk7XHJcbiAgICAgICAgdGhpcy51c2UgPSBuZXcgRnJhbWV3b3JrQ29uZmlndXJhdGlvbih0aGlzKTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IFRoZUxvZ01hbmFnZXIuZ2V0TG9nZ2VyKCdhdXJlbGlhJyk7XHJcbiAgICAgICAgdGhpcy5ob3N0Q29uZmlndXJlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaG9zdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51c2UuaW5zdGFuY2UoQXVyZWxpYSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy51c2UuaW5zdGFuY2UoTG9hZGVyLCB0aGlzLmxvYWRlcik7XHJcbiAgICAgICAgdGhpcy51c2UuaW5zdGFuY2UoVmlld1Jlc291cmNlcywgdGhpcy5yZXNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgQXVyZWxpYS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5fc3RhcnRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnQXVyZWxpYSBTdGFydGluZycpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydGVkID0gdGhpcy51c2UuYXBwbHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcHJldmVudEFjdGlvbmxlc3NGb3JtU3VibWl0KCk7XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMuY29udGFpbmVyLmhhc1Jlc29sdmVyKEJpbmRpbmdMYW5ndWFnZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ1lvdSBtdXN0IGNvbmZpZ3VyZSBBdXJlbGlhIHdpdGggYSBCaW5kaW5nTGFuZ3VhZ2UgaW1wbGVtZW50YXRpb24uJztcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5sb2dnZXIuaW5mbygnQXVyZWxpYSBTdGFydGVkJyk7XHJcbiAgICAgICAgICAgIHZhciBldnQgPSBET00uY3JlYXRlQ3VzdG9tRXZlbnQoJ2F1cmVsaWEtc3RhcnRlZCcsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgRE9NLmRpc3BhdGNoRXZlbnQoZXZ0KTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEF1cmVsaWEucHJvdG90eXBlLmVuaGFuY2UgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQsIGFwcGxpY2F0aW9uSG9zdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdDb250ZXh0ID09PSB2b2lkIDApIHsgYmluZGluZ0NvbnRleHQgPSB7fTsgfVxyXG4gICAgICAgIGlmIChhcHBsaWNhdGlvbkhvc3QgPT09IHZvaWQgMCkgeyBhcHBsaWNhdGlvbkhvc3QgPSBudWxsOyB9XHJcbiAgICAgICAgdGhpcy5fY29uZmlndXJlSG9zdChhcHBsaWNhdGlvbkhvc3QgfHwgRE9NLnF1ZXJ5U2VsZWN0b3JBbGwoJ2JvZHknKVswXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHZhciBlbmdpbmUgPSBfdGhpcy5jb250YWluZXIuZ2V0KFRlbXBsYXRpbmdFbmdpbmUpO1xyXG4gICAgICAgICAgICBfdGhpcy5yb290ID0gZW5naW5lLmVuaGFuY2UoeyBjb250YWluZXI6IF90aGlzLmNvbnRhaW5lciwgZWxlbWVudDogX3RoaXMuaG9zdCwgcmVzb3VyY2VzOiBfdGhpcy5yZXNvdXJjZXMsIGJpbmRpbmdDb250ZXh0OiBiaW5kaW5nQ29udGV4dCB9KTtcclxuICAgICAgICAgICAgX3RoaXMucm9vdC5hdHRhY2hlZCgpO1xyXG4gICAgICAgICAgICBfdGhpcy5fb25BdXJlbGlhQ29tcG9zZWQoKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShfdGhpcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQXVyZWxpYS5wcm90b3R5cGUuc2V0Um9vdCA9IGZ1bmN0aW9uIChyb290LCBhcHBsaWNhdGlvbkhvc3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChyb290ID09PSB2b2lkIDApIHsgcm9vdCA9IG51bGw7IH1cclxuICAgICAgICBpZiAoYXBwbGljYXRpb25Ib3N0ID09PSB2b2lkIDApIHsgYXBwbGljYXRpb25Ib3N0ID0gbnVsbDsgfVxyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5yb290LnZpZXdNb2RlbCAmJiB0aGlzLnJvb3Qudmlld01vZGVsLnJvdXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3Qudmlld01vZGVsLnJvdXRlci5kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC52aWV3TW9kZWwucm91dGVyLnJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyZUhvc3QoYXBwbGljYXRpb25Ib3N0KTtcclxuICAgICAgICB2YXIgZW5naW5lID0gdGhpcy5jb250YWluZXIuZ2V0KFRlbXBsYXRpbmdFbmdpbmUpO1xyXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IHRoaXMuY29udGFpbmVyLmdldChDb21wb3NpdGlvblRyYW5zYWN0aW9uKTtcclxuICAgICAgICBkZWxldGUgdHJhbnNhY3Rpb24uaW5pdGlhbENvbXBvc2l0aW9uO1xyXG4gICAgICAgIGlmICghcm9vdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdNb2R1bGVJZCkge1xyXG4gICAgICAgICAgICAgICAgcm9vdCA9IHJlbGF0aXZlVG9GaWxlKCcuL2FwcCcsIHRoaXMuY29uZmlnTW9kdWxlSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdCA9ICdhcHAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RydWN0aW9uLnZpZXdNb2RlbCA9IHJvb3Q7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uY29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY2hpbGRDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcclxuICAgICAgICBpbnN0cnVjdGlvbi52aWV3U2xvdCA9IHRoaXMuaG9zdFNsb3Q7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uaG9zdCA9IHRoaXMuaG9zdDtcclxuICAgICAgICByZXR1cm4gZW5naW5lLmNvbXBvc2UoaW5zdHJ1Y3Rpb24pLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgX3RoaXMucm9vdCA9IHI7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLnZpZXdTbG90LmF0dGFjaGVkKCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9vbkF1cmVsaWFDb21wb3NlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQXVyZWxpYS5wcm90b3R5cGUuX2NvbmZpZ3VyZUhvc3QgPSBmdW5jdGlvbiAoYXBwbGljYXRpb25Ib3N0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9zdENvbmZpZ3VyZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcHBsaWNhdGlvbkhvc3QgPSBhcHBsaWNhdGlvbkhvc3QgfHwgdGhpcy5ob3N0O1xyXG4gICAgICAgIGlmICghYXBwbGljYXRpb25Ib3N0IHx8IHR5cGVvZiBhcHBsaWNhdGlvbkhvc3QgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdCA9IERPTS5nZXRFbGVtZW50QnlJZChhcHBsaWNhdGlvbkhvc3QgfHwgJ2FwcGxpY2F0aW9uSG9zdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0ID0gYXBwbGljYXRpb25Ib3N0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaG9zdCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFwcGxpY2F0aW9uSG9zdCB3YXMgc3BlY2lmaWVkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3RDb25maWd1cmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmhvc3QuYXVyZWxpYSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5ob3N0U2xvdCA9IG5ldyBWaWV3U2xvdCh0aGlzLmhvc3QsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuaG9zdFNsb3QudHJhbnNmb3JtQ2hpbGROb2Rlc0ludG9WaWV3KCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShET00uYm91bmRhcnksIHRoaXMuaG9zdCk7XHJcbiAgICB9O1xyXG4gICAgQXVyZWxpYS5wcm90b3R5cGUuX29uQXVyZWxpYUNvbXBvc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBldnQgPSBET00uY3JlYXRlQ3VzdG9tRXZlbnQoJ2F1cmVsaWEtY29tcG9zZWQnLCB7IGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWUgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBET00uZGlzcGF0Y2hFdmVudChldnQpOyB9LCAxKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXVyZWxpYTtcclxufSgpKTtcblxuZXhwb3J0IHsgQXVyZWxpYSwgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVyZWxpYS1mcmFtZXdvcmsuanMubWFwXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXVyZWxpYS1mcmFtZXdvcmsvZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLWZyYW1ld29yay5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS1mcmFtZXdvcmtcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiaW1wb3J0IHsgSGlzdG9yeSB9IGZyb20gJ2F1cmVsaWEtaGlzdG9yeSc7XG5pbXBvcnQgeyBET00sIFBMQVRGT1JNIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XG5cbnZhciBMaW5rSGFuZGxlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMaW5rSGFuZGxlcigpIHtcclxuICAgIH1cclxuICAgIExpbmtIYW5kbGVyLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChoaXN0b3J5KSB7IH07XHJcbiAgICBMaW5rSGFuZGxlci5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIHJldHVybiBMaW5rSGFuZGxlcjtcclxufSgpKTtcclxudmFyIERlZmF1bHRMaW5rSGFuZGxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGVmYXVsdExpbmtIYW5kbGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGVmYXVsdExpbmtIYW5kbGVyKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IERlZmF1bHRMaW5rSGFuZGxlci5nZXRFdmVudEluZm8oZSksIHNob3VsZEhhbmRsZUV2ZW50ID0gX2Euc2hvdWxkSGFuZGxlRXZlbnQsIGhyZWYgPSBfYS5ocmVmO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmhpc3RvcnkubmF2aWdhdGUoaHJlZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIERlZmF1bHRMaW5rSGFuZGxlci5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoaGlzdG9yeSkge1xyXG4gICAgICAgIGlmIChoaXN0b3J5Ll9oYXNQdXNoU3RhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5ID0gaGlzdG9yeTtcclxuICAgICAgICAgICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVyLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdExpbmtIYW5kbGVyLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIERPTS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdExpbmtIYW5kbGVyLmdldEV2ZW50SW5mbyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciAkZXZlbnQgPSBldmVudDtcclxuICAgICAgICB2YXIgaW5mbyA9IHtcclxuICAgICAgICAgICAgc2hvdWxkSGFuZGxlRXZlbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBocmVmOiBudWxsLFxyXG4gICAgICAgICAgICBhbmNob3I6IG51bGxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSBEZWZhdWx0TGlua0hhbmRsZXIuZmluZENsb3Nlc3RBbmNob3IoJGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIURlZmF1bHRMaW5rSGFuZGxlci50YXJnZXRJc1RoaXNXaW5kb3codGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5mbztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhhc0F0dHJpYnV0ZSh0YXJnZXQsICdkb3dubG9hZCcpXHJcbiAgICAgICAgICAgIHx8IGhhc0F0dHJpYnV0ZSh0YXJnZXQsICdyb3V0ZXItaWdub3JlJylcclxuICAgICAgICAgICAgfHwgaGFzQXR0cmlidXRlKHRhcmdldCwgJ2RhdGEtcm91dGVyLWlnbm9yZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJGV2ZW50LmFsdEtleSB8fCAkZXZlbnQuY3RybEtleSB8fCAkZXZlbnQubWV0YUtleSB8fCAkZXZlbnQuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBocmVmID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgIGluZm8uYW5jaG9yID0gdGFyZ2V0O1xyXG4gICAgICAgIGluZm8uaHJlZiA9IGhyZWY7XHJcbiAgICAgICAgdmFyIGxlZnRCdXR0b25DbGlja2VkID0gJGV2ZW50LndoaWNoID09PSAxO1xyXG4gICAgICAgIHZhciBpc1JlbGF0aXZlID0gaHJlZiAmJiAhKGhyZWYuY2hhckF0KDApID09PSAnIycgfHwgKC9eW2Etel0rOi9pKS50ZXN0KGhyZWYpKTtcclxuICAgICAgICBpbmZvLnNob3VsZEhhbmRsZUV2ZW50ID0gbGVmdEJ1dHRvbkNsaWNrZWQgJiYgaXNSZWxhdGl2ZTtcclxuICAgICAgICByZXR1cm4gaW5mbztcclxuICAgIH07XHJcbiAgICBEZWZhdWx0TGlua0hhbmRsZXIuZmluZENsb3Nlc3RBbmNob3IgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdBJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVmYXVsdExpbmtIYW5kbGVyLnRhcmdldElzVGhpc1dpbmRvdyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0V2luZG93ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XHJcbiAgICAgICAgdmFyIHdpbiA9IFBMQVRGT1JNLmdsb2JhbDtcclxuICAgICAgICByZXR1cm4gIXRhcmdldFdpbmRvdyB8fFxyXG4gICAgICAgICAgICB0YXJnZXRXaW5kb3cgPT09IHdpbi5uYW1lIHx8XHJcbiAgICAgICAgICAgIHRhcmdldFdpbmRvdyA9PT0gJ19zZWxmJztcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmYXVsdExpbmtIYW5kbGVyO1xyXG59KExpbmtIYW5kbGVyKSk7XHJcbnZhciBoYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoZWwsIGF0dHIpIHsgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShhdHRyKTsgfTtcblxudmFyIEJyb3dzZXJIaXN0b3J5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhCcm93c2VySGlzdG9yeSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEJyb3dzZXJIaXN0b3J5KGxpbmtIYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5fY2hlY2tVcmxDYWxsYmFjayA9IF90aGlzLl9jaGVja1VybC5iaW5kKF90aGlzKTtcclxuICAgICAgICBfdGhpcy5sb2NhdGlvbiA9IFBMQVRGT1JNLmxvY2F0aW9uO1xyXG4gICAgICAgIF90aGlzLmhpc3RvcnkgPSBQTEFURk9STS5oaXN0b3J5O1xyXG4gICAgICAgIF90aGlzLmxpbmtIYW5kbGVyID0gbGlua0hhbmRsZXI7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIaXN0b3J5IGhhcyBhbHJlYWR5IGJlZW4gYWN0aXZhdGVkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgJGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7XHJcbiAgICAgICAgdmFyIHdhbnRzUHVzaFN0YXRlID0gISFvcHRpb25zLnB1c2hTdGF0ZTtcclxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRPcHRpb25zID0gdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgeyByb290OiAnLycgfSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB2YXIgcm9vdFVybCA9IHRoaXMucm9vdCA9ICgnLycgKyBub3JtYWxpemVkT3B0aW9ucy5yb290ICsgJy8nKS5yZXBsYWNlKHJvb3RTdHJpcHBlciwgJy8nKTtcclxuICAgICAgICB2YXIgd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gbm9ybWFsaXplZE9wdGlvbnMuaGFzaENoYW5nZSAhPT0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGhhc1B1c2hTdGF0ZSA9IHRoaXMuX2hhc1B1c2hTdGF0ZSA9ICEhKG5vcm1hbGl6ZWRPcHRpb25zLnB1c2hTdGF0ZSAmJiAkaGlzdG9yeSAmJiAkaGlzdG9yeS5wdXNoU3RhdGUpO1xyXG4gICAgICAgIHZhciBldmVudE5hbWU7XHJcbiAgICAgICAgaWYgKGhhc1B1c2hTdGF0ZSkge1xyXG4gICAgICAgICAgICBldmVudE5hbWUgPSAncG9wc3RhdGUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh3YW50c0hhc2hDaGFuZ2UpIHtcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gJ2hhc2hjaGFuZ2UnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQTEFURk9STS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5fY2hlY2tVcmxDYWxsYmFjayk7XHJcbiAgICAgICAgaWYgKHdhbnRzSGFzaENoYW5nZSAmJiB3YW50c1B1c2hTdGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgJGxvY2F0aW9uID0gdGhpcy5sb2NhdGlvbjtcclxuICAgICAgICAgICAgdmFyIGF0Um9vdCA9ICRsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9bXlxcL10kLywgJyQmLycpID09PSByb290VXJsO1xyXG4gICAgICAgICAgICBpZiAoIWhhc1B1c2hTdGF0ZSAmJiAhYXRSb290KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5fZ2V0RnJhZ21lbnQobnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucmVwbGFjZShyb290VXJsICsgJGxvY2F0aW9uLnNlYXJjaCArICcjJyArIGZyYWdtZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc1B1c2hTdGF0ZSAmJiBhdFJvb3QgJiYgJGxvY2F0aW9uLmhhc2gpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLl9nZXRIYXNoKCkucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAkaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIERPTS50aXRsZSwgcm9vdFVybCArIGZyYWdtZW50ICsgJGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLl9nZXRGcmFnbWVudCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGlua0hhbmRsZXIuYWN0aXZhdGUodGhpcyk7XHJcbiAgICAgICAgaWYgKCFub3JtYWxpemVkT3B0aW9ucy5zaWxlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVcmwoJycpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMuX2NoZWNrVXJsQ2FsbGJhY2s7XHJcbiAgICAgICAgUExBVEZPUk0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVyKTtcclxuICAgICAgICBQTEFURk9STS5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxpbmtIYW5kbGVyLmRlYWN0aXZhdGUoKTtcclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUuZ2V0QWJzb2x1dGVSb290ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uO1xyXG4gICAgICAgIHZhciBvcmlnaW4gPSBjcmVhdGVPcmlnaW4oJGxvY2F0aW9uLnByb3RvY29sLCAkbG9jYXRpb24uaG9zdG5hbWUsICRsb2NhdGlvbi5wb3J0KTtcclxuICAgICAgICByZXR1cm4gXCJcIiArIG9yaWdpbiArIHRoaXMucm9vdDtcclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUubmF2aWdhdGUgPSBmdW5jdGlvbiAoZnJhZ21lbnQsIF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIF9jID0gX2IudHJpZ2dlciwgdHJpZ2dlciA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gX2IucmVwbGFjZSwgcmVwbGFjZSA9IF9kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9kO1xyXG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb247XHJcbiAgICAgICAgaWYgKGZyYWdtZW50ICYmIGFic29sdXRlVXJsLnRlc3QoZnJhZ21lbnQpKSB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBmcmFnbWVudDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmcmFnbWVudCA9IHRoaXMuX2dldEZyYWdtZW50KGZyYWdtZW50IHx8ICcnKTtcclxuICAgICAgICBpZiAodGhpcy5mcmFnbWVudCA9PT0gZnJhZ21lbnQgJiYgIXJlcGxhY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XHJcbiAgICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIGZyYWdtZW50O1xyXG4gICAgICAgIGlmIChmcmFnbWVudCA9PT0gJycgJiYgdXJsICE9PSAnLycpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkge1xyXG4gICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgnLy8nLCAnLycpO1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlbcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHt9LCBET00udGl0bGUsIHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVIYXNoKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5hc3NpZ24odXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVcmwoZnJhZ21lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUubmF2aWdhdGVCYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLnNldFRpdGxlID0gZnVuY3Rpb24gKHRpdGxlKSB7XHJcbiAgICAgICAgRE9NLnRpdGxlID0gdGl0bGU7XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgJGhpc3RvcnkgPSB0aGlzLmhpc3Rvcnk7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgJGhpc3Rvcnkuc3RhdGUpO1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMubG9jYXRpb24sIHBhdGhuYW1lID0gX2EucGF0aG5hbWUsIHNlYXJjaCA9IF9hLnNlYXJjaCwgaGFzaCA9IF9hLmhhc2g7XHJcbiAgICAgICAgc3RhdGVba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICRoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgbnVsbCwgXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuaGlzdG9yeS5zdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlW2tleV07XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLmdldEhpc3RvcnlJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGlzdG9yeUluZGV4ID0gdGhpcy5nZXRTdGF0ZSgnSGlzdG9yeUluZGV4Jyk7XHJcbiAgICAgICAgaWYgKGhpc3RvcnlJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhpc3RvcnlJbmRleCA9IHRoaXMuaGlzdG9yeS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKCdIaXN0b3J5SW5kZXgnLCBoaXN0b3J5SW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGlzdG9yeUluZGV4O1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIChtb3ZlbWVudCkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5nbyhtb3ZlbWVudCk7XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkucHJvdG90eXBlLl9nZXRIYXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpO1xyXG4gICAgfTtcclxuICAgIEJyb3dzZXJIaXN0b3J5LnByb3RvdHlwZS5fZ2V0RnJhZ21lbnQgPSBmdW5jdGlvbiAoZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHJvb3RVcmw7XHJcbiAgICAgICAgaWYgKCFmcmFnbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlIHx8ICF0aGlzLl93YW50c0hhc2hDaGFuZ2UgfHwgZm9yY2VQdXNoU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbl8xID0gdGhpcy5sb2NhdGlvbjtcclxuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gbG9jYXRpb25fMS5wYXRobmFtZSArIGxvY2F0aW9uXzEuc2VhcmNoO1xyXG4gICAgICAgICAgICAgICAgcm9vdFVybCA9IHRoaXMucm9vdC5yZXBsYWNlKHRyYWlsaW5nU2xhc2gsICcnKTtcclxuICAgICAgICAgICAgICAgIGlmICghZnJhZ21lbnQuaW5kZXhPZihyb290VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQuc3Vic3RyKHJvb3RVcmwubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5fZ2V0SGFzaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnLycgKyBmcmFnbWVudC5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTtcclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUuX2NoZWNrVXJsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fZ2V0RnJhZ21lbnQoJycpO1xyXG4gICAgICAgIGlmIChjdXJyZW50ICE9PSB0aGlzLmZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRVcmwoJycpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VySGlzdG9yeS5wcm90b3R5cGUuX2xvYWRVcmwgPSBmdW5jdGlvbiAoZnJhZ21lbnRPdmVycmlkZSkge1xyXG4gICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLl9nZXRGcmFnbWVudChmcmFnbWVudE92ZXJyaWRlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJvdXRlSGFuZGxlciA/XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yb3V0ZUhhbmRsZXIoZnJhZ21lbnQpIDpcclxuICAgICAgICAgICAgZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgQnJvd3Nlckhpc3RvcnkuaW5qZWN0ID0gW0xpbmtIYW5kbGVyXTtcclxuICAgIHJldHVybiBCcm93c2VySGlzdG9yeTtcclxufShIaXN0b3J5KSk7XHJcbnZhciByb3V0ZVN0cmlwcGVyID0gL14jP1xcLyp8XFxzKyQvZztcclxudmFyIHJvb3RTdHJpcHBlciA9IC9eXFwvK3xcXC8rJC9nO1xyXG52YXIgdHJhaWxpbmdTbGFzaCA9IC9cXC8kLztcclxudmFyIGFic29sdXRlVXJsID0gL14oW2Etel1bYS16MC05K1xcLS5dKjopP1xcL1xcLy9pO1xyXG5mdW5jdGlvbiB1cGRhdGVIYXNoKCRsb2NhdGlvbiwgZnJhZ21lbnQsIHJlcGxhY2UpIHtcclxuICAgIGlmIChyZXBsYWNlKSB7XHJcbiAgICAgICAgdmFyIGhyZWYgPSAkbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7XHJcbiAgICAgICAgJGxvY2F0aW9uLnJlcGxhY2UoaHJlZiArICcjJyArIGZyYWdtZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgICRsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlT3JpZ2luKHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCkge1xyXG4gICAgcmV0dXJuIHByb3RvY29sICsgXCIvL1wiICsgaG9zdG5hbWUgKyAocG9ydCA/ICc6JyArIHBvcnQgOiAnJyk7XHJcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZykge1xyXG4gICAgdmFyICRjb25maWcgPSBjb25maWc7XHJcbiAgICAkY29uZmlnLnNpbmdsZXRvbihIaXN0b3J5LCBCcm93c2VySGlzdG9yeSk7XHJcbiAgICAkY29uZmlnLnRyYW5zaWVudChMaW5rSGFuZGxlciwgRGVmYXVsdExpbmtIYW5kbGVyKTtcclxufVxuXG5leHBvcnQgeyBCcm93c2VySGlzdG9yeSwgRGVmYXVsdExpbmtIYW5kbGVyLCBMaW5rSGFuZGxlciwgY29uZmlndXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXJlbGlhLWhpc3RvcnktYnJvd3Nlci5qcy5tYXBcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hdXJlbGlhLWhpc3RvcnktYnJvd3Nlci9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtaGlzdG9yeS1icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSBhdXJlbGlhLWhpc3RvcnktYnJvd3NlclxuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJcblxuZXhwb3J0IHZhciBDb25zb2xlQXBwZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnNvbGVBcHBlbmRlcigpIHtcbiAgICBcbiAgfVxuXG4gIENvbnNvbGVBcHBlbmRlci5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiBkZWJ1Zyhsb2dnZXIpIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIChfY29uc29sZSA9IGNvbnNvbGUpLmRlYnVnLmFwcGx5KF9jb25zb2xlLCBbXCJERUJVRyBbXCIgKyBsb2dnZXIuaWQgKyBcIl1cIl0uY29uY2F0KHJlc3QpKTtcbiAgfTtcblxuICBDb25zb2xlQXBwZW5kZXIucHJvdG90eXBlLmluZm8gPSBmdW5jdGlvbiBpbmZvKGxvZ2dlcikge1xuICAgIHZhciBfY29uc29sZTI7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICByZXN0W19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIChfY29uc29sZTIgPSBjb25zb2xlKS5pbmZvLmFwcGx5KF9jb25zb2xlMiwgW1wiSU5GTyBbXCIgKyBsb2dnZXIuaWQgKyBcIl1cIl0uY29uY2F0KHJlc3QpKTtcbiAgfTtcblxuICBDb25zb2xlQXBwZW5kZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiB3YXJuKGxvZ2dlcikge1xuICAgIHZhciBfY29uc29sZTM7XG5cbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICByZXN0W19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIChfY29uc29sZTMgPSBjb25zb2xlKS53YXJuLmFwcGx5KF9jb25zb2xlMywgW1wiV0FSTiBbXCIgKyBsb2dnZXIuaWQgKyBcIl1cIl0uY29uY2F0KHJlc3QpKTtcbiAgfTtcblxuICBDb25zb2xlQXBwZW5kZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobG9nZ2VyKSB7XG4gICAgdmFyIF9jb25zb2xlNDtcblxuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgIHJlc3RbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgKF9jb25zb2xlNCA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlNCwgW1wiRVJST1IgW1wiICsgbG9nZ2VyLmlkICsgXCJdXCJdLmNvbmNhdChyZXN0KSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbnNvbGVBcHBlbmRlcjtcbn0oKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGUvZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLWxvZ2dpbmctY29uc29sZS5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIiwiXG5cbmltcG9ydCB7IGJ1aWxkUXVlcnlTdHJpbmcsIHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICdhdXJlbGlhLXBhdGgnO1xuXG5leHBvcnQgdmFyIFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0ZShjaGFyU3BlYykge1xuICAgIFxuXG4gICAgdGhpcy5jaGFyU3BlYyA9IGNoYXJTcGVjO1xuICAgIHRoaXMubmV4dFN0YXRlcyA9IFtdO1xuICB9XG5cbiAgU3RhdGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldChjaGFyU3BlYykge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMubmV4dFN0YXRlcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkID0gX3JlZjtcblxuICAgICAgdmFyIGlzRXF1YWwgPSBjaGlsZC5jaGFyU3BlYy52YWxpZENoYXJzID09PSBjaGFyU3BlYy52YWxpZENoYXJzICYmIGNoaWxkLmNoYXJTcGVjLmludmFsaWRDaGFycyA9PT0gY2hhclNwZWMuaW52YWxpZENoYXJzO1xuXG4gICAgICBpZiAoaXNFcXVhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBTdGF0ZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gcHV0KGNoYXJTcGVjKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5nZXQoY2hhclNwZWMpO1xuXG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgc3RhdGUgPSBuZXcgU3RhdGUoY2hhclNwZWMpO1xuXG4gICAgdGhpcy5uZXh0U3RhdGVzLnB1c2goc3RhdGUpO1xuXG4gICAgaWYgKGNoYXJTcGVjLnJlcGVhdCkge1xuICAgICAgc3RhdGUubmV4dFN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH07XG5cbiAgU3RhdGUucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2goY2gpIHtcbiAgICB2YXIgbmV4dFN0YXRlcyA9IHRoaXMubmV4dFN0YXRlcztcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBuZXh0U3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbmV4dFN0YXRlc1tpXTtcbiAgICAgIHZhciBjaGFyU3BlYyA9IGNoaWxkLmNoYXJTcGVjO1xuXG4gICAgICBpZiAoY2hhclNwZWMudmFsaWRDaGFycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChjaGFyU3BlYy52YWxpZENoYXJzLmluZGV4T2YoY2gpICE9PSAtMSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hhclNwZWMuaW52YWxpZENoYXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGNoYXJTcGVjLmludmFsaWRDaGFycy5pbmRleE9mKGNoKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRlO1xufSgpO1xuXG52YXIgc3BlY2lhbHMgPSBbJy8nLCAnLicsICcqJywgJysnLCAnPycsICd8JywgJygnLCAnKScsICdbJywgJ10nLCAneycsICd9JywgJ1xcXFwnXTtcblxudmFyIGVzY2FwZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKFxcXFwnICsgc3BlY2lhbHMuam9pbignfFxcXFwnKSArICcpJywgJ2cnKTtcblxuZXhwb3J0IHZhciBTdGF0aWNTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0aWNTZWdtZW50KHN0cmluZywgY2FzZVNlbnNpdGl2ZSkge1xuICAgIFxuXG4gICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgdGhpcy5jYXNlU2Vuc2l0aXZlID0gY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIFN0YXRpY1NlZ21lbnQucHJvdG90eXBlLmVhY2hDaGFyID0gZnVuY3Rpb24gZWFjaENoYXIoY2FsbGJhY2spIHtcbiAgICB2YXIgcyA9IHRoaXMuc3RyaW5nO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgdmFyIGNoID0gc1tpXTtcbiAgICAgIGNhbGxiYWNrKHsgdmFsaWRDaGFyczogdGhpcy5jYXNlU2Vuc2l0aXZlID8gY2ggOiBjaC50b1VwcGVyQ2FzZSgpICsgY2gudG9Mb3dlckNhc2UoKSB9KTtcbiAgICB9XG4gIH07XG5cbiAgU3RhdGljU2VnbWVudC5wcm90b3R5cGUucmVnZXggPSBmdW5jdGlvbiByZWdleCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmcucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xuICB9O1xuXG4gIFN0YXRpY1NlZ21lbnQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNTZWdtZW50O1xufSgpO1xuXG5leHBvcnQgdmFyIER5bmFtaWNTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEeW5hbWljU2VnbWVudChuYW1lLCBvcHRpb25hbCkge1xuICAgIFxuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gIH1cblxuICBEeW5hbWljU2VnbWVudC5wcm90b3R5cGUuZWFjaENoYXIgPSBmdW5jdGlvbiBlYWNoQ2hhcihjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrKHsgaW52YWxpZENoYXJzOiAnLycsIHJlcGVhdDogdHJ1ZSB9KTtcbiAgfTtcblxuICBEeW5hbWljU2VnbWVudC5wcm90b3R5cGUucmVnZXggPSBmdW5jdGlvbiByZWdleCgpIHtcbiAgICByZXR1cm4gJyhbXi9dKyknO1xuICB9O1xuXG4gIER5bmFtaWNTZWdtZW50LnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKHBhcmFtcywgY29uc3VtZWQpIHtcbiAgICBjb25zdW1lZFt0aGlzLm5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gcGFyYW1zW3RoaXMubmFtZV07XG4gIH07XG5cbiAgcmV0dXJuIER5bmFtaWNTZWdtZW50O1xufSgpO1xuXG5leHBvcnQgdmFyIFN0YXJTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGFyU2VnbWVudChuYW1lKSB7XG4gICAgXG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgU3RhclNlZ21lbnQucHJvdG90eXBlLmVhY2hDaGFyID0gZnVuY3Rpb24gZWFjaENoYXIoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayh7IGludmFsaWRDaGFyczogJycsIHJlcGVhdDogdHJ1ZSB9KTtcbiAgfTtcblxuICBTdGFyU2VnbWVudC5wcm90b3R5cGUucmVnZXggPSBmdW5jdGlvbiByZWdleCgpIHtcbiAgICByZXR1cm4gJyguKyknO1xuICB9O1xuXG4gIFN0YXJTZWdtZW50LnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKHBhcmFtcywgY29uc3VtZWQpIHtcbiAgICBjb25zdW1lZFt0aGlzLm5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gcGFyYW1zW3RoaXMubmFtZV07XG4gIH07XG5cbiAgcmV0dXJuIFN0YXJTZWdtZW50O1xufSgpO1xuXG5leHBvcnQgdmFyIEVwc2lsb25TZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFcHNpbG9uU2VnbWVudCgpIHtcbiAgICBcbiAgfVxuXG4gIEVwc2lsb25TZWdtZW50LnByb3RvdHlwZS5lYWNoQ2hhciA9IGZ1bmN0aW9uIGVhY2hDaGFyKCkge307XG5cbiAgRXBzaWxvblNlZ21lbnQucHJvdG90eXBlLnJlZ2V4ID0gZnVuY3Rpb24gcmVnZXgoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIEVwc2lsb25TZWdtZW50LnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgIHJldHVybiAnJztcbiAgfTtcblxuICByZXR1cm4gRXBzaWxvblNlZ21lbnQ7XG59KCk7XG5cbmV4cG9ydCB2YXIgUm91dGVSZWNvZ25pemVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSb3V0ZVJlY29nbml6ZXIoKSB7XG4gICAgXG5cbiAgICB0aGlzLnJvb3RTdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuICAgIHRoaXMubmFtZXMgPSB7fTtcbiAgICB0aGlzLnJvdXRlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIFJvdXRlUmVjb2duaXplci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHJvdXRlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHJvdXRlKSkge1xuICAgICAgcm91dGUuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICByZXR1cm4gX3RoaXMuYWRkKHIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3RhdGUgPSB0aGlzLnJvb3RTdGF0ZTtcbiAgICB2YXIgc2tpcHBhYmxlU3RhdGVzID0gW107XG4gICAgdmFyIHJlZ2V4ID0gJ14nO1xuICAgIHZhciB0eXBlcyA9IHsgc3RhdGljczogMCwgZHluYW1pY3M6IDAsIHN0YXJzOiAwIH07XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgdmFyIHJvdXRlTmFtZSA9IHJvdXRlLmhhbmRsZXIubmFtZTtcbiAgICB2YXIgaXNFbXB0eSA9IHRydWU7XG4gICAgdmFyIHNlZ21lbnRzID0gcGFyc2Uocm91dGUucGF0aCwgbmFtZXMsIHR5cGVzLCByb3V0ZS5jYXNlU2Vuc2l0aXZlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICBpZiAoc2VnbWVudCBpbnN0YW5jZW9mIEVwc2lsb25TZWdtZW50KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2FkZFNlZ21lbnQgPSBhZGRTZWdtZW50KGN1cnJlbnRTdGF0ZSwgc2VnbWVudCksXG4gICAgICAgICAgZmlyc3RTdGF0ZSA9IF9hZGRTZWdtZW50WzBdLFxuICAgICAgICAgIG5leHRTdGF0ZSA9IF9hZGRTZWdtZW50WzFdO1xuXG4gICAgICBmb3IgKHZhciBqID0gMCwgamogPSBza2lwcGFibGVTdGF0ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICBza2lwcGFibGVTdGF0ZXNbal0ubmV4dFN0YXRlcy5wdXNoKGZpcnN0U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VnbWVudC5vcHRpb25hbCkge1xuICAgICAgICBza2lwcGFibGVTdGF0ZXMucHVzaChuZXh0U3RhdGUpO1xuICAgICAgICByZWdleCArPSAnKD86LycgKyBzZWdtZW50LnJlZ2V4KCkgKyAnKT8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICByZWdleCArPSAnLycgKyBzZWdtZW50LnJlZ2V4KCk7XG4gICAgICAgIHNraXBwYWJsZVN0YXRlcy5sZW5ndGggPSAwO1xuICAgICAgICBpc0VtcHR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRTdGF0ZS5wdXQoeyB2YWxpZENoYXJzOiAnLycgfSk7XG4gICAgICByZWdleCArPSAnLz8nO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVycyA9IFt7IGhhbmRsZXI6IHJvdXRlLmhhbmRsZXIsIG5hbWVzOiBuYW1lcyB9XTtcblxuICAgIHRoaXMucm91dGVzLnNldChyb3V0ZS5oYW5kbGVyLCB7IHNlZ21lbnRzOiBzZWdtZW50cywgaGFuZGxlcnM6IGhhbmRsZXJzIH0pO1xuICAgIGlmIChyb3V0ZU5hbWUpIHtcbiAgICAgIHZhciByb3V0ZU5hbWVzID0gQXJyYXkuaXNBcnJheShyb3V0ZU5hbWUpID8gcm91dGVOYW1lIDogW3JvdXRlTmFtZV07XG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCByb3V0ZU5hbWVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgaWYgKCEocm91dGVOYW1lc1tfaTJdIGluIHRoaXMubmFtZXMpKSB7XG4gICAgICAgICAgdGhpcy5uYW1lc1tyb3V0ZU5hbWVzW19pMl1dID0geyBzZWdtZW50czogc2VnbWVudHMsIGhhbmRsZXJzOiBoYW5kbGVycyB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgc2tpcHBhYmxlU3RhdGVzLmxlbmd0aDsgX2kzKyspIHtcbiAgICAgIHZhciBzdGF0ZSA9IHNraXBwYWJsZVN0YXRlc1tfaTNdO1xuICAgICAgc3RhdGUuaGFuZGxlcnMgPSBoYW5kbGVycztcbiAgICAgIHN0YXRlLnJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleCArICckJywgcm91dGUuY2FzZVNlbnNpdGl2ZSA/ICcnIDogJ2knKTtcbiAgICAgIHN0YXRlLnR5cGVzID0gdHlwZXM7XG4gICAgfVxuXG4gICAgY3VycmVudFN0YXRlLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgY3VycmVudFN0YXRlLnJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleCArICckJywgcm91dGUuY2FzZVNlbnNpdGl2ZSA/ICcnIDogJ2knKTtcbiAgICBjdXJyZW50U3RhdGUudHlwZXMgPSB0eXBlcztcblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH07XG5cbiAgUm91dGVSZWNvZ25pemVyLnByb3RvdHlwZS5nZXRSb3V0ZSA9IGZ1bmN0aW9uIGdldFJvdXRlKG5hbWVPclJvdXRlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuYW1lT3JSb3V0ZSA9PT0gJ3N0cmluZycgPyB0aGlzLm5hbWVzW25hbWVPclJvdXRlXSA6IHRoaXMucm91dGVzLmdldChuYW1lT3JSb3V0ZSk7XG4gIH07XG5cbiAgUm91dGVSZWNvZ25pemVyLnByb3RvdHlwZS5oYW5kbGVyc0ZvciA9IGZ1bmN0aW9uIGhhbmRsZXJzRm9yKG5hbWVPclJvdXRlKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5nZXRSb3V0ZShuYW1lT3JSb3V0ZSk7XG4gICAgaWYgKCFyb3V0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyByb3V0ZSBuYW1lZCAnICsgbmFtZU9yUm91dGUpO1xuICAgIH1cblxuICAgIHJldHVybiBbXS5jb25jYXQocm91dGUuaGFuZGxlcnMpO1xuICB9O1xuXG4gIFJvdXRlUmVjb2duaXplci5wcm90b3R5cGUuaGFzUm91dGUgPSBmdW5jdGlvbiBoYXNSb3V0ZShuYW1lT3JSb3V0ZSkge1xuICAgIHJldHVybiAhIXRoaXMuZ2V0Um91dGUobmFtZU9yUm91dGUpO1xuICB9O1xuXG4gIFJvdXRlUmVjb2duaXplci5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShuYW1lT3JSb3V0ZSwgcGFyYW1zKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5nZXRSb3V0ZShuYW1lT3JSb3V0ZSk7XG4gICAgaWYgKCFyb3V0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyByb3V0ZSBuYW1lZCAnICsgbmFtZU9yUm91dGUpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVyID0gcm91dGUuaGFuZGxlcnNbMF0uaGFuZGxlcjtcbiAgICBpZiAoaGFuZGxlci5nZW5lcmF0aW9uVXNlc0hyZWYpIHtcbiAgICAgIHJldHVybiBoYW5kbGVyLmhyZWY7XG4gICAgfVxuXG4gICAgdmFyIHJvdXRlUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKTtcbiAgICB2YXIgc2VnbWVudHMgPSByb3V0ZS5zZWdtZW50cztcbiAgICB2YXIgY29uc3VtZWQgPSB7fTtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcblxuICAgICAgaWYgKHNlZ21lbnQgaW5zdGFuY2VvZiBFcHNpbG9uU2VnbWVudCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlZ21lbnRWYWx1ZSA9IHNlZ21lbnQuZ2VuZXJhdGUocm91dGVQYXJhbXMsIGNvbnN1bWVkKTtcbiAgICAgIGlmIChzZWdtZW50VmFsdWUgPT09IG51bGwgfHwgc2VnbWVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFzZWdtZW50Lm9wdGlvbmFsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbHVlIGlzIHJlcXVpcmVkIGZvciByb3V0ZSBwYXJhbWV0ZXIgXFwnJyArIHNlZ21lbnQubmFtZSArICdcXCcgaW4gcm91dGUgXFwnJyArIG5hbWVPclJvdXRlICsgJ1xcJy4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ICs9ICcvJztcbiAgICAgICAgb3V0cHV0ICs9IHNlZ21lbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3V0cHV0LmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBvdXRwdXQgPSAnLycgKyBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcGFyYW0gaW4gY29uc3VtZWQpIHtcbiAgICAgIGRlbGV0ZSByb3V0ZVBhcmFtc1twYXJhbV07XG4gICAgfVxuXG4gICAgdmFyIHF1ZXJ5U3RyaW5nID0gYnVpbGRRdWVyeVN0cmluZyhyb3V0ZVBhcmFtcyk7XG4gICAgb3V0cHV0ICs9IHF1ZXJ5U3RyaW5nID8gJz8nICsgcXVlcnlTdHJpbmcgOiAnJztcblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgUm91dGVSZWNvZ25pemVyLnByb3RvdHlwZS5yZWNvZ25pemUgPSBmdW5jdGlvbiByZWNvZ25pemUocGF0aCkge1xuICAgIHZhciBzdGF0ZXMgPSBbdGhpcy5yb290U3RhdGVdO1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHt9O1xuICAgIHZhciBpc1NsYXNoRHJvcHBlZCA9IGZhbHNlO1xuICAgIHZhciBub3JtYWxpemVkUGF0aCA9IHBhdGg7XG5cbiAgICB2YXIgcXVlcnlTdGFydCA9IG5vcm1hbGl6ZWRQYXRoLmluZGV4T2YoJz8nKTtcbiAgICBpZiAocXVlcnlTdGFydCAhPT0gLTEpIHtcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IG5vcm1hbGl6ZWRQYXRoLnN1YnN0cihxdWVyeVN0YXJ0ICsgMSwgbm9ybWFsaXplZFBhdGgubGVuZ3RoKTtcbiAgICAgIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplZFBhdGguc3Vic3RyKDAsIHF1ZXJ5U3RhcnQpO1xuICAgICAgcXVlcnlQYXJhbXMgPSBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKTtcbiAgICB9XG5cbiAgICBub3JtYWxpemVkUGF0aCA9IGRlY29kZVVSSShub3JtYWxpemVkUGF0aCk7XG5cbiAgICBpZiAobm9ybWFsaXplZFBhdGguY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIG5vcm1hbGl6ZWRQYXRoID0gJy8nICsgbm9ybWFsaXplZFBhdGg7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhMZW4gPSBub3JtYWxpemVkUGF0aC5sZW5ndGg7XG4gICAgaWYgKHBhdGhMZW4gPiAxICYmIG5vcm1hbGl6ZWRQYXRoLmNoYXJBdChwYXRoTGVuIC0gMSkgPT09ICcvJykge1xuICAgICAgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVkUGF0aC5zdWJzdHIoMCwgcGF0aExlbiAtIDEpO1xuICAgICAgaXNTbGFzaERyb3BwZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9ybWFsaXplZFBhdGgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzdGF0ZXMgPSByZWNvZ25pemVDaGFyKHN0YXRlcywgbm9ybWFsaXplZFBhdGguY2hhckF0KGkpKTtcbiAgICAgIGlmICghc3RhdGVzLmxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc29sdXRpb25zID0gW107XG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX2wgPSBzdGF0ZXMubGVuZ3RoOyBfaTQgPCBfbDsgX2k0KyspIHtcbiAgICAgIGlmIChzdGF0ZXNbX2k0XS5oYW5kbGVycykge1xuICAgICAgICBzb2x1dGlvbnMucHVzaChzdGF0ZXNbX2k0XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGVzID0gc29ydFNvbHV0aW9ucyhzb2x1dGlvbnMpO1xuXG4gICAgdmFyIHN0YXRlID0gc29sdXRpb25zWzBdO1xuICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS5oYW5kbGVycykge1xuICAgICAgaWYgKGlzU2xhc2hEcm9wcGVkICYmIHN0YXRlLnJlZ2V4LnNvdXJjZS5zbGljZSgtNSkgPT09ICcoLispJCcpIHtcbiAgICAgICAgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVkUGF0aCArICcvJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmRIYW5kbGVyKHN0YXRlLCBub3JtYWxpemVkUGF0aCwgcXVlcnlQYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUm91dGVSZWNvZ25pemVyO1xufSgpO1xuXG52YXIgUmVjb2duaXplUmVzdWx0cyA9IGZ1bmN0aW9uIFJlY29nbml6ZVJlc3VsdHMocXVlcnlQYXJhbXMpIHtcbiAgXG5cbiAgdGhpcy5zcGxpY2UgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlO1xuICB0aGlzLnNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICB0aGlzLnB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXMgfHwge307XG59O1xuXG5mdW5jdGlvbiBwYXJzZShyb3V0ZSwgbmFtZXMsIHR5cGVzLCBjYXNlU2Vuc2l0aXZlKSB7XG4gIHZhciBub3JtYWxpemVkUm91dGUgPSByb3V0ZTtcbiAgaWYgKHJvdXRlLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgbm9ybWFsaXplZFJvdXRlID0gcm91dGUuc3Vic3RyKDEpO1xuICB9XG5cbiAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICB2YXIgc3BsaXRSb3V0ZSA9IG5vcm1hbGl6ZWRSb3V0ZS5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcGxpdFJvdXRlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICB2YXIgc2VnbWVudCA9IHNwbGl0Um91dGVbaV07XG5cbiAgICB2YXIgbWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihbXj9dKykoXFw/KT8kLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgX21hdGNoID0gbWF0Y2gsXG4gICAgICAgICAgX25hbWUgPSBfbWF0Y2hbMV0sXG4gICAgICAgICAgb3B0aW9uYWwgPSBfbWF0Y2hbMl07XG5cbiAgICAgIGlmIChfbmFtZS5pbmRleE9mKCc9JykgIT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyICcgKyBfbmFtZSArICcgaW4gcm91dGUgJyArIHJvdXRlICsgJyBoYXMgYSBkZWZhdWx0IHZhbHVlLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKG5ldyBEeW5hbWljU2VnbWVudChfbmFtZSwgISFvcHRpb25hbCkpO1xuICAgICAgbmFtZXMucHVzaChfbmFtZSk7XG4gICAgICB0eXBlcy5keW5hbWljcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eXFwqKC4rKSQvKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHJlc3VsdHMucHVzaChuZXcgU3RhclNlZ21lbnQobWF0Y2hbMV0pKTtcbiAgICAgIG5hbWVzLnB1c2gobWF0Y2hbMV0pO1xuICAgICAgdHlwZXMuc3RhcnMrKztcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgPT09ICcnKSB7XG4gICAgICByZXN1bHRzLnB1c2gobmV3IEVwc2lsb25TZWdtZW50KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzLnB1c2gobmV3IFN0YXRpY1NlZ21lbnQoc2VnbWVudCwgY2FzZVNlbnNpdGl2ZSkpO1xuICAgICAgdHlwZXMuc3RhdGljcysrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBzb3J0U29sdXRpb25zKHN0YXRlcykge1xuICByZXR1cm4gc3RhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50eXBlcy5zdGFycyAhPT0gYi50eXBlcy5zdGFycykge1xuICAgICAgcmV0dXJuIGEudHlwZXMuc3RhcnMgLSBiLnR5cGVzLnN0YXJzO1xuICAgIH1cblxuICAgIGlmIChhLnR5cGVzLnN0YXJzKSB7XG4gICAgICBpZiAoYS50eXBlcy5zdGF0aWNzICE9PSBiLnR5cGVzLnN0YXRpY3MpIHtcbiAgICAgICAgcmV0dXJuIGIudHlwZXMuc3RhdGljcyAtIGEudHlwZXMuc3RhdGljcztcbiAgICAgIH1cbiAgICAgIGlmIChhLnR5cGVzLmR5bmFtaWNzICE9PSBiLnR5cGVzLmR5bmFtaWNzKSB7XG4gICAgICAgIHJldHVybiBiLnR5cGVzLmR5bmFtaWNzIC0gYS50eXBlcy5keW5hbWljcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYS50eXBlcy5keW5hbWljcyAhPT0gYi50eXBlcy5keW5hbWljcykge1xuICAgICAgcmV0dXJuIGEudHlwZXMuZHluYW1pY3MgLSBiLnR5cGVzLmR5bmFtaWNzO1xuICAgIH1cblxuICAgIGlmIChhLnR5cGVzLnN0YXRpY3MgIT09IGIudHlwZXMuc3RhdGljcykge1xuICAgICAgcmV0dXJuIGIudHlwZXMuc3RhdGljcyAtIGEudHlwZXMuc3RhdGljcztcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlY29nbml6ZUNoYXIoc3RhdGVzLCBjaCkge1xuICB2YXIgbmV4dFN0YXRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlc1tpXTtcbiAgICBuZXh0U3RhdGVzLnB1c2guYXBwbHkobmV4dFN0YXRlcywgc3RhdGUubWF0Y2goY2gpKTtcbiAgfVxuXG4gIHJldHVybiBuZXh0U3RhdGVzO1xufVxuXG5mdW5jdGlvbiBmaW5kSGFuZGxlcihzdGF0ZSwgcGF0aCwgcXVlcnlQYXJhbXMpIHtcbiAgdmFyIGhhbmRsZXJzID0gc3RhdGUuaGFuZGxlcnM7XG4gIHZhciByZWdleCA9IHN0YXRlLnJlZ2V4O1xuICB2YXIgY2FwdHVyZXMgPSBwYXRoLm1hdGNoKHJlZ2V4KTtcbiAgdmFyIGN1cnJlbnRDYXB0dXJlID0gMTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBSZWNvZ25pemVSZXN1bHRzKHF1ZXJ5UGFyYW1zKTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBfaGFuZGxlciA9IGhhbmRsZXJzW2ldO1xuICAgIHZhciBfbmFtZXMgPSBfaGFuZGxlci5uYW1lcztcbiAgICB2YXIgX3BhcmFtcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSBfbmFtZXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBfcGFyYW1zW19uYW1lc1tqXV0gPSBjYXB0dXJlc1tjdXJyZW50Q2FwdHVyZSsrXTtcbiAgICB9XG5cbiAgICByZXN1bHQucHVzaCh7IGhhbmRsZXI6IF9oYW5kbGVyLmhhbmRsZXIsIHBhcmFtczogX3BhcmFtcywgaXNEeW5hbWljOiAhIV9uYW1lcy5sZW5ndGggfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBhZGRTZWdtZW50KGN1cnJlbnRTdGF0ZSwgc2VnbWVudCkge1xuICB2YXIgZmlyc3RTdGF0ZSA9IGN1cnJlbnRTdGF0ZS5wdXQoeyB2YWxpZENoYXJzOiAnLycgfSk7XG4gIHZhciBuZXh0U3RhdGUgPSBmaXJzdFN0YXRlO1xuICBzZWdtZW50LmVhY2hDaGFyKGZ1bmN0aW9uIChjaCkge1xuICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5wdXQoY2gpO1xuICB9KTtcblxuICByZXR1cm4gW2ZpcnN0U3RhdGUsIG5leHRTdGF0ZV07XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtcm91dGUtcmVjb2duaXplci9kaXN0L25hdGl2ZS1tb2R1bGVzL2F1cmVsaWEtcm91dGUtcmVjb2duaXplci5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS1yb3V0ZS1yZWNvZ25pemVyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsImltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2F1cmVsaWEtbG9nZ2luZyc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICdhdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uJztcbmltcG9ydCB7IEhpc3RvcnkgfSBmcm9tICdhdXJlbGlhLWhpc3RvcnknO1xuaW1wb3J0IHsgUm91dGVSZWNvZ25pemVyIH0gZnJvbSAnYXVyZWxpYS1yb3V0ZS1yZWNvZ25pemVyJztcbmltcG9ydCB7IEV2ZW50QWdncmVnYXRvciB9IGZyb20gJ2F1cmVsaWEtZXZlbnQtYWdncmVnYXRvcic7XG5cbi8qKlxyXG4gKiBDbGFzcyB1c2VkIHRvIHJlcHJlc2VudCBhbiBpbnN0cnVjdGlvbiBkdXJpbmcgYSBuYXZpZ2F0aW9uLlxyXG4gKi9cclxuY2xhc3MgTmF2aWdhdGlvbkluc3RydWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGluaXQpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdXJyZW50IGJ1aWx0IHZpZXdwb3J0IHBsYW4gb2YgdGhpcyBuYXYgaW5zdHJ1Y3Rpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBsYW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdCk7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB0aGlzLnBhcmFtcyB8fCB7fTtcclxuICAgICAgICB0aGlzLnZpZXdQb3J0SW5zdHJ1Y3Rpb25zID0ge307XHJcbiAgICAgICAgbGV0IGFuY2VzdG9yUGFyYW1zID0gW107XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBjdXJyZW50LnBhcmFtcyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50LmNvbmZpZyAmJiBjdXJyZW50LmNvbmZpZy5oYXNDaGlsZFJvdXRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBwYXJhbSBmb3IgdGhlIGluamVjdGVkIGNoaWxkIHJvdXRlIHNlZ21lbnRcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjdXJyZW50UGFyYW1zW2N1cnJlbnQuZ2V0V2lsZENhcmROYW1lKCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFuY2VzdG9yUGFyYW1zLnVuc2hpZnQoY3VycmVudFBhcmFtcyk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudEluc3RydWN0aW9uO1xyXG4gICAgICAgIH0gd2hpbGUgKGN1cnJlbnQpO1xyXG4gICAgICAgIGxldCBhbGxQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnF1ZXJ5UGFyYW1zLCAuLi5hbmNlc3RvclBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy5saWZlY3ljbGVBcmdzID0gW2FsbFBhcmFtcywgdGhpcy5jb25maWcsIHRoaXNdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhpcyBpbnN0cnVjdGlvbiBhbmQgYWxsIGNoaWxkIGluc3RydWN0aW9ucyBmb3IgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0QWxsSW5zdHJ1Y3Rpb25zKCkge1xyXG4gICAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBbdGhpc107XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb25zID0gdGhpcy52aWV3UG9ydEluc3RydWN0aW9ucztcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdmlld1BvcnRJbnN0cnVjdGlvbnMpIHtcclxuICAgICAgICAgICAgbGV0IGNoaWxkSW5zdHJ1Y3Rpb24gPSB2aWV3UG9ydEluc3RydWN0aW9uc1trZXldLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zLnB1c2goLi4uY2hpbGRJbnN0cnVjdGlvbi5nZXRBbGxJbnN0cnVjdGlvbnMoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9ucztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBpbnN0cnVjdGlvbiBhbmQgYWxsIGNoaWxkIGluc3RydWN0aW9ucyBmb3IgdGhlIHByZXZpb3VzIG5hdmlnYXRpb24uXHJcbiAgICAgKiBQcmV2aW91cyBpbnN0cnVjdGlvbnMgYXJlIG5vIGxvbmdlciBhdmFpbGFibGUgYWZ0ZXIgbmF2aWdhdGlvbiBjb21wbGV0ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldEFsbFByZXZpb3VzSW5zdHJ1Y3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEFsbEluc3RydWN0aW9ucygpLm1hcChjID0+IGMucHJldmlvdXNJbnN0cnVjdGlvbikuZmlsdGVyKGMgPT4gYyk7XHJcbiAgICB9XHJcbiAgICBhZGRWaWV3UG9ydEluc3RydWN0aW9uKG5hbWVPckluaXRPcHRpb25zLCBzdHJhdGVneSwgbW9kdWxlSWQsIGNvbXBvbmVudCkge1xyXG4gICAgICAgIGxldCB2aWV3UG9ydEluc3RydWN0aW9uO1xyXG4gICAgICAgIGxldCB2aWV3UG9ydE5hbWUgPSB0eXBlb2YgbmFtZU9ySW5pdE9wdGlvbnMgPT09ICdzdHJpbmcnID8gbmFtZU9ySW5pdE9wdGlvbnMgOiBuYW1lT3JJbml0T3B0aW9ucy5uYW1lO1xyXG4gICAgICAgIGNvbnN0IGxpZmVjeWNsZUFyZ3MgPSB0aGlzLmxpZmVjeWNsZUFyZ3M7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgbGlmZWN5Y2xlQXJnc1sxXSwgeyBjdXJyZW50Vmlld1BvcnQ6IHZpZXdQb3J0TmFtZSB9KTtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWVPckluaXRPcHRpb25zID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB2aWV3UG9ydEluc3RydWN0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZU9ySW5pdE9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBzdHJhdGVneTogc3RyYXRlZ3ksXHJcbiAgICAgICAgICAgICAgICBtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIGNoaWxkUm91dGVyOiBjb21wb25lbnQuY2hpbGRSb3V0ZXIsXHJcbiAgICAgICAgICAgICAgICBsaWZlY3ljbGVBcmdzOiBbbGlmZWN5Y2xlQXJnc1swXSwgY29uZmlnLCBsaWZlY3ljbGVBcmdzWzJdXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmlld1BvcnRJbnN0cnVjdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHZpZXdQb3J0TmFtZSxcclxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBuYW1lT3JJbml0T3B0aW9ucy5zdHJhdGVneSxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogbmFtZU9ySW5pdE9wdGlvbnMuY29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgbW9kdWxlSWQ6IG5hbWVPckluaXRPcHRpb25zLm1vZHVsZUlkLFxyXG4gICAgICAgICAgICAgICAgY2hpbGRSb3V0ZXI6IG5hbWVPckluaXRPcHRpb25zLmNvbXBvbmVudC5jaGlsZFJvdXRlcixcclxuICAgICAgICAgICAgICAgIGxpZmVjeWNsZUFyZ3M6IFtsaWZlY3ljbGVBcmdzWzBdLCBjb25maWcsIGxpZmVjeWNsZUFyZ3NbMl1dXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdQb3J0SW5zdHJ1Y3Rpb25zW3ZpZXdQb3J0TmFtZV0gPSB2aWV3UG9ydEluc3RydWN0aW9uO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSByb3V0ZSBwYXR0ZXJuJ3Mgd2lsZGNhcmQgcGFyYW1ldGVyLCBpZiBhcHBsaWNhYmxlLlxyXG4gICAgICovXHJcbiAgICBnZXRXaWxkQ2FyZE5hbWUoKSB7XHJcbiAgICAgICAgLy8gdG9kbzogcG90ZW50aWFsIGlzc3VlLCBvciBhdCBsZWFzdCB1bnNhZmUgdHlwaW5nc1xyXG4gICAgICAgIGxldCBjb25maWdSb3V0ZSA9IHRoaXMuY29uZmlnLnJvdXRlO1xyXG4gICAgICAgIGxldCB3aWxkY2FyZEluZGV4ID0gY29uZmlnUm91dGUubGFzdEluZGV4T2YoJyonKTtcclxuICAgICAgICByZXR1cm4gY29uZmlnUm91dGUuc3Vic3RyKHdpbGRjYXJkSW5kZXggKyAxKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcGF0aCBhbmQgcXVlcnkgc3RyaW5nIGNyZWF0ZWQgYnkgZmlsbGluZyB0aGUgcm91dGVcclxuICAgICAqIHBhdHRlcm4ncyB3aWxkY2FyZCBwYXJhbWV0ZXIgd2l0aCB0aGUgbWF0Y2hpbmcgcGFyYW0uXHJcbiAgICAgKi9cclxuICAgIGdldFdpbGRjYXJkUGF0aCgpIHtcclxuICAgICAgICBsZXQgd2lsZGNhcmROYW1lID0gdGhpcy5nZXRXaWxkQ2FyZE5hbWUoKTtcclxuICAgICAgICBsZXQgcGF0aCA9IHRoaXMucGFyYW1zW3dpbGRjYXJkTmFtZV0gfHwgJyc7XHJcbiAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy5xdWVyeVN0cmluZztcclxuICAgICAgICBpZiAocXVlcnlTdHJpbmcpIHtcclxuICAgICAgICAgICAgcGF0aCArPSAnPycgKyBxdWVyeVN0cmluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGluc3RydWN0aW9uJ3MgYmFzZSBVUkwsIGFjY291bnRpbmcgZm9yIHdpbGRjYXJkIHJvdXRlIHBhcmFtZXRlcnMuXHJcbiAgICAgKi9cclxuICAgIGdldEJhc2VVcmwoKSB7XHJcbiAgICAgICAgbGV0ICRlbmNvZGVVUkkgPSBlbmNvZGVVUkk7XHJcbiAgICAgICAgbGV0IGZyYWdtZW50ID0gZGVjb2RlVVJJKHRoaXMuZnJhZ21lbnQpO1xyXG4gICAgICAgIGlmIChmcmFnbWVudCA9PT0gJycpIHtcclxuICAgICAgICAgICAgbGV0IG5vbkVtcHR5Um91dGUgPSB0aGlzLnJvdXRlci5yb3V0ZXMuZmluZChyb3V0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm91dGUubmFtZSA9PT0gdGhpcy5jb25maWcubmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlLnJvdXRlICE9PSAnJztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChub25FbXB0eVJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IG5vbkVtcHR5Um91dGUucm91dGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmFtcykge1xyXG4gICAgICAgICAgICByZXR1cm4gJGVuY29kZVVSSShmcmFnbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB3aWxkY2FyZE5hbWUgPSB0aGlzLmdldFdpbGRDYXJkTmFtZSgpO1xyXG4gICAgICAgIGxldCBwYXRoID0gdGhpcy5wYXJhbXNbd2lsZGNhcmROYW1lXSB8fCAnJztcclxuICAgICAgICBpZiAoIXBhdGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRlbmNvZGVVUkkoZnJhZ21lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJGVuY29kZVVSSShmcmFnbWVudC5zdWJzdHIoMCwgZnJhZ21lbnQubGFzdEluZGV4T2YocGF0aCkpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRmluYWxpemUgYSB2aWV3cG9ydCBpbnN0cnVjdGlvblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIF9jb21taXRDaGFuZ2VzKHdhaXRUb1N3YXApIHtcclxuICAgICAgICBsZXQgcm91dGVyID0gdGhpcy5yb3V0ZXI7XHJcbiAgICAgICAgcm91dGVyLmN1cnJlbnRJbnN0cnVjdGlvbiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgcHJldmlvdXNJbnN0cnVjdGlvbiA9IHRoaXMucHJldmlvdXNJbnN0cnVjdGlvbjtcclxuICAgICAgICBpZiAocHJldmlvdXNJbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICBwcmV2aW91c0luc3RydWN0aW9uLmNvbmZpZy5uYXZNb2RlbC5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbmZpZy5uYXZNb2RlbC5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgcm91dGVyLnJlZnJlc2hOYXZpZ2F0aW9uKCk7XHJcbiAgICAgICAgbGV0IGxvYWRzID0gW107XHJcbiAgICAgICAgbGV0IGRlbGF5U3dhcHMgPSBbXTtcclxuICAgICAgICBsZXQgdmlld1BvcnRJbnN0cnVjdGlvbnMgPSB0aGlzLnZpZXdQb3J0SW5zdHJ1Y3Rpb25zO1xyXG4gICAgICAgIGZvciAobGV0IHZpZXdQb3J0TmFtZSBpbiB2aWV3UG9ydEluc3RydWN0aW9ucykge1xyXG4gICAgICAgICAgICBsZXQgdmlld1BvcnRJbnN0cnVjdGlvbiA9IHZpZXdQb3J0SW5zdHJ1Y3Rpb25zW3ZpZXdQb3J0TmFtZV07XHJcbiAgICAgICAgICAgIGxldCB2aWV3UG9ydCA9IHJvdXRlci52aWV3UG9ydHNbdmlld1BvcnROYW1lXTtcclxuICAgICAgICAgICAgaWYgKCF2aWV3UG9ydCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSB3YXMgbm8gcm91dGVyLXZpZXcgZm91bmQgaW4gdGhlIHZpZXcgZm9yICR7dmlld1BvcnRJbnN0cnVjdGlvbi5tb2R1bGVJZH0uYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGNoaWxkTmF2SW5zdHJ1Y3Rpb24gPSB2aWV3UG9ydEluc3RydWN0aW9uLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uO1xyXG4gICAgICAgICAgICBpZiAodmlld1BvcnRJbnN0cnVjdGlvbi5zdHJhdGVneSA9PT0gXCJyZXBsYWNlXCIgLyogUmVwbGFjZSAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTmF2SW5zdHJ1Y3Rpb24gJiYgY2hpbGROYXZJbnN0cnVjdGlvbi5wYXJlbnRDYXRjaEhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2Fkcy5wdXNoKGNoaWxkTmF2SW5zdHJ1Y3Rpb24uX2NvbW1pdENoYW5nZXMod2FpdFRvU3dhcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhaXRUb1N3YXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXlTd2Fwcy5wdXNoKHsgdmlld1BvcnQsIHZpZXdQb3J0SW5zdHJ1Y3Rpb24gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRzLnB1c2godmlld1BvcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb2Nlc3Modmlld1BvcnRJbnN0cnVjdGlvbiwgd2FpdFRvU3dhcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gY2hpbGROYXZJbnN0cnVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNoaWxkTmF2SW5zdHJ1Y3Rpb24uX2NvbW1pdENoYW5nZXMod2FpdFRvU3dhcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTmF2SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2Fkcy5wdXNoKGNoaWxkTmF2SW5zdHJ1Y3Rpb24uX2NvbW1pdENoYW5nZXMod2FpdFRvU3dhcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlXHJcbiAgICAgICAgICAgIC5hbGwobG9hZHMpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgZGVsYXlTd2Fwcy5mb3JFYWNoKHggPT4geC52aWV3UG9ydC5zd2FwKHgudmlld1BvcnRJbnN0cnVjdGlvbikpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiBwcnVuZSh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIF91cGRhdGVUaXRsZSgpIHtcclxuICAgICAgICBsZXQgcm91dGVyID0gdGhpcy5yb3V0ZXI7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gdGhpcy5fYnVpbGRUaXRsZShyb3V0ZXIudGl0bGVTZXBhcmF0b3IpO1xyXG4gICAgICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgICAgICByb3V0ZXIuaGlzdG9yeS5zZXRUaXRsZSh0aXRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqQGludGVybmFsICovXHJcbiAgICBfYnVpbGRUaXRsZShzZXBhcmF0b3IgPSAnIHwgJykge1xyXG4gICAgICAgIGxldCB0aXRsZSA9ICcnO1xyXG4gICAgICAgIGxldCBjaGlsZFRpdGxlcyA9IFtdO1xyXG4gICAgICAgIGxldCBuYXZNb2RlbFRpdGxlID0gdGhpcy5jb25maWcubmF2TW9kZWwudGl0bGU7XHJcbiAgICAgICAgbGV0IGluc3RydWN0aW9uUm91dGVyID0gdGhpcy5yb3V0ZXI7XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb25zID0gdGhpcy52aWV3UG9ydEluc3RydWN0aW9ucztcclxuICAgICAgICBpZiAobmF2TW9kZWxUaXRsZSkge1xyXG4gICAgICAgICAgICB0aXRsZSA9IGluc3RydWN0aW9uUm91dGVyLnRyYW5zZm9ybVRpdGxlKG5hdk1vZGVsVGl0bGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCB2aWV3UG9ydE5hbWUgaW4gdmlld1BvcnRJbnN0cnVjdGlvbnMpIHtcclxuICAgICAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSB2aWV3UG9ydEluc3RydWN0aW9uc1t2aWV3UG9ydE5hbWVdO1xyXG4gICAgICAgICAgICBsZXQgY2hpbGRfbmF2X2luc3RydWN0aW9uID0gdmlld1BvcnRJbnN0cnVjdGlvbi5jaGlsZE5hdmlnYXRpb25JbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgaWYgKGNoaWxkX25hdl9pbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkVGl0bGUgPSBjaGlsZF9uYXZfaW5zdHJ1Y3Rpb24uX2J1aWxkVGl0bGUoc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZFRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRUaXRsZXMucHVzaChjaGlsZFRpdGxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hpbGRUaXRsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRpdGxlID0gY2hpbGRUaXRsZXMuam9pbihzZXBhcmF0b3IpICsgKHRpdGxlID8gc2VwYXJhdG9yIDogJycpICsgdGl0bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnN0cnVjdGlvblJvdXRlci50aXRsZSkge1xyXG4gICAgICAgICAgICB0aXRsZSArPSAodGl0bGUgPyBzZXBhcmF0b3IgOiAnJykgKyBpbnN0cnVjdGlvblJvdXRlci50cmFuc2Zvcm1UaXRsZShpbnN0cnVjdGlvblJvdXRlci50aXRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aXRsZTtcclxuICAgIH1cclxufVxyXG5jb25zdCBwcnVuZSA9IChpbnN0cnVjdGlvbikgPT4ge1xyXG4gICAgaW5zdHJ1Y3Rpb24ucHJldmlvdXNJbnN0cnVjdGlvbiA9IG51bGw7XHJcbiAgICBpbnN0cnVjdGlvbi5wbGFuID0gbnVsbDtcclxufTtcblxuLyoqXHJcbiogQ2xhc3MgZm9yIHN0b3JpbmcgYW5kIGludGVyYWN0aW5nIHdpdGggYSByb3V0ZSdzIG5hdmlnYXRpb24gc2V0dGluZ3MuXHJcbiovXHJcbmNsYXNzIE5hdk1vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlciwgcmVsYXRpdmVIcmVmKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBUcnVlIGlmIHRoaXMgbmF2IGl0ZW0gaXMgY3VycmVudGx5IGFjdGl2ZS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAqIFRoZSB0aXRsZS5cclxuICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogVGhpcyBuYXYgaXRlbSdzIGFic29sdXRlIGhyZWYuXHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmhyZWYgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogVGhpcyBuYXYgaXRlbSdzIHJlbGF0aXZlIGhyZWYuXHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlbGF0aXZlSHJlZiA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBEYXRhIGF0dGFjaGVkIHRvIHRoZSByb3V0ZSBhdCBjb25maWd1cmF0aW9uIHRpbWUuXHJcbiAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNldHRpbmdzID0ge307XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBUaGUgcm91dGUgY29uZmlnLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xyXG4gICAgICAgIHRoaXMucmVsYXRpdmVIcmVmID0gcmVsYXRpdmVIcmVmO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAqIFNldHMgdGhlIHJvdXRlJ3MgdGl0bGUgYW5kIHVwZGF0ZXMgZG9jdW1lbnQudGl0bGUuXHJcbiAgICAqICBJZiB0aGUgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzLCB0aGUgY2hhbmdlIHdpbGwgYmUgYXBwbGllZFxyXG4gICAgKiAgdG8gZG9jdW1lbnQudGl0bGUgd2hlbiB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXMuXHJcbiAgICAqXHJcbiAgICAqIEBwYXJhbSB0aXRsZSBUaGUgbmV3IHRpdGxlLlxyXG4gICAgKi9cclxuICAgIHNldFRpdGxlKHRpdGxlKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVyLnVwZGF0ZVRpdGxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVBYnNvbHV0ZVBhdGgocGF0aCwgaGFzUHVzaFN0YXRlLCBhYnNvbHV0ZSA9IGZhbHNlKSB7XHJcbiAgICBpZiAoIWhhc1B1c2hTdGF0ZSAmJiBwYXRoWzBdICE9PSAnIycpIHtcclxuICAgICAgICBwYXRoID0gJyMnICsgcGF0aDtcclxuICAgIH1cclxuICAgIGlmIChoYXNQdXNoU3RhdGUgJiYgYWJzb2x1dGUpIHtcclxuICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMSwgcGF0aC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGg7XHJcbn1cclxuZnVuY3Rpb24gX2NyZWF0ZVJvb3RlZFBhdGgoZnJhZ21lbnQsIGJhc2VVcmwsIGhhc1B1c2hTdGF0ZSwgYWJzb2x1dGUpIHtcclxuICAgIGlmIChpc0Fic29sdXRlVXJsLnRlc3QoZnJhZ21lbnQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xyXG4gICAgfVxyXG4gICAgbGV0IHBhdGggPSAnJztcclxuICAgIGlmIChiYXNlVXJsLmxlbmd0aCAmJiBiYXNlVXJsWzBdICE9PSAnLycpIHtcclxuICAgICAgICBwYXRoICs9ICcvJztcclxuICAgIH1cclxuICAgIHBhdGggKz0gYmFzZVVybDtcclxuICAgIGlmICgoIXBhdGgubGVuZ3RoIHx8IHBhdGhbcGF0aC5sZW5ndGggLSAxXSAhPT0gJy8nKSAmJiBmcmFnbWVudFswXSAhPT0gJy8nKSB7XHJcbiAgICAgICAgcGF0aCArPSAnLyc7XHJcbiAgICB9XHJcbiAgICBpZiAocGF0aC5sZW5ndGggJiYgcGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAnLycgJiYgZnJhZ21lbnRbMF0gPT09ICcvJykge1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCAtIDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9ub3JtYWxpemVBYnNvbHV0ZVBhdGgocGF0aCArIGZyYWdtZW50LCBoYXNQdXNoU3RhdGUsIGFic29sdXRlKTtcclxufVxyXG5mdW5jdGlvbiBfcmVzb2x2ZVVybChmcmFnbWVudCwgYmFzZVVybCwgaGFzUHVzaFN0YXRlKSB7XHJcbiAgICBpZiAoaXNSb290ZWRQYXRoLnRlc3QoZnJhZ21lbnQpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9ub3JtYWxpemVBYnNvbHV0ZVBhdGgoZnJhZ21lbnQsIGhhc1B1c2hTdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2NyZWF0ZVJvb3RlZFBhdGgoZnJhZ21lbnQsIGJhc2VVcmwsIGhhc1B1c2hTdGF0ZSk7XHJcbn1cclxuZnVuY3Rpb24gX2Vuc3VyZUFycmF5V2l0aFNpbmdsZVJvdXRlUGVyQ29uZmlnKGNvbmZpZykge1xyXG4gICAgbGV0IHJvdXRlQ29uZmlncyA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLnJvdXRlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNvbmZpZy5yb3V0ZS5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcclxuICAgICAgICAgICAgY3VycmVudC5yb3V0ZSA9IGNvbmZpZy5yb3V0ZVtpXTtcclxuICAgICAgICAgICAgcm91dGVDb25maWdzLnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcm91dGVDb25maWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcm91dGVDb25maWdzO1xyXG59XHJcbmNvbnN0IGlzUm9vdGVkUGF0aCA9IC9eIz9cXC8vO1xyXG5jb25zdCBpc0Fic29sdXRlVXJsID0gL14oW2Etel1bYS16MC05K1xcLS5dKjopP1xcL1xcLy9pO1xuXG4vKipcclxuICogQ2xhc3MgdXNlZCB0byBjb25maWd1cmUgYSBbW1JvdXRlcl1dIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmNsYXNzIFJvdXRlckNvbmZpZ3VyYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcclxuICAgICAgICB0aGlzLnBpcGVsaW5lU3RlcHMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIHN0ZXAgdG8gYmUgcnVuIGR1cmluZyB0aGUgW1tSb3V0ZXJdXSdzIG5hdmlnYXRpb24gcGlwZWxpbmUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHBpcGVsaW5lIHNsb3QgdG8gaW5zZXJ0IHRoZSBzdGVwIGludG8uXHJcbiAgICAgKiBAcGFyYW0gc3RlcCBUaGUgcGlwZWxpbmUgc3RlcC5cclxuICAgICAqIEBjaGFpbmFibGVcclxuICAgICAqL1xyXG4gICAgYWRkUGlwZWxpbmVTdGVwKG5hbWUsIHN0ZXApIHtcclxuICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCB8fCBzdGVwID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQaXBlbGluZSBzdGVwIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5waXBlbGluZVN0ZXBzLnB1c2goeyBuYW1lLCBzdGVwIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgc3RlcCB0byBiZSBydW4gZHVyaW5nIHRoZSBbW1JvdXRlcl1dJ3MgYXV0aG9yaXplIHBpcGVsaW5lIHNsb3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0ZXAgVGhlIHBpcGVsaW5lIHN0ZXAuXHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKi9cclxuICAgIGFkZEF1dGhvcml6ZVN0ZXAoc3RlcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFBpcGVsaW5lU3RlcChcImF1dGhvcml6ZVwiIC8qIEF1dGhvcml6ZSAqLywgc3RlcCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBzdGVwIHRvIGJlIHJ1biBkdXJpbmcgdGhlIFtbUm91dGVyXV0ncyBwcmVBY3RpdmF0ZSBwaXBlbGluZSBzbG90LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdGVwIFRoZSBwaXBlbGluZSBzdGVwLlxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICovXHJcbiAgICBhZGRQcmVBY3RpdmF0ZVN0ZXAoc3RlcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFBpcGVsaW5lU3RlcChcInByZUFjdGl2YXRlXCIgLyogUHJlQWN0aXZhdGUgKi8sIHN0ZXApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgc3RlcCB0byBiZSBydW4gZHVyaW5nIHRoZSBbW1JvdXRlcl1dJ3MgcHJlUmVuZGVyIHBpcGVsaW5lIHNsb3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0ZXAgVGhlIHBpcGVsaW5lIHN0ZXAuXHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKi9cclxuICAgIGFkZFByZVJlbmRlclN0ZXAoc3RlcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFBpcGVsaW5lU3RlcChcInByZVJlbmRlclwiIC8qIFByZVJlbmRlciAqLywgc3RlcCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBzdGVwIHRvIGJlIHJ1biBkdXJpbmcgdGhlIFtbUm91dGVyXV0ncyBwb3N0UmVuZGVyIHBpcGVsaW5lIHNsb3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0ZXAgVGhlIHBpcGVsaW5lIHN0ZXAuXHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKi9cclxuICAgIGFkZFBvc3RSZW5kZXJTdGVwKHN0ZXApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRQaXBlbGluZVN0ZXAoXCJwb3N0UmVuZGVyXCIgLyogUG9zdFJlbmRlciAqLywgc3RlcCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZ3VyZXMgYSByb3V0ZSB0aGF0IHdpbGwgYmUgdXNlZCBpZiB0aGVyZSBpcyBubyBwcmV2aW91cyBsb2NhdGlvbiBhdmFpbGFibGUgb24gbmF2aWdhdGlvbiBjYW5jZWxsYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGZyYWdtZW50IFRoZSBVUkwgZnJhZ21lbnQgdG8gdXNlIGFzIHRoZSBuYXZpZ2F0aW9uIGRlc3RpbmF0aW9uLlxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICovXHJcbiAgICBmYWxsYmFja1JvdXRlKGZyYWdtZW50KSB7XHJcbiAgICAgICAgdGhpcy5fZmFsbGJhY2tSb3V0ZSA9IGZyYWdtZW50O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIG9uZSBvciBtb3JlIHJvdXRlcyB0byBiZSByZWdpc3RlcmVkIHdpdGggdGhlIHJvdXRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcm91dGUgVGhlIFtbUm91dGVDb25maWddXSB0byBtYXAsIG9yIGFuIGFycmF5IG9mIFtbUm91dGVDb25maWddXSB0byBtYXAuXHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKi9cclxuICAgIG1hcChyb3V0ZSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvdXRlKSkge1xyXG4gICAgICAgICAgICByb3V0ZS5mb3JFYWNoKHIgPT4gdGhpcy5tYXAocikpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwUm91dGUocm91dGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmVzIGRlZmF1bHRzIHRvIHVzZSBmb3IgYW55IHZpZXcgcG9ydHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZpZXdQb3J0Q29uZmlnIGEgdmlldyBwb3J0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHVzZSBhcyBhXHJcbiAgICAgKiAgZGVmYXVsdCwgb2YgdGhlIGZvcm0geyB2aWV3UG9ydE5hbWU6IHsgbW9kdWxlSWQgfSB9LlxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICovXHJcbiAgICB1c2VWaWV3UG9ydERlZmF1bHRzKHZpZXdQb3J0Q29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy52aWV3UG9ydERlZmF1bHRzID0gdmlld1BvcnRDb25maWc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYSBzaW5nbGUgcm91dGUgdG8gYmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSByb3V0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJvdXRlIFRoZSBbW1JvdXRlQ29uZmlnXV0gdG8gbWFwLlxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICovXHJcbiAgICBtYXBSb3V0ZShjb25maWcpIHtcclxuICAgICAgICB0aGlzLmluc3RydWN0aW9ucy5wdXNoKHJvdXRlciA9PiB7XHJcbiAgICAgICAgICAgIGxldCByb3V0ZUNvbmZpZ3MgPSBfZW5zdXJlQXJyYXlXaXRoU2luZ2xlUm91dGVQZXJDb25maWcoY29uZmlnKTtcclxuICAgICAgICAgICAgbGV0IG5hdk1vZGVsO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSByb3V0ZUNvbmZpZ3MubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJvdXRlQ29uZmlnID0gcm91dGVDb25maWdzW2ldO1xyXG4gICAgICAgICAgICAgICAgcm91dGVDb25maWcuc2V0dGluZ3MgPSByb3V0ZUNvbmZpZy5zZXR0aW5ncyB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGlmICghbmF2TW9kZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYXZNb2RlbCA9IHJvdXRlci5jcmVhdGVOYXZNb2RlbChyb3V0ZUNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByb3V0ZXIuYWRkUm91dGUocm91dGVDb25maWcsIG5hdk1vZGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgYW4gdW5rbm93biByb3V0ZSBoYW5kbGVyIHRvIGJlIHJ1biB3aGVuIHRoZSBVUkwgZnJhZ21lbnQgZG9lc24ndCBtYXRjaCBhbnkgcmVnaXN0ZXJlZCByb3V0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZyBBIHN0cmluZyBjb250YWluaW5nIGEgbW9kdWxlSWQgdG8gbG9hZCwgb3IgYSBbW1JvdXRlQ29uZmlnXV0sIG9yIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGVcclxuICAgICAqICBbW05hdmlnYXRpb25JbnN0cnVjdGlvbl1dIGFuZCBzZWxlY3RzIGEgbW9kdWxlSWQgdG8gbG9hZC5cclxuICAgICAqIEBjaGFpbmFibGVcclxuICAgICAqL1xyXG4gICAgbWFwVW5rbm93blJvdXRlcyhjb25maWcpIHtcclxuICAgICAgICB0aGlzLnVua25vd25Sb3V0ZUNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIHRvIHRoZSBzcGVjaWZpZWQgW1tSb3V0ZXJdXS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcm91dGVyIFRoZSBbW1JvdXRlcl1dIHRvIGFwcGx5IHRoZSBjb25maWd1cmF0aW9uIHRvLlxyXG4gICAgICovXHJcbiAgICBleHBvcnRUb1JvdXRlcihyb3V0ZXIpIHtcclxuICAgICAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gdGhpcy5pbnN0cnVjdGlvbnM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zW2ldKHJvdXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7IHRpdGxlLCB0aXRsZVNlcGFyYXRvciwgdW5rbm93blJvdXRlQ29uZmlnLCBfZmFsbGJhY2tSb3V0ZSwgdmlld1BvcnREZWZhdWx0cyB9ID0gdGhpcztcclxuICAgICAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICAgICAgcm91dGVyLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aXRsZVNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICByb3V0ZXIudGl0bGVTZXBhcmF0b3IgPSB0aXRsZVNlcGFyYXRvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVua25vd25Sb3V0ZUNvbmZpZykge1xyXG4gICAgICAgICAgICByb3V0ZXIuaGFuZGxlVW5rbm93blJvdXRlcyh1bmtub3duUm91dGVDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2ZhbGxiYWNrUm91dGUpIHtcclxuICAgICAgICAgICAgcm91dGVyLmZhbGxiYWNrUm91dGUgPSBfZmFsbGJhY2tSb3V0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZpZXdQb3J0RGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgcm91dGVyLnVzZVZpZXdQb3J0RGVmYXVsdHModmlld1BvcnREZWZhdWx0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocm91dGVyLm9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IHBpcGVsaW5lU3RlcHMgPSB0aGlzLnBpcGVsaW5lU3RlcHM7XHJcbiAgICAgICAgbGV0IHBpcGVsaW5lU3RlcENvdW50ID0gcGlwZWxpbmVTdGVwcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHBpcGVsaW5lU3RlcENvdW50KSB7XHJcbiAgICAgICAgICAgIGlmICghcm91dGVyLmlzUm9vdCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQaXBlbGluZSBzdGVwcyBjYW4gb25seSBiZSBhZGRlZCB0byB0aGUgcm9vdCByb3V0ZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcGlwZWxpbmVQcm92aWRlciA9IHJvdXRlci5waXBlbGluZVByb3ZpZGVyO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwaXBlbGluZVN0ZXBDb3VudDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxldCB7IG5hbWUsIHN0ZXAgfSA9IHBpcGVsaW5lU3RlcHNbaV07XHJcbiAgICAgICAgICAgICAgICBwaXBlbGluZVByb3ZpZGVyLmFkZFN0ZXAobmFtZSwgc3RlcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFRoZSBwcmltYXJ5IGNsYXNzIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyByb3V0aW5nIGFuZCBuYXZpZ2F0aW9uLlxyXG4gKi9cclxuY2xhc3MgUm91dGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciBUaGUgW1tDb250YWluZXJdXSB0byB1c2Ugd2hlbiBjaGlsZCByb3V0ZXJzLlxyXG4gICAgICogQHBhcmFtIGhpc3RvcnkgVGhlIFtbSGlzdG9yeV1dIGltcGxlbWVudGF0aW9uIHRvIGRlbGVnYXRlIG5hdmlnYXRpb24gcmVxdWVzdHMgdG8uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgaGlzdG9yeSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwYXJlbnQgcm91dGVyLCBvciBudWxsIGlmIHRoaXMgaW5zdGFuY2UgaXMgbm90IGEgY2hpbGQgcm91dGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7fTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGVmYXVsdHMgdXNlZCB3aGVuIGEgdmlld3BvcnQgbGFja3Mgc3BlY2lmaWVkIGNvbnRlbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnZpZXdQb3J0RGVmYXVsdHMgPSB7fTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFeHRlbnNpb24gcG9pbnQgdG8gdHJhbnNmb3JtIHRoZSBkb2N1bWVudCB0aXRsZSBiZWZvcmUgaXQgaXMgYnVpbHQgYW5kIGRpc3BsYXllZC5cclxuICAgICAgICAgKiBCeSBkZWZhdWx0LCBjaGlsZCByb3V0ZXJzIGRlbGVnYXRlIHRvIHRoZSBwYXJlbnQgcm91dGVyLCBhbmQgdGhlIGFwcCByb3V0ZXJcclxuICAgICAgICAgKiByZXR1cm5zIHRoZSB0aXRsZSB1bmNoYW5nZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1UaXRsZSA9ICh0aXRsZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC50cmFuc2Zvcm1UaXRsZSh0aXRsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRpdGxlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gaGlzdG9yeTtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZ1bGx5IHJlc2V0cyB0aGUgcm91dGVyJ3MgaW50ZXJuYWwgc3RhdGUuIFByaW1hcmlseSB1c2VkIGludGVybmFsbHkgYnkgdGhlIGZyYW1ld29yayB3aGVuIG11bHRpcGxlIGNhbGxzIHRvIHNldFJvb3QgYXJlIG1hZGUuXHJcbiAgICAgKiBVc2Ugd2l0aCBjYXV0aW9uIChhY3R1YWxseSwgYXZvaWQgdXNpbmcgdGhpcykuIERvIG5vdCB1c2UgdGhpcyB0byBzaW1wbHkgY2hhbmdlIHlvdXIgbmF2aWdhdGlvbiBtb2RlbC5cclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy52aWV3UG9ydHMgPSB7fTtcclxuICAgICAgICB0aGlzLnJvdXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9ICcnO1xyXG4gICAgICAgIHRoaXMuaXNDb25maWd1cmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc05hdmlnYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzRXhwbGljaXROYXZpZ2F0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0V4cGxpY2l0TmF2aWdhdGlvbkJhY2sgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ0ZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc05hdmlnYXRpbmdOZXcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ1JlZnJlc2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ0ZvcndhcmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ0JhY2sgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdWxkRGVhY3RpdmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubmF2aWdhdGlvbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluc3RydWN0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpZXdQb3J0RGVmYXVsdHMgPSB7fTtcclxuICAgICAgICB0aGlzLl9mYWxsYmFja09yZGVyID0gMTAwO1xyXG4gICAgICAgIHRoaXMuX3JlY29nbml6ZXIgPSBuZXcgUm91dGVSZWNvZ25pemVyKCk7XHJcbiAgICAgICAgdGhpcy5fY2hpbGRSZWNvZ25pemVyID0gbmV3IFJvdXRlUmVjb2duaXplcigpO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyZWRQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVDb25maWd1cmVkUHJvbWlzZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoaXMgW1tSb3V0ZXJdXSBpcyB0aGUgcm9vdCBpbiB0aGUgcm91dGVyIHRyZWUuIEkuZS4sIGl0IGhhcyBubyBwYXJlbnQuXHJcbiAgICAgKi9cclxuICAgIGdldCBpc1Jvb3QoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnBhcmVudDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgdmlld1BvcnQgdG8gYmUgdXNlZCBhcyBhIHJlbmRlcmluZyB0YXJnZXQgZm9yIGFjdGl2YXRlZCByb3V0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZpZXdQb3J0IFRoZSB2aWV3UG9ydC5cclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB2aWV3UG9ydC4gJ2RlZmF1bHQnIGlmIHVuc3BlY2lmaWVkLlxyXG4gICAgICovXHJcbiAgICByZWdpc3RlclZpZXdQb3J0KHZpZXdQb3J0LCBuYW1lKSB7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUgfHwgJ2RlZmF1bHQnO1xyXG4gICAgICAgIHRoaXMudmlld1BvcnRzW25hbWVdID0gdmlld1BvcnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcm91dGVyIGlzIGNvbmZpZ3VyZWQuXHJcbiAgICAgKi9cclxuICAgIGVuc3VyZUNvbmZpZ3VyZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZ3VyZWRQcm9taXNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmVzIHRoZSByb3V0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrT3JDb25maWcgVGhlIFtbUm91dGVyQ29uZmlndXJhdGlvbl1dIG9yIGEgY2FsbGJhY2sgdGhhdCB0YWtlcyBhIFtbUm91dGVyQ29uZmlndXJhdGlvbl1dLlxyXG4gICAgICovXHJcbiAgICBjb25maWd1cmUoY2FsbGJhY2tPckNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuaXNDb25maWd1cmVkID0gdHJ1ZTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gY2FsbGJhY2tPckNvbmZpZztcclxuICAgICAgICBsZXQgY29uZmlnO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2tPckNvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjb25maWcgPSBuZXcgUm91dGVyQ29uZmlndXJhdGlvbigpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFja09yQ29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlXHJcbiAgICAgICAgICAgIC5yZXNvbHZlKHJlc3VsdClcclxuICAgICAgICAgICAgLnRoZW4oKGMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGMgJiYgYy5leHBvcnRUb1JvdXRlcikge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnID0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25maWcuZXhwb3J0VG9Sb3V0ZXIodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDb25maWd1cmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUNvbmZpZ3VyZWRQcm9taXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5hdmlnYXRlcyB0byBhIG5ldyBsb2NhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZnJhZ21lbnQgVGhlIFVSTCBmcmFnbWVudCB0byB1c2UgYXMgdGhlIG5hdmlnYXRpb24gZGVzdGluYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxyXG4gICAgICovXHJcbiAgICBuYXZpZ2F0ZShmcmFnbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbmZpZ3VyZWQgJiYgdGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Lm5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0V4cGxpY2l0TmF2aWdhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5uYXZpZ2F0ZShfcmVzb2x2ZVVybChmcmFnbWVudCwgdGhpcy5iYXNlVXJsLCB0aGlzLmhpc3RvcnkuX2hhc1B1c2hTdGF0ZSksIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gYSBuZXcgbG9jYXRpb24gY29ycmVzcG9uZGluZyB0byB0aGUgcm91dGUgYW5kIHBhcmFtcyBzcGVjaWZpZWQuIEVxdWl2YWxsZW50IHRvIFtbUm91dGVyLmdlbmVyYXRlXV0gZm9sbG93ZWRcclxuICAgICAqIGJ5IFtbUm91dGVyLm5hdmlnYXRlXV0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJvdXRlIFRoZSBuYW1lIG9mIHRoZSByb3V0ZSB0byB1c2Ugd2hlbiBnZW5lcmF0aW5nIHRoZSBuYXZpZ2F0aW9uIGxvY2F0aW9uLlxyXG4gICAgICogQHBhcmFtIHBhcmFtcyBUaGUgcm91dGUgcGFyYW1ldGVycyB0byBiZSB1c2VkIHdoZW4gcG9wdWxhdGluZyB0aGUgcm91dGUgcGF0dGVybi5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIG5hdmlnYXRlVG9Sb3V0ZShyb3V0ZSwgcGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IHBhdGggPSB0aGlzLmdlbmVyYXRlKHJvdXRlLCBwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRlKHBhdGgsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZXMgYmFjayB0byB0aGUgbW9zdCByZWNlbnQgbG9jYXRpb24gaW4gaGlzdG9yeS5cclxuICAgICAqL1xyXG4gICAgbmF2aWdhdGVCYWNrKCkge1xyXG4gICAgICAgIHRoaXMuaXNFeHBsaWNpdE5hdmlnYXRpb25CYWNrID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmhpc3RvcnkubmF2aWdhdGVCYWNrKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBjaGlsZCByb3V0ZXIgb2YgdGhlIGN1cnJlbnQgcm91dGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb250YWluZXIgVGhlIFtbQ29udGFpbmVyXV0gdG8gcHJvdmlkZSB0byB0aGUgY2hpbGQgcm91dGVyLiBVc2VzIHRoZSBjdXJyZW50IFtbUm91dGVyXV0ncyBbW0NvbnRhaW5lcl1dIGlmIHVuc3BlY2lmaWVkLlxyXG4gICAgICogQHJldHVybnMge1JvdXRlcn0gVGhlIG5ldyBjaGlsZCBSb3V0ZXIuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNoaWxkKGNvbnRhaW5lcikge1xyXG4gICAgICAgIGxldCBjaGlsZFJvdXRlciA9IG5ldyBSb3V0ZXIoY29udGFpbmVyIHx8IHRoaXMuY29udGFpbmVyLmNyZWF0ZUNoaWxkKCksIHRoaXMuaGlzdG9yeSk7XHJcbiAgICAgICAgY2hpbGRSb3V0ZXIucGFyZW50ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gY2hpbGRSb3V0ZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIFVSTCBmcmFnbWVudCBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHJvdXRlIHBhdHRlcm4uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHJvdXRlIHdob3NlIHBhdHRlcm4gc2hvdWxkIGJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGZyYWdtZW50LlxyXG4gICAgICogQHBhcmFtIHBhcmFtcyBUaGUgcm91dGUgcGFyYW1zIHRvIGJlIHVzZWQgdG8gcG9wdWxhdGUgdGhlIHJvdXRlIHBhdHRlcm4uXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBJZiBvcHRpb25zLmFic29sdXRlID0gdHJ1ZSwgdGhlbiBhYnNvbHV0ZSB1cmwgd2lsbCBiZSBnZW5lcmF0ZWQ7IG90aGVyd2lzZSwgaXQgd2lsbCBiZSByZWxhdGl2ZSB1cmwuXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgVVJMIGZyYWdtZW50LlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZShuYW1lT3JSb3V0ZSwgcGFyYW1zID0ge30sIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIC8vIEEgY2hpbGQgcmVjb2duaXplciBnZW5lcmF0ZXMgcm91dGVzIGZvciBwb3RlbnRpYWwgY2hpbGQgcm91dGVzLiBBbnkgcG90ZW50aWFsIGNoaWxkIHJvdXRlIGlzIGFkZGVkXHJcbiAgICAgICAgLy8gdG8gdGhlIGNoaWxkUm91dGUgcHJvcGVydHkgb2YgcGFyYW1zIGZvciB0aGUgY2hpbGRSb3V0ZXIgdG8gcmVjb2duaXplLiBXaGVuIGdlbmVyYXRpbmcgcm91dGVzLCB3ZVxyXG4gICAgICAgIC8vIHVzZSB0aGUgY2hpbGRSZWNvZ25pemVyIHdoZW4gY2hpbGRSb3V0ZSBwYXJhbXMgYXJlIGF2YWlsYWJsZSB0byBnZW5lcmF0ZSBhIGNoaWxkIHJvdXRlciBlbmFibGVkIHJvdXRlLlxyXG4gICAgICAgIGxldCByZWNvZ25pemVyID0gJ2NoaWxkUm91dGUnIGluIHBhcmFtcyA/IHRoaXMuX2NoaWxkUmVjb2duaXplciA6IHRoaXMuX3JlY29nbml6ZXI7XHJcbiAgICAgICAgbGV0IGhhc1JvdXRlID0gcmVjb2duaXplci5oYXNSb3V0ZShuYW1lT3JSb3V0ZSk7XHJcbiAgICAgICAgaWYgKCFoYXNSb3V0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZW5lcmF0ZShuYW1lT3JSb3V0ZSwgcGFyYW1zLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgcm91dGUgd2l0aCBuYW1lICcke25hbWVPclJvdXRlfScgY291bGQgbm90IGJlIGZvdW5kLiBDaGVjayB0aGF0IFxcYG5hbWU6ICcke25hbWVPclJvdXRlfSdcXGAgd2FzIHNwZWNpZmllZCBpbiB0aGUgcm91dGUncyBjb25maWcuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYXRoID0gcmVjb2duaXplci5nZW5lcmF0ZShuYW1lT3JSb3V0ZSwgcGFyYW1zKTtcclxuICAgICAgICBsZXQgcm9vdGVkUGF0aCA9IF9jcmVhdGVSb290ZWRQYXRoKHBhdGgsIHRoaXMuYmFzZVVybCwgdGhpcy5oaXN0b3J5Ll9oYXNQdXNoU3RhdGUsIG9wdGlvbnMuYWJzb2x1dGUpO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLmFic29sdXRlID8gYCR7dGhpcy5oaXN0b3J5LmdldEFic29sdXRlUm9vdCgpfSR7cm9vdGVkUGF0aH1gIDogcm9vdGVkUGF0aDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIFtbTmF2TW9kZWxdXSBmb3IgdGhlIHNwZWNpZmllZCByb3V0ZSBjb25maWcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaGUgcm91dGUgY29uZmlnLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVOYXZNb2RlbChjb25maWcpIHtcclxuICAgICAgICBsZXQgbmF2TW9kZWwgPSBuZXcgTmF2TW9kZWwodGhpcywgJ2hyZWYnIGluIGNvbmZpZ1xyXG4gICAgICAgICAgICA/IGNvbmZpZy5ocmVmXHJcbiAgICAgICAgICAgIC8vIHBvdGVudGlhbCBlcnJvciB3aGVuIGNvbmZpZy5yb3V0ZSBpcyBhIHN0cmluZ1tdID9cclxuICAgICAgICAgICAgOiBjb25maWcucm91dGUpO1xyXG4gICAgICAgIG5hdk1vZGVsLnRpdGxlID0gY29uZmlnLnRpdGxlO1xyXG4gICAgICAgIG5hdk1vZGVsLm9yZGVyID0gY29uZmlnLm5hdjtcclxuICAgICAgICBuYXZNb2RlbC5ocmVmID0gY29uZmlnLmhyZWY7XHJcbiAgICAgICAgbmF2TW9kZWwuc2V0dGluZ3MgPSBjb25maWcuc2V0dGluZ3M7XHJcbiAgICAgICAgbmF2TW9kZWwuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHJldHVybiBuYXZNb2RlbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgbmV3IHJvdXRlIHdpdGggdGhlIHJvdXRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIFRoZSBbW1JvdXRlQ29uZmlnXV0uXHJcbiAgICAgKiBAcGFyYW0gbmF2TW9kZWwgVGhlIFtbTmF2TW9kZWxdXSB0byB1c2UgZm9yIHRoZSByb3V0ZS4gTWF5IGJlIG9taXR0ZWQgZm9yIHNpbmdsZS1wYXR0ZXJuIHJvdXRlcy5cclxuICAgICAqL1xyXG4gICAgYWRkUm91dGUoY29uZmlnLCBuYXZNb2RlbCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy5yb3V0ZSkpIHtcclxuICAgICAgICAgICAgbGV0IHJvdXRlQ29uZmlncyA9IF9lbnN1cmVBcnJheVdpdGhTaW5nbGVSb3V0ZVBlckNvbmZpZyhjb25maWcpO1xyXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGlzIHdyb25nLiB0b2RvOiBmaXggdGhpcyBhZnRlciBUUyByZWZhY3RvcmluZyByZWxlYXNlXHJcbiAgICAgICAgICAgIHJvdXRlQ29uZmlncy5mb3JFYWNoKHRoaXMuYWRkUm91dGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVSb3V0ZUNvbmZpZyhjb25maWcpO1xyXG4gICAgICAgIGlmICghKCd2aWV3UG9ydHMnIGluIGNvbmZpZykgJiYgIWNvbmZpZy5uYXZpZ2F0aW9uU3RyYXRlZ3kpIHtcclxuICAgICAgICAgICAgY29uZmlnLnZpZXdQb3J0cyA9IHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUlkOiBjb25maWcubW9kdWxlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29uZmlnLnZpZXdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFuYXZNb2RlbCkge1xyXG4gICAgICAgICAgICBuYXZNb2RlbCA9IHRoaXMuY3JlYXRlTmF2TW9kZWwoY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yb3V0ZXMucHVzaChjb25maWcpO1xyXG4gICAgICAgIGxldCBwYXRoID0gY29uZmlnLnJvdXRlO1xyXG4gICAgICAgIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XHJcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNhc2VTZW5zaXRpdmUgPSBjb25maWcuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZTtcclxuICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLl9yZWNvZ25pemVyLmFkZCh7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6IGNvbmZpZyxcclxuICAgICAgICAgICAgY2FzZVNlbnNpdGl2ZTogY2FzZVNlbnNpdGl2ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwYXRoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZXR0aW5ncyA9IGNvbmZpZy5zZXR0aW5ncztcclxuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5zZXR0aW5ncztcclxuICAgICAgICAgICAgbGV0IHdpdGhDaGlsZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XHJcbiAgICAgICAgICAgIGNvbmZpZy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgICAgICB3aXRoQ2hpbGQucm91dGUgPSBgJHtwYXRofS8qY2hpbGRSb3V0ZWA7XHJcbiAgICAgICAgICAgIHdpdGhDaGlsZC5oYXNDaGlsZFJvdXRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkUmVjb2duaXplci5hZGQoe1xyXG4gICAgICAgICAgICAgICAgcGF0aDogd2l0aENoaWxkLnJvdXRlLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogd2l0aENoaWxkLFxyXG4gICAgICAgICAgICAgICAgY2FzZVNlbnNpdGl2ZTogY2FzZVNlbnNpdGl2ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgd2l0aENoaWxkLm5hdk1vZGVsID0gbmF2TW9kZWw7XHJcbiAgICAgICAgICAgIHdpdGhDaGlsZC5zZXR0aW5ncyA9IGNvbmZpZy5zZXR0aW5ncztcclxuICAgICAgICAgICAgd2l0aENoaWxkLm5hdmlnYXRpb25TdHJhdGVneSA9IGNvbmZpZy5uYXZpZ2F0aW9uU3RyYXRlZ3k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbmZpZy5uYXZNb2RlbCA9IG5hdk1vZGVsO1xyXG4gICAgICAgIGxldCBuYXZpZ2F0aW9uID0gdGhpcy5uYXZpZ2F0aW9uO1xyXG4gICAgICAgIGlmICgobmF2TW9kZWwub3JkZXIgfHwgbmF2TW9kZWwub3JkZXIgPT09IDApICYmIG5hdmlnYXRpb24uaW5kZXhPZihuYXZNb2RlbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGlmICgoIW5hdk1vZGVsLmhyZWYgJiYgbmF2TW9kZWwuaHJlZiAhPT0gJycpICYmIChzdGF0ZS50eXBlcy5keW5hbWljcyB8fCBzdGF0ZS50eXBlcy5zdGFycykpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByb3V0ZSBjb25maWcgZm9yIFwiJyArIGNvbmZpZy5yb3V0ZSArICdcIiA6IGR5bmFtaWMgcm91dGVzIG11c3Qgc3BlY2lmeSBhbiBcImhyZWY6XCIgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIG5hdmlnYXRpb24gbW9kZWwuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYXZNb2RlbC5vcmRlciAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIG5hdk1vZGVsLm9yZGVyID0gKyt0aGlzLl9mYWxsYmFja09yZGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5hdmlnYXRpb24ucHVzaChuYXZNb2RlbCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBwb3RlbnRpYWwgZXJyb3IgLyBpbmNvbnNpc3RlbmN5IGJldHdlZW4gYnJvd3NlcnNcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb3J0XHJcbiAgICAgICAgICAgIC8vIElmIGNvbXBhcmVGdW5jdGlvbihhLCBiKSByZXR1cm5zIDAsIGxlYXZlIGEgYW5kIGIgdW5jaGFuZ2VkIHdpdGggcmVzcGVjdCB0byBlYWNoIG90aGVyLFxyXG4gICAgICAgICAgICAvLyBidXQgc29ydGVkIHdpdGggcmVzcGVjdCB0byBhbGwgZGlmZmVyZW50IGVsZW1lbnRzLlxyXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGUgRUNNQXNjcmlwdCBzdGFuZGFyZCBkb2VzIG5vdCBndWFyYW50ZWUgdGhpcyBiZWhhdmlvdXIsXHJcbiAgICAgICAgICAgIC8vIGFuZCB0aHVzIG5vdCBhbGwgYnJvd3NlcnMgKGUuZy4gTW96aWxsYSB2ZXJzaW9ucyBkYXRpbmcgYmFjayB0byBhdCBsZWFzdCAyMDAzKSByZXNwZWN0IHRoaXMuXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb24uc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhpcyBbW1JvdXRlcl1dIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBhIHJvdXRlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHJvdXRlIHRvIGNoZWNrLlxyXG4gICAgICovXHJcbiAgICBoYXNSb3V0ZShuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuX3JlY29nbml6ZXIuaGFzUm91dGUobmFtZSkgfHwgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaGFzUm91dGUobmFtZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIFtbUm91dGVyXV0gaGFzIGEgcm91dGUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcm91dGUgdG8gY2hlY2suXHJcbiAgICAgKi9cclxuICAgIGhhc093blJvdXRlKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVjb2duaXplci5oYXNSb3V0ZShuYW1lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBoYW5kbGVyIHRvIHVzZSB3aGVuIHRoZSBpbmNvbWluZyBVUkwgZnJhZ21lbnQgZG9lc24ndCBtYXRjaCBhbnkgcmVnaXN0ZXJlZCByb3V0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaGUgbW9kdWxlSWQsIG9yIGEgZnVuY3Rpb24gdGhhdCBzZWxlY3RzIHRoZSBtb2R1bGVJZCwgb3IgYSBbW1JvdXRlQ29uZmlnXV0uXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVVua25vd25Sb3V0ZXMoY29uZmlnKSB7XHJcbiAgICAgICAgaWYgKCFjb25maWcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVua25vd24gcm91dGUgaGFuZGxlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhdGNoQWxsSGFuZGxlciA9IGluc3RydWN0aW9uID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgICAgIC5fY3JlYXRlUm91dGVDb25maWcoY29uZmlnLCBpbnN0cnVjdGlvbilcclxuICAgICAgICAgICAgICAgIC50aGVuKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24uY29uZmlnID0gYztcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgZG9jdW1lbnQgdGl0bGUgdXNpbmcgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBpbnN0cnVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgdXBkYXRlVGl0bGUoKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudFJvdXRlciA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIGlmIChwYXJlbnRSb3V0ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFJvdXRlci51cGRhdGVUaXRsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY3VycmVudEluc3RydWN0aW9uID0gdGhpcy5jdXJyZW50SW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgaWYgKGN1cnJlbnRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICBjdXJyZW50SW5zdHJ1Y3Rpb24uX3VwZGF0ZVRpdGxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIG5hdmlnYXRpb24gcm91dGVzIHdpdGggaHJlZnMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCB3aWxsIGxpa2VseSBtb3ZlIHRvIGEgcGx1Z2luIGluIGEgZnV0dXJlIHJlbGVhc2UuXHJcbiAgICAgKi9cclxuICAgIHJlZnJlc2hOYXZpZ2F0aW9uKCkge1xyXG4gICAgICAgIGxldCBuYXYgPSB0aGlzLm5hdmlnYXRpb247XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IG5hdi5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IG5hdltpXTtcclxuICAgICAgICAgICAgaWYgKCFjdXJyZW50LmNvbmZpZy5ocmVmKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LmhyZWYgPSBfY3JlYXRlUm9vdGVkUGF0aChjdXJyZW50LnJlbGF0aXZlSHJlZiwgdGhpcy5iYXNlVXJsLCB0aGlzLmhpc3RvcnkuX2hhc1B1c2hTdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LmhyZWYgPSBfbm9ybWFsaXplQWJzb2x1dGVQYXRoKGN1cnJlbnQuY29uZmlnLmhyZWYsIHRoaXMuaGlzdG9yeS5faGFzUHVzaFN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciB0aGUgdmlldyBwb3J0cy4gVGhpcyBzcGVjaWZpZXMgaG93IHRvXHJcbiAgICAgKiAgcG9wdWxhdGUgYSB2aWV3IHBvcnQgZm9yIHdoaWNoIG5vIG1vZHVsZSBpcyBzcGVjaWZpZWQuIFRoZSBkZWZhdWx0IGlzXHJcbiAgICAgKiAgYW4gZW1wdHkgdmlldy92aWV3LW1vZGVsIHBhaXIuXHJcbiAgICAgKi9cclxuICAgIHVzZVZpZXdQb3J0RGVmYXVsdHMoJHZpZXdQb3J0RGVmYXVsdHMpIHtcclxuICAgICAgICAvLyBhIHdvcmthcm91bmQgdG8gaGF2ZSBzdHJvbmcgdHlwaW5ncyB3aGlsZSBub3QgcmVxdWlyaW5nIHRvIGV4cG9zZSBpbnRlcmZhY2UgVmlld1BvcnRJbnN0cnVjdGlvblxyXG4gICAgICAgIGxldCB2aWV3UG9ydERlZmF1bHRzID0gJHZpZXdQb3J0RGVmYXVsdHM7XHJcbiAgICAgICAgZm9yIChsZXQgdmlld1BvcnROYW1lIGluIHZpZXdQb3J0RGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgbGV0IHZpZXdQb3J0Q29uZmlnID0gdmlld1BvcnREZWZhdWx0c1t2aWV3UG9ydE5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdQb3J0RGVmYXVsdHNbdmlld1BvcnROYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiB2aWV3UG9ydENvbmZpZy5tb2R1bGVJZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKkBpbnRlcm5hbCAqL1xyXG4gICAgX3JlZnJlc2hCYXNlVXJsKCkge1xyXG4gICAgICAgIGxldCBwYXJlbnRSb3V0ZXIgPSB0aGlzLnBhcmVudDtcclxuICAgICAgICBpZiAocGFyZW50Um91dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVVybCA9IGdlbmVyYXRlQmFzZVVybChwYXJlbnRSb3V0ZXIsIHBhcmVudFJvdXRlci5jdXJyZW50SW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKkBpbnRlcm5hbCAqL1xyXG4gICAgX2NyZWF0ZU5hdmlnYXRpb25JbnN0cnVjdGlvbih1cmwgPSAnJywgcGFyZW50SW5zdHJ1Y3Rpb24gPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IGZyYWdtZW50ID0gdXJsO1xyXG4gICAgICAgIGxldCBxdWVyeVN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKTtcclxuICAgICAgICBpZiAocXVlcnlJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgZnJhZ21lbnQgPSB1cmwuc3Vic3RyKDAsIHF1ZXJ5SW5kZXgpO1xyXG4gICAgICAgICAgICBxdWVyeVN0cmluZyA9IHVybC5zdWJzdHIocXVlcnlJbmRleCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdXJsUmVjb2duaXphdGlvblJlc3VsdHMgPSB0aGlzLl9yZWNvZ25pemVyLnJlY29nbml6ZSh1cmwpO1xyXG4gICAgICAgIGlmICghdXJsUmVjb2duaXphdGlvblJlc3VsdHMgfHwgIXVybFJlY29nbml6YXRpb25SZXN1bHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB1cmxSZWNvZ25pemF0aW9uUmVzdWx0cyA9IHRoaXMuX2NoaWxkUmVjb2duaXplci5yZWNvZ25pemUodXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGluc3RydWN0aW9uSW5pdCA9IHtcclxuICAgICAgICAgICAgZnJhZ21lbnQsXHJcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nLFxyXG4gICAgICAgICAgICBjb25maWc6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcmVudEluc3RydWN0aW9uLFxyXG4gICAgICAgICAgICBwcmV2aW91c0luc3RydWN0aW9uOiB0aGlzLmN1cnJlbnRJbnN0cnVjdGlvbixcclxuICAgICAgICAgICAgcm91dGVyOiB0aGlzLFxyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBjb21wYXJlUXVlcnlQYXJhbXM6IHRoaXMub3B0aW9ucy5jb21wYXJlUXVlcnlQYXJhbXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgICBpZiAodXJsUmVjb2duaXphdGlvblJlc3VsdHMgJiYgdXJsUmVjb2duaXphdGlvblJlc3VsdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHVybFJlY29nbml6YXRpb25SZXN1bHRzWzBdO1xyXG4gICAgICAgICAgICBsZXQgaW5zdHJ1Y3Rpb24gPSBuZXcgTmF2aWdhdGlvbkluc3RydWN0aW9uKE9iamVjdC5hc3NpZ24oe30sIGluc3RydWN0aW9uSW5pdCwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBmaXJzdC5wYXJhbXMsXHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtczogZmlyc3QucXVlcnlQYXJhbXMgfHwgdXJsUmVjb2duaXphdGlvblJlc3VsdHMucXVlcnlQYXJhbXMsXHJcbiAgICAgICAgICAgICAgICBjb25maWc6IGZpcnN0LmNvbmZpZyB8fCBmaXJzdC5oYW5kbGVyXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdC5oYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBldmFsdWF0ZU5hdmlnYXRpb25TdHJhdGVneShpbnN0cnVjdGlvbiwgZmlyc3QuaGFuZGxlciwgZmlyc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZpcnN0LmhhbmRsZXIgJiYgdHlwZW9mIGZpcnN0LmhhbmRsZXIubmF2aWdhdGlvblN0cmF0ZWd5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBldmFsdWF0ZU5hdmlnYXRpb25TdHJhdGVneShpbnN0cnVjdGlvbiwgZmlyc3QuaGFuZGxlci5uYXZpZ2F0aW9uU3RyYXRlZ3ksIGZpcnN0LmhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gUHJvbWlzZS5yZXNvbHZlKGluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmNhdGNoQWxsSGFuZGxlcikge1xyXG4gICAgICAgICAgICBsZXQgaW5zdHJ1Y3Rpb24gPSBuZXcgTmF2aWdhdGlvbkluc3RydWN0aW9uKE9iamVjdC5hc3NpZ24oe30sIGluc3RydWN0aW9uSW5pdCwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7IHBhdGg6IGZyYWdtZW50IH0sXHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtczogdXJsUmVjb2duaXphdGlvblJlc3VsdHMgPyB1cmxSZWNvZ25pemF0aW9uUmVzdWx0cy5xdWVyeVBhcmFtcyA6IHt9LFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiBudWxsIC8vIGNvbmZpZyB3aWxsIGJlIGNyZWF0ZWQgYnkgdGhlIGNhdGNoQWxsSGFuZGxlclxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGV2YWx1YXRlTmF2aWdhdGlvblN0cmF0ZWd5KGluc3RydWN0aW9uLCB0aGlzLmNhdGNoQWxsSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGxldCByb3V0ZXIgPSB0aGlzLl9wYXJlbnRDYXRjaEFsbEhhbmRsZXIodGhpcy5wYXJlbnQpO1xyXG4gICAgICAgICAgICBpZiAocm91dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3UGFyZW50SW5zdHJ1Y3Rpb24gPSB0aGlzLl9maW5kUGFyZW50SW5zdHJ1Y3Rpb25Gcm9tUm91dGVyKHJvdXRlciwgcGFyZW50SW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluc3RydWN0aW9uID0gbmV3IE5hdmlnYXRpb25JbnN0cnVjdGlvbihPYmplY3QuYXNzaWduKHt9LCBpbnN0cnVjdGlvbkluaXQsIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgcGF0aDogZnJhZ21lbnQgfSxcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtczogdXJsUmVjb2duaXphdGlvblJlc3VsdHMgPyB1cmxSZWNvZ25pemF0aW9uUmVzdWx0cy5xdWVyeVBhcmFtcyA6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlcjogcm91dGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEluc3RydWN0aW9uOiBuZXdQYXJlbnRJbnN0cnVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDYXRjaEhhbmRsZXI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBudWxsIC8vIGNvbmZpZyB3aWxsIGJlIGNyZWF0ZWQgYnkgdGhlIGNoYWluZWQgcGFyZW50IGNhdGNoQWxsSGFuZGxlclxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZXZhbHVhdGVOYXZpZ2F0aW9uU3RyYXRlZ3koaW5zdHJ1Y3Rpb24sIHJvdXRlci5jYXRjaEFsbEhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHQgJiYgcGFyZW50SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gZ2VuZXJhdGVCYXNlVXJsKHRoaXMucGFyZW50LCBwYXJlbnRJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQgfHwgUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGBSb3V0ZSBub3QgZm91bmQ6ICR7dXJsfWApKTtcclxuICAgIH1cclxuICAgIC8qKkBpbnRlcm5hbCAqL1xyXG4gICAgX2ZpbmRQYXJlbnRJbnN0cnVjdGlvbkZyb21Sb3V0ZXIocm91dGVyLCBpbnN0cnVjdGlvbikge1xyXG4gICAgICAgIGlmIChpbnN0cnVjdGlvbi5yb3V0ZXIgPT09IHJvdXRlcikge1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbi5mcmFnbWVudCA9IHJvdXRlci5iYXNlVXJsOyAvLyBuZWVkIHRvIGNoYW5nZSB0aGUgZnJhZ21lbnQgaW4gY2FzZSBvZiBhIHJlZGlyZWN0IGluc3RlYWQgb2YgbW9kdWxlSWRcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbnN0cnVjdGlvbi5wYXJlbnRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmluZFBhcmVudEluc3RydWN0aW9uRnJvbVJvdXRlcihyb3V0ZXIsIGluc3RydWN0aW9uLnBhcmVudEluc3RydWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8qKkBpbnRlcm5hbCAqL1xyXG4gICAgX3BhcmVudENhdGNoQWxsSGFuZGxlcihyb3V0ZXIpIHtcclxuICAgICAgICBpZiAocm91dGVyLmNhdGNoQWxsSGFuZGxlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcm91dGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyb3V0ZXIucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnRDYXRjaEFsbEhhbmRsZXIocm91dGVyLnBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIF9jcmVhdGVSb3V0ZUNvbmZpZyhjb25maWcsIGluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2VcclxuICAgICAgICAgICAgLnJlc29sdmUoY29uZmlnKVxyXG4gICAgICAgICAgICAudGhlbigoYykgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtb2R1bGVJZDogYyB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYyhpbnN0cnVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gdHlwaW5nIGhlcmUgY291bGQgYmUgZWl0aGVyIFJvdXRlQ29uZmlnIG9yIFJlZGlyZWN0Q29uZmlnXHJcbiAgICAgICAgICAgIC8vIGJ1dCB0ZW1wb3JhcmlseSB0cmVhdCBib3RoIGFzIFJvdXRlQ29uZmlnXHJcbiAgICAgICAgICAgIC8vIHRvZG86IGltcHJvdmUgdHlwaW5ncyBwcmVjaXNpb25cclxuICAgICAgICAgICAgLnRoZW4oKGMpID0+IHR5cGVvZiBjID09PSAnc3RyaW5nJyA/IHsgbW9kdWxlSWQ6IGMgfSA6IGMpXHJcbiAgICAgICAgICAgIC50aGVuKChjKSA9PiB7XHJcbiAgICAgICAgICAgIGMucm91dGUgPSBpbnN0cnVjdGlvbi5wYXJhbXMucGF0aDtcclxuICAgICAgICAgICAgdmFsaWRhdGVSb3V0ZUNvbmZpZyhjKTtcclxuICAgICAgICAgICAgaWYgKCFjLm5hdk1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjLm5hdk1vZGVsID0gdGhpcy5jcmVhdGVOYXZNb2RlbChjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiBAaW50ZXJuYWwgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZyAqL1xyXG5jb25zdCBnZW5lcmF0ZUJhc2VVcmwgPSAocm91dGVyLCBpbnN0cnVjdGlvbikgPT4ge1xyXG4gICAgcmV0dXJuIGAke3JvdXRlci5iYXNlVXJsIHx8ICcnfSR7aW5zdHJ1Y3Rpb24uZ2V0QmFzZVVybCgpIHx8ICcnfWA7XHJcbn07XHJcbi8qIEBpbnRlcm5hbCBleHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nICovXHJcbmNvbnN0IHZhbGlkYXRlUm91dGVDb25maWcgPSAoY29uZmlnKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUm91dGUgQ29uZmlnJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yb3V0ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICBsZXQgbmFtZSA9IGNvbmZpZy5uYW1lIHx8ICcobm8gbmFtZSknO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBSb3V0ZSBDb25maWcgZm9yIFwiJyArIG5hbWUgKyAnXCI6IFlvdSBtdXN0IHNwZWNpZnkgYSBcInJvdXRlOlwiIHBhdHRlcm4uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoISgncmVkaXJlY3QnIGluIGNvbmZpZyB8fCBjb25maWcubW9kdWxlSWQgfHwgY29uZmlnLm5hdmlnYXRpb25TdHJhdGVneSB8fCBjb25maWcudmlld1BvcnRzKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBSb3V0ZSBDb25maWcgZm9yIFwiJyArIGNvbmZpZy5yb3V0ZSArICdcIjogWW91IG11c3Qgc3BlY2lmeSBhIFwibW9kdWxlSWQ6XCIsIFwicmVkaXJlY3Q6XCIsIFwibmF2aWdhdGlvblN0cmF0ZWd5OlwiLCBvciBcInZpZXdQb3J0czpcIi4nKTtcclxuICAgIH1cclxufTtcclxuLyogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmcgKi9cclxuY29uc3QgZXZhbHVhdGVOYXZpZ2F0aW9uU3RyYXRlZ3kgPSAoaW5zdHJ1Y3Rpb24sIGV2YWx1YXRvciwgY29udGV4dCkgPT4ge1xyXG4gICAgcmV0dXJuIFByb21pc2VcclxuICAgICAgICAucmVzb2x2ZShldmFsdWF0b3IuY2FsbChjb250ZXh0LCBpbnN0cnVjdGlvbikpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGlmICghKCd2aWV3UG9ydHMnIGluIGluc3RydWN0aW9uLmNvbmZpZykpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24uY29uZmlnLnZpZXdQb3J0cyA9IHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUlkOiBpbnN0cnVjdGlvbi5jb25maWcubW9kdWxlSWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfSk7XHJcbn07XG5cbi8qKkBpbnRlcm5hbCBleHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nICovXHJcbmNvbnN0IGNyZWF0ZU5leHRGbiA9IChpbnN0cnVjdGlvbiwgc3RlcHMpID0+IHtcclxuICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgY29uc3QgbmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIGlmIChpbmRleCA8IHN0ZXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFN0ZXAgPSBzdGVwc1tpbmRleF07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFN0ZXAoaW5zdHJ1Y3Rpb24sIG5leHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5yZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG5leHQuY29tcGxldGUgPSBjcmVhdGVDb21wbGV0aW9uSGFuZGxlcihuZXh0LCBcImNvbXBsZXRlZFwiIC8qIENvbXBsZXRlZCAqLyk7XHJcbiAgICBuZXh0LmNhbmNlbCA9IGNyZWF0ZUNvbXBsZXRpb25IYW5kbGVyKG5leHQsIFwiY2FuY2VsZWRcIiAvKiBDYW5jZWxlZCAqLyk7XHJcbiAgICBuZXh0LnJlamVjdCA9IGNyZWF0ZUNvbXBsZXRpb25IYW5kbGVyKG5leHQsIFwicmVqZWN0ZWRcIiAvKiBSZWplY3RlZCAqLyk7XHJcbiAgICByZXR1cm4gbmV4dDtcclxufTtcclxuLyoqQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmcgKi9cclxuY29uc3QgY3JlYXRlQ29tcGxldGlvbkhhbmRsZXIgPSAobmV4dCwgc3RhdHVzKSA9PiB7XHJcbiAgICByZXR1cm4gKG91dHB1dCkgPT4gUHJvbWlzZVxyXG4gICAgICAgIC5yZXNvbHZlKHtcclxuICAgICAgICBzdGF0dXMsXHJcbiAgICAgICAgb3V0cHV0LFxyXG4gICAgICAgIGNvbXBsZXRlZDogc3RhdHVzID09PSBcImNvbXBsZXRlZFwiIC8qIENvbXBsZXRlZCAqL1xyXG4gICAgfSk7XHJcbn07XG5cbi8qKlxyXG4gKiBUaGUgY2xhc3MgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIGFuZCBwcm9jZXNzaW5nIHRoZSBuYXZpZ2F0aW9uIHBpcGVsaW5lLlxyXG4gKi9cclxuY2xhc3MgUGlwZWxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBpcGVsaW5lIHN0ZXBzLiBBbmQgc3RlcHMgYWRkZWQgdmlhIGFkZFN0ZXAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBmdW5jdGlvblxyXG4gICAgICAgICAqIFRoZSBhY3R1YWx5IHJ1bm5pbmcgZnVuY3Rpb25zIHdpdGggY29ycmVjdCBzdGVwIGNvbnRleHRzIG9mIHRoaXMgcGlwZWxpbmVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN0ZXBzID0gW107XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBzdGVwIHRvIHRoZSBwaXBlbGluZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RlcCBUaGUgcGlwZWxpbmUgc3RlcC5cclxuICAgICAqL1xyXG4gICAgYWRkU3RlcChzdGVwKSB7XHJcbiAgICAgICAgbGV0IHJ1bjtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ZXAgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcnVuID0gc3RlcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHN0ZXAuZ2V0U3RlcHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgLy8gZ2V0U3RlcHMgaXMgdG8gZW5hYmxlIHN1cHBvcnQgb3BlbiBzbG90c1xyXG4gICAgICAgICAgICAvLyB3aGVyZSBkZXZzIGNhbiBhZGQgbXVsdGlwbGUgc3RlcHMgaW50byB0aGUgc2FtZSBzbG90IG5hbWVcclxuICAgICAgICAgICAgbGV0IHN0ZXBzID0gc3RlcC5nZXRTdGVwcygpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHN0ZXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdGVwKHN0ZXBzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJ1biA9IHN0ZXAucnVuLmJpbmQoc3RlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RlcHMucHVzaChydW4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSdW5zIHRoZSBwaXBlbGluZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5zdHJ1Y3Rpb24gVGhlIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb24gdG8gcHJvY2Vzcy5cclxuICAgICAqL1xyXG4gICAgcnVuKGluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgbmV4dEZuID0gY3JlYXRlTmV4dEZuKGluc3RydWN0aW9uLCB0aGlzLnN0ZXBzKTtcclxuICAgICAgICByZXR1cm4gbmV4dEZuKCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvdmlkZWQgb2JqZWN0IGlzIGEgbmF2aWdhdGlvbiBjb21tYW5kLlxyXG4qIEEgbmF2aWdhdGlvbiBjb21tYW5kIGlzIGFueXRoaW5nIHdpdGggYSBuYXZpZ2F0ZSBtZXRob2QuXHJcbipcclxuKiBAcGFyYW0gb2JqIFRoZSBvYmplY3QgdG8gY2hlY2suXHJcbiovXHJcbmZ1bmN0aW9uIGlzTmF2aWdhdGlvbkNvbW1hbmQob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmoubmF2aWdhdGUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuLyoqXHJcbiogVXNlZCBkdXJpbmcgdGhlIGFjdGl2YXRpb24gbGlmZWN5Y2xlIHRvIGNhdXNlIGEgcmVkaXJlY3QuXHJcbiovXHJcbmNsYXNzIFJlZGlyZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHVybCBUaGUgVVJMIGZyYWdtZW50IHRvIHVzZSBhcyB0aGUgbmF2aWdhdGlvbiBkZXN0aW5hdGlvbi5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHRyaWdnZXI6IHRydWUsIHJlcGxhY2U6IHRydWUgfSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5zaG91bGRDb250aW51ZVByb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGJ5IHRoZSBhY3RpdmF0aW9uIHN5c3RlbSB0byBzZXQgdGhlIGNoaWxkIHJvdXRlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcm91dGVyIFRoZSByb3V0ZXIuXHJcbiAgICAgKi9cclxuICAgIHNldFJvdXRlcihyb3V0ZXIpIHtcclxuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGJ5IHRoZSBuYXZpZ2F0aW9uIHBpcGVsaW5lIHRvIG5hdmlnYXRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcHBSb3V0ZXIgVGhlIHJvdXRlciB0byBiZSByZWRpcmVjdGVkLlxyXG4gICAgICovXHJcbiAgICBuYXZpZ2F0ZShhcHBSb3V0ZXIpIHtcclxuICAgICAgICBsZXQgbmF2aWdhdGluZ1JvdXRlciA9IHRoaXMub3B0aW9ucy51c2VBcHBSb3V0ZXIgPyBhcHBSb3V0ZXIgOiAodGhpcy5yb3V0ZXIgfHwgYXBwUm91dGVyKTtcclxuICAgICAgICBuYXZpZ2F0aW5nUm91dGVyLm5hdmlnYXRlKHRoaXMudXJsLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBVc2VkIGR1cmluZyB0aGUgYWN0aXZhdGlvbiBsaWZlY3ljbGUgdG8gY2F1c2UgYSByZWRpcmVjdCB0byBhIG5hbWVkIHJvdXRlLlxyXG4gKi9cclxuY2xhc3MgUmVkaXJlY3RUb1JvdXRlIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHJvdXRlIFRoZSBuYW1lIG9mIHRoZSByb3V0ZS5cclxuICAgICAqIEBwYXJhbSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMgdG8gYmUgc2VudCB0byB0aGUgYWN0aXZhdGlvbiBtZXRob2QuXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byB1c2UgZm9yIG5hdmlnYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlLCBwYXJhbXMgPSB7fSwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZSA9IHJvdXRlO1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB0cmlnZ2VyOiB0cnVlLCByZXBsYWNlOiB0cnVlIH0sIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuc2hvdWxkQ29udGludWVQcm9jZXNzaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSB0aGUgYWN0aXZhdGlvbiBzeXN0ZW0gdG8gc2V0IHRoZSBjaGlsZCByb3V0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJvdXRlciBUaGUgcm91dGVyLlxyXG4gICAgICovXHJcbiAgICBzZXRSb3V0ZXIocm91dGVyKSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSB0aGUgbmF2aWdhdGlvbiBwaXBlbGluZSB0byBuYXZpZ2F0ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXBwUm91dGVyIFRoZSByb3V0ZXIgdG8gYmUgcmVkaXJlY3RlZC5cclxuICAgICAqL1xyXG4gICAgbmF2aWdhdGUoYXBwUm91dGVyKSB7XHJcbiAgICAgICAgbGV0IG5hdmlnYXRpbmdSb3V0ZXIgPSB0aGlzLm9wdGlvbnMudXNlQXBwUm91dGVyID8gYXBwUm91dGVyIDogKHRoaXMucm91dGVyIHx8IGFwcFJvdXRlcik7XHJcbiAgICAgICAgbmF2aWdhdGluZ1JvdXRlci5uYXZpZ2F0ZVRvUm91dGUodGhpcy5yb3V0ZSwgdGhpcy5wYXJhbXMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBpbnRlcm5hbCBleHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBfYnVpbGROYXZpZ2F0aW9uUGxhbihpbnN0cnVjdGlvbiwgZm9yY2VMaWZlY3ljbGVNaW5pbXVtKSB7XHJcbiAgICBsZXQgY29uZmlnID0gaW5zdHJ1Y3Rpb24uY29uZmlnO1xyXG4gICAgaWYgKCdyZWRpcmVjdCcgaW4gY29uZmlnKSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkUmVkaXJlY3RQbGFuKGluc3RydWN0aW9uKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByZXZJbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uLnByZXZpb3VzSW5zdHJ1Y3Rpb247XHJcbiAgICBjb25zdCBkZWZhdWx0Vmlld1BvcnRDb25maWdzID0gaW5zdHJ1Y3Rpb24ucm91dGVyLnZpZXdQb3J0RGVmYXVsdHM7XHJcbiAgICBpZiAocHJldkluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkVHJhbnNpdGlvblBsYW5zKGluc3RydWN0aW9uLCBwcmV2SW5zdHJ1Y3Rpb24sIGRlZmF1bHRWaWV3UG9ydENvbmZpZ3MsIGZvcmNlTGlmZWN5Y2xlTWluaW11bSk7XHJcbiAgICB9XHJcbiAgICAvLyBmaXJzdCBuYXZpZ2F0aW9uLCBvbmx5IG5lZWQgdG8gcHJlcGFyZSBhIGZldyBpbmZvcm1hdGlvbiBmb3IgZWFjaCB2aWV3cG9ydCBwbGFuXHJcbiAgICBjb25zdCB2aWV3UG9ydFBsYW5zID0ge307XHJcbiAgICBsZXQgdmlld1BvcnRDb25maWdzID0gY29uZmlnLnZpZXdQb3J0cztcclxuICAgIGZvciAobGV0IHZpZXdQb3J0TmFtZSBpbiB2aWV3UG9ydENvbmZpZ3MpIHtcclxuICAgICAgICBsZXQgdmlld1BvcnRDb25maWcgPSB2aWV3UG9ydENvbmZpZ3Nbdmlld1BvcnROYW1lXTtcclxuICAgICAgICBpZiAodmlld1BvcnRDb25maWcubW9kdWxlSWQgPT09IG51bGwgJiYgdmlld1BvcnROYW1lIGluIGRlZmF1bHRWaWV3UG9ydENvbmZpZ3MpIHtcclxuICAgICAgICAgICAgdmlld1BvcnRDb25maWcgPSBkZWZhdWx0Vmlld1BvcnRDb25maWdzW3ZpZXdQb3J0TmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZpZXdQb3J0UGxhbnNbdmlld1BvcnROYW1lXSA9IHtcclxuICAgICAgICAgICAgbmFtZTogdmlld1BvcnROYW1lLFxyXG4gICAgICAgICAgICBzdHJhdGVneTogXCJyZXBsYWNlXCIgLyogUmVwbGFjZSAqLyxcclxuICAgICAgICAgICAgY29uZmlnOiB2aWV3UG9ydENvbmZpZ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZpZXdQb3J0UGxhbnMpO1xyXG59XHJcbi8qKlxyXG4gKiBCdWlsZCByZWRpcmVjdCBwbGFuIGJhc2VkIG9uIGNvbmZpZyBvZiBhIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb25cclxuICogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmdcclxuICovXHJcbmNvbnN0IGJ1aWxkUmVkaXJlY3RQbGFuID0gKGluc3RydWN0aW9uKSA9PiB7XHJcbiAgICBjb25zdCBjb25maWcgPSBpbnN0cnVjdGlvbi5jb25maWc7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBpbnN0cnVjdGlvbi5yb3V0ZXI7XHJcbiAgICByZXR1cm4gcm91dGVyXHJcbiAgICAgICAgLl9jcmVhdGVOYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24oY29uZmlnLnJlZGlyZWN0KVxyXG4gICAgICAgIC50aGVuKHJlZGlyZWN0SW5zdHJ1Y3Rpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSW5zdHJ1Y3Rpb25QYXJhbXMgPSBpbnN0cnVjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgY29uc3QgcmVkaXJlY3RJbnN0cnVjdGlvblBhcmFtcyA9IHJlZGlyZWN0SW5zdHJ1Y3Rpb24ucGFyYW1zO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiByZWRpcmVjdEluc3RydWN0aW9uUGFyYW1zKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBwYXJhbSBvbiB0aGUgcmVkaXJlY3QgcG9pbnRzIHRvIGFub3RoZXIgcGFyYW0sIGUuZy4geyByb3V0ZTogZmlyc3QvOnRoaXMsIHJlZGlyZWN0OiBzZWNvbmQvOnRoaXMgfVxyXG4gICAgICAgICAgICBsZXQgdmFsID0gcmVkaXJlY3RJbnN0cnVjdGlvblBhcmFtc1trZXldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgdmFsWzBdID09PSAnOicpIHtcclxuICAgICAgICAgICAgICAgIHZhbCA9IHZhbC5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgIC8vIEFuZCBpZiB0aGF0IHBhcmFtIGlzIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBpbnN0cnVjdGlvbiB0aGVuIHVzZSBpdFxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCBpbiBvcmlnaW5hbEluc3RydWN0aW9uUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2tleV0gPSBvcmlnaW5hbEluc3RydWN0aW9uUGFyYW1zW3ZhbF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IHJlZGlyZWN0SW5zdHJ1Y3Rpb25QYXJhbXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IHJvdXRlci5nZW5lcmF0ZShyZWRpcmVjdEluc3RydWN0aW9uLmNvbmZpZywgcGFyYW1zLCBpbnN0cnVjdGlvbi5vcHRpb25zKTtcclxuICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciBjaGlsZCByb3V0ZXNcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gb3JpZ2luYWxJbnN0cnVjdGlvblBhcmFtcykge1xyXG4gICAgICAgICAgICByZWRpcmVjdExvY2F0aW9uID0gcmVkaXJlY3RMb2NhdGlvbi5yZXBsYWNlKGA6JHtrZXl9YCwgb3JpZ2luYWxJbnN0cnVjdGlvblBhcmFtc1trZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gaW5zdHJ1Y3Rpb24ucXVlcnlTdHJpbmc7XHJcbiAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJlZGlyZWN0TG9jYXRpb24gKz0gJz8nICsgcXVlcnlTdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFJlZGlyZWN0KHJlZGlyZWN0TG9jYXRpb24pKTtcclxuICAgIH0pO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHZpZXdQb3J0UGxhbnMgdGhlIFBsYW4gcmVjb3JkIHRoYXQgaG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgYnVpbHQgcGxhbnNcclxuICogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmdcclxuICovXHJcbmNvbnN0IGJ1aWxkVHJhbnNpdGlvblBsYW5zID0gKGN1cnJlbnRJbnN0cnVjdGlvbiwgcHJldmlvdXNJbnN0cnVjdGlvbiwgZGVmYXVsdFZpZXdQb3J0Q29uZmlncywgZm9yY2VMaWZlY3ljbGVNaW5pbXVtKSA9PiB7XHJcbiAgICBsZXQgdmlld1BvcnRQbGFucyA9IHt9O1xyXG4gICAgbGV0IG5ld0luc3RydWN0aW9uQ29uZmlnID0gY3VycmVudEluc3RydWN0aW9uLmNvbmZpZztcclxuICAgIGxldCBoYXNOZXdQYXJhbXMgPSBoYXNEaWZmZXJlbnRQYXJhbWV0ZXJWYWx1ZXMocHJldmlvdXNJbnN0cnVjdGlvbiwgY3VycmVudEluc3RydWN0aW9uKTtcclxuICAgIGxldCBwZW5kaW5nID0gW107XHJcbiAgICBsZXQgcHJldmlvdXNWaWV3UG9ydEluc3RydWN0aW9ucyA9IHByZXZpb3VzSW5zdHJ1Y3Rpb24udmlld1BvcnRJbnN0cnVjdGlvbnM7XHJcbiAgICBmb3IgKGxldCB2aWV3UG9ydE5hbWUgaW4gcHJldmlvdXNWaWV3UG9ydEluc3RydWN0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHByZXZWaWV3UG9ydEluc3RydWN0aW9uID0gcHJldmlvdXNWaWV3UG9ydEluc3RydWN0aW9uc1t2aWV3UG9ydE5hbWVdO1xyXG4gICAgICAgIGNvbnN0IHByZXZWaWV3UG9ydENvbXBvbmVudCA9IHByZXZWaWV3UG9ydEluc3RydWN0aW9uLmNvbXBvbmVudDtcclxuICAgICAgICBjb25zdCBuZXdJbnN0cnVjdGlvblZpZXdQb3J0Q29uZmlncyA9IG5ld0luc3RydWN0aW9uQ29uZmlnLnZpZXdQb3J0cztcclxuICAgICAgICAvLyBpZiB0aGlzIGlzIGludm9rZWQgb24gYSB2aWV3cG9ydCB3aXRob3V0IGFueSBjaGFuZ2VzLCBiYXNlZCBvbiBuZXcgdXJsLFxyXG4gICAgICAgIC8vIG5ld1ZpZXdQb3J0Q29uZmlnIHdpbGwgYmUgdGhlIGV4aXN0aW5nIHZpZXdwb3J0IGluc3RydWN0aW9uXHJcbiAgICAgICAgbGV0IG5leHRWaWV3UG9ydENvbmZpZyA9IHZpZXdQb3J0TmFtZSBpbiBuZXdJbnN0cnVjdGlvblZpZXdQb3J0Q29uZmlnc1xyXG4gICAgICAgICAgICA/IG5ld0luc3RydWN0aW9uVmlld1BvcnRDb25maWdzW3ZpZXdQb3J0TmFtZV1cclxuICAgICAgICAgICAgOiBwcmV2Vmlld1BvcnRJbnN0cnVjdGlvbjtcclxuICAgICAgICBpZiAobmV4dFZpZXdQb3J0Q29uZmlnLm1vZHVsZUlkID09PSBudWxsICYmIHZpZXdQb3J0TmFtZSBpbiBkZWZhdWx0Vmlld1BvcnRDb25maWdzKSB7XHJcbiAgICAgICAgICAgIG5leHRWaWV3UG9ydENvbmZpZyA9IGRlZmF1bHRWaWV3UG9ydENvbmZpZ3Nbdmlld1BvcnROYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgdmlld1BvcnRBY3RpdmF0aW9uU3RyYXRlZ3kgPSBkZXRlcm1pbmVBY3RpdmF0aW9uU3RyYXRlZ3koY3VycmVudEluc3RydWN0aW9uLCBwcmV2Vmlld1BvcnRJbnN0cnVjdGlvbiwgbmV4dFZpZXdQb3J0Q29uZmlnLCBoYXNOZXdQYXJhbXMsIGZvcmNlTGlmZWN5Y2xlTWluaW11bSk7XHJcbiAgICAgICAgY29uc3Qgdmlld1BvcnRQbGFuID0gdmlld1BvcnRQbGFuc1t2aWV3UG9ydE5hbWVdID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB2aWV3UG9ydE5hbWUsXHJcbiAgICAgICAgICAgIC8vIFZpZXdQb3J0SW5zdHJ1Y3Rpb24gY2FuIHF1YWNrIGxpa2UgYSBSb3V0ZUNvbmZpZ1xyXG4gICAgICAgICAgICBjb25maWc6IG5leHRWaWV3UG9ydENvbmZpZyxcclxuICAgICAgICAgICAgcHJldkNvbXBvbmVudDogcHJldlZpZXdQb3J0Q29tcG9uZW50LFxyXG4gICAgICAgICAgICBwcmV2TW9kdWxlSWQ6IHByZXZWaWV3UG9ydEluc3RydWN0aW9uLm1vZHVsZUlkLFxyXG4gICAgICAgICAgICBzdHJhdGVneTogdmlld1BvcnRBY3RpdmF0aW9uU3RyYXRlZ3lcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGJ1aWxkIG5hdiBwbGFucyBmb3IgYWxsIGV4aXN0aW5nIGNoaWxkIHJvdXRlcnMvdmlld3BvcnRzIG9mIHRoaXMgdmlld3BvcnRcclxuICAgICAgICAvLyB0aGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgZXhpc3RpbmcgY2hpbGQgdmlld3BvcnRzIGFuZCByb3V0ZXJzIGFscmVhZHkgaGF2ZSBuZWNlc3NhcnkgaW5mb3JtYXRpb25cclxuICAgICAgICAvLyB0byBwcm9jZXNzIHRoZSB3aWxkY2FyZCBwYXRoIGZyb20gcGFyZW50IGluc3RydWN0aW9uXHJcbiAgICAgICAgaWYgKHZpZXdQb3J0QWN0aXZhdGlvblN0cmF0ZWd5ICE9PSBcInJlcGxhY2VcIiAvKiBSZXBsYWNlICovICYmIHByZXZWaWV3UG9ydEluc3RydWN0aW9uLmNoaWxkUm91dGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjdXJyZW50SW5zdHJ1Y3Rpb24uZ2V0V2lsZGNhcmRQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBwcmV2Vmlld1BvcnRJbnN0cnVjdGlvblxyXG4gICAgICAgICAgICAgICAgLmNoaWxkUm91dGVyXHJcbiAgICAgICAgICAgICAgICAuX2NyZWF0ZU5hdmlnYXRpb25JbnN0cnVjdGlvbihwYXRoLCBjdXJyZW50SW5zdHJ1Y3Rpb24pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoY2hpbGRJbnN0cnVjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmlld1BvcnRQbGFuLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uID0gY2hpbGRJbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfYnVpbGROYXZpZ2F0aW9uUGxhbihjaGlsZEluc3RydWN0aW9uLCBcclxuICAgICAgICAgICAgICAgIC8vIGlzIGl0IHNhZmUgdG8gYXNzdW1lIHZpZXdQb3J0UGxhbiBoYXMgbm90IGJlZW4gY2hhbmdlZCBmcm9tIHByZXZpb3VzIGFzc2lnbm1lbnQ/XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBzbywgY2FuIGp1c3QgdXNlIGxvY2FsIHZhcmlhYmxlIHZpZXdQb3J0UGxhblN0cmF0ZWd5XHJcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBjb3VsZCBiZSB1c2VyIGNvZGUgbW9kaWZ5aW5nIHZpZXdwb3J0IHBsYW4gZHVyaW5nIF9jcmVhdGVOYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24/XHJcbiAgICAgICAgICAgICAgICB2aWV3UG9ydFBsYW4uc3RyYXRlZ3kgPT09IFwiaW52b2tlLWxpZmVjeWNsZVwiIC8qIEludm9rZUxpZmVjeWNsZSAqLylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjaGlsZFBsYW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFBsYW4gaW5zdGFuY2VvZiBSZWRpcmVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoY2hpbGRQbGFuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRJbnN0cnVjdGlvbi5wbGFuID0gY2hpbGRQbGFuO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciBibHVlYmlyZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHBlbmRpbmcucHVzaCh0YXNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZykudGhlbigoKSA9PiB2aWV3UG9ydFBsYW5zKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSBuZXdWaWV3UG9ydENvbmZpZyBpZiB0aGlzIGlzIGludm9rZWQgb24gYSB2aWV3cG9ydCB3aXRob3V0IGFueSBjaGFuZ2VzLCBiYXNlZCBvbiBuZXcgdXJsLCBuZXdWaWV3UG9ydENvbmZpZyB3aWxsIGJlIHRoZSBleGlzdGluZyB2aWV3cG9ydCBpbnN0cnVjdGlvblxyXG4gKiBAaW50ZXJuYWwgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgZGV0ZXJtaW5lQWN0aXZhdGlvblN0cmF0ZWd5ID0gKGN1cnJlbnROYXZJbnN0cnVjdGlvbiwgcHJldlZpZXdQb3J0SW5zdHJ1Y3Rpb24sIG5ld1ZpZXdQb3J0Q29uZmlnLCBcclxuLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhlcmUgaXMgZGlmZmVyZW5jZSBiZXR3ZWVuIG9sZCBhbmQgbmV3IHVybCBwYXJhbXNcclxuaGFzTmV3UGFyYW1zLCBmb3JjZUxpZmVjeWNsZU1pbmltdW0pID0+IHtcclxuICAgIGxldCBuZXdJbnN0cnVjdGlvbkNvbmZpZyA9IGN1cnJlbnROYXZJbnN0cnVjdGlvbi5jb25maWc7XHJcbiAgICBsZXQgcHJldlZpZXdQb3J0Vmlld01vZGVsID0gcHJldlZpZXdQb3J0SW5zdHJ1Y3Rpb24uY29tcG9uZW50LnZpZXdNb2RlbDtcclxuICAgIGxldCB2aWV3UG9ydFBsYW5TdHJhdGVneTtcclxuICAgIGlmIChwcmV2Vmlld1BvcnRJbnN0cnVjdGlvbi5tb2R1bGVJZCAhPT0gbmV3Vmlld1BvcnRDb25maWcubW9kdWxlSWQpIHtcclxuICAgICAgICB2aWV3UG9ydFBsYW5TdHJhdGVneSA9IFwicmVwbGFjZVwiIC8qIFJlcGxhY2UgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgnZGV0ZXJtaW5lQWN0aXZhdGlvblN0cmF0ZWd5JyBpbiBwcmV2Vmlld1BvcnRWaWV3TW9kZWwpIHtcclxuICAgICAgICB2aWV3UG9ydFBsYW5TdHJhdGVneSA9IHByZXZWaWV3UG9ydFZpZXdNb2RlbC5kZXRlcm1pbmVBY3RpdmF0aW9uU3RyYXRlZ3koLi4uY3VycmVudE5hdkluc3RydWN0aW9uLmxpZmVjeWNsZUFyZ3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobmV3SW5zdHJ1Y3Rpb25Db25maWcuYWN0aXZhdGlvblN0cmF0ZWd5KSB7XHJcbiAgICAgICAgdmlld1BvcnRQbGFuU3RyYXRlZ3kgPSBuZXdJbnN0cnVjdGlvbkNvbmZpZy5hY3RpdmF0aW9uU3RyYXRlZ3k7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChoYXNOZXdQYXJhbXMgfHwgZm9yY2VMaWZlY3ljbGVNaW5pbXVtKSB7XHJcbiAgICAgICAgdmlld1BvcnRQbGFuU3RyYXRlZ3kgPSBcImludm9rZS1saWZlY3ljbGVcIiAvKiBJbnZva2VMaWZlY3ljbGUgKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2aWV3UG9ydFBsYW5TdHJhdGVneSA9IFwibm8tY2hhbmdlXCIgLyogTm9DaGFuZ2UgKi87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmlld1BvcnRQbGFuU3RyYXRlZ3k7XHJcbn07XHJcbi8qKkBpbnRlcm5hbCBleHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nICovXHJcbmNvbnN0IGhhc0RpZmZlcmVudFBhcmFtZXRlclZhbHVlcyA9IChwcmV2LCBuZXh0KSA9PiB7XHJcbiAgICBsZXQgcHJldlBhcmFtcyA9IHByZXYucGFyYW1zO1xyXG4gICAgbGV0IG5leHRQYXJhbXMgPSBuZXh0LnBhcmFtcztcclxuICAgIGxldCBuZXh0V2lsZENhcmROYW1lID0gbmV4dC5jb25maWcuaGFzQ2hpbGRSb3V0ZXIgPyBuZXh0LmdldFdpbGRDYXJkTmFtZSgpIDogbnVsbDtcclxuICAgIGZvciAobGV0IGtleSBpbiBuZXh0UGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gbmV4dFdpbGRDYXJkTmFtZSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZQYXJhbXNba2V5XSAhPT0gbmV4dFBhcmFtc1trZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGtleSBpbiBwcmV2UGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gbmV4dFdpbGRDYXJkTmFtZSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZQYXJhbXNba2V5XSAhPT0gbmV4dFBhcmFtc1trZXldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghbmV4dC5vcHRpb25zLmNvbXBhcmVRdWVyeVBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGxldCBwcmV2UXVlcnlQYXJhbXMgPSBwcmV2LnF1ZXJ5UGFyYW1zO1xyXG4gICAgbGV0IG5leHRRdWVyeVBhcmFtcyA9IG5leHQucXVlcnlQYXJhbXM7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gbmV4dFF1ZXJ5UGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKHByZXZRdWVyeVBhcmFtc1trZXldICE9PSBuZXh0UXVlcnlQYXJhbXNba2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gcHJldlF1ZXJ5UGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKHByZXZRdWVyeVBhcmFtc1trZXldICE9PSBuZXh0UXVlcnlQYXJhbXNba2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XG5cbi8qKlxyXG4gKiBUcmFuc2Zvcm0gYSBuYXZpZ2F0aW9uIGluc3RydWN0aW9uIGludG8gdmlld3BvcnQgcGxhbiByZWNvcmQgb2JqZWN0LFxyXG4gKiBvciBhIHJlZGlyZWN0IHJlcXVlc3QgaWYgdXNlciB2aWV3bW9kZWwgZGVtYW5kc1xyXG4gKi9cclxuY2xhc3MgQnVpbGROYXZpZ2F0aW9uUGxhblN0ZXAge1xyXG4gICAgcnVuKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgbmV4dCkge1xyXG4gICAgICAgIHJldHVybiBfYnVpbGROYXZpZ2F0aW9uUGxhbihuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24pXHJcbiAgICAgICAgICAgIC50aGVuKHBsYW4gPT4ge1xyXG4gICAgICAgICAgICBpZiAocGxhbiBpbnN0YW5jZW9mIFJlZGlyZWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5jYW5jZWwocGxhbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmF2aWdhdGlvbkluc3RydWN0aW9uLnBsYW4gPSBwbGFuO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChuZXh0LmNhbmNlbCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBpbnRlcm5hbCBFeHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nXHJcbiAqL1xyXG5jb25zdCBsb2FkTmV3Um91dGUgPSAocm91dGVMb2FkZXIsIG5hdmlnYXRpb25JbnN0cnVjdGlvbikgPT4ge1xyXG4gICAgbGV0IGxvYWRpbmdQbGFucyA9IGRldGVybWluZUxvYWRpbmdQbGFucyhuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24pO1xyXG4gICAgbGV0IGxvYWRQcm9taXNlcyA9IGxvYWRpbmdQbGFucy5tYXAoKGxvYWRpbmdQbGFuKSA9PiBsb2FkUm91dGUocm91dGVMb2FkZXIsIGxvYWRpbmdQbGFuLm5hdmlnYXRpb25JbnN0cnVjdGlvbiwgbG9hZGluZ1BsYW4udmlld1BvcnRQbGFuKSk7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobG9hZFByb21pc2VzKTtcclxufTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbCBFeHBvcnRlZCBmb3IgdW5pdCB0ZXN0aW5nXHJcbiAqL1xyXG5jb25zdCBkZXRlcm1pbmVMb2FkaW5nUGxhbnMgPSAobmF2aWdhdGlvbkluc3RydWN0aW9uLCBsb2FkaW5nUGxhbnMgPSBbXSkgPT4ge1xyXG4gICAgbGV0IHZpZXdQb3J0UGxhbnMgPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24ucGxhbjtcclxuICAgIGZvciAobGV0IHZpZXdQb3J0TmFtZSBpbiB2aWV3UG9ydFBsYW5zKSB7XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0UGxhbiA9IHZpZXdQb3J0UGxhbnNbdmlld1BvcnROYW1lXTtcclxuICAgICAgICBsZXQgY2hpbGROYXZJbnN0cnVjdGlvbiA9IHZpZXdQb3J0UGxhbi5jaGlsZE5hdmlnYXRpb25JbnN0cnVjdGlvbjtcclxuICAgICAgICBpZiAodmlld1BvcnRQbGFuLnN0cmF0ZWd5ID09PSBcInJlcGxhY2VcIiAvKiBSZXBsYWNlICovKSB7XHJcbiAgICAgICAgICAgIGxvYWRpbmdQbGFucy5wdXNoKHsgdmlld1BvcnRQbGFuLCBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24gfSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZE5hdkluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVMb2FkaW5nUGxhbnMoY2hpbGROYXZJbnN0cnVjdGlvbiwgbG9hZGluZ1BsYW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24uYWRkVmlld1BvcnRJbnN0cnVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB2aWV3UG9ydE5hbWUsXHJcbiAgICAgICAgICAgICAgICBzdHJhdGVneTogdmlld1BvcnRQbGFuLnN0cmF0ZWd5LFxyXG4gICAgICAgICAgICAgICAgbW9kdWxlSWQ6IHZpZXdQb3J0UGxhbi5wcmV2TW9kdWxlSWQsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHZpZXdQb3J0UGxhbi5wcmV2Q29tcG9uZW50XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGROYXZJbnN0cnVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmlld1BvcnRJbnN0cnVjdGlvbi5jaGlsZE5hdmlnYXRpb25JbnN0cnVjdGlvbiA9IGNoaWxkTmF2SW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgICAgICAgICBkZXRlcm1pbmVMb2FkaW5nUGxhbnMoY2hpbGROYXZJbnN0cnVjdGlvbiwgbG9hZGluZ1BsYW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBsb2FkaW5nUGxhbnM7XHJcbn07XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgRXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgbG9hZFJvdXRlID0gKHJvdXRlTG9hZGVyLCBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sIHZpZXdQb3J0UGxhbikgPT4ge1xyXG4gICAgbGV0IHBsYW5Db25maWcgPSB2aWV3UG9ydFBsYW4uY29uZmlnO1xyXG4gICAgbGV0IG1vZHVsZUlkID0gcGxhbkNvbmZpZyA/IHBsYW5Db25maWcubW9kdWxlSWQgOiBudWxsO1xyXG4gICAgcmV0dXJuIGxvYWRDb21wb25lbnQocm91dGVMb2FkZXIsIG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgcGxhbkNvbmZpZylcclxuICAgICAgICAudGhlbigoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24uYWRkVmlld1BvcnRJbnN0cnVjdGlvbih7XHJcbiAgICAgICAgICAgIG5hbWU6IHZpZXdQb3J0UGxhbi5uYW1lLFxyXG4gICAgICAgICAgICBzdHJhdGVneTogdmlld1BvcnRQbGFuLnN0cmF0ZWd5LFxyXG4gICAgICAgICAgICBtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGNoaWxkUm91dGVyID0gY29tcG9uZW50LmNoaWxkUm91dGVyO1xyXG4gICAgICAgIGlmIChjaGlsZFJvdXRlcikge1xyXG4gICAgICAgICAgICBsZXQgcGF0aCA9IG5hdmlnYXRpb25JbnN0cnVjdGlvbi5nZXRXaWxkY2FyZFBhdGgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkUm91dGVyXHJcbiAgICAgICAgICAgICAgICAuX2NyZWF0ZU5hdmlnYXRpb25JbnN0cnVjdGlvbihwYXRoLCBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoY2hpbGRJbnN0cnVjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmlld1BvcnRQbGFuLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uID0gY2hpbGRJbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfYnVpbGROYXZpZ2F0aW9uUGxhbihjaGlsZEluc3RydWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChjaGlsZFBsYW4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRQbGFuIGluc3RhbmNlb2YgUmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNoaWxkUGxhbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkSW5zdHJ1Y3Rpb24ucGxhbiA9IGNoaWxkUGxhbjtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3UG9ydEluc3RydWN0aW9uLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uID0gY2hpbGRJbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9hZE5ld1JvdXRlKHJvdXRlTG9hZGVyLCBjaGlsZEluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHMgY29tcGxhaW5zIHdpdGhvdXQgdGhpcywgdGhvdWdoIHRoZXkgYXJlIHNhbWVcclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgfSk7XHJcbn07XHJcbi8qKlxyXG4gKiBMb2FkIGEgcm91dGVkLWNvbXBvbmVudCBiYXNlZCBvbiBuYXZpZ2F0aW9uIGluc3RydWN0aW9uIGFuZCByb3V0ZSBjb25maWdcclxuICogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3Rpbmcgb25seVxyXG4gKi9cclxuY29uc3QgbG9hZENvbXBvbmVudCA9IChyb3V0ZUxvYWRlciwgbmF2aWdhdGlvbkluc3RydWN0aW9uLCBjb25maWcpID0+IHtcclxuICAgIGxldCByb3V0ZXIgPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24ucm91dGVyO1xyXG4gICAgbGV0IGxpZmVjeWNsZUFyZ3MgPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24ubGlmZWN5Y2xlQXJncztcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgICAgIC50aGVuKCgpID0+IHJvdXRlTG9hZGVyLmxvYWRSb3V0ZShyb3V0ZXIsIGNvbmZpZywgbmF2aWdhdGlvbkluc3RydWN0aW9uKSlcclxuICAgICAgICAudGhlbihcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBhbiBvYmplY3QgY2FycnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgbG9hZGVkIHJvdXRlXHJcbiAgICAgKiB0eXBpY2FsbHkgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdmlldyBtb2RlbCwgY2hpbGRDb250YWluZXIsIHZpZXcgYW5kIHJvdXRlclxyXG4gICAgICovXHJcbiAgICAoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHsgdmlld01vZGVsLCBjaGlsZENvbnRhaW5lciB9ID0gY29tcG9uZW50O1xyXG4gICAgICAgIGNvbXBvbmVudC5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICAgICAgY29tcG9uZW50LmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICBpZiAoJ2NvbmZpZ3VyZVJvdXRlcicgaW4gdmlld01vZGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZFJvdXRlciA9IGNoaWxkQ29udGFpbmVyLmdldENoaWxkUm91dGVyKCk7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5jaGlsZFJvdXRlciA9IGNoaWxkUm91dGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGRSb3V0ZXJcclxuICAgICAgICAgICAgICAgIC5jb25maWd1cmUoYyA9PiB2aWV3TW9kZWwuY29uZmlndXJlUm91dGVyKGMsIGNoaWxkUm91dGVyLCBsaWZlY3ljbGVBcmdzWzBdLCBsaWZlY3ljbGVBcmdzWzFdLCBsaWZlY3ljbGVBcmdzWzJdKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IGNvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgICB9KTtcclxufTtcblxuLyoqXHJcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGxvYWRpbmcgdmlldyAvIHZpZXcgbW9kZWwgZnJvbSBhIHJvdXRlIGNvbmZpZ1xyXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgZm91bmQgaW4gYGF1cmVsaWEtdGVtcGxhdGluZy1yb3V0ZXJgXHJcbiAqL1xyXG5jbGFzcyBSb3V0ZUxvYWRlciB7XHJcbiAgICAvKipcclxuICAgICAqIExvYWQgYSByb3V0ZSBjb25maWcgYmFzZWQgb24gaXRzIHZpZXdtb2RlbCAvIHZpZXcgY29uZmlndXJhdGlvblxyXG4gICAgICovXHJcbiAgICAvLyByZXR1cm4gdHlwaW5nOiByZXR1cm4gdHlwaW5ncyB1c2VkIHRvIGJlIG5ldmVyXHJcbiAgICAvLyBhcyBpdCB3YXMgYSB0aHJvdy4gQ2hhbmdpbmcgaXQgdG8gUHJvbWlzZTxhbnk+IHNob3VsZCBub3QgY2F1c2UgYW55IGlzc3Vlc1xyXG4gICAgbG9hZFJvdXRlKHJvdXRlciwgY29uZmlnLCBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvdXRlIGxvYWRlcnMgbXVzdCBpbXBsZW1lbnQgXCJsb2FkUm91dGUocm91dGVyLCBjb25maWcsIG5hdmlnYXRpb25JbnN0cnVjdGlvbilcIi4nKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQSBwaXBlbGluZSBzdGVwIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nIGEgcm91dGUgY29uZmlnIG9mIGEgbmF2aWdhdGlvbiBpbnN0cnVjdGlvblxyXG4gKi9cclxuY2xhc3MgTG9hZFJvdXRlU3RlcCB7XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIHN0YXRpYyBpbmplY3QoKSB7IHJldHVybiBbUm91dGVMb2FkZXJdOyB9XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZUxvYWRlcikge1xyXG4gICAgICAgIHRoaXMucm91dGVMb2FkZXIgPSByb3V0ZUxvYWRlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUnVuIHRoZSBpbnRlcm5hbCB0byBsb2FkIHJvdXRlIGNvbmZpZyBvZiBhIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb24gdG8gcHJlcGFyZSBmb3IgbmV4dCBzdGVwcyBpbiB0aGUgcGlwZWxpbmVcclxuICAgICAqL1xyXG4gICAgcnVuKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgbmV4dCkge1xyXG4gICAgICAgIHJldHVybiBsb2FkTmV3Um91dGUodGhpcy5yb3V0ZUxvYWRlciwgbmF2aWdhdGlvbkluc3RydWN0aW9uKVxyXG4gICAgICAgICAgICAudGhlbihuZXh0LCBuZXh0LmNhbmNlbCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEEgcGlwZWxpbmUgc3RlcCBmb3IgaW5zdHJ1Y3RpbmcgYSBwaWVwbGluZSB0byBjb21taXQgY2hhbmdlcyBvbiBhIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb25cclxuICovXHJcbmNsYXNzIENvbW1pdENoYW5nZXNTdGVwIHtcclxuICAgIHJ1bihuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sIG5leHQpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdGlvbkluc3RydWN0aW9uXHJcbiAgICAgICAgICAgIC5fY29tbWl0Q2hhbmdlcygvKndhaXQgdG8gc3dhcD8qLyB0cnVlKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRpb25JbnN0cnVjdGlvbi5fdXBkYXRlVGl0bGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQW4gb3B0aW9uYWwgaW50ZXJmYWNlIGRlc2NyaWJpbmcgdGhlIGF2YWlsYWJsZSBhY3RpdmF0aW9uIHN0cmF0ZWdpZXMuXHJcbiAqIEBpbnRlcm5hbCBVc2VkIGludGVybmFsbHkuXHJcbiAqL1xyXG52YXIgSW50ZXJuYWxBY3RpdmF0aW9uU3RyYXRlZ3k7XHJcbihmdW5jdGlvbiAoSW50ZXJuYWxBY3RpdmF0aW9uU3RyYXRlZ3kpIHtcclxuICAgIC8qKlxyXG4gICAgICogUmV1c2UgdGhlIGV4aXN0aW5nIHZpZXcgbW9kZWwsIHdpdGhvdXQgaW52b2tpbmcgUm91dGVyIGxpZmVjeWNsZSBob29rcy5cclxuICAgICAqL1xyXG4gICAgSW50ZXJuYWxBY3RpdmF0aW9uU3RyYXRlZ3lbXCJOb0NoYW5nZVwiXSA9IFwibm8tY2hhbmdlXCI7XHJcbiAgICAvKipcclxuICAgICAqIFJldXNlIHRoZSBleGlzdGluZyB2aWV3IG1vZGVsLCBpbnZva2luZyBSb3V0ZXIgbGlmZWN5Y2xlIGhvb2tzLlxyXG4gICAgICovXHJcbiAgICBJbnRlcm5hbEFjdGl2YXRpb25TdHJhdGVneVtcIkludm9rZUxpZmVjeWNsZVwiXSA9IFwiaW52b2tlLWxpZmVjeWNsZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBsYWNlIHRoZSBleGlzdGluZyB2aWV3IG1vZGVsLCBpbnZva2luZyBSb3V0ZXIgbGlmZWN5Y2xlIGhvb2tzLlxyXG4gICAgICovXHJcbiAgICBJbnRlcm5hbEFjdGl2YXRpb25TdHJhdGVneVtcIlJlcGxhY2VcIl0gPSBcInJlcGxhY2VcIjtcclxufSkoSW50ZXJuYWxBY3RpdmF0aW9uU3RyYXRlZ3kgfHwgKEludGVybmFsQWN0aXZhdGlvblN0cmF0ZWd5ID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBzdHJhdGVneSB0byB1c2Ugd2hlbiBhY3RpdmF0aW5nIG1vZHVsZXMgZHVyaW5nIG5hdmlnYXRpb24uXHJcbiAqL1xyXG4vLyBrZXB0IGZvciBjb21wYXQgcmVhc29uXHJcbmNvbnN0IGFjdGl2YXRpb25TdHJhdGVneSA9IHtcclxuICAgIG5vQ2hhbmdlOiBcIm5vLWNoYW5nZVwiIC8qIE5vQ2hhbmdlICovLFxyXG4gICAgaW52b2tlTGlmZWN5Y2xlOiBcImludm9rZS1saWZlY3ljbGVcIiAvKiBJbnZva2VMaWZlY3ljbGUgKi8sXHJcbiAgICByZXBsYWNlOiBcInJlcGxhY2VcIiAvKiBSZXBsYWNlICovXHJcbn07XG5cbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBmaW5kIGxpc3Qgb2YgZGVhY3RpdmF0ZS1hYmxlIHZpZXcgbW9kZWxzXHJcbiAqIGFuZCBpbnZva2UgdGhlIGVpdGhlciAnY2FuRGVhY3RpdmF0ZScgb3IgJ2RlYWN0aXZhdGUnIG9uIGVhY2hcclxuICogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmdcclxuICovXHJcbmNvbnN0IHByb2Nlc3NEZWFjdGl2YXRhYmxlID0gKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgY2FsbGJhY2tOYW1lLCBuZXh0LCBpZ25vcmVSZXN1bHQpID0+IHtcclxuICAgIGxldCBwbGFuID0gbmF2aWdhdGlvbkluc3RydWN0aW9uLnBsYW47XHJcbiAgICBsZXQgaW5mb3MgPSBmaW5kRGVhY3RpdmF0YWJsZShwbGFuLCBjYWxsYmFja05hbWUpO1xyXG4gICAgbGV0IGkgPSBpbmZvcy5sZW5ndGg7IC8vIHF1ZXJ5IGZyb20gaW5zaWRlIG91dFxyXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWwpIHtcclxuICAgICAgICBpZiAoaWdub3JlUmVzdWx0IHx8IHNob3VsZENvbnRpbnVlKHZhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHQuY2FuY2VsKHZhbCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpdGVyYXRlKCkge1xyXG4gICAgICAgIGlmIChpLS0pIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCB2aWV3TW9kZWwgPSBpbmZvc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB2aWV3TW9kZWxbY2FsbGJhY2tOYW1lXShuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NQb3RlbnRpYWwocmVzdWx0LCBpbnNwZWN0LCBuZXh0LmNhbmNlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5jYW5jZWwoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5hdmlnYXRpb25JbnN0cnVjdGlvbi5yb3V0ZXIuY291bGREZWFjdGl2YXRlID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGl0ZXJhdGUoKTtcclxufTtcclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IGZpbmQgYW5kIHJldHVybnMgYSBsaXN0IG9mIGRlYWN0aXZhdGUtYWJsZSB2aWV3IG1vZGVsc1xyXG4gKiBAaW50ZXJuYWwgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgZmluZERlYWN0aXZhdGFibGUgPSAocGxhbiwgY2FsbGJhY2tOYW1lLCBsaXN0ID0gW10pID0+IHtcclxuICAgIGZvciAobGV0IHZpZXdQb3J0TmFtZSBpbiBwbGFuKSB7XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0UGxhbiA9IHBsYW5bdmlld1BvcnROYW1lXTtcclxuICAgICAgICBsZXQgcHJldkNvbXBvbmVudCA9IHZpZXdQb3J0UGxhbi5wcmV2Q29tcG9uZW50O1xyXG4gICAgICAgIGlmICgodmlld1BvcnRQbGFuLnN0cmF0ZWd5ID09PSBhY3RpdmF0aW9uU3RyYXRlZ3kuaW52b2tlTGlmZWN5Y2xlIHx8IHZpZXdQb3J0UGxhbi5zdHJhdGVneSA9PT0gYWN0aXZhdGlvblN0cmF0ZWd5LnJlcGxhY2UpXHJcbiAgICAgICAgICAgICYmIHByZXZDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgbGV0IHZpZXdNb2RlbCA9IHByZXZDb21wb25lbnQudmlld01vZGVsO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tOYW1lIGluIHZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKHZpZXdNb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZpZXdQb3J0UGxhbi5zdHJhdGVneSA9PT0gYWN0aXZhdGlvblN0cmF0ZWd5LnJlcGxhY2UgJiYgcHJldkNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBhZGRQcmV2aW91c0RlYWN0aXZhdGFibGUocHJldkNvbXBvbmVudCwgY2FsbGJhY2tOYW1lLCBsaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmlld1BvcnRQbGFuLmNoaWxkTmF2aWdhdGlvbkluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGZpbmREZWFjdGl2YXRhYmxlKHZpZXdQb3J0UGxhbi5jaGlsZE5hdmlnYXRpb25JbnN0cnVjdGlvbi5wbGFuLCBjYWxsYmFja05hbWUsIGxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBsaXN0O1xyXG59O1xyXG4vKipcclxuICogQGludGVybmFsIGV4cG9ydGVkIGZvciB1bml0IHRlc3RpbmdcclxuICovXHJcbmNvbnN0IGFkZFByZXZpb3VzRGVhY3RpdmF0YWJsZSA9IChjb21wb25lbnQsIGNhbGxiYWNrTmFtZSwgbGlzdCkgPT4ge1xyXG4gICAgbGV0IGNoaWxkUm91dGVyID0gY29tcG9uZW50LmNoaWxkUm91dGVyO1xyXG4gICAgaWYgKGNoaWxkUm91dGVyICYmIGNoaWxkUm91dGVyLmN1cnJlbnRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIGxldCB2aWV3UG9ydEluc3RydWN0aW9ucyA9IGNoaWxkUm91dGVyLmN1cnJlbnRJbnN0cnVjdGlvbi52aWV3UG9ydEluc3RydWN0aW9ucztcclxuICAgICAgICBmb3IgKGxldCB2aWV3UG9ydE5hbWUgaW4gdmlld1BvcnRJbnN0cnVjdGlvbnMpIHtcclxuICAgICAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSB2aWV3UG9ydEluc3RydWN0aW9uc1t2aWV3UG9ydE5hbWVdO1xyXG4gICAgICAgICAgICBsZXQgcHJldkNvbXBvbmVudCA9IHZpZXdQb3J0SW5zdHJ1Y3Rpb24uY29tcG9uZW50O1xyXG4gICAgICAgICAgICBsZXQgcHJldlZpZXdNb2RlbCA9IHByZXZDb21wb25lbnQudmlld01vZGVsO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tOYW1lIGluIHByZXZWaWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChwcmV2Vmlld01vZGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZGRQcmV2aW91c0RlYWN0aXZhdGFibGUocHJldkNvbXBvbmVudCwgY2FsbGJhY2tOYW1lLCBsaXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgcHJvY2Vzc0FjdGl2YXRhYmxlID0gKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgY2FsbGJhY2tOYW1lLCBuZXh0LCBpZ25vcmVSZXN1bHQpID0+IHtcclxuICAgIGxldCBpbmZvcyA9IGZpbmRBY3RpdmF0YWJsZShuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sIGNhbGxiYWNrTmFtZSk7XHJcbiAgICBsZXQgbGVuZ3RoID0gaW5mb3MubGVuZ3RoO1xyXG4gICAgbGV0IGkgPSAtMTsgLy8gcXVlcnkgZnJvbSB0b3AgZG93blxyXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWwsIHJvdXRlcikge1xyXG4gICAgICAgIGlmIChpZ25vcmVSZXN1bHQgfHwgc2hvdWxkQ29udGludWUodmFsLCByb3V0ZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0LmNhbmNlbCh2YWwpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXRlcmF0ZSgpIHtcclxuICAgICAgICBpKys7XHJcbiAgICAgICAgaWYgKGkgPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50ID0gaW5mb3NbaV07XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gY3VycmVudC52aWV3TW9kZWxbY2FsbGJhY2tOYW1lXSguLi5jdXJyZW50LmxpZmVjeWNsZUFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NQb3RlbnRpYWwocmVzdWx0LCAodmFsKSA9PiBpbnNwZWN0KHZhbCwgY3VycmVudC5yb3V0ZXIpLCBuZXh0LmNhbmNlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dC5jYW5jZWwoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlcmF0ZSgpO1xyXG59O1xyXG4vKipcclxuICogRmluZCBsaXN0IG9mIGFjdGl2YXRhYmxlIHZpZXcgbW9kZWwgYW5kIGFkZCB0byBsaXN0ICgzcmQgcGFyYW1ldGVyKVxyXG4gKiBAaW50ZXJuYWwgZXhwb3J0ZWQgZm9yIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgZmluZEFjdGl2YXRhYmxlID0gKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgY2FsbGJhY2tOYW1lLCBsaXN0ID0gW10sIHJvdXRlcikgPT4ge1xyXG4gICAgbGV0IHBsYW4gPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24ucGxhbjtcclxuICAgIE9iamVjdFxyXG4gICAgICAgIC5rZXlzKHBsYW4pXHJcbiAgICAgICAgLmZvckVhY2goKHZpZXdQb3J0TmFtZSkgPT4ge1xyXG4gICAgICAgIGxldCB2aWV3UG9ydFBsYW4gPSBwbGFuW3ZpZXdQb3J0TmFtZV07XHJcbiAgICAgICAgbGV0IHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSBuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24udmlld1BvcnRJbnN0cnVjdGlvbnNbdmlld1BvcnROYW1lXTtcclxuICAgICAgICBsZXQgdmlld1BvcnRDb21wb25lbnQgPSB2aWV3UG9ydEluc3RydWN0aW9uLmNvbXBvbmVudDtcclxuICAgICAgICBsZXQgdmlld01vZGVsID0gdmlld1BvcnRDb21wb25lbnQudmlld01vZGVsO1xyXG4gICAgICAgIGlmICgodmlld1BvcnRQbGFuLnN0cmF0ZWd5ID09PSBhY3RpdmF0aW9uU3RyYXRlZ3kuaW52b2tlTGlmZWN5Y2xlXHJcbiAgICAgICAgICAgIHx8IHZpZXdQb3J0UGxhbi5zdHJhdGVneSA9PT0gYWN0aXZhdGlvblN0cmF0ZWd5LnJlcGxhY2UpXHJcbiAgICAgICAgICAgICYmIGNhbGxiYWNrTmFtZSBpbiB2aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHZpZXdNb2RlbCxcclxuICAgICAgICAgICAgICAgIGxpZmVjeWNsZUFyZ3M6IHZpZXdQb3J0SW5zdHJ1Y3Rpb24ubGlmZWN5Y2xlQXJncyxcclxuICAgICAgICAgICAgICAgIHJvdXRlclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGNoaWxkTmF2SW5zdHJ1Y3Rpb24gPSB2aWV3UG9ydFBsYW4uY2hpbGROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgaWYgKGNoaWxkTmF2SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgZmluZEFjdGl2YXRhYmxlKGNoaWxkTmF2SW5zdHJ1Y3Rpb24sIGNhbGxiYWNrTmFtZSwgbGlzdCwgdmlld1BvcnRDb21wb25lbnQuY2hpbGRSb3V0ZXIgfHwgcm91dGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsaXN0O1xyXG59O1xyXG5jb25zdCBzaG91bGRDb250aW51ZSA9IChvdXRwdXQsIHJvdXRlcikgPT4ge1xyXG4gICAgaWYgKG91dHB1dCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzTmF2aWdhdGlvbkNvbW1hbmQob3V0cHV0KSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3V0cHV0LnNldFJvdXRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBvdXRwdXQuc2V0Um91dGVyKHJvdXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhIW91dHB1dC5zaG91bGRDb250aW51ZVByb2Nlc3Npbmc7XHJcbiAgICB9XHJcbiAgICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiB3cmFwcyBhIHN1YnNjcmlwdGlvbiwgYWxsb3dpbmcgdW5zdWJzY3JpYmUgY2FsbHMgZXZlbiBpZlxyXG4gKiB0aGUgZmlyc3QgdmFsdWUgY29tZXMgc3luY2hyb25vdXNseVxyXG4gKi9cclxuY2xhc3MgU2FmZVN1YnNjcmlwdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihzdWJzY3JpcHRpb25GdW5jKSB7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uRnVuYyh0aGlzKTtcclxuICAgICAgICBpZiAoIXRoaXMuX3N1YnNjcmliZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBzdWJzY3JpYmVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmVkO1xyXG4gICAgfVxyXG4gICAgdW5zdWJzY3JpYmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N1YnNjcmliZWQgJiYgdGhpcy5fc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgZnVuY3Rpb24gdG8gcHJvY2VzcyByZXR1cm4gdmFsdWUgZnJvbSBgYWN0aXZhdGVgL2BjYW5BY3RpdmF0ZWAgc3RlcHNcclxuICogU3VwcG9ydHMgb2JzZXJ2YWJsZS9wcm9taXNlXHJcbiAqXHJcbiAqIEZvciBvYnNlcnZhYmxlLCByZXNvbHZlIGF0IGZpcnN0IG5leHQoKSBvciBvbiBjb21wbGV0ZSgpXHJcbiAqL1xyXG5jb25zdCBwcm9jZXNzUG90ZW50aWFsID0gKG9iaiwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAvLyBpZiBwcm9taXNlIGxpa2VcclxuICAgIGlmIChvYmogJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvYmopLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcclxuICAgIH1cclxuICAgIC8vIGlmIG9ic2VydmFibGVcclxuICAgIGlmIChvYmogJiYgdHlwZW9mIG9iai5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBsZXQgb2JzID0gb2JqO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmlwdGlvbihzdWIgPT4gb2JzLnN1YnNjcmliZSh7XHJcbiAgICAgICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViLnN1YnNjcmliZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViLnN1YnNjcmliZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWIuc3Vic2NyaWJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIC8vIGVsc2UganVzdCByZXNvbHZlXHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKG9iaik7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcclxuICAgIH1cclxufTtcblxuLyoqXHJcbiAqIEEgcGlwZWxpbmUgc3RlcCByZXNwb25zaWJsZSBmb3IgZmluZGluZyBhbmQgYWN0aXZhdGluZyBtZXRob2QgYGNhbkRlYWN0aXZhdGVgIG9uIGEgdmlldyBtb2RlbCBvZiBhIHJvdXRlXHJcbiAqL1xyXG5jbGFzcyBDYW5EZWFjdGl2YXRlUHJldmlvdXNTdGVwIHtcclxuICAgIHJ1bihuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sIG5leHQpIHtcclxuICAgICAgICByZXR1cm4gcHJvY2Vzc0RlYWN0aXZhdGFibGUobmF2aWdhdGlvbkluc3RydWN0aW9uLCAnY2FuRGVhY3RpdmF0ZScsIG5leHQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIHBpcGVsaW5lIHN0ZXAgcmVzcG9uc2libGUgZm9yIGZpbmRpbmcgYW5kIGFjdGl2YXRpbmcgbWV0aG9kIGBjYW5BY3RpdmF0ZWAgb24gYSB2aWV3IG1vZGVsIG9mIGEgcm91dGVcclxuICovXHJcbmNsYXNzIENhbkFjdGl2YXRlTmV4dFN0ZXAge1xyXG4gICAgcnVuKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgbmV4dCkge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzQWN0aXZhdGFibGUobmF2aWdhdGlvbkluc3RydWN0aW9uLCAnY2FuQWN0aXZhdGUnLCBuZXh0KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBwaXBlbGluZSBzdGVwIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIGFuZCBhY3RpdmF0aW5nIG1ldGhvZCBgZGVhY3RpdmF0ZWAgb24gYSB2aWV3IG1vZGVsIG9mIGEgcm91dGVcclxuICovXHJcbmNsYXNzIERlYWN0aXZhdGVQcmV2aW91c1N0ZXAge1xyXG4gICAgcnVuKG5hdmlnYXRpb25JbnN0cnVjdGlvbiwgbmV4dCkge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzRGVhY3RpdmF0YWJsZShuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sICdkZWFjdGl2YXRlJywgbmV4dCwgdHJ1ZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgcGlwZWxpbmUgc3RlcCByZXNwb25zaWJsZSBmb3IgZmluZGluZyBhbmQgYWN0aXZhdGluZyBtZXRob2QgYGFjdGl2YXRlYCBvbiBhIHZpZXcgbW9kZWwgb2YgYSByb3V0ZVxyXG4gKi9cclxuY2xhc3MgQWN0aXZhdGVOZXh0U3RlcCB7XHJcbiAgICBydW4obmF2aWdhdGlvbkluc3RydWN0aW9uLCBuZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NBY3RpdmF0YWJsZShuYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sICdhY3RpdmF0ZScsIG5leHQsIHRydWUpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBBIG11bHRpLXNsb3RzIFBpcGVsaW5lIFBsYWNlaG9sZGVyIFN0ZXAgZm9yIGhvb2tpbmcgaW50byBhIHBpcGVsaW5lIGV4ZWN1dGlvblxyXG4gKi9cclxuY2xhc3MgUGlwZWxpbmVTbG90IHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgbmFtZSwgYWxpYXMpIHtcclxuICAgICAgICB0aGlzLnN0ZXBzID0gW107XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5zbG90TmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zbG90QWxpYXMgPSBhbGlhcztcclxuICAgIH1cclxuICAgIGdldFN0ZXBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzLm1hcCh4ID0+IHRoaXMuY29udGFpbmVyLmdldCh4KSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENsYXNzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgbmF2aWdhdGlvbiBwaXBlbGluZS5cclxuICovXHJcbmNsYXNzIFBpcGVsaW5lUHJvdmlkZXIge1xyXG4gICAgLyoqQGludGVybmFsICovXHJcbiAgICBzdGF0aWMgaW5qZWN0KCkgeyByZXR1cm4gW0NvbnRhaW5lcl07IH1cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuc3RlcHMgPSBbXHJcbiAgICAgICAgICAgIEJ1aWxkTmF2aWdhdGlvblBsYW5TdGVwLFxyXG4gICAgICAgICAgICBDYW5EZWFjdGl2YXRlUHJldmlvdXNTdGVwLFxyXG4gICAgICAgICAgICBMb2FkUm91dGVTdGVwLFxyXG4gICAgICAgICAgICBjcmVhdGVQaXBlbGluZVNsb3QoY29udGFpbmVyLCBcImF1dGhvcml6ZVwiIC8qIEF1dGhvcml6ZSAqLyksXHJcbiAgICAgICAgICAgIENhbkFjdGl2YXRlTmV4dFN0ZXAsXHJcbiAgICAgICAgICAgIGNyZWF0ZVBpcGVsaW5lU2xvdChjb250YWluZXIsIFwicHJlQWN0aXZhdGVcIiAvKiBQcmVBY3RpdmF0ZSAqLywgJ21vZGVsYmluZCcpLFxyXG4gICAgICAgICAgICAvLyBOT1RFOiBhcHAgc3RhdGUgY2hhbmdlcyBzdGFydCBiZWxvdyAtIHBvaW50IG9mIG5vIHJldHVyblxyXG4gICAgICAgICAgICBEZWFjdGl2YXRlUHJldmlvdXNTdGVwLFxyXG4gICAgICAgICAgICBBY3RpdmF0ZU5leHRTdGVwLFxyXG4gICAgICAgICAgICBjcmVhdGVQaXBlbGluZVNsb3QoY29udGFpbmVyLCBcInByZVJlbmRlclwiIC8qIFByZVJlbmRlciAqLywgJ3ByZWNvbW1pdCcpLFxyXG4gICAgICAgICAgICBDb21taXRDaGFuZ2VzU3RlcCxcclxuICAgICAgICAgICAgY3JlYXRlUGlwZWxpbmVTbG90KGNvbnRhaW5lciwgXCJwb3N0UmVuZGVyXCIgLyogUG9zdFJlbmRlciAqLywgJ3Bvc3Rjb21wbGV0ZScpXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIHRoZSBuYXZpZ2F0aW9uIHBpcGVsaW5lLlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVQaXBlbGluZSh1c2VDYW5EZWFjdGl2YXRlU3RlcCA9IHRydWUpIHtcclxuICAgICAgICBsZXQgcGlwZWxpbmUgPSBuZXcgUGlwZWxpbmUoKTtcclxuICAgICAgICB0aGlzLnN0ZXBzLmZvckVhY2goc3RlcCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VDYW5EZWFjdGl2YXRlU3RlcCB8fCBzdGVwICE9PSBDYW5EZWFjdGl2YXRlUHJldmlvdXNTdGVwKSB7XHJcbiAgICAgICAgICAgICAgICBwaXBlbGluZS5hZGRTdGVwKHRoaXMuY29udGFpbmVyLmdldChzdGVwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcGlwZWxpbmU7XHJcbiAgICB9XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIF9maW5kU3RlcChuYW1lKSB7XHJcbiAgICAgICAgLy8gU3RlcHMgdGhhdCBhcmUgbm90IFBpcGVsaW5lU2xvdHMgYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgYW5kIHRoZXkgd2lsbCBhdXRvbWF0aWNhbGx5IGZhaWwuIFByb2JhYmx5LlxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzLmZpbmQoeCA9PiB4LnNsb3ROYW1lID09PSBuYW1lIHx8IHguc2xvdEFsaWFzID09PSBuYW1lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIHN0ZXAgaW50byB0aGUgcGlwZWxpbmUgYXQgYSBrbm93biBzbG90IGxvY2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBhZGRTdGVwKG5hbWUsIHN0ZXApIHtcclxuICAgICAgICBsZXQgZm91bmQgPSB0aGlzLl9maW5kU3RlcChuYW1lKTtcclxuICAgICAgICBpZiAoZm91bmQpIHtcclxuICAgICAgICAgICAgbGV0IHNsb3RTdGVwcyA9IGZvdW5kLnN0ZXBzO1xyXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGR1cGxpY2F0ZXNcclxuICAgICAgICAgICAgaWYgKCFzbG90U3RlcHMuaW5jbHVkZXMoc3RlcCkpIHtcclxuICAgICAgICAgICAgICAgIHNsb3RTdGVwcy5wdXNoKHN0ZXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGlwZWxpbmUgc2xvdCBuYW1lOiAke25hbWV9LmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIHN0ZXAgZnJvbSBhIHNsb3QgaW4gdGhlIHBpcGVsaW5lXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVN0ZXAobmFtZSwgc3RlcCkge1xyXG4gICAgICAgIGxldCBzbG90ID0gdGhpcy5fZmluZFN0ZXAobmFtZSk7XHJcbiAgICAgICAgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgbGV0IHNsb3RTdGVwcyA9IHNsb3Quc3RlcHM7XHJcbiAgICAgICAgICAgIHNsb3RTdGVwcy5zcGxpY2Uoc2xvdFN0ZXBzLmluZGV4T2Yoc3RlcCksIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIGFsbCBzdGVwcyBmcm9tIGEgc2xvdCBpbiB0aGUgcGlwZWxpbmVcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBfY2xlYXJTdGVwcyhuYW1lID0gJycpIHtcclxuICAgICAgICBsZXQgc2xvdCA9IHRoaXMuX2ZpbmRTdGVwKG5hbWUpO1xyXG4gICAgICAgIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgIHNsb3Quc3RlcHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyBhbGwgcGlwZWxpbmUgc2xvdHNcclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYXJTdGVwcyhcImF1dGhvcml6ZVwiIC8qIEF1dGhvcml6ZSAqLyk7XHJcbiAgICAgICAgdGhpcy5fY2xlYXJTdGVwcyhcInByZUFjdGl2YXRlXCIgLyogUHJlQWN0aXZhdGUgKi8pO1xyXG4gICAgICAgIHRoaXMuX2NsZWFyU3RlcHMoXCJwcmVSZW5kZXJcIiAvKiBQcmVSZW5kZXIgKi8pO1xyXG4gICAgICAgIHRoaXMuX2NsZWFyU3RlcHMoXCJwb3N0UmVuZGVyXCIgLyogUG9zdFJlbmRlciAqLyk7XHJcbiAgICB9XHJcbn1cclxuLyoqQGludGVybmFsICovXHJcbmNvbnN0IGNyZWF0ZVBpcGVsaW5lU2xvdCA9IChjb250YWluZXIsIG5hbWUsIGFsaWFzKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFBpcGVsaW5lU2xvdChjb250YWluZXIsIG5hbWUsIGFsaWFzKTtcclxufTtcblxuY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdhcHAtcm91dGVyJyk7XHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBhcHBsaWNhdGlvbiByb3V0ZXIuXHJcbiAqL1xyXG5jbGFzcyBBcHBSb3V0ZXIgZXh0ZW5kcyBSb3V0ZXIge1xyXG4gICAgLyoqQGludGVybmFsICovXHJcbiAgICBzdGF0aWMgaW5qZWN0KCkgeyByZXR1cm4gW0NvbnRhaW5lciwgSGlzdG9yeSwgUGlwZWxpbmVQcm92aWRlciwgRXZlbnRBZ2dyZWdhdG9yXTsgfVxyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBoaXN0b3J5LCBwaXBlbGluZVByb3ZpZGVyLCBldmVudHMpIHtcclxuICAgICAgICBzdXBlcihjb250YWluZXIsIGhpc3RvcnkpOyAvLyBOb3RlIHRoZSBzdXBlciB3aWxsIGNhbGwgcmVzZXQgaW50ZXJuYWxseS5cclxuICAgICAgICB0aGlzLnBpcGVsaW5lUHJvdmlkZXIgPSBwaXBlbGluZVByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGdWxseSByZXNldHMgdGhlIHJvdXRlcidzIGludGVybmFsIHN0YXRlLiBQcmltYXJpbHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSBmcmFtZXdvcmsgd2hlbiBtdWx0aXBsZSBjYWxscyB0byBzZXRSb290IGFyZSBtYWRlLlxyXG4gICAgICogVXNlIHdpdGggY2F1dGlvbiAoYWN0dWFsbHksIGF2b2lkIHVzaW5nIHRoaXMpLiBEbyBub3QgdXNlIHRoaXMgdG8gc2ltcGx5IGNoYW5nZSB5b3VyIG5hdmlnYXRpb24gbW9kZWwuXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHN1cGVyLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5tYXhJbnN0cnVjdGlvbkNvdW50ID0gMTA7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9xdWV1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIExvYWRzIHRoZSBzcGVjaWZpZWQgVVJMLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgVGhlIFVSTCBmcmFnbWVudCB0byBsb2FkLlxyXG4gICAgICovXHJcbiAgICBsb2FkVXJsKHVybCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIC5fY3JlYXRlTmF2aWdhdGlvbkluc3RydWN0aW9uKHVybClcclxuICAgICAgICAgICAgLnRoZW4oaW5zdHJ1Y3Rpb24gPT4gdGhpcy5fcXVldWVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbikpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIHJlc3RvcmVQcmV2aW91c0xvY2F0aW9uKHRoaXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgYSB2aWV3UG9ydCB0byBiZSB1c2VkIGFzIGEgcmVuZGVyaW5nIHRhcmdldCBmb3IgYWN0aXZhdGVkIHJvdXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdmlld1BvcnQgVGhlIHZpZXdQb3J0LiBUaGlzIGlzIHR5cGljYWxseSBhIDxyb3V0ZXItdmlldy8+IGVsZW1lbnQgaW4gQXVyZWxpYSBkZWZhdWx0IGltcGxcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB2aWV3UG9ydC4gJ2RlZmF1bHQnIGlmIHVuc3BlY2lmaWVkLlxyXG4gICAgICovXHJcbiAgICByZWdpc3RlclZpZXdQb3J0KHZpZXdQb3J0LCBuYW1lKSB7XHJcbiAgICAgICAgLy8gaGF2aW5nIHN0cm9uZyB0eXBpbmcgd2l0aG91dCBjaGFuZ2luZyBwdWJsaWMgQVBJXHJcbiAgICAgICAgY29uc3QgJHZpZXdQb3J0ID0gdmlld1BvcnQ7XHJcbiAgICAgICAgc3VwZXIucmVnaXN0ZXJWaWV3UG9ydCgkdmlld1BvcnQsIG5hbWUpO1xyXG4gICAgICAgIC8vIGJlc2lkZSBhZGRpbmcgdmlld3BvcnQgdG8gdGhlIHJlZ2lzdHJ5IG9mIHRoaXMgaW5zdGFuY2VcclxuICAgICAgICAvLyBBcHBSb3V0ZXIgYWxzbyBjb25maWd1cmUgcm91dGluZy9oaXN0b3J5IHRvIHN0YXJ0IHJvdXRpbmcgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgIC8vIFRoZXJlIGFyZSBzaXR1YXRpb24gd2hlcmUgdGhlcmUgYXJlIG1vcmUgdGhhbiAxIDxyb3V0ZXItdmlldy8+IGVsZW1lbnQgYXQgcm9vdCB2aWV3XHJcbiAgICAgICAgLy8gaW4gdGhhdCBjYXNlLCBzdGlsbCBvbmx5IGFjdGl2YXRlIG9uY2UgdmlhIHRoZSBmb2xsb3dpbmcgZ3VhcmRcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgY29uc3Qgdmlld01vZGVsID0gdGhpcy5fZmluZFZpZXdNb2RlbCgkdmlld1BvcnQpO1xyXG4gICAgICAgICAgICBpZiAoJ2NvbmZpZ3VyZVJvdXRlcicgaW4gdmlld01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSB0aGFuIG9uZSA8cm91dGVyLXZpZXcvPiBlbGVtZW50IGF0IHJvb3Qgdmlld1xyXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoaXMgZmxhZyB0byBndWFyZCBhZ2FpbnN0IGNvbmZpZ3VyZSBtZXRob2QgYmVpbmcgaW52b2tlZCBtdWx0aXBsZSB0aW1lc1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIHNldCBpbnNpZGUgbWV0aG9kIGNvbmZpZ3VyZVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ29uZmlndXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIHJlYWwgcmVzb2x2ZSB3aXRoIGEgbm9vcCB0byBndWFyYW50ZWUgdGhhdCBhbnkgYWN0aW9uIGluIGJhc2UgY2xhc3MgUm91dGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd29uJ3QgcmVzb2x2ZSB0aGUgY29uZmlndXJlUHJvbWlzZSBwcmVtYXR1cmVseVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVDb25maWd1cmVkUHJvbWlzZSA9IHRoaXMuX3Jlc29sdmVDb25maWd1cmVkUHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlQ29uZmlndXJlZFByb21pc2UgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmZpZ3VyZShjb25maWcgPT4gUHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVzb2x2ZSh2aWV3TW9kZWwuY29uZmlndXJlUm91dGVyKGNvbmZpZywgdGhpcykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuIGlzc3VlIHdpdGggY29uZmlndXJlIGludGVyZmFjZS4gU2hvdWxkIGJlIGZpeGVkIHRoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvZG86IGZpeCB0aGlzIHZpYSBjb25maWd1cmUgaW50ZXJmYWNlIGluIHJvdXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiBjb25maWcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNvbmZpZ3VyZWRQcm9taXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2hlbiBhIHZpZXdwb3J0IGlzIGFkZGVkIGR5bmFtaWNhbGx5IHRvIGEgcm9vdCB2aWV3IHRoYXQgaXMgYWxyZWFkeSBhY3RpdmF0ZWRcclxuICAgICAgICAvLyBqdXN0IHByb2Nlc3MgdGhlIG5hdmlnYXRpb24gaW5zdHJ1Y3Rpb25cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVxdWV1ZUluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGVzIHRoZSByb3V0ZXIuIFRoaXMgaW5zdHJ1Y3RzIHRoZSByb3V0ZXIgdG8gYmVnaW4gbGlzdGVuaW5nIGZvciBoaXN0b3J5IGNoYW5nZXMgYW5kIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25zLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbXMgb3B0aW9ucyBUaGUgc2V0IG9mIG9wdGlvbnMgdG8gYWN0aXZhdGUgdGhlIHJvdXRlciB3aXRoLlxyXG4gICAgICovXHJcbiAgICBhY3RpdmF0ZShvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAvLyByb3V0ZSBoYW5kbGVyIHByb3BlcnR5IGlzIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB1cmwgY2hhbmdlXHJcbiAgICAgICAgLy8gdGhlIGludGVyZmFjZSBvZiBhdXJlbGlhLWhpc3RvcnkgaXNuJ3QgY2xlYXIgb24gdGhpcyBwZXJzcGVjdGl2ZVxyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyByb3V0ZUhhbmRsZXI6IHRoaXMubG9hZFVybC5iaW5kKHRoaXMpIH0sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5LmFjdGl2YXRlKHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fZGVxdWV1ZUluc3RydWN0aW9uKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERlYWN0aXZhdGVzIHRoZSByb3V0ZXIuXHJcbiAgICAgKi9cclxuICAgIGRlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5kZWFjdGl2YXRlKCk7XHJcbiAgICB9XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIF9xdWV1ZUluc3RydWN0aW9uKGluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB0aGlzLl9xdWV1ZS51bnNoaWZ0KGluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5fZGVxdWV1ZUluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIF9kZXF1ZXVlSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb25Db3VudCA9IDApIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTmF2aWdhdGluZyAmJiAhaW5zdHJ1Y3Rpb25Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHMgY29tcGxhaW5zIGFib3V0IGluY29uc2lzdGVudCByZXR1cm5zIHdpdGhvdXQgdm9pZCAwXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBpbnN0cnVjdGlvbiA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGlmICghaW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIHRzIGNvbXBsYWlucyBhYm91dCBpbmNvbnNpc3RlbnQgcmV0dXJucyB3aXRob3V0IHZvaWQgMFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlzTmF2aWdhdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBuYXZ0cmFja2VyID0gdGhpcy5oaXN0b3J5LmdldFN0YXRlKCdOYXZpZ2F0aW9uVHJhY2tlcicpO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudE5hdlRyYWNrZXIgPSB0aGlzLmN1cnJlbnROYXZpZ2F0aW9uVHJhY2tlcjtcclxuICAgICAgICAgICAgaWYgKCFuYXZ0cmFja2VyICYmICFjdXJyZW50TmF2VHJhY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc05hdmlnYXRpbmdGaXJzdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ05ldyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIW5hdnRyYWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNOYXZpZ2F0aW5nTmV3ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghY3VycmVudE5hdlRyYWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNOYXZpZ2F0aW5nUmVmcmVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudE5hdlRyYWNrZXIgPCBuYXZ0cmFja2VyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTmF2aWdhdGluZ0ZvcndhcmQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnROYXZUcmFja2VyID4gbmF2dHJhY2tlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc05hdmlnYXRpbmdCYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW5hdnRyYWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIG5hdnRyYWNrZXIgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNldFN0YXRlKCdOYXZpZ2F0aW9uVHJhY2tlcicsIG5hdnRyYWNrZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE5hdmlnYXRpb25UcmFja2VyID0gbmF2dHJhY2tlcjtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24ucHJldmlvdXNJbnN0cnVjdGlvbiA9IHRoaXMuY3VycmVudEluc3RydWN0aW9uO1xyXG4gICAgICAgICAgICBsZXQgbWF4SW5zdHJ1Y3Rpb25Db3VudCA9IHRoaXMubWF4SW5zdHJ1Y3Rpb25Db3VudDtcclxuICAgICAgICAgICAgaWYgKCFpbnN0cnVjdGlvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5wdWJsaXNoKFwicm91dGVyOm5hdmlnYXRpb246cHJvY2Vzc2luZ1wiIC8qIFByb2Nlc3NpbmcgKi8sIHsgaW5zdHJ1Y3Rpb24gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaW5zdHJ1Y3Rpb25Db3VudCA9PT0gbWF4SW5zdHJ1Y3Rpb25Db3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgJHtpbnN0cnVjdGlvbkNvdW50ICsgMX0gbmF2aWdhdGlvbiBpbnN0cnVjdGlvbnMgaGF2ZSBiZWVuIGF0dGVtcHRlZCB3aXRob3V0IHN1Y2Nlc3MuIFJlc3RvcmluZyBsYXN0IGtub3duIGdvb2QgbG9jYXRpb24uYCk7XHJcbiAgICAgICAgICAgICAgICByZXN0b3JlUHJldmlvdXNMb2NhdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZXF1ZXVlSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb25Db3VudCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RydWN0aW9uQ291bnQgPiBtYXhJbnN0cnVjdGlvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01heGltdW0gbmF2aWdhdGlvbiBhdHRlbXB0cyBleGNlZWRlZC4gR2l2aW5nIHVwLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBwaXBlbGluZSA9IHRoaXMucGlwZWxpbmVQcm92aWRlci5jcmVhdGVQaXBlbGluZSghdGhpcy5jb3VsZERlYWN0aXZhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gcGlwZWxpbmVcclxuICAgICAgICAgICAgICAgIC5ydW4oaW5zdHJ1Y3Rpb24pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gcHJvY2Vzc1Jlc3VsdChpbnN0cnVjdGlvbiwgcmVzdWx0LCBpbnN0cnVjdGlvbkNvdW50LCB0aGlzKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBvdXRwdXQ6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvcikgfTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiByZXNvbHZlSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24sIHJlc3VsdCwgISFpbnN0cnVjdGlvbkNvdW50LCB0aGlzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipAaW50ZXJuYWwgKi9cclxuICAgIF9maW5kVmlld01vZGVsKHZpZXdQb3J0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyLnZpZXdNb2RlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIudmlld01vZGVsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmlld1BvcnQuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSB2aWV3UG9ydC5jb250YWluZXI7XHJcbiAgICAgICAgICAgIHdoaWxlIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIudmlld01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIudmlld01vZGVsID0gY29udGFpbmVyLnZpZXdNb2RlbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyLnZpZXdNb2RlbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5jb25zdCBwcm9jZXNzUmVzdWx0ID0gKGluc3RydWN0aW9uLCByZXN1bHQsIGluc3RydWN0aW9uQ291bnQsIHJvdXRlcikgPT4ge1xyXG4gICAgaWYgKCEocmVzdWx0ICYmICdjb21wbGV0ZWQnIGluIHJlc3VsdCAmJiAnb3V0cHV0JyBpbiByZXN1bHQpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xyXG4gICAgICAgIHJlc3VsdC5vdXRwdXQgPSBuZXcgRXJyb3IoYEV4cGVjdGVkIHJvdXRlciBwaXBlbGluZSB0byByZXR1cm4gYSBuYXZpZ2F0aW9uIHJlc3VsdCwgYnV0IGdvdCBbJHtKU09OLnN0cmluZ2lmeShyZXN1bHQpfV0gaW5zdGVhZC5gKTtcclxuICAgIH1cclxuICAgIGxldCBmaW5hbFJlc3VsdCA9IG51bGw7XHJcbiAgICBsZXQgbmF2aWdhdGlvbkNvbW1hbmRSZXN1bHQgPSBudWxsO1xyXG4gICAgaWYgKGlzTmF2aWdhdGlvbkNvbW1hbmQocmVzdWx0Lm91dHB1dCkpIHtcclxuICAgICAgICBuYXZpZ2F0aW9uQ29tbWFuZFJlc3VsdCA9IHJlc3VsdC5vdXRwdXQubmF2aWdhdGUocm91dGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmFsUmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgICAgIGlmICghcmVzdWx0LmNvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lm91dHB1dCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IocmVzdWx0Lm91dHB1dC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN0b3JlUHJldmlvdXNMb2NhdGlvbihyb3V0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmF2aWdhdGlvbkNvbW1hbmRSZXN1bHQpXHJcbiAgICAgICAgLnRoZW4oXyA9PiByb3V0ZXIuX2RlcXVldWVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbkNvdW50ICsgMSkpXHJcbiAgICAgICAgLnRoZW4oaW5uZXJSZXN1bHQgPT4gZmluYWxSZXN1bHQgfHwgaW5uZXJSZXN1bHQgfHwgcmVzdWx0KTtcclxufTtcclxuY29uc3QgcmVzb2x2ZUluc3RydWN0aW9uID0gKGluc3RydWN0aW9uLCByZXN1bHQsIGlzSW5uZXJJbnN0cnVjdGlvbiwgcm91dGVyKSA9PiB7XHJcbiAgICBpbnN0cnVjdGlvbi5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICBsZXQgZXZlbnRBZ2dyZWdhdG9yID0gcm91dGVyLmV2ZW50cztcclxuICAgIGxldCBldmVudEFyZ3MgPSB7IGluc3RydWN0aW9uLCByZXN1bHQgfTtcclxuICAgIGlmICghaXNJbm5lckluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgcm91dGVyLmlzTmF2aWdhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHJvdXRlci5pc0V4cGxpY2l0TmF2aWdhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHJvdXRlci5pc0V4cGxpY2l0TmF2aWdhdGlvbkJhY2sgPSBmYWxzZTtcclxuICAgICAgICByb3V0ZXIuaXNOYXZpZ2F0aW5nRmlyc3QgPSBmYWxzZTtcclxuICAgICAgICByb3V0ZXIuaXNOYXZpZ2F0aW5nTmV3ID0gZmFsc2U7XHJcbiAgICAgICAgcm91dGVyLmlzTmF2aWdhdGluZ1JlZnJlc2ggPSBmYWxzZTtcclxuICAgICAgICByb3V0ZXIuaXNOYXZpZ2F0aW5nRm9yd2FyZCA9IGZhbHNlO1xyXG4gICAgICAgIHJvdXRlci5pc05hdmlnYXRpbmdCYWNrID0gZmFsc2U7XHJcbiAgICAgICAgcm91dGVyLmNvdWxkRGVhY3RpdmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBldmVudE5hbWU7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5vdXRwdXQgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICBldmVudE5hbWUgPSBcInJvdXRlcjpuYXZpZ2F0aW9uOmVycm9yXCIgLyogRXJyb3IgKi87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFyZXN1bHQuY29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IFwicm91dGVyOm5hdmlnYXRpb246Y2FuY2VsZWRcIiAvKiBDYW5jZWxlZCAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBxdWVyeVN0cmluZyA9IGluc3RydWN0aW9uLnF1ZXJ5U3RyaW5nID8gKCc/JyArIGluc3RydWN0aW9uLnF1ZXJ5U3RyaW5nKSA6ICcnO1xyXG4gICAgICAgICAgICByb3V0ZXIuaGlzdG9yeS5wcmV2aW91c0xvY2F0aW9uID0gaW5zdHJ1Y3Rpb24uZnJhZ21lbnQgKyBxdWVyeVN0cmluZztcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gXCJyb3V0ZXI6bmF2aWdhdGlvbjpzdWNjZXNzXCIgLyogU3VjY2VzcyAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnRBZ2dyZWdhdG9yLnB1Ymxpc2goZXZlbnROYW1lLCBldmVudEFyZ3MpO1xyXG4gICAgICAgIGV2ZW50QWdncmVnYXRvci5wdWJsaXNoKFwicm91dGVyOm5hdmlnYXRpb246Y29tcGxldGVcIiAvKiBDb21wbGV0ZSAqLywgZXZlbnRBcmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV2ZW50QWdncmVnYXRvci5wdWJsaXNoKFwicm91dGVyOm5hdmlnYXRpb246Y2hpbGQ6Y29tcGxldGVcIiAvKiBDaGlsZENvbXBsZXRlICovLCBldmVudEFyZ3MpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuY29uc3QgcmVzdG9yZVByZXZpb3VzTG9jYXRpb24gPSAocm91dGVyKSA9PiB7XHJcbiAgICBsZXQgcHJldmlvdXNMb2NhdGlvbiA9IHJvdXRlci5oaXN0b3J5LnByZXZpb3VzTG9jYXRpb247XHJcbiAgICBpZiAocHJldmlvdXNMb2NhdGlvbikge1xyXG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShwcmV2aW91c0xvY2F0aW9uLCB7IHRyaWdnZXI6IGZhbHNlLCByZXBsYWNlOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocm91dGVyLmZhbGxiYWNrUm91dGUpIHtcclxuICAgICAgICByb3V0ZXIubmF2aWdhdGUocm91dGVyLmZhbGxiYWNrUm91dGUsIHsgdHJpZ2dlcjogdHJ1ZSwgcmVwbGFjZTogdHJ1ZSB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxvZ2dlci5lcnJvcignUm91dGVyIG5hdmlnYXRpb24gZmFpbGVkLCBhbmQgbm8gcHJldmlvdXMgbG9jYXRpb24gb3IgZmFsbGJhY2tSb3V0ZSBjb3VsZCBiZSByZXN0b3JlZC4nKTtcclxuICAgIH1cclxufTtcblxuLyoqXHJcbiogVGhlIHN0YXR1cyBvZiBhIFBpcGVsaW5lLlxyXG4qL1xyXG52YXIgUGlwZWxpbmVTdGF0dXM7XHJcbihmdW5jdGlvbiAoUGlwZWxpbmVTdGF0dXMpIHtcclxuICAgIFBpcGVsaW5lU3RhdHVzW1wiQ29tcGxldGVkXCJdID0gXCJjb21wbGV0ZWRcIjtcclxuICAgIFBpcGVsaW5lU3RhdHVzW1wiQ2FuY2VsZWRcIl0gPSBcImNhbmNlbGVkXCI7XHJcbiAgICBQaXBlbGluZVN0YXR1c1tcIlJlamVjdGVkXCJdID0gXCJyZWplY3RlZFwiO1xyXG4gICAgUGlwZWxpbmVTdGF0dXNbXCJSdW5uaW5nXCJdID0gXCJydW5uaW5nXCI7XHJcbn0pKFBpcGVsaW5lU3RhdHVzIHx8IChQaXBlbGluZVN0YXR1cyA9IHt9KSk7XG5cbi8qKlxyXG4gKiBBIGxpc3Qgb2Yga25vd24gcm91dGVyIGV2ZW50cyB1c2VkIGJ5IHRoZSBBdXJlbGlhIHJvdXRlclxyXG4gKiB0byBzaWduYWwgdGhlIHBpcGVsaW5lIGhhcyBjb21lIHRvIGEgY2VydGFpbiBzdGF0ZVxyXG4gKi9cclxuLy8gY29uc3QgZW51bSBpcyBwcmVzZXJ2ZWQgaW4gdHNjb25maWdcclxudmFyIFJvdXRlckV2ZW50O1xyXG4oZnVuY3Rpb24gKFJvdXRlckV2ZW50KSB7XHJcbiAgICBSb3V0ZXJFdmVudFtcIlByb2Nlc3NpbmdcIl0gPSBcInJvdXRlcjpuYXZpZ2F0aW9uOnByb2Nlc3NpbmdcIjtcclxuICAgIFJvdXRlckV2ZW50W1wiRXJyb3JcIl0gPSBcInJvdXRlcjpuYXZpZ2F0aW9uOmVycm9yXCI7XHJcbiAgICBSb3V0ZXJFdmVudFtcIkNhbmNlbGVkXCJdID0gXCJyb3V0ZXI6bmF2aWdhdGlvbjpjYW5jZWxlZFwiO1xyXG4gICAgUm91dGVyRXZlbnRbXCJDb21wbGV0ZVwiXSA9IFwicm91dGVyOm5hdmlnYXRpb246Y29tcGxldGVcIjtcclxuICAgIFJvdXRlckV2ZW50W1wiU3VjY2Vzc1wiXSA9IFwicm91dGVyOm5hdmlnYXRpb246c3VjY2Vzc1wiO1xyXG4gICAgUm91dGVyRXZlbnRbXCJDaGlsZENvbXBsZXRlXCJdID0gXCJyb3V0ZXI6bmF2aWdhdGlvbjpjaGlsZDpjb21wbGV0ZVwiO1xyXG59KShSb3V0ZXJFdmVudCB8fCAoUm91dGVyRXZlbnQgPSB7fSkpO1xuXG4vKipcclxuICogQXZhaWxhYmxlIHBpcGVsaW5lIHNsb3QgbmFtZXMgdG8gaW5zZXJ0IGludGVyY2VwdG9yIGludG8gcm91dGVyIHBpcGVsaW5lXHJcbiAqL1xyXG4vLyBjb25zdCBlbnVtIGlzIHByZXNlcnZlZCBpbiB0c2NvbmZpZ1xyXG52YXIgUGlwZWxpbmVTbG90TmFtZTtcclxuKGZ1bmN0aW9uIChQaXBlbGluZVNsb3ROYW1lKSB7XHJcbiAgICAvKipcclxuICAgICAqIEF1dGhvcml6YXRpb24gc2xvdC4gSW52b2tlZCBlYXJseSBpbiB0aGUgcGlwZWxpbmUsXHJcbiAgICAgKiBiZWZvcmUgYGNhbkFjdGl2YXRlYCBob29rIG9mIGluY29taW5nIHJvdXRlXHJcbiAgICAgKi9cclxuICAgIFBpcGVsaW5lU2xvdE5hbWVbXCJBdXRob3JpemVcIl0gPSBcImF1dGhvcml6ZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmUtYWN0aXZhdGlvbiBzbG90LiBJbnZva2VkIGVhcmx5IGluIHRoZSBwaXBlbGluZSxcclxuICAgICAqIEludm9rZWQgdGltaW5nOlxyXG4gICAgICogICAtIGFmdGVyIEF1dGhvcml6YXRpb24gc2xvdFxyXG4gICAgICogICAtIGFmdGVyIGNhbkFjdGl2YXRlIGhvb2sgb24gbmV3IHZpZXcgbW9kZWxcclxuICAgICAqICAgLSBiZWZvcmUgZGVhY3RpdmF0ZSBob29rIG9uIG9sZCB2aWV3IG1vZGVsXHJcbiAgICAgKiAgIC0gYmVmb3JlIGFjdGl2YXRlIGhvb2sgb24gbmV3IHZpZXcgbW9kZWxcclxuICAgICAqL1xyXG4gICAgUGlwZWxpbmVTbG90TmFtZVtcIlByZUFjdGl2YXRlXCJdID0gXCJwcmVBY3RpdmF0ZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmUtcmVuZGVyIHNsb3QuIEludm9rZWQgbGF0ZXIgaW4gdGhlIHBpcGVsaW5lXHJcbiAgICAgKiBJbnZva2NhdGlvbiB0aW1pbmc6XHJcbiAgICAgKiAgIC0gYWZ0ZXIgYWN0aXZhdGUgaG9vayBvbiBuZXcgdmlldyBtb2RlbFxyXG4gICAgICogICAtIGJlZm9yZSBjb21taXQgc3RlcCBvbiBuZXcgbmF2aWdhdGlvbiBpbnN0cnVjdGlvblxyXG4gICAgICovXHJcbiAgICBQaXBlbGluZVNsb3ROYW1lW1wiUHJlUmVuZGVyXCJdID0gXCJwcmVSZW5kZXJcIjtcclxuICAgIC8qKlxyXG4gICAgICogUG9zdC1yZW5kZXIgc2xvdC4gSW52b2tlZCBsYXN0IGluIHRoZSBwaXBlbGluZVxyXG4gICAgICovXHJcbiAgICBQaXBlbGluZVNsb3ROYW1lW1wiUG9zdFJlbmRlclwiXSA9IFwicG9zdFJlbmRlclwiO1xyXG59KShQaXBlbGluZVNsb3ROYW1lIHx8IChQaXBlbGluZVNsb3ROYW1lID0ge30pKTtcblxuZXhwb3J0IHsgQWN0aXZhdGVOZXh0U3RlcCwgQXBwUm91dGVyLCBCdWlsZE5hdmlnYXRpb25QbGFuU3RlcCwgQ2FuQWN0aXZhdGVOZXh0U3RlcCwgQ2FuRGVhY3RpdmF0ZVByZXZpb3VzU3RlcCwgQ29tbWl0Q2hhbmdlc1N0ZXAsIERlYWN0aXZhdGVQcmV2aW91c1N0ZXAsIExvYWRSb3V0ZVN0ZXAsIE5hdk1vZGVsLCBOYXZpZ2F0aW9uSW5zdHJ1Y3Rpb24sIFBpcGVsaW5lLCBQaXBlbGluZVByb3ZpZGVyLCBQaXBlbGluZVNsb3ROYW1lLCBQaXBlbGluZVN0YXR1cywgUmVkaXJlY3QsIFJlZGlyZWN0VG9Sb3V0ZSwgUm91dGVMb2FkZXIsIFJvdXRlciwgUm91dGVyQ29uZmlndXJhdGlvbiwgUm91dGVyRXZlbnQsIGFjdGl2YXRpb25TdHJhdGVneSwgaXNOYXZpZ2F0aW9uQ29tbWFuZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVyZWxpYS1yb3V0ZXIuanMubWFwXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXVyZWxpYS1yb3V0ZXIvZGlzdC9lczIwMTUvYXVyZWxpYS1yb3V0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IGF1cmVsaWEtcm91dGVyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsImltcG9ydCB7IEJlaGF2aW9ySW5zdHJ1Y3Rpb24sIEJpbmRpbmdMYW5ndWFnZSB9IGZyb20gJ2F1cmVsaWEtdGVtcGxhdGluZyc7XG5pbXBvcnQgeyBjYW1lbENhc2UsIFNWR0FuYWx5emVyLCBiaW5kaW5nTW9kZSwgZW5xdWV1ZUJpbmRpbmdDb25uZWN0LCBjb25uZWN0YWJsZSwgc291cmNlQ29udGV4dCwgQmluZGluZ0V4cHJlc3Npb24sIExpc3RlbmVyRXhwcmVzc2lvbiwgZGVsZWdhdGlvblN0cmF0ZWd5LCBDYWxsRXhwcmVzc2lvbiwgUGFyc2VyLCBPYnNlcnZlckxvY2F0b3IsIEV2ZW50TWFuYWdlciwgTmFtZUV4cHJlc3Npb24sIExpdGVyYWxTdHJpbmcgfSBmcm9tICdhdXJlbGlhLWJpbmRpbmcnO1xuaW1wb3J0ICogYXMgTG9nTWFuYWdlciBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XG5cbnZhciBBdHRyaWJ1dGVNYXAgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXR0cmlidXRlTWFwKHN2Zykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuYWxsRWxlbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuc3ZnID0gc3ZnO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJVbml2ZXJzYWwoJ2FjY2Vzc2tleScsICdhY2Nlc3NLZXknKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyVW5pdmVyc2FsKCdjb250ZW50ZWRpdGFibGUnLCAnY29udGVudEVkaXRhYmxlJyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclVuaXZlcnNhbCgndGFiaW5kZXgnLCAndGFiSW5kZXgnKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyVW5pdmVyc2FsKCd0ZXh0Y29udGVudCcsICd0ZXh0Q29udGVudCcpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJVbml2ZXJzYWwoJ2lubmVyaHRtbCcsICdpbm5lckhUTUwnKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyVW5pdmVyc2FsKCdzY3JvbGx0b3AnLCAnc2Nyb2xsVG9wJyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclVuaXZlcnNhbCgnc2Nyb2xsbGVmdCcsICdzY3JvbGxMZWZ0Jyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclVuaXZlcnNhbCgncmVhZG9ubHknLCAncmVhZE9ubHknKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyKCdsYWJlbCcsICdmb3InLCAnaHRtbEZvcicpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ2ltZycsICd1c2VtYXAnLCAndXNlTWFwJyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcignaW5wdXQnLCAnbWF4bGVuZ3RoJywgJ21heExlbmd0aCcpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ2lucHV0JywgJ21pbmxlbmd0aCcsICdtaW5MZW5ndGgnKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyKCdpbnB1dCcsICdmb3JtYWN0aW9uJywgJ2Zvcm1BY3Rpb24nKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyKCdpbnB1dCcsICdmb3JtZW5jdHlwZScsICdmb3JtRW5jVHlwZScpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ2lucHV0JywgJ2Zvcm1tZXRob2QnLCAnZm9ybU1ldGhvZCcpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ2lucHV0JywgJ2Zvcm1ub3ZhbGlkYXRlJywgJ2Zvcm1Ob1ZhbGlkYXRlJyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcignaW5wdXQnLCAnZm9ybXRhcmdldCcsICdmb3JtVGFyZ2V0Jyk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcigndGV4dGFyZWEnLCAnbWF4bGVuZ3RoJywgJ21heExlbmd0aCcpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ3RkJywgJ3Jvd3NwYW4nLCAncm93U3BhbicpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ3RkJywgJ2NvbHNwYW4nLCAnY29sU3BhbicpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ3RoJywgJ3Jvd3NwYW4nLCAncm93U3BhbicpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIoJ3RoJywgJ2NvbHNwYW4nLCAnY29sU3BhbicpO1xyXG4gICAgfVxyXG4gICAgQXR0cmlidXRlTWFwLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgcHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgZWxlbWVudE5hbWUgPSBlbGVtZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2VsZW1lbnROYW1lXSA9ICh0aGlzLmVsZW1lbnRzW2VsZW1lbnROYW1lXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpKTtcclxuICAgICAgICBlbGVtZW50W2F0dHJpYnV0ZU5hbWVdID0gcHJvcGVydHlOYW1lO1xyXG4gICAgfTtcclxuICAgIEF0dHJpYnV0ZU1hcC5wcm90b3R5cGUucmVnaXN0ZXJVbml2ZXJzYWwgPSBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSwgcHJvcGVydHlOYW1lKSB7XHJcbiAgICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB0aGlzLmFsbEVsZW1lbnRzW2F0dHJpYnV0ZU5hbWVdID0gcHJvcGVydHlOYW1lO1xyXG4gICAgfTtcclxuICAgIEF0dHJpYnV0ZU1hcC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3ZnLmlzU3RhbmRhcmRTdmdBdHRyaWJ1dGUoZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbGVtZW50TmFtZSA9IGVsZW1lbnROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbZWxlbWVudE5hbWVdO1xyXG4gICAgICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgYXR0cmlidXRlTmFtZSBpbiBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50W2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSBpbiB0aGlzLmFsbEVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbEVsZW1lbnRzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoLyg/Ol5kYXRhLSl8KD86XmFyaWEtKXw6Ly50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FtZWxDYXNlKGF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgfTtcclxuICAgIEF0dHJpYnV0ZU1hcC5pbmplY3QgPSBbU1ZHQW5hbHl6ZXJdO1xyXG4gICAgcmV0dXJuIEF0dHJpYnV0ZU1hcDtcclxufSgpKTtcblxudmFyIEludGVycG9sYXRpb25CaW5kaW5nRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbnRlcnBvbGF0aW9uQmluZGluZ0V4cHJlc3Npb24ob2JzZXJ2ZXJMb2NhdG9yLCB0YXJnZXRQcm9wZXJ0eSwgcGFydHMsIG1vZGUsIGxvb2t1cEZ1bmN0aW9ucywgYXR0cmlidXRlKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XHJcbiAgICAgICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFByb3BlcnR5O1xyXG4gICAgICAgIHRoaXMucGFydHMgPSBwYXJ0cztcclxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gdGhpcy5hdHRyVG9SZW1vdmUgPSBhdHRyaWJ1dGU7XHJcbiAgICAgICAgdGhpcy5kaXNjcmV0ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgSW50ZXJwb2xhdGlvbkJpbmRpbmdFeHByZXNzaW9uLnByb3RvdHlwZS5jcmVhdGVCaW5kaW5nID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcnRzLmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcodGFyZ2V0LCB0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5wYXJ0c1sxXSwgdGhpcy5tb2RlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucywgdGhpcy50YXJnZXRQcm9wZXJ0eSwgdGhpcy5wYXJ0c1swXSwgdGhpcy5wYXJ0c1syXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgSW50ZXJwb2xhdGlvbkJpbmRpbmcodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMucGFydHMsIHRhcmdldCwgdGhpcy50YXJnZXRQcm9wZXJ0eSwgdGhpcy5tb2RlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEludGVycG9sYXRpb25CaW5kaW5nRXhwcmVzc2lvbjtcclxufSgpKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXQodGFyZ2V0LCBwcm9wZXJ0eU5hbWUpIHtcclxuICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdzdHlsZScpIHtcclxuICAgICAgICBMb2dNYW5hZ2VyLmdldExvZ2dlcigndGVtcGxhdGluZy1iaW5kaW5nJylcclxuICAgICAgICAgICAgLmluZm8oJ0ludGVybmV0IEV4cGxvcmVyIGRvZXMgbm90IHN1cHBvcnQgaW50ZXJwb2xhdGlvbiBpbiBcInN0eWxlXCIgYXR0cmlidXRlcy4gIFVzZSB0aGUgc3R5bGUgYXR0cmlidXRlXFwncyBhbGlhcywgXCJjc3NcIiBpbnN0ZWFkLicpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGFyZ2V0LnBhcmVudEVsZW1lbnQgJiYgdGFyZ2V0LnBhcmVudEVsZW1lbnQubm9kZU5hbWUgPT09ICdURVhUQVJFQScgJiYgcHJvcGVydHlOYW1lID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcnBvbGF0aW9uIGJpbmRpbmcgY2Fubm90IGJlIHVzZWQgaW4gdGhlIGNvbnRlbnQgb2YgYSB0ZXh0YXJlYSBlbGVtZW50LiAgVXNlIDx0ZXh0YXJlYSB2YWx1ZS5iaW5kPVwiZXhwcmVzc2lvblwiPjwvdGV4dGFyZWE+IGluc3RlYWQuJyk7XHJcbiAgICB9XHJcbn1cclxudmFyIEludGVycG9sYXRpb25CaW5kaW5nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEludGVycG9sYXRpb25CaW5kaW5nKG9ic2VydmVyTG9jYXRvciwgcGFydHMsIHRhcmdldCwgdGFyZ2V0UHJvcGVydHksIG1vZGUsIGxvb2t1cEZ1bmN0aW9ucykge1xyXG4gICAgICAgIHZhbGlkYXRlVGFyZ2V0KHRhcmdldCwgdGFyZ2V0UHJvcGVydHkpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xyXG4gICAgICAgIHRoaXMucGFydHMgPSBwYXJ0cztcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRBY2Nlc3NvciA9IG9ic2VydmVyTG9jYXRvci5nZXRBY2Nlc3Nvcih0YXJnZXQsIHRhcmdldFByb3BlcnR5KTtcclxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xyXG4gICAgfVxyXG4gICAgSW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLmludGVycG9sYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHRoaXMucGFydHM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBhcnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlICs9IChpICUgMiA9PT0gMCA/IHBhcnRzW2ldIDogdGhpc1tcImNoaWxkQmluZGluZ1wiLmNvbmNhdChpKV0udmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWNjZXNzb3Iuc2V0VmFsdWUodmFsdWUsIHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLnVwZGF0ZU9uZVRpbWVCaW5kaW5ncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgaWkgPSB0aGlzLnBhcnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpc1tcImNoaWxkQmluZGluZ1wiLmNvbmNhdChpKV07XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5tb2RlID09PSBiaW5kaW5nTW9kZS5vbmVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5jYWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UgPT09IHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IHRoaXMucGFydHM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGlpID0gcGFydHMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBDaGlsZEludGVycG9sYXRpb25CaW5kaW5nKHRoaXMsIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCBwYXJ0c1tpXSwgdGhpcy5tb2RlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgICAgIGJpbmRpbmcuYmluZChzb3VyY2UpO1xyXG4gICAgICAgICAgICB0aGlzW1wiY2hpbGRCaW5kaW5nXCIuY29uY2F0KGkpXSA9IGJpbmRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZSgpO1xyXG4gICAgfTtcclxuICAgIEludGVycG9sYXRpb25CaW5kaW5nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gdGhpcy5wYXJ0cztcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgaWkgPSBwYXJ0cy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lXzEgPSBcImNoaWxkQmluZGluZ1wiLmNvbmNhdChpKTtcclxuICAgICAgICAgICAgdGhpc1tuYW1lXzFdLnVuYmluZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gSW50ZXJwb2xhdGlvbkJpbmRpbmc7XHJcbn0oKSk7XHJcbnZhciBDaGlsZEludGVycG9sYXRpb25CaW5kaW5nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcodGFyZ2V0LCBvYnNlcnZlckxvY2F0b3IsIHNvdXJjZUV4cHJlc3Npb24sIG1vZGUsIGxvb2t1cEZ1bmN0aW9ucywgdGFyZ2V0UHJvcGVydHksIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEludGVycG9sYXRpb25CaW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVUYXJnZXQodGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWNjZXNzb3IgPSBvYnNlcnZlckxvY2F0b3IuZ2V0QWNjZXNzb3IodGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xyXG4gICAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XHJcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcclxuICAgICAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcclxuICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuICAgIH1cclxuICAgIENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLnVwZGF0ZVRhcmdldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmludGVycG9sYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldEFjY2Vzc29yLnNldFZhbHVlKHRoaXMubGVmdCArIHZhbHVlICsgdGhpcy5yaWdodCwgdGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJhd1ZhbHVlID0gdGhpcy5zb3VyY2VFeHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQodGhpcy5yYXdWYWx1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kZSAhPT0gYmluZGluZ01vZGUub25lVGltZSkge1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJzaW9uKys7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc291cmNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmF3VmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZlQXJyYXkodGhpcy5yYXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51bm9ic2VydmUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGlsZEludGVycG9sYXRpb25CaW5kaW5nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHZhciBzb3VyY2VFeHByZXNzaW9uID0gdGhpcy5zb3VyY2VFeHByZXNzaW9uO1xyXG4gICAgICAgIGlmIChzb3VyY2VFeHByZXNzaW9uLmJpbmQpIHtcclxuICAgICAgICAgICAgc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJhd1ZhbHVlID0gc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZShzb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldCh0aGlzLnJhd1ZhbHVlKTtcclxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSBiaW5kaW5nTW9kZS5vbmVXYXkpIHtcclxuICAgICAgICAgICAgZW5xdWV1ZUJpbmRpbmdDb25uZWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGlsZEludGVycG9sYXRpb25CaW5kaW5nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgc291cmNlRXhwcmVzc2lvbiA9IHRoaXMuc291cmNlRXhwcmVzc2lvbjtcclxuICAgICAgICBpZiAoc291cmNlRXhwcmVzc2lvbi51bmJpbmQpIHtcclxuICAgICAgICAgICAgc291cmNlRXhwcmVzc2lvbi51bmJpbmQodGhpcywgdGhpcy5zb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51bm9ic2VydmUodHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgQ2hpbGRJbnRlcnBvbGF0aW9uQmluZGluZy5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChldmFsdWF0ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2YWx1YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmF3VmFsdWUgPSB0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUYXJnZXQodGhpcy5yYXdWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc291cmNlKTtcclxuICAgICAgICBpZiAodGhpcy5yYXdWYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUFycmF5KHRoaXMucmF3VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDaGlsZEludGVycG9sYXRpb25CaW5kaW5nID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgY29ubmVjdGFibGUoKVxyXG4gICAgXSwgQ2hpbGRJbnRlcnBvbGF0aW9uQmluZGluZyk7XHJcbiAgICByZXR1cm4gQ2hpbGRJbnRlcnBvbGF0aW9uQmluZGluZztcclxufSgpKTtcblxudmFyIExldEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTGV0RXhwcmVzc2lvbihvYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCBzb3VyY2VFeHByZXNzaW9uLCBsb29rdXBGdW5jdGlvbnMsIHRvQmluZGluZ0NvbnRleHQpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmVyTG9jYXRvciA9IG9ic2VydmVyTG9jYXRvcjtcclxuICAgICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRQcm9wZXJ0eTtcclxuICAgICAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcclxuICAgICAgICB0aGlzLnRvQmluZGluZ0NvbnRleHQgPSB0b0JpbmRpbmdDb250ZXh0O1xyXG4gICAgfVxyXG4gICAgTGV0RXhwcmVzc2lvbi5wcm90b3R5cGUuY3JlYXRlQmluZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExldEJpbmRpbmcodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuc291cmNlRXhwcmVzc2lvbiwgdGhpcy50YXJnZXRQcm9wZXJ0eSwgdGhpcy5sb29rdXBGdW5jdGlvbnMsIHRoaXMudG9CaW5kaW5nQ29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExldEV4cHJlc3Npb247XHJcbn0oKSk7XHJcbnZhciBMZXRCaW5kaW5nID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExldEJpbmRpbmcob2JzZXJ2ZXJMb2NhdG9yLCBzb3VyY2VFeHByZXNzaW9uLCB0YXJnZXRQcm9wZXJ0eSwgbG9va3VwRnVuY3Rpb25zLCB0b0JpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcclxuICAgICAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gdGFyZ2V0UHJvcGVydHk7XHJcbiAgICAgICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRvQmluZGluZ0NvbnRleHQgPSB0b0JpbmRpbmdDb250ZXh0O1xyXG4gICAgfVxyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUudXBkYXRlVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0W3RoaXMudGFyZ2V0UHJvcGVydHldID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29udGV4dCA9PT0gc291cmNlQ29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRhcmdldCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY2FsbCBjb250ZXh0IFwiLmNvbmNhdChjb250ZXh0KSk7XHJcbiAgICB9O1xyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMudG9CaW5kaW5nQ29udGV4dCA/IHNvdXJjZS5iaW5kaW5nQ29udGV4dCA6IHNvdXJjZS5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbnF1ZXVlQmluZGluZ0Nvbm5lY3QodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLnVuYmluZCh0aGlzLCB0aGlzLnNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc291cmNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy51bm9ic2VydmUodHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKGFyZzApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9O1xyXG4gICAgTGV0QmluZGluZy5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmNvbm5lY3QodGhpcywgdGhpcy5zb3VyY2UpO1xyXG4gICAgfTtcclxuICAgIExldEJpbmRpbmcgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjb25uZWN0YWJsZSgpXHJcbiAgICBdLCBMZXRCaW5kaW5nKTtcclxuICAgIHJldHVybiBMZXRCaW5kaW5nO1xyXG59KCkpO1xuXG52YXIgTGV0SW50ZXJwb2xhdGlvbkJpbmRpbmdFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExldEludGVycG9sYXRpb25CaW5kaW5nRXhwcmVzc2lvbihvYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCBwYXJ0cywgbG9va3VwRnVuY3Rpb25zLCB0b0JpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XHJcbiAgICAgICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFByb3BlcnR5O1xyXG4gICAgICAgIHRoaXMucGFydHMgPSBwYXJ0cztcclxuICAgICAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcclxuICAgICAgICB0aGlzLnRvQmluZGluZ0NvbnRleHQgPSB0b0JpbmRpbmdDb250ZXh0O1xyXG4gICAgfVxyXG4gICAgTGV0SW50ZXJwb2xhdGlvbkJpbmRpbmdFeHByZXNzaW9uLnByb3RvdHlwZS5jcmVhdGVCaW5kaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGV0SW50ZXJwb2xhdGlvbkJpbmRpbmcodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMudGFyZ2V0UHJvcGVydHksIHRoaXMucGFydHMsIHRoaXMubG9va3VwRnVuY3Rpb25zLCB0aGlzLnRvQmluZGluZ0NvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMZXRJbnRlcnBvbGF0aW9uQmluZGluZ0V4cHJlc3Npb247XHJcbn0oKSk7XHJcbnZhciBMZXRJbnRlcnBvbGF0aW9uQmluZGluZyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMZXRJbnRlcnBvbGF0aW9uQmluZGluZyhvYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCBwYXJ0cywgbG9va3VwRnVuY3Rpb25zLCB0b0JpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IHBhcnRzO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRQcm9wZXJ0eTtcclxuICAgICAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcclxuICAgICAgICB0aGlzLnRvQmluZGluZ0NvbnRleHQgPSB0b0JpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcclxuICAgIH1cclxuICAgIExldEludGVycG9sYXRpb25CaW5kaW5nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy50b0JpbmRpbmdDb250ZXh0ID8gc291cmNlLmJpbmRpbmdDb250ZXh0IDogc291cmNlLm92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICB0aGlzLmludGVycG9sYXRpb25CaW5kaW5nID0gdGhpcy5jcmVhdGVJbnRlcnBvbGF0aW9uQmluZGluZygpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJwb2xhdGlvbkJpbmRpbmcuYmluZChzb3VyY2UpO1xyXG4gICAgfTtcclxuICAgIExldEludGVycG9sYXRpb25CaW5kaW5nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQm91bmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW50ZXJwb2xhdGlvbkJpbmRpbmcudW5iaW5kKCk7XHJcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0aW9uQmluZGluZyA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgTGV0SW50ZXJwb2xhdGlvbkJpbmRpbmcucHJvdG90eXBlLmNyZWF0ZUludGVycG9sYXRpb25CaW5kaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcnRzLmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcodGhpcy50YXJnZXQsIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCB0aGlzLnBhcnRzWzFdLCBiaW5kaW5nTW9kZS50b1ZpZXcsIHRoaXMubG9va3VwRnVuY3Rpb25zLCB0aGlzLnRhcmdldFByb3BlcnR5LCB0aGlzLnBhcnRzWzBdLCB0aGlzLnBhcnRzWzJdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnBvbGF0aW9uQmluZGluZyh0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5wYXJ0cywgdGhpcy50YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHksIGJpbmRpbmdNb2RlLnRvVmlldywgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMZXRJbnRlcnBvbGF0aW9uQmluZGluZztcclxufSgpKTtcblxudmFyIFN5bnRheEludGVycHJldGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN5bnRheEludGVycHJldGVyKHBhcnNlciwgb2JzZXJ2ZXJMb2NhdG9yLCBldmVudE1hbmFnZXIsIGF0dHJpYnV0ZU1hcCkge1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xyXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gZXZlbnRNYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlTWFwID0gYXR0cmlidXRlTWFwO1xyXG4gICAgfVxyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLmludGVycHJldCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpIHtcclxuICAgICAgICBpZiAoaW5mby5jb21tYW5kIGluIHRoaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbaW5mby5jb21tYW5kXShyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVVbmtub3duQ29tbWFuZChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLnByb3RvdHlwZS5oYW5kbGVVbmtub3duQ29tbWFuZCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpIHtcclxuICAgICAgICBMb2dNYW5hZ2VyLmdldExvZ2dlcigndGVtcGxhdGluZy1iaW5kaW5nJykud2FybignVW5rbm93biBiaW5kaW5nIGNvbW1hbmQuJywgaW5mbyk7XHJcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nSW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLmRldGVybWluZURlZmF1bHRCaW5kaW5nTW9kZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBhdHRyTmFtZSwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdpbnB1dCcgJiYgKGF0dHJOYW1lID09PSAndmFsdWUnIHx8IGF0dHJOYW1lID09PSAnZmlsZXMnKSAmJiBlbGVtZW50LnR5cGUgIT09ICdjaGVja2JveCcgJiYgZWxlbWVudC50eXBlICE9PSAncmFkaW8nXHJcbiAgICAgICAgICAgIHx8IHRhZ05hbWUgPT09ICdpbnB1dCcgJiYgYXR0ck5hbWUgPT09ICdjaGVja2VkJyAmJiAoZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW1lbnQudHlwZSA9PT0gJ3JhZGlvJylcclxuICAgICAgICAgICAgfHwgKHRhZ05hbWUgPT09ICd0ZXh0YXJlYScgfHwgdGFnTmFtZSA9PT0gJ3NlbGVjdCcpICYmIGF0dHJOYW1lID09PSAndmFsdWUnXHJcbiAgICAgICAgICAgIHx8IChhdHRyTmFtZSA9PT0gJ3RleHRjb250ZW50JyB8fCBhdHRyTmFtZSA9PT0gJ2lubmVyaHRtbCcpICYmIGVsZW1lbnQuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZSdcclxuICAgICAgICAgICAgfHwgYXR0ck5hbWUgPT09ICdzY3JvbGx0b3AnXHJcbiAgICAgICAgICAgIHx8IGF0dHJOYW1lID09PSAnc2Nyb2xsbGVmdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdNb2RlLnR3b1dheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRleHRcclxuICAgICAgICAgICAgJiYgYXR0ck5hbWUgaW4gY29udGV4dC5hdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICYmIGNvbnRleHQuYXR0cmlidXRlc1thdHRyTmFtZV1cclxuICAgICAgICAgICAgJiYgY29udGV4dC5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0QmluZGluZ01vZGUgPj0gYmluZGluZ01vZGUub25lVGltZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0QmluZGluZ01vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiaW5kaW5nTW9kZS50b1ZpZXc7XHJcbiAgICB9O1xyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBlbGVtZW50LCBpbmZvLCBleGlzdGluZ0luc3RydWN0aW9uLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gZXhpc3RpbmdJbnN0cnVjdGlvbiB8fCBCZWhhdmlvckluc3RydWN0aW9uLmF0dHJpYnV0ZShpbmZvLmF0dHJOYW1lKTtcclxuICAgICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luZm8uYXR0ck5hbWVdID0gbmV3IEJpbmRpbmdFeHByZXNzaW9uKHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCB0aGlzLmF0dHJpYnV0ZU1hcC5tYXAoZWxlbWVudC50YWdOYW1lLCBpbmZvLmF0dHJOYW1lKSwgdGhpcy5wYXJzZXIucGFyc2UoaW5mby5hdHRyVmFsdWUpLCBpbmZvLmRlZmF1bHRCaW5kaW5nTW9kZSA9PT0gdW5kZWZpbmVkIHx8IGluZm8uZGVmYXVsdEJpbmRpbmdNb2RlID09PSBudWxsXHJcbiAgICAgICAgICAgID8gdGhpcy5kZXRlcm1pbmVEZWZhdWx0QmluZGluZ01vZGUoZWxlbWVudCwgaW5mby5hdHRyTmFtZSwgY29udGV4dClcclxuICAgICAgICAgICAgOiBpbmZvLmRlZmF1bHRCaW5kaW5nTW9kZSwgcmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKHJlc291cmNlcywgZWxlbWVudCwgaW5mbykge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGlzdGVuZXJFeHByZXNzaW9uKHRoaXMuZXZlbnRNYW5hZ2VyLCBpbmZvLmF0dHJOYW1lLCB0aGlzLnBhcnNlci5wYXJzZShpbmZvLmF0dHJWYWx1ZSksIGRlbGVnYXRpb25TdHJhdGVneS5ub25lLCB0cnVlLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgIH07XHJcbiAgICBTeW50YXhJbnRlcnByZXRlci5wcm90b3R5cGUuY2FwdHVyZSA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8pIHtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3RlbmVyRXhwcmVzc2lvbih0aGlzLmV2ZW50TWFuYWdlciwgaW5mby5hdHRyTmFtZSwgdGhpcy5wYXJzZXIucGFyc2UoaW5mby5hdHRyVmFsdWUpLCBkZWxlZ2F0aW9uU3RyYXRlZ3kuY2FwdHVyaW5nLCB0cnVlLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgIH07XHJcbiAgICBTeW50YXhJbnRlcnByZXRlci5wcm90b3R5cGUuZGVsZWdhdGUgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBlbGVtZW50LCBpbmZvKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0ZW5lckV4cHJlc3Npb24odGhpcy5ldmVudE1hbmFnZXIsIGluZm8uYXR0ck5hbWUsIHRoaXMucGFyc2VyLnBhcnNlKGluZm8uYXR0clZhbHVlKSwgZGVsZWdhdGlvblN0cmF0ZWd5LmJ1YmJsaW5nLCB0cnVlLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgIH07XHJcbiAgICBTeW50YXhJbnRlcnByZXRlci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBleGlzdGluZ0luc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGluZm8uYXR0ck5hbWUpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV0gPSBuZXcgQ2FsbEV4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIGluZm8uYXR0ck5hbWUsIHRoaXMucGFyc2VyLnBhcnNlKGluZm8uYXR0clZhbHVlKSwgcmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLnByb3RvdHlwZS5vcHRpb25zID0gZnVuY3Rpb24gKHJlc291cmNlcywgZWxlbWVudCwgaW5mbywgZXhpc3RpbmdJbnN0cnVjdGlvbiwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IGV4aXN0aW5nSW5zdHJ1Y3Rpb24gfHwgQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUoaW5mby5hdHRyTmFtZSk7XHJcbiAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IGluZm8uYXR0clZhbHVlO1xyXG4gICAgICAgIHZhciBsYW5ndWFnZSA9IHRoaXMubGFuZ3VhZ2U7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xyXG4gICAgICAgIHZhciB0YXJnZXQgPSAnJztcclxuICAgICAgICB2YXIgY3VycmVudDtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIGluU3RyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGluRXNjYXBlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGZvdW5kTmFtZSA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gYXR0clZhbHVlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IGF0dHJWYWx1ZVtpXTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09ICc7JyAmJiAhaW5TdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZm91bmROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHRoaXMuX2dldFByaW1hcnlQcm9wZXJ0eU5hbWUocmVzb3VyY2VzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluZm8gPSBsYW5ndWFnZS5pbnNwZWN0QXR0cmlidXRlKHJlc291cmNlcywgJz8nLCBuYW1lLCB0YXJnZXQudHJpbSgpKTtcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlLmNyZWF0ZUF0dHJpYnV0ZUluc3RydWN0aW9uKHJlc291cmNlcywgZWxlbWVudCwgaW5mbywgaW5zdHJ1Y3Rpb24sIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW2luZm8uYXR0ck5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb24uYXR0cmlidXRlc1tpbmZvLmF0dHJOYW1lXSA9IGluZm8uYXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50ID09PSAnOicgJiYgbmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZm91bmROYW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSB0YXJnZXQudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCA9PT0gJ1xcXFwnKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgKz0gY3VycmVudDtcclxuICAgICAgICAgICAgICAgIGluRXNjYXBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ICs9IGN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCAmJiBpbkVzY2FwZSA9PT0gZmFsc2UgJiYgY3VycmVudCA9PT0gJ1xcJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpblN0cmluZyA9ICFpblN0cmluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbkVzY2FwZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWZvdW5kTmFtZSkge1xyXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5fZ2V0UHJpbWFyeVByb3BlcnR5TmFtZShyZXNvdXJjZXMsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbmZvID0gbGFuZ3VhZ2UuaW5zcGVjdEF0dHJpYnV0ZShyZXNvdXJjZXMsICc/JywgbmFtZSwgdGFyZ2V0LnRyaW0oKSk7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlLmNyZWF0ZUF0dHJpYnV0ZUluc3RydWN0aW9uKHJlc291cmNlcywgZWxlbWVudCwgaW5mbywgaW5zdHJ1Y3Rpb24sIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoIWluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV0gPSBpbmZvLmF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLl9nZXRQcmltYXJ5UHJvcGVydHlOYW1lID0gZnVuY3Rpb24gKHJlc291cmNlcywgY29udGV4dCkge1xyXG4gICAgICAgIHZhciB0eXBlID0gcmVzb3VyY2VzLmdldEF0dHJpYnV0ZShjb250ZXh0LmF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgICAgIGlmICh0eXBlICYmIHR5cGUucHJpbWFyeVByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlLnByaW1hcnlQcm9wZXJ0eS5hdHRyaWJ1dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLnByb3RvdHlwZVsnZm9yJ10gPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBlbGVtZW50LCBpbmZvLCBleGlzdGluZ0luc3RydWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIHBhcnRzO1xyXG4gICAgICAgIHZhciBrZXlWYWx1ZTtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgdmFyIGF0dHJWYWx1ZTtcclxuICAgICAgICB2YXIgaXNEZXN0cnVjdHVyaW5nO1xyXG4gICAgICAgIGF0dHJWYWx1ZSA9IGluZm8uYXR0clZhbHVlO1xyXG4gICAgICAgIGlzRGVzdHJ1Y3R1cmluZyA9IGF0dHJWYWx1ZS5tYXRjaCgvXiAqW1tdLitbXFxdXS8pO1xyXG4gICAgICAgIHBhcnRzID0gaXNEZXN0cnVjdHVyaW5nID8gYXR0clZhbHVlLnNwbGl0KCdvZiAnKSA6IGF0dHJWYWx1ZS5zcGxpdCgnIG9mICcpO1xyXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3Qgc3ludGF4IGZvciBcImZvclwiLiBUaGUgZm9ybSBpczogXCIkbG9jYWwgb2YgJGl0ZW1zXCIgb3IgXCJbJGtleSwgJHZhbHVlXSBvZiAkaXRlbXNcIi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24gPSBleGlzdGluZ0luc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGluZm8uYXR0ck5hbWUpO1xyXG4gICAgICAgIGlmIChpc0Rlc3RydWN0dXJpbmcpIHtcclxuICAgICAgICAgICAga2V5VmFsdWUgPSBwYXJ0c1swXS5yZXBsYWNlKC9bW1xcXV0vZywgJycpLnJlcGxhY2UoLywvZywgJyAnKS5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXMua2V5ID0ga2V5VmFsdWVbMF07XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXMudmFsdWUgPSBrZXlWYWx1ZVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXMubG9jYWwgPSBwYXJ0c1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYXR0cmlidXRlcy5pdGVtcyA9IG5ldyBCaW5kaW5nRXhwcmVzc2lvbih0aGlzLm9ic2VydmVyTG9jYXRvciwgJ2l0ZW1zJywgdGhpcy5wYXJzZXIucGFyc2UocGFydHNbMV0pLCBiaW5kaW5nTW9kZS50b1ZpZXcsIHJlc291cmNlcy5sb29rdXBGdW5jdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBpbnN0cnVjdGlvbjtcclxuICAgIH07XHJcbiAgICBTeW50YXhJbnRlcnByZXRlci5wcm90b3R5cGVbJ3R3by13YXknXSA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBleGlzdGluZ0luc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGluZm8uYXR0ck5hbWUpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV0gPSBuZXcgQmluZGluZ0V4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuYXR0cmlidXRlTWFwLm1hcChlbGVtZW50LnRhZ05hbWUsIGluZm8uYXR0ck5hbWUpLCB0aGlzLnBhcnNlci5wYXJzZShpbmZvLmF0dHJWYWx1ZSksIGJpbmRpbmdNb2RlLnR3b1dheSwgcmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLnByb3RvdHlwZVsndG8tdmlldyddID0gZnVuY3Rpb24gKHJlc291cmNlcywgZWxlbWVudCwgaW5mbywgZXhpc3RpbmdJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IGV4aXN0aW5nSW5zdHJ1Y3Rpb24gfHwgQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUoaW5mby5hdHRyTmFtZSk7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYXR0cmlidXRlc1tpbmZvLmF0dHJOYW1lXSA9IG5ldyBCaW5kaW5nRXhwcmVzc2lvbih0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5hdHRyaWJ1dGVNYXAubWFwKGVsZW1lbnQudGFnTmFtZSwgaW5mby5hdHRyTmFtZSksIHRoaXMucGFyc2VyLnBhcnNlKGluZm8uYXR0clZhbHVlKSwgYmluZGluZ01vZGUudG9WaWV3LCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlWydmcm9tLXZpZXcnXSA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIGluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBleGlzdGluZ0luc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKGluZm8uYXR0ck5hbWUpO1xyXG4gICAgICAgIGluc3RydWN0aW9uLmF0dHJpYnV0ZXNbaW5mby5hdHRyTmFtZV0gPSBuZXcgQmluZGluZ0V4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuYXR0cmlidXRlTWFwLm1hcChlbGVtZW50LnRhZ05hbWUsIGluZm8uYXR0ck5hbWUpLCB0aGlzLnBhcnNlci5wYXJzZShpbmZvLmF0dHJWYWx1ZSksIGJpbmRpbmdNb2RlLmZyb21WaWV3LCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlWydvbmUtdGltZSddID0gZnVuY3Rpb24gKHJlc291cmNlcywgZWxlbWVudCwgaW5mbywgZXhpc3RpbmdJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IGV4aXN0aW5nSW5zdHJ1Y3Rpb24gfHwgQmVoYXZpb3JJbnN0cnVjdGlvbi5hdHRyaWJ1dGUoaW5mby5hdHRyTmFtZSk7XHJcbiAgICAgICAgaW5zdHJ1Y3Rpb24uYXR0cmlidXRlc1tpbmZvLmF0dHJOYW1lXSA9IG5ldyBCaW5kaW5nRXhwcmVzc2lvbih0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5hdHRyaWJ1dGVNYXAubWFwKGVsZW1lbnQudGFnTmFtZSwgaW5mby5hdHRyTmFtZSksIHRoaXMucGFyc2VyLnBhcnNlKGluZm8uYXR0clZhbHVlKSwgYmluZGluZ01vZGUub25lVGltZSwgcmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGluc3RydWN0aW9uO1xyXG4gICAgfTtcclxuICAgIFN5bnRheEludGVycHJldGVyLmluamVjdCA9IFtQYXJzZXIsIE9ic2VydmVyTG9jYXRvciwgRXZlbnRNYW5hZ2VyLCBBdHRyaWJ1dGVNYXBdO1xyXG4gICAgcmV0dXJuIFN5bnRheEludGVycHJldGVyO1xyXG59KCkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLCAnb25lLXdheScsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3ludGF4SW50ZXJwcmV0ZXIucHJvdG90eXBlLCAndG8tdmlldycpKTtcblxudmFyIGluZm8gPSB7fTtcclxudmFyIFRlbXBsYXRpbmdCaW5kaW5nTGFuZ3VhZ2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFRlbXBsYXRpbmdCaW5kaW5nTGFuZ3VhZ2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUZW1wbGF0aW5nQmluZGluZ0xhbmd1YWdlKHBhcnNlciwgb2JzZXJ2ZXJMb2NhdG9yLCBzeW50YXhJbnRlcnByZXRlciwgYXR0cmlidXRlTWFwKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5wYXJzZXIgPSBwYXJzZXI7XHJcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xyXG4gICAgICAgIF90aGlzLnN5bnRheEludGVycHJldGVyID0gc3ludGF4SW50ZXJwcmV0ZXI7XHJcbiAgICAgICAgX3RoaXMuZW1wdHlTdHJpbmdFeHByZXNzaW9uID0gX3RoaXMucGFyc2VyLnBhcnNlKCdcXCdcXCcnKTtcclxuICAgICAgICBzeW50YXhJbnRlcnByZXRlci5sYW5ndWFnZSA9IF90aGlzO1xyXG4gICAgICAgIF90aGlzLmF0dHJpYnV0ZU1hcCA9IGF0dHJpYnV0ZU1hcDtcclxuICAgICAgICBfdGhpcy50b0JpbmRpbmdDb250ZXh0QXR0ciA9ICd0by1iaW5kaW5nLWNvbnRleHQnO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFRlbXBsYXRpbmdCaW5kaW5nTGFuZ3VhZ2UucHJvdG90eXBlLmluc3BlY3RBdHRyaWJ1dGUgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBlbGVtZW50TmFtZSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSkge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IGF0dHJOYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaW5mby5kZWZhdWx0QmluZGluZ01vZGUgPSBudWxsO1xyXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgaW5mby5hdHRyTmFtZSA9IHBhcnRzWzBdLnRyaW0oKTtcclxuICAgICAgICAgICAgaW5mby5hdHRyVmFsdWUgPSBhdHRyVmFsdWU7XHJcbiAgICAgICAgICAgIGluZm8uY29tbWFuZCA9IHBhcnRzWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgaWYgKGluZm8uY29tbWFuZCA9PT0gJ3JlZicpIHtcclxuICAgICAgICAgICAgICAgIGluZm8uZXhwcmVzc2lvbiA9IG5ldyBOYW1lRXhwcmVzc2lvbih0aGlzLnBhcnNlci5wYXJzZShhdHRyVmFsdWUpLCBpbmZvLmF0dHJOYW1lLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICAgICAgICAgIGluZm8uY29tbWFuZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpbmZvLmF0dHJOYW1lID0gJ3JlZic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvLmV4cHJlc3Npb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGF0dHJOYW1lID09PSAncmVmJykge1xyXG4gICAgICAgICAgICBpbmZvLmF0dHJOYW1lID0gYXR0ck5hbWU7XHJcbiAgICAgICAgICAgIGluZm8uYXR0clZhbHVlID0gYXR0clZhbHVlO1xyXG4gICAgICAgICAgICBpbmZvLmNvbW1hbmQgPSBudWxsO1xyXG4gICAgICAgICAgICBpbmZvLmV4cHJlc3Npb24gPSBuZXcgTmFtZUV4cHJlc3Npb24odGhpcy5wYXJzZXIucGFyc2UoYXR0clZhbHVlKSwgJ2VsZW1lbnQnLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluZm8uYXR0ck5hbWUgPSBhdHRyTmFtZTtcclxuICAgICAgICAgICAgaW5mby5hdHRyVmFsdWUgPSBhdHRyVmFsdWU7XHJcbiAgICAgICAgICAgIGluZm8uY29tbWFuZCA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnBvbGF0aW9uUGFydHMgPSB0aGlzLnBhcnNlSW50ZXJwb2xhdGlvbihyZXNvdXJjZXMsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0aW9uUGFydHMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGluZm8uZXhwcmVzc2lvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbmZvLmV4cHJlc3Npb24gPSBuZXcgSW50ZXJwb2xhdGlvbkJpbmRpbmdFeHByZXNzaW9uKHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCB0aGlzLmF0dHJpYnV0ZU1hcC5tYXAoZWxlbWVudE5hbWUsIGF0dHJOYW1lKSwgaW50ZXJwb2xhdGlvblBhcnRzLCBiaW5kaW5nTW9kZS50b1ZpZXcsIHJlc291cmNlcy5sb29rdXBGdW5jdGlvbnMsIGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5mbztcclxuICAgIH07XHJcbiAgICBUZW1wbGF0aW5nQmluZGluZ0xhbmd1YWdlLnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGVJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIGVsZW1lbnQsIHRoZUluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgaWYgKHRoZUluZm8uZXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICBpZiAodGhlSW5mby5hdHRyTmFtZSA9PT0gJ3JlZicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGVJbmZvLmV4cHJlc3Npb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBleGlzdGluZ0luc3RydWN0aW9uIHx8IEJlaGF2aW9ySW5zdHJ1Y3Rpb24uYXR0cmlidXRlKHRoZUluZm8uYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbi5hdHRyaWJ1dGVzW3RoZUluZm8uYXR0ck5hbWVdID0gdGhlSW5mby5leHByZXNzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGVJbmZvLmNvbW1hbmQpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSB0aGlzLnN5bnRheEludGVycHJldGVyLmludGVycHJldChyZXNvdXJjZXMsIGVsZW1lbnQsIHRoZUluZm8sIGV4aXN0aW5nSW5zdHJ1Y3Rpb24sIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb247XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGluZ0JpbmRpbmdMYW5ndWFnZS5wcm90b3R5cGUuY3JlYXRlTGV0RXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBsZXRFbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb25zID0gW107XHJcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBsZXRFbGVtZW50LmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgdmFyIGF0dHI7XHJcbiAgICAgICAgdmFyIHBhcnRzO1xyXG4gICAgICAgIHZhciBhdHRyTmFtZTtcclxuICAgICAgICB2YXIgYXR0clZhbHVlO1xyXG4gICAgICAgIHZhciBjb21tYW5kO1xyXG4gICAgICAgIHZhciB0b0JpbmRpbmdDb250ZXh0QXR0ciA9IHRoaXMudG9CaW5kaW5nQ29udGV4dEF0dHI7XHJcbiAgICAgICAgdmFyIHRvQmluZGluZ0NvbnRleHQgPSBsZXRFbGVtZW50Lmhhc0F0dHJpYnV0ZSh0b0JpbmRpbmdDb250ZXh0QXR0cik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gYXR0cmlidXRlcy5sZW5ndGg7IGlpID4gaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGF0dHIgPSBhdHRyaWJ1dGVzW2ldO1xyXG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcclxuICAgICAgICAgICAgYXR0clZhbHVlID0gYXR0ci5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgIHBhcnRzID0gYXR0ck5hbWUuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSB0b0JpbmRpbmdDb250ZXh0QXR0cikge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZCA9IHBhcnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgIT09ICdiaW5kJykge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ01hbmFnZXIuZ2V0TG9nZ2VyKCd0ZW1wbGF0aW5nLWJpbmRpbmctbGFuZ3VhZ2UnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAud2FybihcIkRldGVjdGVkIGludmFsaWQgbGV0IGNvbW1hbmQuIEV4cGVjdGVkIFxcXCJcIi5jb25jYXQocGFydHNbMF0sIFwiLmJpbmRcXFwiLCBnaXZlbiBcXFwiXCIpLmNvbmNhdChhdHRyTmFtZSwgXCJcXFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IExldEV4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIGNhbWVsQ2FzZShwYXJ0c1swXSksIHRoaXMucGFyc2VyLnBhcnNlKGF0dHJWYWx1ZSksIHJlc291cmNlcy5sb29rdXBGdW5jdGlvbnMsIHRvQmluZGluZ0NvbnRleHQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gY2FtZWxDYXNlKGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gdGhpcy5wYXJzZUludGVycG9sYXRpb24ocmVzb3VyY2VzLCBhdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTG9nTWFuYWdlci5nZXRMb2dnZXIoJ3RlbXBsYXRpbmctYmluZGluZy1sYW5ndWFnZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC53YXJuKFwiRGV0ZWN0ZWQgc3RyaW5nIGxpdGVyYWwgaW4gbGV0IGJpbmRpbmdzLiBEaWQgeW91IG1lYW4gXFxcIlwiLmNvbmNhdChhdHRyTmFtZSwgXCIuYmluZD1cIikuY29uY2F0KGF0dHJWYWx1ZSwgXCJcXFwiIG9yIFxcXCJcIikuY29uY2F0KGF0dHJOYW1lLCBcIj0ke1wiKS5jb25jYXQoYXR0clZhbHVlLCBcIn1cXFwiID9cIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChuZXcgTGV0SW50ZXJwb2xhdGlvbkJpbmRpbmdFeHByZXNzaW9uKHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCBhdHRyTmFtZSwgcGFydHMsIHJlc291cmNlcy5sb29rdXBGdW5jdGlvbnMsIHRvQmluZGluZ0NvbnRleHQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2gobmV3IExldEV4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIGF0dHJOYW1lLCBuZXcgTGl0ZXJhbFN0cmluZyhhdHRyVmFsdWUpLCByZXNvdXJjZXMubG9va3VwRnVuY3Rpb25zLCB0b0JpbmRpbmdDb250ZXh0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25zO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdCaW5kaW5nTGFuZ3VhZ2UucHJvdG90eXBlLmluc3BlY3RUZXh0Q29udGVudCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gdGhpcy5wYXJzZUludGVycG9sYXRpb24ocmVzb3VyY2VzLCB2YWx1ZSk7XHJcbiAgICAgICAgaWYgKHBhcnRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEludGVycG9sYXRpb25CaW5kaW5nRXhwcmVzc2lvbih0aGlzLm9ic2VydmVyTG9jYXRvciwgJ3RleHRDb250ZW50JywgcGFydHMsIGJpbmRpbmdNb2RlLnRvVmlldywgcmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucywgJ3RleHRDb250ZW50Jyk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGluZ0JpbmRpbmdMYW5ndWFnZS5wcm90b3R5cGUucGFyc2VJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKHJlc291cmNlcywgdmFsdWUpIHtcclxuICAgICAgICB2YXIgaSA9IHZhbHVlLmluZGV4T2YoJyR7JywgMCk7XHJcbiAgICAgICAgdmFyIGlpID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgICAgIHZhciBjaGFyO1xyXG4gICAgICAgIHZhciBwb3MgPSAwO1xyXG4gICAgICAgIHZhciBvcGVuID0gMDtcclxuICAgICAgICB2YXIgcXVvdGUgPSBudWxsO1xyXG4gICAgICAgIHZhciBpbnRlcnBvbGF0aW9uU3RhcnQ7XHJcbiAgICAgICAgdmFyIHBhcnRzO1xyXG4gICAgICAgIHZhciBwYXJ0SW5kZXggPSAwO1xyXG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgaSA8IGlpIC0gMikge1xyXG4gICAgICAgICAgICBvcGVuID0gMTtcclxuICAgICAgICAgICAgaW50ZXJwb2xhdGlvblN0YXJ0ID0gaTtcclxuICAgICAgICAgICAgaSArPSAyO1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBjaGFyID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gXCInXCIgfHwgY2hhciA9PT0gJ1wiJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChxdW90ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdW90ZSA9IGNoYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHF1b3RlID09PSBjaGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHF1b3RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ3snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJ30nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3Blbi0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IHdoaWxlIChvcGVuID4gMCAmJiBpIDwgaWkpO1xyXG4gICAgICAgICAgICBpZiAob3BlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFydHMgPSBwYXJ0cyB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpbnRlcnBvbGF0aW9uU3RhcnQgLSAxXSA9PT0gJ1xcXFwnICYmIHZhbHVlW2ludGVycG9sYXRpb25TdGFydCAtIDJdICE9PSAnXFxcXCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdID0gdmFsdWUuc3Vic3RyaW5nKHBvcywgaW50ZXJwb2xhdGlvblN0YXJ0IC0gMSkgKyB2YWx1ZS5zdWJzdHJpbmcoaW50ZXJwb2xhdGlvblN0YXJ0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdID0gdGhpcy5lbXB0eVN0cmluZ0V4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdID0gdmFsdWUuc3Vic3RyaW5nKHBvcywgaW50ZXJwb2xhdGlvblN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdID0gdGhpcy5wYXJzZXIucGFyc2UodmFsdWUuc3Vic3RyaW5nKGludGVycG9sYXRpb25TdGFydCArIDIsIGkgLSAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwb3MgPSBpO1xyXG4gICAgICAgICAgICAgICAgaSA9IHZhbHVlLmluZGV4T2YoJyR7JywgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFydEluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJ0c1twYXJ0SW5kZXhdID0gdmFsdWUuc3Vic3RyKHBvcyk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdCaW5kaW5nTGFuZ3VhZ2UuaW5qZWN0ID0gW1BhcnNlciwgT2JzZXJ2ZXJMb2NhdG9yLCBTeW50YXhJbnRlcnByZXRlciwgQXR0cmlidXRlTWFwXTtcclxuICAgIHJldHVybiBUZW1wbGF0aW5nQmluZGluZ0xhbmd1YWdlO1xyXG59KEJpbmRpbmdMYW5ndWFnZSkpO1xuXG5mdW5jdGlvbiBjb25maWd1cmUoY29uZmlnKSB7XHJcbiAgICBjb25maWcuY29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uKEJpbmRpbmdMYW5ndWFnZSwgVGVtcGxhdGluZ0JpbmRpbmdMYW5ndWFnZSk7XHJcbiAgICBjb25maWcuY29udGFpbmVyLnJlZ2lzdGVyQWxpYXMoQmluZGluZ0xhbmd1YWdlLCBUZW1wbGF0aW5nQmluZGluZ0xhbmd1YWdlKTtcclxufVxuXG5leHBvcnQgeyBBdHRyaWJ1dGVNYXAsIENoaWxkSW50ZXJwb2xhdGlvbkJpbmRpbmcsIEludGVycG9sYXRpb25CaW5kaW5nLCBJbnRlcnBvbGF0aW9uQmluZGluZ0V4cHJlc3Npb24sIExldEJpbmRpbmcsIExldEV4cHJlc3Npb24sIExldEludGVycG9sYXRpb25CaW5kaW5nLCBMZXRJbnRlcnBvbGF0aW9uQmluZGluZ0V4cHJlc3Npb24sIFN5bnRheEludGVycHJldGVyLCBUZW1wbGF0aW5nQmluZGluZ0xhbmd1YWdlLCBjb25maWd1cmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1cmVsaWEtdGVtcGxhdGluZy1iaW5kaW5nLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtdGVtcGxhdGluZy1iaW5kaW5nL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS10ZW1wbGF0aW5nLWJpbmRpbmcuanNcbi8vIG1vZHVsZSBpZCA9IGF1cmVsaWEtdGVtcGxhdGluZy1iaW5kaW5nXG4vLyBtb2R1bGUgY2h1bmtzID0gMSIsImltcG9ydCB7IENvbnRhaW5lciwgaW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nO1xuaW1wb3J0IHsgRE9NLCBGRUFUVVJFIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0IHsgVGFza1F1ZXVlIH0gZnJvbSAnYXVyZWxpYS10YXNrLXF1ZXVlJztcbmltcG9ydCB7IGJpbmRhYmxlLCBub1ZpZXcsIGN1c3RvbUVsZW1lbnQsIENvbXBvc2l0aW9uRW5naW5lLCBWaWV3U2xvdCwgVmlld1Jlc291cmNlcywgY3VzdG9tQXR0cmlidXRlLCB0ZW1wbGF0ZUNvbnRyb2xsZXIsIEJvdW5kVmlld0ZhY3RvcnksIFRhcmdldEluc3RydWN0aW9uLCBBbmltYXRvciwgcmVzb3VyY2UsIHVzZVZpZXcsIHVzZVNoYWRvd0RPTSwgVmlld0VuZ2luZSB9IGZyb20gJ2F1cmVsaWEtdGVtcGxhdGluZyc7XG5pbXBvcnQgeyBjcmVhdGVPdmVycmlkZUNvbnRleHQsIGJpbmRpbmdNb2RlLCBCaW5kaW5nQmVoYXZpb3IsIFZhbHVlQ29udmVydGVyLCBzb3VyY2VDb250ZXh0LCBtZXJnZVNwbGljZSwgT2JzZXJ2ZXJMb2NhdG9yLCB2YWx1ZUNvbnZlcnRlciwgRGF0YUF0dHJpYnV0ZU9ic2VydmVyLCBiaW5kaW5nQmVoYXZpb3IsIHRhcmdldENvbnRleHQsIEV2ZW50U3Vic2NyaWJlciB9IGZyb20gJ2F1cmVsaWEtYmluZGluZyc7XG5pbXBvcnQgeyBMb2FkZXIgfSBmcm9tICdhdXJlbGlhLWxvYWRlcic7XG5pbXBvcnQgeyByZWxhdGl2ZVRvRmlsZSB9IGZyb20gJ2F1cmVsaWEtcGF0aCc7XG5pbXBvcnQgeyBtaXhpbiB9IGZyb20gJ2F1cmVsaWEtbWV0YWRhdGEnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnYXVyZWxpYS1sb2dnaW5nJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cblxudmFyIEFjdGl2YXRpb25TdHJhdGVneTtcclxuKGZ1bmN0aW9uIChBY3RpdmF0aW9uU3RyYXRlZ3kpIHtcclxuICAgIEFjdGl2YXRpb25TdHJhdGVneVtcIkludm9rZUxpZmVjeWNsZVwiXSA9IFwiaW52b2tlLWxpZmVjeWNsZVwiO1xyXG4gICAgQWN0aXZhdGlvblN0cmF0ZWd5W1wiUmVwbGFjZVwiXSA9IFwicmVwbGFjZVwiO1xyXG59KShBY3RpdmF0aW9uU3RyYXRlZ3kgfHwgKEFjdGl2YXRpb25TdHJhdGVneSA9IHt9KSk7XHJcbnZhciBDb21wb3NlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvc2UoZWxlbWVudCwgY29udGFpbmVyLCBjb21wb3NpdGlvbkVuZ2luZSwgdmlld1Nsb3QsIHZpZXdSZXNvdXJjZXMsIHRhc2tRdWV1ZSkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZhdGlvblN0cmF0ZWd5ID0gQWN0aXZhdGlvblN0cmF0ZWd5Lkludm9rZUxpZmVjeWNsZTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25FbmdpbmUgPSBjb21wb3NpdGlvbkVuZ2luZTtcclxuICAgICAgICB0aGlzLnZpZXdTbG90ID0gdmlld1Nsb3Q7XHJcbiAgICAgICAgdGhpcy52aWV3UmVzb3VyY2VzID0gdmlld1Jlc291cmNlcztcclxuICAgICAgICB0aGlzLnRhc2tRdWV1ZSA9IHRhc2tRdWV1ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRDb250cm9sbGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3TW9kZWwgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB9XHJcbiAgICBDb21wb3NlLmluamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gW0RPTS5FbGVtZW50LCBDb250YWluZXIsIENvbXBvc2l0aW9uRW5naW5lLCBWaWV3U2xvdCwgVmlld1Jlc291cmNlcywgVGFza1F1ZXVlXTtcclxuICAgIH07XHJcbiAgICBDb21wb3NlLnByb3RvdHlwZS5jcmVhdGVkID0gZnVuY3Rpb24gKG93bmluZ1ZpZXcpIHtcclxuICAgICAgICB0aGlzLm93bmluZ1ZpZXcgPSBvd25pbmdWaWV3O1xyXG4gICAgfTtcclxuICAgIENvbXBvc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBiaW5kaW5nQ29udGV4dDtcclxuICAgICAgICB0aGlzLm92ZXJyaWRlQ29udGV4dCA9IG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMuY2hhbmdlcztcclxuICAgICAgICBjaGFuZ2VzLnZpZXcgPSB0aGlzLnZpZXc7XHJcbiAgICAgICAgY2hhbmdlcy52aWV3TW9kZWwgPSB0aGlzLnZpZXdNb2RlbDtcclxuICAgICAgICBjaGFuZ2VzLm1vZGVsID0gdGhpcy5tb2RlbDtcclxuICAgICAgICBpZiAoIXRoaXMucGVuZGluZ1Rhc2spIHtcclxuICAgICAgICAgICAgcHJvY2Vzc0NoYW5nZXModGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbXBvc2UucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICB2YXIgcmV0dXJuVG9DYWNoZSA9IHRydWU7XHJcbiAgICAgICAgdmFyIHNraXBBbmltYXRpb24gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmlld1Nsb3QucmVtb3ZlQWxsKHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2UucHJvdG90eXBlLm1vZGVsQ2hhbmdlZCA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZXMubW9kZWwgPSBuZXdWYWx1ZTtcclxuICAgICAgICByZXF1ZXN0VXBkYXRlKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIENvbXBvc2UucHJvdG90eXBlLnZpZXdDaGFuZ2VkID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlcy52aWV3ID0gbmV3VmFsdWU7XHJcbiAgICAgICAgcmVxdWVzdFVwZGF0ZSh0aGlzKTtcclxuICAgIH07XHJcbiAgICBDb21wb3NlLnByb3RvdHlwZS52aWV3TW9kZWxDaGFuZ2VkID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlcy52aWV3TW9kZWwgPSBuZXdWYWx1ZTtcclxuICAgICAgICByZXF1ZXN0VXBkYXRlKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlXHJcbiAgICBdLCBDb21wb3NlLnByb3RvdHlwZSwgXCJtb2RlbFwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGFibGVcclxuICAgIF0sIENvbXBvc2UucHJvdG90eXBlLCBcInZpZXdcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlXHJcbiAgICBdLCBDb21wb3NlLnByb3RvdHlwZSwgXCJ2aWV3TW9kZWxcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlXHJcbiAgICBdLCBDb21wb3NlLnByb3RvdHlwZSwgXCJhY3RpdmF0aW9uU3RyYXRlZ3lcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlXHJcbiAgICBdLCBDb21wb3NlLnByb3RvdHlwZSwgXCJzd2FwT3JkZXJcIiwgdm9pZCAwKTtcclxuICAgIENvbXBvc2UgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBub1ZpZXcsXHJcbiAgICAgICAgY3VzdG9tRWxlbWVudCgnY29tcG9zZScpXHJcbiAgICBdLCBDb21wb3NlKTtcclxuICAgIHJldHVybiBDb21wb3NlO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yICh2YXIgXyBpbiBvYmopIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiB0cnlBY3RpdmF0ZVZpZXdNb2RlbCh2bSwgbW9kZWwpIHtcclxuICAgIGlmICh2bSAmJiB0eXBlb2Ygdm0uYWN0aXZhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZtLmFjdGl2YXRlKG1vZGVsKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1Y3Rpb24oY29tcG9zZXIsIGluc3RydWN0aW9uKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnN0cnVjdGlvbiwge1xyXG4gICAgICAgIGJpbmRpbmdDb250ZXh0OiBjb21wb3Nlci5iaW5kaW5nQ29udGV4dCxcclxuICAgICAgICBvdmVycmlkZUNvbnRleHQ6IGNvbXBvc2VyLm92ZXJyaWRlQ29udGV4dCxcclxuICAgICAgICBvd25pbmdWaWV3OiBjb21wb3Nlci5vd25pbmdWaWV3LFxyXG4gICAgICAgIGNvbnRhaW5lcjogY29tcG9zZXIuY29udGFpbmVyLFxyXG4gICAgICAgIHZpZXdTbG90OiBjb21wb3Nlci52aWV3U2xvdCxcclxuICAgICAgICB2aWV3UmVzb3VyY2VzOiBjb21wb3Nlci52aWV3UmVzb3VyY2VzLFxyXG4gICAgICAgIGN1cnJlbnRDb250cm9sbGVyOiBjb21wb3Nlci5jdXJyZW50Q29udHJvbGxlcixcclxuICAgICAgICBob3N0OiBjb21wb3Nlci5lbGVtZW50LFxyXG4gICAgICAgIHN3YXBPcmRlcjogY29tcG9zZXIuc3dhcE9yZGVyXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzQ2hhbmdlcyhjb21wb3Nlcikge1xyXG4gICAgdmFyIGNoYW5nZXMgPSBjb21wb3Nlci5jaGFuZ2VzO1xyXG4gICAgY29tcG9zZXIuY2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBpZiAobmVlZHNSZUluaXRpYWxpemF0aW9uKGNvbXBvc2VyLCBjaGFuZ2VzKSkge1xyXG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IHtcclxuICAgICAgICAgICAgdmlldzogY29tcG9zZXIudmlldyxcclxuICAgICAgICAgICAgdmlld01vZGVsOiBjb21wb3Nlci5jdXJyZW50Vmlld01vZGVsIHx8IGNvbXBvc2VyLnZpZXdNb2RlbCxcclxuICAgICAgICAgICAgbW9kZWw6IGNvbXBvc2VyLm1vZGVsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbnN0cnVjdGlvbiA9IE9iamVjdC5hc3NpZ24oaW5zdHJ1Y3Rpb24sIGNoYW5nZXMpO1xyXG4gICAgICAgIGluc3RydWN0aW9uID0gY3JlYXRlSW5zdHJ1Y3Rpb24oY29tcG9zZXIsIGluc3RydWN0aW9uKTtcclxuICAgICAgICBjb21wb3Nlci5wZW5kaW5nVGFzayA9IGNvbXBvc2VyLmNvbXBvc2l0aW9uRW5naW5lLmNvbXBvc2UoaW5zdHJ1Y3Rpb24pLnRoZW4oZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgY29tcG9zZXIuY3VycmVudENvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgICAgICAgICBjb21wb3Nlci5jdXJyZW50Vmlld01vZGVsID0gY29udHJvbGxlciA/IGNvbnRyb2xsZXIudmlld01vZGVsIDogbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbXBvc2VyLnBlbmRpbmdUYXNrID0gdHJ5QWN0aXZhdGVWaWV3TW9kZWwoY29tcG9zZXIuY3VycmVudFZpZXdNb2RlbCwgY2hhbmdlcy5tb2RlbCk7XHJcbiAgICAgICAgaWYgKCFjb21wb3Nlci5wZW5kaW5nVGFzaykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29tcG9zZXIucGVuZGluZ1Rhc2sgPSBjb21wb3Nlci5wZW5kaW5nVGFza1xyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb21wbGV0ZUNvbXBvc2l0aW9uVGFzayhjb21wb3Nlcik7XHJcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgY29tcGxldGVDb21wb3NpdGlvblRhc2soY29tcG9zZXIpO1xyXG4gICAgICAgIHRocm93IHJlYXNvbjtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNvbXBsZXRlQ29tcG9zaXRpb25UYXNrKGNvbXBvc2VyKSB7XHJcbiAgICBjb21wb3Nlci5wZW5kaW5nVGFzayA9IG51bGw7XHJcbiAgICBpZiAoIWlzRW1wdHkoY29tcG9zZXIuY2hhbmdlcykpIHtcclxuICAgICAgICBwcm9jZXNzQ2hhbmdlcyhjb21wb3Nlcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVxdWVzdFVwZGF0ZShjb21wb3Nlcikge1xyXG4gICAgaWYgKGNvbXBvc2VyLnBlbmRpbmdUYXNrIHx8IGNvbXBvc2VyLnVwZGF0ZVJlcXVlc3RlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbXBvc2VyLnVwZGF0ZVJlcXVlc3RlZCA9IHRydWU7XHJcbiAgICBjb21wb3Nlci50YXNrUXVldWUucXVldWVNaWNyb1Rhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbXBvc2VyLnVwZGF0ZVJlcXVlc3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIHByb2Nlc3NDaGFuZ2VzKGNvbXBvc2VyKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG5lZWRzUmVJbml0aWFsaXphdGlvbihjb21wb3NlciwgY2hhbmdlcykge1xyXG4gICAgdmFyIGFjdGl2YXRpb25TdHJhdGVneSA9IGNvbXBvc2VyLmFjdGl2YXRpb25TdHJhdGVneTtcclxuICAgIHZhciB2bSA9IGNvbXBvc2VyLmN1cnJlbnRWaWV3TW9kZWw7XHJcbiAgICBpZiAodm0gJiYgdHlwZW9mIHZtLmRldGVybWluZUFjdGl2YXRpb25TdHJhdGVneSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGFjdGl2YXRpb25TdHJhdGVneSA9IHZtLmRldGVybWluZUFjdGl2YXRpb25TdHJhdGVneSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICd2aWV3JyBpbiBjaGFuZ2VzXHJcbiAgICAgICAgfHwgJ3ZpZXdNb2RlbCcgaW4gY2hhbmdlc1xyXG4gICAgICAgIHx8IGFjdGl2YXRpb25TdHJhdGVneSA9PT0gQWN0aXZhdGlvblN0cmF0ZWd5LlJlcGxhY2U7XHJcbn1cblxudmFyIElmQ29yZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJZkNvcmUodmlld0ZhY3RvcnksIHZpZXdTbG90KSB7XHJcbiAgICAgICAgdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgIHRoaXMudmlld1Nsb3QgPSB2aWV3U2xvdDtcclxuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0NvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVDb250ZXh0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNob3dpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNhY2hlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIElmQ29yZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nQ29udGV4dCA9IGJpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVDb250ZXh0ID0gb3ZlcnJpZGVDb250ZXh0O1xyXG4gICAgfTtcclxuICAgIElmQ29yZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXcgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcudW5iaW5kKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZXdGYWN0b3J5LmlzQ2FjaGluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNob3dpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1Nsb3QucmVtb3ZlKHRoaXMudmlldywgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcucmV0dXJuVG9DYWNoZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIElmQ29yZS5wcm90b3R5cGUuX3Nob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd2luZykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlldy5pc0JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuYmluZCh0aGlzLmJpbmRpbmdDb250ZXh0LCB0aGlzLm92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy52aWV3ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy52aWV3LmlzQm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmJpbmQodGhpcy5iaW5kaW5nQ29udGV4dCwgdGhpcy5vdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNob3dpbmcgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdTbG90LmFkZCh0aGlzLnZpZXcpO1xyXG4gICAgfTtcclxuICAgIElmQ29yZS5wcm90b3R5cGUuX2hpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIXRoaXMuc2hvd2luZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hvd2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHZhciByZW1vdmVkID0gdGhpcy52aWV3U2xvdC5yZW1vdmUodGhpcy52aWV3KTtcclxuICAgICAgICBpZiAocmVtb3ZlZCBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZWQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fdW5iaW5kVmlldygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdW5iaW5kVmlldygpO1xyXG4gICAgfTtcclxuICAgIElmQ29yZS5wcm90b3R5cGUuX3VuYmluZFZpZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogISF0aGlzLmNhY2hlO1xyXG4gICAgICAgIHRoaXMudmlldy51bmJpbmQoKTtcclxuICAgICAgICBpZiAoIWNhY2hlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBJZkNvcmU7XHJcbn0oKSk7XG5cbnZhciBJZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSWYsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBJZigpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5jYWNoZSA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgSWYucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuYmluZC5jYWxsKHRoaXMsIGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIElmLnByb3RvdHlwZS5jb25kaXRpb25DaGFuZ2VkID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlKG5ld1ZhbHVlKTtcclxuICAgIH07XHJcbiAgICBJZi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChzaG93KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJvbWlzZTtcclxuICAgICAgICBpZiAodGhpcy5lbHNlVm0pIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IHNob3cgPyB0aGlzLl9zd2FwKHRoaXMuZWxzZVZtLCB0aGlzKSA6IHRoaXMuX3N3YXAodGhpcywgdGhpcy5lbHNlVm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IHNob3cgPyB0aGlzLl9zaG93KCkgOiB0aGlzLl9oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbmRpdGlvbiAhPT0gX3RoaXMuc2hvd2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl91cGRhdGUoX3RoaXMuY29uZGl0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIElmLnByb3RvdHlwZS5fc3dhcCA9IGZ1bmN0aW9uIChyZW1vdmUsIGFkZCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5zd2FwT3JkZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAnYmVmb3JlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYWRkLl9zaG93KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlLl9oaWRlKCk7IH0pO1xyXG4gICAgICAgICAgICBjYXNlICd3aXRoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbcmVtb3ZlLl9oaWRlKCksIGFkZC5fc2hvdygpXSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IHJlbW92ZS5faGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UgPyBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gYWRkLl9zaG93KCk7IH0pIDogYWRkLl9zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlKHsgcHJpbWFyeVByb3BlcnR5OiB0cnVlIH0pXHJcbiAgICBdLCBJZi5wcm90b3R5cGUsIFwiY29uZGl0aW9uXCIsIHZvaWQgMCk7XHJcbiAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICBiaW5kYWJsZVxyXG4gICAgXSwgSWYucHJvdG90eXBlLCBcInN3YXBPcmRlclwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGFibGVcclxuICAgIF0sIElmLnByb3RvdHlwZSwgXCJjYWNoZVwiLCB2b2lkIDApO1xyXG4gICAgSWYgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjdXN0b21BdHRyaWJ1dGUoJ2lmJyksXHJcbiAgICAgICAgdGVtcGxhdGVDb250cm9sbGVyLFxyXG4gICAgICAgIGluamVjdChCb3VuZFZpZXdGYWN0b3J5LCBWaWV3U2xvdClcclxuICAgIF0sIElmKTtcclxuICAgIHJldHVybiBJZjtcclxufShJZkNvcmUpKTtcblxudmFyIEVsc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEVsc2UsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFbHNlKHZpZXdGYWN0b3J5LCB2aWV3U2xvdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHZpZXdGYWN0b3J5LCB2aWV3U2xvdCkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5fcmVnaXN0ZXJJbklmKCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRWxzZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KSB7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5iaW5kLmNhbGwodGhpcywgYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaWZWbS5jb25kaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5faGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbHNlLnByb3RvdHlwZS5fcmVnaXN0ZXJJbklmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwcmV2aW91cyA9IHRoaXMudmlld1Nsb3QuYW5jaG9yLnByZXZpb3VzU2libGluZztcclxuICAgICAgICB3aGlsZSAocHJldmlvdXMgJiYgIXByZXZpb3VzLmF1KSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzID0gcHJldmlvdXMucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXByZXZpb3VzIHx8ICFwcmV2aW91cy5hdS5pZikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIG1hdGNoaW5nIElmIGZvciBFbHNlIGN1c3RvbSBhdHRyaWJ1dGUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlmVm0gPSBwcmV2aW91cy5hdS5pZi52aWV3TW9kZWw7XHJcbiAgICAgICAgdGhpcy5pZlZtLmVsc2VWbSA9IHRoaXM7XHJcbiAgICB9O1xyXG4gICAgRWxzZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGN1c3RvbUF0dHJpYnV0ZSgnZWxzZScpLFxyXG4gICAgICAgIHRlbXBsYXRlQ29udHJvbGxlcixcclxuICAgICAgICBpbmplY3QoQm91bmRWaWV3RmFjdG9yeSwgVmlld1Nsb3QpXHJcbiAgICBdLCBFbHNlKTtcclxuICAgIHJldHVybiBFbHNlO1xyXG59KElmQ29yZSkpO1xuXG52YXIgV2l0aCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXaXRoKHZpZXdGYWN0b3J5LCB2aWV3U2xvdCkge1xyXG4gICAgICAgIHRoaXMudmlld0ZhY3RvcnkgPSB2aWV3RmFjdG9yeTtcclxuICAgICAgICB0aGlzLnZpZXdTbG90ID0gdmlld1Nsb3Q7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRPdmVycmlkZUNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmlldyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBXaXRoLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnBhcmVudE92ZXJyaWRlQ29udGV4dCA9IG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZCh0aGlzLnZhbHVlKTtcclxuICAgIH07XHJcbiAgICBXaXRoLnByb3RvdHlwZS52YWx1ZUNoYW5nZWQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgb3ZlcnJpZGVDb250ZXh0ID0gY3JlYXRlT3ZlcnJpZGVDb250ZXh0KG5ld1ZhbHVlLCB0aGlzLnBhcmVudE92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXc7XHJcbiAgICAgICAgaWYgKCF2aWV3KSB7XHJcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLnZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB2aWV3LmJpbmQobmV3VmFsdWUsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1Nsb3QuYWRkKHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmlldy5iaW5kKG5ld1ZhbHVlLCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXaXRoLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXc7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRPdmVycmlkZUNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIGlmICh2aWV3KSB7XHJcbiAgICAgICAgICAgIHZpZXcudW5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFdpdGggPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjdXN0b21BdHRyaWJ1dGUoJ3dpdGgnKSxcclxuICAgICAgICB0ZW1wbGF0ZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgaW5qZWN0KEJvdW5kVmlld0ZhY3RvcnksIFZpZXdTbG90KVxyXG4gICAgXSwgV2l0aCk7XHJcbiAgICByZXR1cm4gV2l0aDtcclxufSgpKTtcblxudmFyIG9uZVRpbWUgPSBiaW5kaW5nTW9kZS5vbmVUaW1lO1xyXG5mdW5jdGlvbiB1cGRhdGVPdmVycmlkZUNvbnRleHRzKHZpZXdzLCBzdGFydEluZGV4KSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gdmlld3MubGVuZ3RoO1xyXG4gICAgaWYgKHN0YXJ0SW5kZXggPiAwKSB7XHJcbiAgICAgICAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggLSAxO1xyXG4gICAgfVxyXG4gICAgZm9yICg7IHN0YXJ0SW5kZXggPCBsZW5ndGg7ICsrc3RhcnRJbmRleCkge1xyXG4gICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dCh2aWV3c1tzdGFydEluZGV4XS5vdmVycmlkZUNvbnRleHQsIHN0YXJ0SW5kZXgsIGxlbmd0aCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRnVsbE92ZXJyaWRlQ29udGV4dChyZXBlYXQsIGRhdGEsIGluZGV4LCBsZW5ndGgsIGtleSkge1xyXG4gICAgdmFyIGJpbmRpbmdDb250ZXh0ID0ge307XHJcbiAgICB2YXIgb3ZlcnJpZGVDb250ZXh0ID0gY3JlYXRlT3ZlcnJpZGVDb250ZXh0KGJpbmRpbmdDb250ZXh0LCByZXBlYXQuc2NvcGUub3ZlcnJpZGVDb250ZXh0KTtcclxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGJpbmRpbmdDb250ZXh0W3JlcGVhdC5rZXldID0ga2V5O1xyXG4gICAgICAgIGJpbmRpbmdDb250ZXh0W3JlcGVhdC52YWx1ZV0gPSBkYXRhO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYmluZGluZ0NvbnRleHRbcmVwZWF0LmxvY2FsXSA9IGRhdGE7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVPdmVycmlkZUNvbnRleHQob3ZlcnJpZGVDb250ZXh0LCBpbmRleCwgbGVuZ3RoKTtcclxuICAgIHJldHVybiBvdmVycmlkZUNvbnRleHQ7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlT3ZlcnJpZGVDb250ZXh0KG92ZXJyaWRlQ29udGV4dCwgaW5kZXgsIGxlbmd0aCkge1xyXG4gICAgdmFyIGZpcnN0ID0gKGluZGV4ID09PSAwKTtcclxuICAgIHZhciBsYXN0ID0gKGluZGV4ID09PSBsZW5ndGggLSAxKTtcclxuICAgIHZhciBldmVuID0gaW5kZXggJSAyID09PSAwO1xyXG4gICAgb3ZlcnJpZGVDb250ZXh0LiRpbmRleCA9IGluZGV4O1xyXG4gICAgb3ZlcnJpZGVDb250ZXh0LiRmaXJzdCA9IGZpcnN0O1xyXG4gICAgb3ZlcnJpZGVDb250ZXh0LiRsYXN0ID0gbGFzdDtcclxuICAgIG92ZXJyaWRlQ29udGV4dC4kbWlkZGxlID0gIShmaXJzdCB8fCBsYXN0KTtcclxuICAgIG92ZXJyaWRlQ29udGV4dC4kb2RkID0gIWV2ZW47XHJcbiAgICBvdmVycmlkZUNvbnRleHQuJGV2ZW4gPSBldmVuO1xyXG59XHJcbmZ1bmN0aW9uIGdldEl0ZW1zU291cmNlRXhwcmVzc2lvbihpbnN0cnVjdGlvbiwgYXR0ck5hbWUpIHtcclxuICAgIHJldHVybiBpbnN0cnVjdGlvbi5iZWhhdmlvckluc3RydWN0aW9uc1xyXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGJpKSB7IHJldHVybiBiaS5vcmlnaW5hbEF0dHJOYW1lID09PSBhdHRyTmFtZTsgfSlbMF1cclxuICAgICAgICAuYXR0cmlidXRlc1xyXG4gICAgICAgIC5pdGVtc1xyXG4gICAgICAgIC5zb3VyY2VFeHByZXNzaW9uO1xyXG59XHJcbmZ1bmN0aW9uIHVud3JhcEV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xyXG4gICAgdmFyIHVud3JhcHBlZCA9IGZhbHNlO1xyXG4gICAgd2hpbGUgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBCaW5kaW5nQmVoYXZpb3IpIHtcclxuICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5leHByZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBWYWx1ZUNvbnZlcnRlcikge1xyXG4gICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLmV4cHJlc3Npb247XHJcbiAgICAgICAgdW53cmFwcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiB1bndyYXBwZWQgPyBleHByZXNzaW9uIDogbnVsbDtcclxufVxyXG5mdW5jdGlvbiBpc09uZVRpbWUoZXhwcmVzc2lvbikge1xyXG4gICAgd2hpbGUgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBCaW5kaW5nQmVoYXZpb3IpIHtcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5uYW1lID09PSAnb25lVGltZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLmV4cHJlc3Npb247XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlT25lVGltZUJpbmRpbmcoYmluZGluZykge1xyXG4gICAgaWYgKGJpbmRpbmcuY2FsbCAmJiBiaW5kaW5nLm1vZGUgPT09IG9uZVRpbWUpIHtcclxuICAgICAgICBiaW5kaW5nLmNhbGwoc291cmNlQ29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChiaW5kaW5nLnVwZGF0ZU9uZVRpbWVCaW5kaW5ncykge1xyXG4gICAgICAgIGJpbmRpbmcudXBkYXRlT25lVGltZUJpbmRpbmdzKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgaXRlbSwgbWF0Y2hlciwgc3RhcnRJbmRleCkge1xyXG4gICAgaWYgKCFtYXRjaGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSk7XHJcbiAgICB9XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgaW5kZXggPSBzdGFydEluZGV4IHx8IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgaWYgKG1hdGNoZXIoYXJyYXlbaW5kZXhdLCBpdGVtKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XG5cbnZhciBBcnJheVJlcGVhdFN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFycmF5UmVwZWF0U3RyYXRlZ3koKSB7XHJcbiAgICB9XHJcbiAgICBBcnJheVJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5nZXRDb2xsZWN0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXJMb2NhdG9yLCBpdGVtcykge1xyXG4gICAgICAgIHJldHVybiBvYnNlcnZlckxvY2F0b3IuZ2V0QXJyYXlPYnNlcnZlcihpdGVtcyk7XHJcbiAgICB9O1xyXG4gICAgQXJyYXlSZXBlYXRTdHJhdGVneS5wcm90b3R5cGUuaW5zdGFuY2VDaGFuZ2VkID0gZnVuY3Rpb24gKHJlcGVhdCwgaXRlbXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciAkcmVwZWF0ID0gcmVwZWF0O1xyXG4gICAgICAgIHZhciBpdGVtc0xlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBpZiAoIWl0ZW1zIHx8IGl0ZW1zTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICRyZXBlYXQucmVtb3ZlQWxsVmlld3ModHJ1ZSwgISRyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSAkcmVwZWF0LnZpZXdzKCk7XHJcbiAgICAgICAgdmFyIHZpZXdzTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIGlmICh2aWV3c0xlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFuZGFyZFByb2Nlc3NJbnN0YW5jZUNoYW5nZWQoJHJlcGVhdCwgaXRlbXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgkcmVwZWF0LnZpZXdzUmVxdWlyZUxpZmVjeWNsZSkge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5TbmFwc2hvdCA9IGNoaWxkcmVuLnNsaWNlKDApO1xyXG4gICAgICAgICAgICB2YXIgaXRlbU5hbWVJbkJpbmRpbmdDb250ZXh0ID0gJHJlcGVhdC5sb2NhbDtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXJfMSA9ICRyZXBlYXQubWF0Y2hlcigpO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXNQcmV2aW91c2x5SW5WaWV3c18xID0gW107XHJcbiAgICAgICAgICAgIHZhciB2aWV3c1RvUmVtb3ZlID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB2aWV3c0xlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBjaGlsZHJlblNuYXBzaG90W2luZGV4XTtcclxuICAgICAgICAgICAgICAgIHZhciBvbGRJdGVtID0gdmlldy5iaW5kaW5nQ29udGV4dFtpdGVtTmFtZUluQmluZGluZ0NvbnRleHRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4T2YoaXRlbXMsIG9sZEl0ZW0sIG1hdGNoZXJfMSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3NUb1JlbW92ZS5wdXNoKHZpZXcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNQcmV2aW91c2x5SW5WaWV3c18xLnB1c2gob2xkSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHVwZGF0ZVZpZXdzID0gdm9pZCAwO1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlUHJvbWlzZSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgaWYgKGl0ZW1zUHJldmlvdXNseUluVmlld3NfMS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVQcm9taXNlID0gJHJlcGVhdC5yZW1vdmVWaWV3cyh2aWV3c1RvUmVtb3ZlLCB0cnVlLCAhJHJlcGVhdC52aWV3c1JlcXVpcmVMaWZlY3ljbGUpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVmlld3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zTGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaXRlbXNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhPZlZpZXcgPSBpbmRleE9mKGl0ZW1zUHJldmlvdXNseUluVmlld3NfMSwgaXRlbSwgbWF0Y2hlcl8xLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXhPZlZpZXcgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3ZlcnJpZGVDb250ZXh0ID0gY3JlYXRlRnVsbE92ZXJyaWRlQ29udGV4dCgkcmVwZWF0LCBpdGVtc1tpbmRleF0sIGluZGV4LCBpdGVtc0xlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVwZWF0Lmluc2VydFZpZXcoaW5kZXgsIG92ZXJyaWRlQ29udGV4dC5iaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zUHJldmlvdXNseUluVmlld3NfMS5zcGxpY2UoaW5kZXgsIDAsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXhPZlZpZXcgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gY2hpbGRyZW5baW5kZXhPZlZpZXddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNQcmV2aW91c2x5SW5WaWV3c18xW2luZGV4T2ZWaWV3XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBjaGlsZHJlbltpbmRleE9mVmlld107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVwZWF0Lm1vdmVWaWV3KGluZGV4T2ZWaWV3LCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1ByZXZpb3VzbHlJblZpZXdzXzEuc3BsaWNlKGluZGV4T2ZWaWV3LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zUHJldmlvdXNseUluVmlld3NfMS5zcGxpY2UoaW5kZXgsIDAsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dCh2aWV3Lm92ZXJyaWRlQ29udGV4dCwgaW5kZXgsIGl0ZW1zTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5faW5QbGFjZVByb2Nlc3NJdGVtcygkcmVwZWF0LCBpdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlUHJvbWlzZSA9ICRyZXBlYXQucmVtb3ZlQWxsVmlld3ModHJ1ZSwgISRyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0YW5kYXJkUHJvY2Vzc0luc3RhbmNlQ2hhbmdlZCgkcmVwZWF0LCBpdGVtcyk7IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbW92ZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVQcm9taXNlLnRoZW4odXBkYXRlVmlld3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVmlld3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faW5QbGFjZVByb2Nlc3NJdGVtcygkcmVwZWF0LCBpdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFycmF5UmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLl9zdGFuZGFyZFByb2Nlc3NJbnN0YW5jZUNoYW5nZWQgPSBmdW5jdGlvbiAocmVwZWF0LCBpdGVtcykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZUZ1bGxPdmVycmlkZUNvbnRleHQocmVwZWF0LCBpdGVtc1tpXSwgaSwgaWkpO1xyXG4gICAgICAgICAgICByZXBlYXQuYWRkVmlldyhvdmVycmlkZUNvbnRleHQuYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFycmF5UmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLl9pblBsYWNlUHJvY2Vzc0l0ZW1zID0gZnVuY3Rpb24gKHJlcGVhdCwgaXRlbXMpIHtcclxuICAgICAgICB2YXIgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHZpZXdzTGVuZ3RoID0gcmVwZWF0LnZpZXdDb3VudCgpO1xyXG4gICAgICAgIHdoaWxlICh2aWV3c0xlbmd0aCA+IGl0ZW1zTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZpZXdzTGVuZ3RoLS07XHJcbiAgICAgICAgICAgIHJlcGVhdC5yZW1vdmVWaWV3KHZpZXdzTGVuZ3RoLCB0cnVlLCAhcmVwZWF0LnZpZXdzUmVxdWlyZUxpZmVjeWNsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsb2NhbCA9IHJlcGVhdC5sb2NhbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXdzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSByZXBlYXQudmlldyhpKTtcclxuICAgICAgICAgICAgdmFyIGxhc3QgPSBpID09PSBpdGVtc0xlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHZhciBtaWRkbGUgPSBpICE9PSAwICYmICFsYXN0O1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZ0NvbnRleHQgPSB2aWV3LmJpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgb3ZlcnJpZGVDb250ZXh0ID0gdmlldy5vdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgICAgIGlmIChiaW5kaW5nQ29udGV4dFtsb2NhbF0gPT09IGl0ZW1zW2ldXHJcbiAgICAgICAgICAgICAgICAmJiBvdmVycmlkZUNvbnRleHQuJG1pZGRsZSA9PT0gbWlkZGxlXHJcbiAgICAgICAgICAgICAgICAmJiBvdmVycmlkZUNvbnRleHQuJGxhc3QgPT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJpbmRpbmdDb250ZXh0W2xvY2FsXSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBvdmVycmlkZUNvbnRleHQuJG1pZGRsZSA9IG1pZGRsZTtcclxuICAgICAgICAgICAgb3ZlcnJpZGVDb250ZXh0LiRsYXN0ID0gbGFzdDtcclxuICAgICAgICAgICAgcmVwZWF0LnVwZGF0ZUJpbmRpbmdzKHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gdmlld3NMZW5ndGg7IGkgPCBpdGVtc0xlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvdmVycmlkZUNvbnRleHQgPSBjcmVhdGVGdWxsT3ZlcnJpZGVDb250ZXh0KHJlcGVhdCwgaXRlbXNbaV0sIGksIGl0ZW1zTGVuZ3RoKTtcclxuICAgICAgICAgICAgcmVwZWF0LmFkZFZpZXcob3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcnJheVJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5pbnN0YW5jZU11dGF0ZWQgPSBmdW5jdGlvbiAocmVwZWF0LCBhcnJheSwgc3BsaWNlcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHJlcGVhdC5fX3F1ZXVlZFNwbGljZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3BsaWNlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBzcGxpY2VzW2ldLCBpbmRleCA9IF9hLmluZGV4LCByZW1vdmVkID0gX2EucmVtb3ZlZCwgYWRkZWRDb3VudCA9IF9hLmFkZGVkQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBtZXJnZVNwbGljZShyZXBlYXQuX19xdWV1ZWRTcGxpY2VzLCBpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVwZWF0Ll9fYXJyYXkgPSBhcnJheS5zbGljZSgwKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdGhpcy5fcnVuU3BsaWNlcyhyZXBlYXQsIGFycmF5LnNsaWNlKDApLCBzcGxpY2VzKTtcclxuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgICB2YXIgcXVldWVkU3BsaWNlc18xID0gcmVwZWF0Ll9fcXVldWVkU3BsaWNlcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgcnVuUXVldWVkU3BsaWNlc18xID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFxdWV1ZWRTcGxpY2VzXzEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0Ll9fcXVldWVkU3BsaWNlcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXQuX19hcnJheSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFByb21pc2UgPSBfdGhpcy5fcnVuU3BsaWNlcyhyZXBlYXQsIHJlcGVhdC5fX2FycmF5LCBxdWV1ZWRTcGxpY2VzXzEpIHx8IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgcXVldWVkU3BsaWNlc18xID0gcmVwZWF0Ll9fcXVldWVkU3BsaWNlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbmV4dFByb21pc2UudGhlbihydW5RdWV1ZWRTcGxpY2VzXzEpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBtYXliZVByb21pc2UudGhlbihydW5RdWV1ZWRTcGxpY2VzXzEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBcnJheVJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5fcnVuU3BsaWNlcyA9IGZ1bmN0aW9uIChyZXBlYXQsIGFycmF5LCBzcGxpY2VzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcmVtb3ZlRGVsdGEgPSAwO1xyXG4gICAgICAgIHZhciBybVByb21pc2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3BsaWNlcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBzcGxpY2UgPSBzcGxpY2VzW2ldO1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZCA9IHNwbGljZS5yZW1vdmVkO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamogPSByZW1vdmVkLmxlbmd0aDsgaiA8IGpqOyArK2opIHtcclxuICAgICAgICAgICAgICAgIHZhciB2aWV3T3JQcm9taXNlID0gcmVwZWF0LnJlbW92ZVZpZXcoc3BsaWNlLmluZGV4ICsgcmVtb3ZlRGVsdGEgKyBybVByb21pc2VzLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlld09yUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBybVByb21pc2VzLnB1c2godmlld09yUHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVtb3ZlRGVsdGEgLT0gc3BsaWNlLmFkZGVkQ291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChybVByb21pc2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJtUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwbGljZUluZGV4TG93ID0gX3RoaXMuX2hhbmRsZUFkZGVkU3BsaWNlcyhyZXBlYXQsIGFycmF5LCBzcGxpY2VzKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dHMocmVwZWF0LnZpZXdzKCksIHNwbGljZUluZGV4TG93KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzcGxpY2VJbmRleExvdyA9IHRoaXMuX2hhbmRsZUFkZGVkU3BsaWNlcyhyZXBlYXQsIGFycmF5LCBzcGxpY2VzKTtcclxuICAgICAgICB1cGRhdGVPdmVycmlkZUNvbnRleHRzKHJlcGVhdC52aWV3cygpLCBzcGxpY2VJbmRleExvdyk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBcnJheVJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5faGFuZGxlQWRkZWRTcGxpY2VzID0gZnVuY3Rpb24gKHJlcGVhdCwgYXJyYXksIHNwbGljZXMpIHtcclxuICAgICAgICB2YXIgc3BsaWNlSW5kZXg7XHJcbiAgICAgICAgdmFyIHNwbGljZUluZGV4TG93O1xyXG4gICAgICAgIHZhciBhcnJheUxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcGxpY2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHNwbGljZSA9IHNwbGljZXNbaV07XHJcbiAgICAgICAgICAgIHZhciBhZGRJbmRleCA9IHNwbGljZUluZGV4ID0gc3BsaWNlLmluZGV4O1xyXG4gICAgICAgICAgICB2YXIgZW5kID0gc3BsaWNlLmluZGV4ICsgc3BsaWNlLmFkZGVkQ291bnQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BsaWNlSW5kZXhMb3cgPT09ICd1bmRlZmluZWQnIHx8IHNwbGljZUluZGV4TG93ID09PSBudWxsIHx8IHNwbGljZUluZGV4TG93ID4gc3BsaWNlLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBzcGxpY2VJbmRleExvdyA9IHNwbGljZUluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoOyBhZGRJbmRleCA8IGVuZDsgKythZGRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZUZ1bGxPdmVycmlkZUNvbnRleHQocmVwZWF0LCBhcnJheVthZGRJbmRleF0sIGFkZEluZGV4LCBhcnJheUxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByZXBlYXQuaW5zZXJ0VmlldyhhZGRJbmRleCwgb3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzcGxpY2VJbmRleExvdztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXJyYXlSZXBlYXRTdHJhdGVneTtcclxufSgpKTtcblxudmFyIE1hcFJlcGVhdFN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1hcFJlcGVhdFN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgTWFwUmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmdldENvbGxlY3Rpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlckxvY2F0b3IsIGl0ZW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyTG9jYXRvci5nZXRNYXBPYnNlcnZlcihpdGVtcyk7XHJcbiAgICB9O1xyXG4gICAgTWFwUmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmluc3RhbmNlQ2hhbmdlZCA9IGZ1bmN0aW9uIChyZXBlYXQsIGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcmVtb3ZlUHJvbWlzZSA9IHJlcGVhdC5yZW1vdmVBbGxWaWV3cyh0cnVlLCAhcmVwZWF0LnZpZXdzUmVxdWlyZUxpZmVjeWNsZSk7XHJcbiAgICAgICAgaWYgKHJlbW92ZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZVByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fc3RhbmRhcmRQcm9jZXNzSXRlbXMocmVwZWF0LCBpdGVtcyk7IH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3N0YW5kYXJkUHJvY2Vzc0l0ZW1zKHJlcGVhdCwgaXRlbXMpO1xyXG4gICAgfTtcclxuICAgIE1hcFJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5fc3RhbmRhcmRQcm9jZXNzSXRlbXMgPSBmdW5jdGlvbiAocmVwZWF0LCBpdGVtcykge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZUZ1bGxPdmVycmlkZUNvbnRleHQocmVwZWF0LCB2YWx1ZSwgaW5kZXgsIGl0ZW1zLnNpemUsIGtleSk7XHJcbiAgICAgICAgICAgIHJlcGVhdC5hZGRWaWV3KG92ZXJyaWRlQ29udGV4dC5iaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICAgICAgKytpbmRleDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBNYXBSZXBlYXRTdHJhdGVneS5wcm90b3R5cGUuaW5zdGFuY2VNdXRhdGVkID0gZnVuY3Rpb24gKHJlcGVhdCwgbWFwLCByZWNvcmRzKSB7XHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICB2YXIgcmVtb3ZlSW5kZXg7XHJcbiAgICAgICAgdmFyIGFkZEluZGV4O1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgdmFyIHJtUHJvbWlzZXMgPSBbXTtcclxuICAgICAgICB2YXIgdmlld09yUHJvbWlzZTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHJlY29yZHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICByZWNvcmQgPSByZWNvcmRzW2ldO1xyXG4gICAgICAgICAgICBrZXkgPSByZWNvcmQua2V5O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHJlY29yZC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUluZGV4ID0gdGhpcy5fZ2V0Vmlld0luZGV4QnlLZXkocmVwZWF0LCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdPclByb21pc2UgPSByZXBlYXQucmVtb3ZlVmlldyhyZW1vdmVJbmRleCwgdHJ1ZSwgIXJlcGVhdC52aWV3c1JlcXVpcmVMaWZlY3ljbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3T3JQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBybVByb21pc2VzLnB1c2godmlld09yUHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlQ29udGV4dCA9IGNyZWF0ZUZ1bGxPdmVycmlkZUNvbnRleHQocmVwZWF0LCBtYXAuZ2V0KGtleSksIHJlbW92ZUluZGV4LCBtYXAuc2l6ZSwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXQuaW5zZXJ0VmlldyhyZW1vdmVJbmRleCwgb3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcclxuICAgICAgICAgICAgICAgICAgICBhZGRJbmRleCA9IHJlcGVhdC52aWV3Q291bnQoKSA8PSBtYXAuc2l6ZSAtIDEgPyByZXBlYXQudmlld0NvdW50KCkgOiBtYXAuc2l6ZSAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVDb250ZXh0ID0gY3JlYXRlRnVsbE92ZXJyaWRlQ29udGV4dChyZXBlYXQsIG1hcC5nZXQoa2V5KSwgYWRkSW5kZXgsIG1hcC5zaXplLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdC5pbnNlcnRWaWV3KG1hcC5zaXplIC0gMSwgb3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3JkLm9sZFZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVJbmRleCA9IHRoaXMuX2dldFZpZXdJbmRleEJ5S2V5KHJlcGVhdCwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3T3JQcm9taXNlID0gcmVwZWF0LnJlbW92ZVZpZXcocmVtb3ZlSW5kZXgsIHRydWUsICFyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmlld09yUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm1Qcm9taXNlcy5wdXNoKHZpZXdPclByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyJzpcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXQucmVtb3ZlQWxsVmlld3ModHJ1ZSwgIXJlcGVhdC52aWV3c1JlcXVpcmVMaWZlY3ljbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocm1Qcm9taXNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHJtUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlT3ZlcnJpZGVDb250ZXh0cyhyZXBlYXQudmlld3MoKSwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdXBkYXRlT3ZlcnJpZGVDb250ZXh0cyhyZXBlYXQudmlld3MoKSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1hcFJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5fZ2V0Vmlld0luZGV4QnlLZXkgPSBmdW5jdGlvbiAocmVwZWF0LCBrZXkpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgaWk7XHJcbiAgICAgICAgdmFyIGNoaWxkO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcmVwZWF0LnZpZXdDb3VudCgpOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBjaGlsZCA9IHJlcGVhdC52aWV3KGkpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQuYmluZGluZ0NvbnRleHRbcmVwZWF0LmtleV0gPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWFwUmVwZWF0U3RyYXRlZ3k7XHJcbn0oKSk7XG5cbnZhciBOdWxsUmVwZWF0U3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTnVsbFJlcGVhdFN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgTnVsbFJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5pbnN0YW5jZUNoYW5nZWQgPSBmdW5jdGlvbiAocmVwZWF0LCBpdGVtcykge1xyXG4gICAgICAgIHJlcGVhdC5yZW1vdmVBbGxWaWV3cyh0cnVlKTtcclxuICAgIH07XHJcbiAgICBOdWxsUmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmdldENvbGxlY3Rpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlckxvY2F0b3IsIGl0ZW1zKSB7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE51bGxSZXBlYXRTdHJhdGVneTtcclxufSgpKTtcblxudmFyIE51bWJlclJlcGVhdFN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE51bWJlclJlcGVhdFN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgTnVtYmVyUmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmdldENvbGxlY3Rpb25PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBOdW1iZXJSZXBlYXRTdHJhdGVneS5wcm90b3R5cGUuaW5zdGFuY2VDaGFuZ2VkID0gZnVuY3Rpb24gKHJlcGVhdCwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZW1vdmVQcm9taXNlID0gcmVwZWF0LnJlbW92ZUFsbFZpZXdzKHRydWUsICFyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICBpZiAocmVtb3ZlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgcmVtb3ZlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9zdGFuZGFyZFByb2Nlc3NJdGVtcyhyZXBlYXQsIHZhbHVlKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc3RhbmRhcmRQcm9jZXNzSXRlbXMocmVwZWF0LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyUmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLl9zdGFuZGFyZFByb2Nlc3NJdGVtcyA9IGZ1bmN0aW9uIChyZXBlYXQsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gcmVwZWF0LnZpZXdDb3VudCgpO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgb3ZlcnJpZGVDb250ZXh0O1xyXG4gICAgICAgIHZhciB2aWV3c1RvUmVtb3ZlO1xyXG4gICAgICAgIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSk7XHJcbiAgICAgICAgdmlld3NUb1JlbW92ZSA9IGNoaWxkcmVuTGVuZ3RoIC0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHZpZXdzVG9SZW1vdmUgPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICh2aWV3c1RvUmVtb3ZlID4gY2hpbGRyZW5MZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZpZXdzVG9SZW1vdmUgPSBjaGlsZHJlbkxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHZpZXdzVG9SZW1vdmU7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICByZXBlYXQucmVtb3ZlVmlldyhjaGlsZHJlbkxlbmd0aCAtIChpICsgMSksIHRydWUsICFyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaSA9IGNoaWxkcmVuTGVuZ3RoLCBpaSA9IHZhbHVlOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICBvdmVycmlkZUNvbnRleHQgPSBjcmVhdGVGdWxsT3ZlcnJpZGVDb250ZXh0KHJlcGVhdCwgaSwgaSwgaWkpO1xyXG4gICAgICAgICAgICByZXBlYXQuYWRkVmlldyhvdmVycmlkZUNvbnRleHQuYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dHMocmVwZWF0LnZpZXdzKCksIDApO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOdW1iZXJSZXBlYXRTdHJhdGVneTtcclxufSgpKTtcblxudmFyIFNldFJlcGVhdFN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNldFJlcGVhdFN0cmF0ZWd5KCkge1xyXG4gICAgfVxyXG4gICAgU2V0UmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmdldENvbGxlY3Rpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlckxvY2F0b3IsIGl0ZW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyTG9jYXRvci5nZXRTZXRPYnNlcnZlcihpdGVtcyk7XHJcbiAgICB9O1xyXG4gICAgU2V0UmVwZWF0U3RyYXRlZ3kucHJvdG90eXBlLmluc3RhbmNlQ2hhbmdlZCA9IGZ1bmN0aW9uIChyZXBlYXQsIGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcmVtb3ZlUHJvbWlzZSA9IHJlcGVhdC5yZW1vdmVBbGxWaWV3cyh0cnVlLCAhcmVwZWF0LnZpZXdzUmVxdWlyZUxpZmVjeWNsZSk7XHJcbiAgICAgICAgaWYgKHJlbW92ZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZVByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fc3RhbmRhcmRQcm9jZXNzSXRlbXMocmVwZWF0LCBpdGVtcyk7IH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3N0YW5kYXJkUHJvY2Vzc0l0ZW1zKHJlcGVhdCwgaXRlbXMpO1xyXG4gICAgfTtcclxuICAgIFNldFJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5fc3RhbmRhcmRQcm9jZXNzSXRlbXMgPSBmdW5jdGlvbiAocmVwZWF0LCBpdGVtcykge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIG92ZXJyaWRlQ29udGV4dDtcclxuICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBvdmVycmlkZUNvbnRleHQgPSBjcmVhdGVGdWxsT3ZlcnJpZGVDb250ZXh0KHJlcGVhdCwgdmFsdWUsIGluZGV4LCBpdGVtcy5zaXplKTtcclxuICAgICAgICAgICAgcmVwZWF0LmFkZFZpZXcob3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICArK2luZGV4O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNldFJlcGVhdFN0cmF0ZWd5LnByb3RvdHlwZS5pbnN0YW5jZU11dGF0ZWQgPSBmdW5jdGlvbiAocmVwZWF0LCBzZXQsIHJlY29yZHMpIHtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGlpO1xyXG4gICAgICAgIHZhciBvdmVycmlkZUNvbnRleHQ7XHJcbiAgICAgICAgdmFyIHJlbW92ZUluZGV4O1xyXG4gICAgICAgIHZhciByZWNvcmQ7XHJcbiAgICAgICAgdmFyIHJtUHJvbWlzZXMgPSBbXTtcclxuICAgICAgICB2YXIgdmlld09yUHJvbWlzZTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHJlY29yZHMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICByZWNvcmQgPSByZWNvcmRzW2ldO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHJlY29yZC52YWx1ZTtcclxuICAgICAgICAgICAgc3dpdGNoIChyZWNvcmQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IE1hdGgubWF4KHNldC5zaXplIC0gMSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVDb250ZXh0ID0gY3JlYXRlRnVsbE92ZXJyaWRlQ29udGV4dChyZXBlYXQsIHZhbHVlLCBzaXplLCBzZXQuc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0Lmluc2VydFZpZXcoc2l6ZSwgb3ZlcnJpZGVDb250ZXh0LmJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVJbmRleCA9IHRoaXMuX2dldFZpZXdJbmRleEJ5VmFsdWUocmVwZWF0LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld09yUHJvbWlzZSA9IHJlcGVhdC5yZW1vdmVWaWV3KHJlbW92ZUluZGV4LCB0cnVlLCAhcmVwZWF0LnZpZXdzUmVxdWlyZUxpZmVjeWNsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdPclByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJtUHJvbWlzZXMucHVzaCh2aWV3T3JQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhcic6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0LnJlbW92ZUFsbFZpZXdzKHRydWUsICFyZXBlYXQudmlld3NSZXF1aXJlTGlmZWN5Y2xlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJtUHJvbWlzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBQcm9taXNlLmFsbChybVByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dHMocmVwZWF0LnZpZXdzKCksIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZU92ZXJyaWRlQ29udGV4dHMocmVwZWF0LnZpZXdzKCksIDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTZXRSZXBlYXRTdHJhdGVneS5wcm90b3R5cGUuX2dldFZpZXdJbmRleEJ5VmFsdWUgPSBmdW5jdGlvbiAocmVwZWF0LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBpaTtcclxuICAgICAgICB2YXIgY2hpbGQ7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSByZXBlYXQudmlld0NvdW50KCk7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgIGNoaWxkID0gcmVwZWF0LnZpZXcoaSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5iaW5kaW5nQ29udGV4dFtyZXBlYXQubG9jYWxdID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU2V0UmVwZWF0U3RyYXRlZ3k7XHJcbn0oKSk7XG5cbnZhciBSZXBlYXRTdHJhdGVneUxvY2F0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVwZWF0U3RyYXRlZ3lMb2NhdG9yKCkge1xyXG4gICAgICAgIHRoaXMubWF0Y2hlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0cmF0ZWdpZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmFkZFN0cmF0ZWd5KGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMgPT09IG51bGwgfHwgaXRlbXMgPT09IHVuZGVmaW5lZDsgfSwgbmV3IE51bGxSZXBlYXRTdHJhdGVneSgpKTtcclxuICAgICAgICB0aGlzLmFkZFN0cmF0ZWd5KGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMgaW5zdGFuY2VvZiBBcnJheTsgfSwgbmV3IEFycmF5UmVwZWF0U3RyYXRlZ3koKSk7XHJcbiAgICAgICAgdGhpcy5hZGRTdHJhdGVneShmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zIGluc3RhbmNlb2YgTWFwOyB9LCBuZXcgTWFwUmVwZWF0U3RyYXRlZ3koKSk7XHJcbiAgICAgICAgdGhpcy5hZGRTdHJhdGVneShmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zIGluc3RhbmNlb2YgU2V0OyB9LCBuZXcgU2V0UmVwZWF0U3RyYXRlZ3koKSk7XHJcbiAgICAgICAgdGhpcy5hZGRTdHJhdGVneShmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIHR5cGVvZiBpdGVtcyA9PT0gJ251bWJlcic7IH0sIG5ldyBOdW1iZXJSZXBlYXRTdHJhdGVneSgpKTtcclxuICAgIH1cclxuICAgIFJlcGVhdFN0cmF0ZWd5TG9jYXRvci5wcm90b3R5cGUuYWRkU3RyYXRlZ3kgPSBmdW5jdGlvbiAobWF0Y2hlciwgc3RyYXRlZ3kpIHtcclxuICAgICAgICB0aGlzLm1hdGNoZXJzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgdGhpcy5zdHJhdGVnaWVzLnB1c2goc3RyYXRlZ3kpO1xyXG4gICAgfTtcclxuICAgIFJlcGVhdFN0cmF0ZWd5TG9jYXRvci5wcm90b3R5cGUuZ2V0U3RyYXRlZ3kgPSBmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSB0aGlzLm1hdGNoZXJzO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG1hdGNoZXJzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXJzW2ldKGl0ZW1zKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyYXRlZ2llc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVwZWF0U3RyYXRlZ3lMb2NhdG9yO1xyXG59KCkpO1xuXG52YXIgbGlmZWN5Y2xlT3B0aW9uYWxCZWhhdmlvcnMgPSBbJ2ZvY3VzJywgJ2lmJywgJ2Vsc2UnLCAncmVwZWF0JywgJ3Nob3cnLCAnaGlkZScsICd3aXRoJ107XHJcbmZ1bmN0aW9uIGJlaGF2aW9yUmVxdWlyZXNMaWZlY3ljbGUoaW5zdHJ1Y3Rpb24pIHtcclxuICAgIHZhciB0ID0gaW5zdHJ1Y3Rpb24udHlwZTtcclxuICAgIHZhciBuYW1lID0gdC5lbGVtZW50TmFtZSAhPT0gbnVsbCA/IHQuZWxlbWVudE5hbWUgOiB0LmF0dHJpYnV0ZU5hbWU7XHJcbiAgICByZXR1cm4gbGlmZWN5Y2xlT3B0aW9uYWxCZWhhdmlvcnMuaW5kZXhPZihuYW1lKSA9PT0gLTEgJiYgKHQuaGFuZGxlc0F0dGFjaGVkIHx8IHQuaGFuZGxlc0JpbmQgfHwgdC5oYW5kbGVzQ3JlYXRlZCB8fCB0LmhhbmRsZXNEZXRhY2hlZCB8fCB0LmhhbmRsZXNVbmJpbmQpXHJcbiAgICAgICAgfHwgdC52aWV3RmFjdG9yeSAmJiB2aWV3c1JlcXVpcmVMaWZlY3ljbGUodC52aWV3RmFjdG9yeSlcclxuICAgICAgICB8fCBpbnN0cnVjdGlvbi52aWV3RmFjdG9yeSAmJiB2aWV3c1JlcXVpcmVMaWZlY3ljbGUoaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkpO1xyXG59XHJcbmZ1bmN0aW9uIHRhcmdldFJlcXVpcmVzTGlmZWN5Y2xlKGluc3RydWN0aW9uKSB7XHJcbiAgICB2YXIgYmVoYXZpb3JzID0gaW5zdHJ1Y3Rpb24uYmVoYXZpb3JJbnN0cnVjdGlvbnM7XHJcbiAgICBpZiAoYmVoYXZpb3JzKSB7XHJcbiAgICAgICAgdmFyIGkgPSBiZWhhdmlvcnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGJlaGF2aW9yUmVxdWlyZXNMaWZlY3ljbGUoYmVoYXZpb3JzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb24udmlld0ZhY3RvcnkgJiYgdmlld3NSZXF1aXJlTGlmZWN5Y2xlKGluc3RydWN0aW9uLnZpZXdGYWN0b3J5KTtcclxufVxyXG5mdW5jdGlvbiB2aWV3c1JlcXVpcmVMaWZlY3ljbGUodmlld0ZhY3RvcnkpIHtcclxuICAgIGlmICgnX3ZpZXdzUmVxdWlyZUxpZmVjeWNsZScgaW4gdmlld0ZhY3RvcnkpIHtcclxuICAgICAgICByZXR1cm4gdmlld0ZhY3RvcnkuX3ZpZXdzUmVxdWlyZUxpZmVjeWNsZTtcclxuICAgIH1cclxuICAgIHZpZXdGYWN0b3J5Ll92aWV3c1JlcXVpcmVMaWZlY3ljbGUgPSBmYWxzZTtcclxuICAgIGlmICh2aWV3RmFjdG9yeS52aWV3RmFjdG9yeSkge1xyXG4gICAgICAgIHZpZXdGYWN0b3J5Ll92aWV3c1JlcXVpcmVMaWZlY3ljbGUgPSB2aWV3c1JlcXVpcmVMaWZlY3ljbGUodmlld0ZhY3Rvcnkudmlld0ZhY3RvcnkpO1xyXG4gICAgICAgIHJldHVybiB2aWV3RmFjdG9yeS5fdmlld3NSZXF1aXJlTGlmZWN5Y2xlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZpZXdGYWN0b3J5LnRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJy5hdS1hbmltYXRlJykpIHtcclxuICAgICAgICB2aWV3RmFjdG9yeS5fdmlld3NSZXF1aXJlTGlmZWN5Y2xlID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGlkIGluIHZpZXdGYWN0b3J5Lmluc3RydWN0aW9ucykge1xyXG4gICAgICAgIGlmICh0YXJnZXRSZXF1aXJlc0xpZmVjeWNsZSh2aWV3RmFjdG9yeS5pbnN0cnVjdGlvbnNbaWRdKSkge1xyXG4gICAgICAgICAgICB2aWV3RmFjdG9yeS5fdmlld3NSZXF1aXJlTGlmZWN5Y2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmlld0ZhY3RvcnkuX3ZpZXdzUmVxdWlyZUxpZmVjeWNsZSA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XG5cbnZhciBBYnN0cmFjdFJlcGVhdGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFic3RyYWN0UmVwZWF0ZXIob3B0aW9ucykge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBsb2NhbDogJ2l0ZW1zJyxcclxuICAgICAgICAgICAgdmlld3NSZXF1aXJlTGlmZWN5Y2xlOiB0cnVlXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBBYnN0cmFjdFJlcGVhdGVyLnByb3RvdHlwZS52aWV3Q291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyBtdXN0IGltcGxlbWVudCBgdmlld0NvdW50YCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLnZpZXdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3ViY2xhc3MgbXVzdCBpbXBsZW1lbnQgYHZpZXdzYCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLnZpZXcgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1YmNsYXNzIG11c3QgaW1wbGVtZW50IGB2aWV3YCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLm1hdGNoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyBtdXN0IGltcGxlbWVudCBgbWF0Y2hlcmAnKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdFJlcGVhdGVyLnByb3RvdHlwZS5hZGRWaWV3ID0gZnVuY3Rpb24gKGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1YmNsYXNzIG11c3QgaW1wbGVtZW50IGBhZGRWaWV3YCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLmluc2VydFZpZXcgPSBmdW5jdGlvbiAoaW5kZXgsIGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1YmNsYXNzIG11c3QgaW1wbGVtZW50IGBpbnNlcnRWaWV3YCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLm1vdmVWaWV3ID0gZnVuY3Rpb24gKHNvdXJjZUluZGV4LCB0YXJnZXRJbmRleCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3ViY2xhc3MgbXVzdCBpbXBsZW1lbnQgYG1vdmVWaWV3YCcpO1xyXG4gICAgfTtcclxuICAgIEFic3RyYWN0UmVwZWF0ZXIucHJvdG90eXBlLnJlbW92ZUFsbFZpZXdzID0gZnVuY3Rpb24gKHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N1YmNsYXNzIG11c3QgaW1wbGVtZW50IGByZW1vdmVBbGxWaWV3c2AnKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdFJlcGVhdGVyLnByb3RvdHlwZS5yZW1vdmVWaWV3cyA9IGZ1bmN0aW9uICh2aWV3c1RvUmVtb3ZlLCByZXR1cm5Ub0NhY2hlLCBza2lwQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyBtdXN0IGltcGxlbWVudCBgcmVtb3ZlVmlld2AnKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdFJlcGVhdGVyLnByb3RvdHlwZS5yZW1vdmVWaWV3ID0gZnVuY3Rpb24gKGluZGV4LCByZXR1cm5Ub0NhY2hlLCBza2lwQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyBtdXN0IGltcGxlbWVudCBgcmVtb3ZlVmlld2AnKTtcclxuICAgIH07XHJcbiAgICBBYnN0cmFjdFJlcGVhdGVyLnByb3RvdHlwZS51cGRhdGVCaW5kaW5ncyA9IGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyBtdXN0IGltcGxlbWVudCBgdXBkYXRlQmluZGluZ3NgJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFic3RyYWN0UmVwZWF0ZXI7XHJcbn0oKSk7XG5cbnZhciBtYXRjaGVyRXh0cmFjdGlvbk1hcmtlciA9ICdfX21hcmtlcl9leHRyYWN0ZWRfXyc7XHJcbnZhciBSZXBlYXQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJlcGVhdCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJlcGVhdCh2aWV3RmFjdG9yeSwgaW5zdHJ1Y3Rpb24sIHZpZXdTbG90LCB2aWV3UmVzb3VyY2VzLCBvYnNlcnZlckxvY2F0b3IsIHN0cmF0ZWd5TG9jYXRvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgbG9jYWw6ICdpdGVtJyxcclxuICAgICAgICAgICAgdmlld3NSZXF1aXJlTGlmZWN5Y2xlOiB2aWV3c1JlcXVpcmVMaWZlY3ljbGUodmlld0ZhY3RvcnkpXHJcbiAgICAgICAgfSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy52aWV3RmFjdG9yeSA9IHZpZXdGYWN0b3J5O1xyXG4gICAgICAgIF90aGlzLmluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgX3RoaXMudmlld1Nsb3QgPSB2aWV3U2xvdDtcclxuICAgICAgICBfdGhpcy5sb29rdXBGdW5jdGlvbnMgPSB2aWV3UmVzb3VyY2VzLmxvb2t1cEZ1bmN0aW9ucztcclxuICAgICAgICBfdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XHJcbiAgICAgICAgX3RoaXMua2V5ID0gJ2tleSc7XHJcbiAgICAgICAgX3RoaXMudmFsdWUgPSAndmFsdWUnO1xyXG4gICAgICAgIF90aGlzLnN0cmF0ZWd5TG9jYXRvciA9IHN0cmF0ZWd5TG9jYXRvcjtcclxuICAgICAgICBfdGhpcy5pZ25vcmVNdXRhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIF90aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBnZXRJdGVtc1NvdXJjZUV4cHJlc3Npb24oX3RoaXMuaW5zdHJ1Y3Rpb24sICdyZXBlYXQuZm9yJyk7XHJcbiAgICAgICAgX3RoaXMuaXNPbmVUaW1lID0gaXNPbmVUaW1lKF90aGlzLnNvdXJjZUV4cHJlc3Npb24pO1xyXG4gICAgICAgIF90aGlzLnZpZXdzUmVxdWlyZUxpZmVjeWNsZSA9IHZpZXdzUmVxdWlyZUxpZmVjeWNsZSh2aWV3RmFjdG9yeSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUmVwZWF0XzEgPSBSZXBlYXQ7XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoY29udGV4dCwgY2hhbmdlcykge1xyXG4gICAgICAgIHRoaXNbY29udGV4dF0odGhpcy5pdGVtcywgY2hhbmdlcyk7XHJcbiAgICB9O1xyXG4gICAgUmVwZWF0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0geyBiaW5kaW5nQ29udGV4dDogYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dDogb3ZlcnJpZGVDb250ZXh0IH07XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gdGhpcy5pbnN0cnVjdGlvbjtcclxuICAgICAgICBpZiAoIShtYXRjaGVyRXh0cmFjdGlvbk1hcmtlciBpbiBpbnN0cnVjdGlvbikpIHtcclxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bbWF0Y2hlckV4dHJhY3Rpb25NYXJrZXJdID0gdGhpcy5fY2FwdHVyZUFuZFJlbW92ZU1hdGNoZXJCaW5kaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWF0Y2hlckJpbmRpbmcgPSBpbnN0cnVjdGlvblttYXRjaGVyRXh0cmFjdGlvbk1hcmtlcl07XHJcbiAgICAgICAgdGhpcy5pdGVtc0NoYW5nZWQoKTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gbnVsbDtcclxuICAgICAgICB0aGlzLml0ZW1zID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hdGNoZXJCaW5kaW5nID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZpZXdTbG90LnJlbW92ZUFsbCh0cnVlLCB0cnVlKTtcclxuICAgICAgICB0aGlzLl91bnN1YnNjcmliZUNvbGxlY3Rpb24oKTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLl91bnN1YnNjcmliZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbk9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbk9ic2VydmVyLnVuc3Vic2NyaWJlKHRoaXMuY2FsbENvbnRleHQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25PYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbENvbnRleHQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLml0ZW1zQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3Vuc3Vic2NyaWJlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgIGlmICghdGhpcy5zY29wZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IHRoaXMuc3RyYXRlZ3lMb2NhdG9yLmdldFN0cmF0ZWd5KGl0ZW1zKTtcclxuICAgICAgICBpZiAoIXRoaXMuc3RyYXRlZ3kpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgZm9yICdcIi5jb25jYXQodGhpcy5zb3VyY2VFeHByZXNzaW9uLCBcIicgaXMgbm9uLXJlcGVhdGFibGVcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNPbmVUaW1lICYmICF0aGlzLl9vYnNlcnZlSW5uZXJDb2xsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pZ25vcmVNdXRhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdHJhdGVneS5pbnN0YW5jZUNoYW5nZWQodGhpcywgaXRlbXMpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLnRhc2tRdWV1ZS5xdWV1ZU1pY3JvVGFzayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmlnbm9yZU11dGF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fZ2V0SW5uZXJDb2xsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBleHByZXNzaW9uID0gdW53cmFwRXhwcmVzc2lvbih0aGlzLnNvdXJjZUV4cHJlc3Npb24pO1xyXG4gICAgICAgIGlmICghZXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zY29wZSwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgUmVwZWF0LnByb3RvdHlwZS5oYW5kbGVDb2xsZWN0aW9uTXV0YXRlZCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBjaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbGxlY3Rpb25PYnNlcnZlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlnbm9yZU11dGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdHJhdGVneS5pbnN0YW5jZU11dGF0ZWQodGhpcywgY29sbGVjdGlvbiwgY2hhbmdlcyk7XHJcbiAgICB9O1xyXG4gICAgUmVwZWF0LnByb3RvdHlwZS5oYW5kbGVJbm5lckNvbGxlY3Rpb25NdXRhdGVkID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24sIGNoYW5nZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghdGhpcy5jb2xsZWN0aW9uT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pZ25vcmVNdXRhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWdub3JlTXV0YXRpb24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBuZXdJdGVtcyA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNjb3BlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmlnbm9yZU11dGF0aW9uID0gZmFsc2U7IH0pO1xyXG4gICAgICAgIGlmIChuZXdJdGVtcyA9PT0gdGhpcy5pdGVtcykge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IG5ld0l0ZW1zO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLl9vYnNlcnZlSW5uZXJDb2xsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuX2dldElubmVyQ29sbGVjdGlvbigpO1xyXG4gICAgICAgIHZhciBzdHJhdGVneSA9IHRoaXMuc3RyYXRlZ3lMb2NhdG9yLmdldFN0cmF0ZWd5KGl0ZW1zKTtcclxuICAgICAgICBpZiAoIXN0cmF0ZWd5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uT2JzZXJ2ZXIgPSBzdHJhdGVneS5nZXRDb2xsZWN0aW9uT2JzZXJ2ZXIodGhpcy5vYnNlcnZlckxvY2F0b3IsIGl0ZW1zKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29sbGVjdGlvbk9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsQ29udGV4dCA9ICdoYW5kbGVJbm5lckNvbGxlY3Rpb25NdXRhdGVkJztcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25PYnNlcnZlci5zdWJzY3JpYmUodGhpcy5jYWxsQ29udGV4dCwgdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgUmVwZWF0LnByb3RvdHlwZS5fb2JzZXJ2ZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcztcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25PYnNlcnZlciA9IHRoaXMuc3RyYXRlZ3kuZ2V0Q29sbGVjdGlvbk9ic2VydmVyKHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCBpdGVtcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbk9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbENvbnRleHQgPSAnaGFuZGxlQ29sbGVjdGlvbk11dGF0ZWQnO1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25PYnNlcnZlci5zdWJzY3JpYmUodGhpcy5jYWxsQ29udGV4dCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUuX2NhcHR1cmVBbmRSZW1vdmVNYXRjaGVyQmluZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmlld0ZhY3RvcnkgPSB0aGlzLnZpZXdGYWN0b3J5LnZpZXdGYWN0b3J5O1xyXG4gICAgICAgIGlmICh2aWV3RmFjdG9yeSkge1xyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSB2aWV3RmFjdG9yeS50ZW1wbGF0ZTtcclxuICAgICAgICAgICAgdmFyIGluc3RydWN0aW9ucyA9IHZpZXdGYWN0b3J5Lmluc3RydWN0aW9ucztcclxuICAgICAgICAgICAgaWYgKFJlcGVhdF8xLnVzZUlubmVyTWF0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RNYXRjaGVyQmluZGluZ0V4cHJlc3Npb24oaW5zdHJ1Y3Rpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ2V0Q2hpbGRyZW5Db3VudCh0ZW1wbGF0ZSkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXBlYXRlZEVsZW1lbnQgPSBnZXRGaXJzdEVsZW1lbnRDaGlsZCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIGlmICghcmVwZWF0ZWRFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXUtdGFyZ2V0LWlkJykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlcGVhdGVkRWxlbWVudFRhcmdldElkID0gcmVwZWF0ZWRFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXUtdGFyZ2V0LWlkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBleHRyYWN0TWF0Y2hlckJpbmRpbmdFeHByZXNzaW9uKGluc3RydWN0aW9ucywgcmVwZWF0ZWRFbGVtZW50VGFyZ2V0SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUudmlld0NvdW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy52aWV3U2xvdC5jaGlsZHJlbi5sZW5ndGg7IH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLnZpZXdzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy52aWV3U2xvdC5jaGlsZHJlbjsgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUudmlldyA9IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gdGhpcy52aWV3U2xvdC5jaGlsZHJlbltpbmRleF07IH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLm1hdGNoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJCaW5kaW5nID0gdGhpcy5tYXRjaGVyQmluZGluZztcclxuICAgICAgICByZXR1cm4gbWF0Y2hlckJpbmRpbmdcclxuICAgICAgICAgICAgPyBtYXRjaGVyQmluZGluZy5zb3VyY2VFeHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc2NvcGUsIG1hdGNoZXJCaW5kaW5nLmxvb2t1cEZ1bmN0aW9ucylcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUuYWRkVmlldyA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZSgpO1xyXG4gICAgICAgIHZpZXcuYmluZChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KTtcclxuICAgICAgICB0aGlzLnZpZXdTbG90LmFkZCh2aWV3KTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLmluc2VydFZpZXcgPSBmdW5jdGlvbiAoaW5kZXgsIGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlld0ZhY3RvcnkuY3JlYXRlKCk7XHJcbiAgICAgICAgdmlldy5iaW5kKGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMudmlld1Nsb3QuaW5zZXJ0KGluZGV4LCB2aWV3KTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLm1vdmVWaWV3ID0gZnVuY3Rpb24gKHNvdXJjZUluZGV4LCB0YXJnZXRJbmRleCkge1xyXG4gICAgICAgIHRoaXMudmlld1Nsb3QubW92ZShzb3VyY2VJbmRleCwgdGFyZ2V0SW5kZXgpO1xyXG4gICAgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUucmVtb3ZlQWxsVmlld3MgPSBmdW5jdGlvbiAocmV0dXJuVG9DYWNoZSwgc2tpcEFuaW1hdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdTbG90LnJlbW92ZUFsbChyZXR1cm5Ub0NhY2hlLCBza2lwQW5pbWF0aW9uKTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLnJlbW92ZVZpZXdzID0gZnVuY3Rpb24gKHZpZXdzVG9SZW1vdmUsIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3U2xvdC5yZW1vdmVNYW55KHZpZXdzVG9SZW1vdmUsIHJldHVyblRvQ2FjaGUsIHNraXBBbmltYXRpb24pO1xyXG4gICAgfTtcclxuICAgIFJlcGVhdC5wcm90b3R5cGUucmVtb3ZlVmlldyA9IGZ1bmN0aW9uIChpbmRleCwgcmV0dXJuVG9DYWNoZSwgc2tpcEFuaW1hdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdTbG90LnJlbW92ZUF0KGluZGV4LCByZXR1cm5Ub0NhY2hlLCBza2lwQW5pbWF0aW9uKTtcclxuICAgIH07XHJcbiAgICBSZXBlYXQucHJvdG90eXBlLnVwZGF0ZUJpbmRpbmdzID0gZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICB2YXIgJHZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHZhciBqID0gJHZpZXcuYmluZGluZ3MubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChqLS0pIHtcclxuICAgICAgICAgICAgdXBkYXRlT25lVGltZUJpbmRpbmcoJHZpZXcuYmluZGluZ3Nbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBqID0gJHZpZXcuY29udHJvbGxlcnMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChqLS0pIHtcclxuICAgICAgICAgICAgdmFyIGsgPSAkdmlldy5jb250cm9sbGVyc1tqXS5ib3VuZFByb3BlcnRpZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoay0tKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9ICR2aWV3LmNvbnRyb2xsZXJzW2pdLmJvdW5kUHJvcGVydGllc1trXS5iaW5kaW5nO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlT25lVGltZUJpbmRpbmcoYmluZGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIFJlcGVhdF8xO1xyXG4gICAgUmVwZWF0LnVzZUlubmVyTWF0Y2hlciA9IHRydWU7XHJcbiAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICBiaW5kYWJsZVxyXG4gICAgXSwgUmVwZWF0LnByb3RvdHlwZSwgXCJpdGVtc1wiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGFibGVcclxuICAgIF0sIFJlcGVhdC5wcm90b3R5cGUsIFwibG9jYWxcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRhYmxlXHJcbiAgICBdLCBSZXBlYXQucHJvdG90eXBlLCBcImtleVwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGFibGVcclxuICAgIF0sIFJlcGVhdC5wcm90b3R5cGUsIFwidmFsdWVcIiwgdm9pZCAwKTtcclxuICAgIFJlcGVhdCA9IFJlcGVhdF8xID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgY3VzdG9tQXR0cmlidXRlKCdyZXBlYXQnKSxcclxuICAgICAgICB0ZW1wbGF0ZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgaW5qZWN0KEJvdW5kVmlld0ZhY3RvcnksIFRhcmdldEluc3RydWN0aW9uLCBWaWV3U2xvdCwgVmlld1Jlc291cmNlcywgT2JzZXJ2ZXJMb2NhdG9yLCBSZXBlYXRTdHJhdGVneUxvY2F0b3IpXHJcbiAgICBdLCBSZXBlYXQpO1xyXG4gICAgcmV0dXJuIFJlcGVhdDtcclxufShBYnN0cmFjdFJlcGVhdGVyKSk7XHJcbnZhciBleHRyYWN0TWF0Y2hlckJpbmRpbmdFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluc3RydWN0aW9ucywgdGFyZ2V0ZWRFbGVtZW50SWQpIHtcclxuICAgIHZhciBpbnN0cnVjdGlvbklkcyA9IE9iamVjdC5rZXlzKGluc3RydWN0aW9ucyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluc3RydWN0aW9uSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGluc3RydWN0aW9uSWQgPSBpbnN0cnVjdGlvbklkc1tpXTtcclxuICAgICAgICBpZiAodGFyZ2V0ZWRFbGVtZW50SWQgIT09IHVuZGVmaW5lZCAmJiBpbnN0cnVjdGlvbklkICE9PSB0YXJnZXRlZEVsZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGV4cHJlc3Npb25zID0gaW5zdHJ1Y3Rpb25zW2luc3RydWN0aW9uSWRdLmV4cHJlc3Npb25zO1xyXG4gICAgICAgIGlmIChleHByZXNzaW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZXhwcmVzc2lvbnMubGVuZ3RoOyBpaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwcmVzc2lvbnNbaWldLnRhcmdldFByb3BlcnR5ID09PSAnbWF0Y2hlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlckJpbmRpbmdFeHByZXNzaW9uID0gZXhwcmVzc2lvbnNbaWldO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnNwbGljZShpaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXJCaW5kaW5nRXhwcmVzc2lvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxudmFyIGdldENoaWxkcmVuQ291bnQgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgIHZhciBjaGlsZE5vZGVzID0gZWwuY2hpbGROb2RlcztcclxuICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjaGlsZE5vZGVzLmxlbmd0aDsgaWkgPiBpOyArK2kpIHtcclxuICAgICAgICBpZiAoY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICArK2NvdW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb3VudDtcclxufTtcclxudmFyIGdldEZpcnN0RWxlbWVudENoaWxkID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XHJcbiAgICB3aGlsZSAoZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChmaXJzdENoaWxkLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaXJzdENoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaXJzdENoaWxkID0gZmlyc3RDaGlsZC5uZXh0U2libGluZztcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xuXG52YXIgYXVyZWxpYUhpZGVDbGFzc05hbWUgPSAnYXVyZWxpYS1oaWRlJztcclxudmFyIGF1cmVsaWFIaWRlQ2xhc3MgPSBcIi5cIi5jb25jYXQoYXVyZWxpYUhpZGVDbGFzc05hbWUsIFwiIHsgZGlzcGxheTpub25lICFpbXBvcnRhbnQ7IH1cIik7XHJcbmZ1bmN0aW9uIGluamVjdEF1cmVsaWFIaWRlU3R5bGVBdEhlYWQoKSB7XHJcbiAgICBET00uaW5qZWN0U3R5bGVzKGF1cmVsaWFIaWRlQ2xhc3MpO1xyXG59XHJcbmZ1bmN0aW9uIGluamVjdEF1cmVsaWFIaWRlU3R5bGVBdEJvdW5kYXJ5KGRvbUJvdW5kYXJ5KSB7XHJcbiAgICBpZiAoRkVBVFVSRS5zaGFkb3dET00gJiYgZG9tQm91bmRhcnkgJiYgIWRvbUJvdW5kYXJ5Lmhhc0F1cmVsaWFIaWRlU3R5bGUpIHtcclxuICAgICAgICBkb21Cb3VuZGFyeS5oYXNBdXJlbGlhSGlkZVN0eWxlID0gdHJ1ZTtcclxuICAgICAgICBET00uaW5qZWN0U3R5bGVzKGF1cmVsaWFIaWRlQ2xhc3MsIGRvbUJvdW5kYXJ5KTtcclxuICAgIH1cclxufVxuXG52YXIgU2hvdyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTaG93KGVsZW1lbnQsIGFuaW1hdG9yLCBkb21Cb3VuZGFyeSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5hbmltYXRvciA9IGFuaW1hdG9yO1xyXG4gICAgICAgIHRoaXMuZG9tQm91bmRhcnkgPSBkb21Cb3VuZGFyeTtcclxuICAgIH1cclxuICAgIFNob3cuaW5qZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBbRE9NLkVsZW1lbnQsIEFuaW1hdG9yLCBPcHRpb25hbC5vZihET00uYm91bmRhcnksIHRydWUpXTtcclxuICAgIH07XHJcbiAgICBTaG93LnByb3RvdHlwZS5jcmVhdGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGluamVjdEF1cmVsaWFIaWRlU3R5bGVBdEJvdW5kYXJ5KHRoaXMuZG9tQm91bmRhcnkpO1xyXG4gICAgfTtcclxuICAgIFNob3cucHJvdG90eXBlLnZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xyXG4gICAgICAgIHZhciBhbmltYXRvciA9IHRoaXMuYW5pbWF0b3I7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdG9yLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGF1cmVsaWFIaWRlQ2xhc3NOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZENsYXNzKGVsZW1lbnQsIGF1cmVsaWFIaWRlQ2xhc3NOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU2hvdy5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCkge1xyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkKHRoaXMudmFsdWUpO1xyXG4gICAgfTtcclxuICAgIFNob3cgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBjdXN0b21BdHRyaWJ1dGUoJ3Nob3cnKVxyXG4gICAgXSwgU2hvdyk7XHJcbiAgICByZXR1cm4gU2hvdztcclxufSgpKTtcblxudmFyIEhpZGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGlkZShlbGVtZW50LCBhbmltYXRvciwgZG9tQm91bmRhcnkpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuYW5pbWF0b3IgPSBhbmltYXRvcjtcclxuICAgICAgICB0aGlzLmRvbUJvdW5kYXJ5ID0gZG9tQm91bmRhcnk7XHJcbiAgICB9XHJcbiAgICBIaWRlLmluamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gW0RPTS5FbGVtZW50LCBBbmltYXRvciwgT3B0aW9uYWwub2YoRE9NLmJvdW5kYXJ5LCB0cnVlKV07XHJcbiAgICB9O1xyXG4gICAgSGlkZS5wcm90b3R5cGUuY3JlYXRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpbmplY3RBdXJlbGlhSGlkZVN0eWxlQXRCb3VuZGFyeSh0aGlzLmRvbUJvdW5kYXJ5KTtcclxuICAgIH07XHJcbiAgICBIaWRlLnByb3RvdHlwZS52YWx1ZUNoYW5nZWQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5hZGRDbGFzcyh0aGlzLmVsZW1lbnQsIGF1cmVsaWFIaWRlQ2xhc3NOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0b3IucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LCBhdXJlbGlhSGlkZUNsYXNzTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEhpZGUucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZCh0aGlzLnZhbHVlKTtcclxuICAgIH07XHJcbiAgICBIaWRlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH07XHJcbiAgICBIaWRlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgY3VzdG9tQXR0cmlidXRlKCdoaWRlJylcclxuICAgIF0sIEhpZGUpO1xyXG4gICAgcmV0dXJuIEhpZGU7XHJcbn0oKSk7XG5cbnZhciBIVE1MU2FuaXRpemVyID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhUTUxTYW5pdGl6ZXIoKSB7XHJcbiAgICB9XHJcbiAgICBIVE1MU2FuaXRpemVyLnByb3RvdHlwZS5zYW5pdGl6ZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvIHByb3RlY3QgdGhlIGFwcGxpY2F0aW9uIGFnYWluc3QgYSB3aWRlIHZhcmlldHkgb2Ygc29waGlzdGljYXRlZCBYU1MgYXR0YWNrcy5cXG5QbGVhc2Ugc2VlIGh0dHBzOi8vYXVyZWxpYS5pby9kb2NzL2JpbmRpbmcvYmFzaWNzI2VsZW1lbnQtY29udGVudCBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byB1c2UgYSBzZWN1cmUgc29sdXRpb24gbGlrZSBET01QdXJpZnkgb3Igc2FuaXRpemUtaHRtbC5cIik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEhUTUxTYW5pdGl6ZXI7XHJcbn0oKSk7XG5cbnZhciBTYW5pdGl6ZUhUTUxWYWx1ZUNvbnZlcnRlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTYW5pdGl6ZUhUTUxWYWx1ZUNvbnZlcnRlcihzYW5pdGl6ZXIpIHtcclxuICAgICAgICB0aGlzLnNhbml0aXplciA9IHNhbml0aXplcjtcclxuICAgIH1cclxuICAgIFNhbml0aXplSFRNTFZhbHVlQ29udmVydGVyLnByb3RvdHlwZS50b1ZpZXcgPSBmdW5jdGlvbiAodW50cnVzdGVkTWFya3VwKSB7XHJcbiAgICAgICAgaWYgKHVudHJ1c3RlZE1hcmt1cCA9PT0gbnVsbCB8fCB1bnRydXN0ZWRNYXJrdXAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLnNhbml0aXplKHVudHJ1c3RlZE1hcmt1cCk7XHJcbiAgICB9O1xyXG4gICAgU2FuaXRpemVIVE1MVmFsdWVDb252ZXJ0ZXIgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICB2YWx1ZUNvbnZlcnRlcignc2FuaXRpemVIVE1MJyksXHJcbiAgICAgICAgaW5qZWN0KEhUTUxTYW5pdGl6ZXIpXHJcbiAgICBdLCBTYW5pdGl6ZUhUTUxWYWx1ZUNvbnZlcnRlcik7XHJcbiAgICByZXR1cm4gU2FuaXRpemVIVE1MVmFsdWVDb252ZXJ0ZXI7XHJcbn0oKSk7XG5cbnZhciBSZXBsYWNlYWJsZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXBsYWNlYWJsZSh2aWV3RmFjdG9yeSwgdmlld1Nsb3QpIHtcclxuICAgICAgICB0aGlzLnZpZXdGYWN0b3J5ID0gdmlld0ZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy52aWV3U2xvdCA9IHZpZXdTbG90O1xyXG4gICAgICAgIHRoaXMudmlldyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBSZXBsYWNlYWJsZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlldyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLnZpZXdGYWN0b3J5LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdTbG90LmFkZCh0aGlzLnZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcuYmluZChiaW5kaW5nQ29udGV4dCwgb3ZlcnJpZGVDb250ZXh0KTtcclxuICAgIH07XHJcbiAgICBSZXBsYWNlYWJsZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudmlldy51bmJpbmQoKTtcclxuICAgIH07XHJcbiAgICBSZXBsYWNlYWJsZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGN1c3RvbUF0dHJpYnV0ZSgncmVwbGFjZWFibGUnKSxcclxuICAgICAgICB0ZW1wbGF0ZUNvbnRyb2xsZXIsXHJcbiAgICAgICAgaW5qZWN0KEJvdW5kVmlld0ZhY3RvcnksIFZpZXdTbG90KVxyXG4gICAgXSwgUmVwbGFjZWFibGUpO1xyXG4gICAgcmV0dXJuIFJlcGxhY2VhYmxlO1xyXG59KCkpO1xuXG52YXIgRm9jdXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRm9jdXMoZWxlbWVudCwgdGFza1F1ZXVlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLnRhc2tRdWV1ZSA9IHRhc2tRdWV1ZTtcclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5lZWRzQXBwbHkgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIEZvY3VzLmluamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gW0RPTS5FbGVtZW50LCBUYXNrUXVldWVdO1xyXG4gICAgfTtcclxuICAgIEZvY3VzLnByb3RvdHlwZS52YWx1ZUNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hcHBseSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5uZWVkc0FwcGx5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRm9jdXMucHJvdG90eXBlLl9hcHBseSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGb2N1cy5wcm90b3R5cGUuYXR0YWNoZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0F0dGFjaGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5uZWVkc0FwcGx5KSB7XHJcbiAgICAgICAgICAgIHRoaXMubmVlZHNBcHBseSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9hcHBseSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIEZvY3VzLnByb3RvdHlwZS5kZXRhY2hlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIEZvY3VzLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2ZvY3VzJykge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoRE9NLmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMuZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZvY3VzID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgY3VzdG9tQXR0cmlidXRlKCdmb2N1cycsIGJpbmRpbmdNb2RlLnR3b1dheSlcclxuICAgIF0sIEZvY3VzKTtcclxuICAgIHJldHVybiBGb2N1cztcclxufSgpKTtcblxudmFyIGNzc1VybE1hdGNoZXIgPSAvdXJsXFwoKD8hWydcIl1kYXRhKShbXildKylcXCkvZ2k7XHJcbmZ1bmN0aW9uIGZpeHVwQ1NTVXJscyhhZGRyZXNzLCBjc3MpIHtcclxuICAgIGlmICh0eXBlb2YgY3NzICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCBsb2FkaW5nIHJlcXVpcmVkIENTUyBmaWxlOiBcIi5jb25jYXQoYWRkcmVzcykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNzcy5yZXBsYWNlKGNzc1VybE1hdGNoZXIsIGZ1bmN0aW9uIChtYXRjaCwgcDEpIHtcclxuICAgICAgICB2YXIgcXVvdGUgPSBwMS5jaGFyQXQoMCk7XHJcbiAgICAgICAgaWYgKHF1b3RlID09PSAnXFwnJyB8fCBxdW90ZSA9PT0gJ1wiJykge1xyXG4gICAgICAgICAgICBwMSA9IHAxLnN1YnN0cigxLCBwMS5sZW5ndGggLSAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICd1cmwoXFwnJyArIHJlbGF0aXZlVG9GaWxlKHAxLCBhZGRyZXNzKSArICdcXCcpJztcclxuICAgIH0pO1xyXG59XHJcbnZhciBDU1NSZXNvdXJjZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDU1NSZXNvdXJjZShhZGRyZXNzKSB7XHJcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcclxuICAgICAgICB0aGlzLl9zY29wZWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2dsb2JhbCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FscmVhZHlHbG9iYWxseUluamVjdGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBDU1NSZXNvdXJjZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChjb250YWluZXIsIFRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuX3Njb3BlZCA9IG5ldyBUYXJnZXQodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgQ1NTUmVzb3VyY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHJlZ2lzdHJ5LCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzY29wZWQnKSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyVmlld0VuZ2luZUhvb2tzKHRoaXMuX3Njb3BlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9nbG9iYWwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDU1NSZXNvdXJjZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBjb250YWluZXIuZ2V0KExvYWRlcilcclxuICAgICAgICAgICAgLmxvYWRUZXh0KHRoaXMuYWRkcmVzcylcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgICAgIHRleHQgPSBmaXh1cENTU1VybHMoX3RoaXMuYWRkcmVzcywgdGV4dCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9zY29wZWQuY3NzID0gdGV4dDtcclxuICAgICAgICAgICAgaWYgKF90aGlzLl9nbG9iYWwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hbHJlYWR5R2xvYmFsbHlJbmplY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBET00uaW5qZWN0U3R5bGVzKHRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ1NTUmVzb3VyY2U7XHJcbn0oKSk7XHJcbnZhciBDU1NWaWV3RW5naW5lSG9va3MgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ1NTVmlld0VuZ2luZUhvb2tzKG93bmVyKSB7XHJcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xyXG4gICAgICAgIHRoaXMuY3NzID0gbnVsbDtcclxuICAgIH1cclxuICAgIENTU1ZpZXdFbmdpbmVIb29rcy5wcm90b3R5cGUuYmVmb3JlQ29tcGlsZSA9IGZ1bmN0aW9uIChjb250ZW50LCByZXNvdXJjZXMsIGluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKGluc3RydWN0aW9uLnRhcmdldFNoYWRvd0RPTSkge1xyXG4gICAgICAgICAgICBET00uaW5qZWN0U3R5bGVzKHRoaXMuY3NzLCBjb250ZW50LCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoRkVBVFVSRS5zY29wZWRDU1MpIHtcclxuICAgICAgICAgICAgdmFyIHN0eWxlTm9kZSA9IERPTS5pbmplY3RTdHlsZXModGhpcy5jc3MsIGNvbnRlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKCdzY29wZWQnLCAnc2NvcGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2dsb2JhbCAmJiAhdGhpcy5vd25lci5fYWxyZWFkeUdsb2JhbGx5SW5qZWN0ZWQpIHtcclxuICAgICAgICAgICAgRE9NLmluamVjdFN0eWxlcyh0aGlzLmNzcyk7XHJcbiAgICAgICAgICAgIHRoaXMub3duZXIuX2FscmVhZHlHbG9iYWxseUluamVjdGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENTU1ZpZXdFbmdpbmVIb29rcztcclxufSgpKTtcclxuZnVuY3Rpb24gX2NyZWF0ZUNTU1Jlc291cmNlKGFkZHJlc3MpIHtcclxuICAgIHZhciBWaWV3Q1NTID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoVmlld0NTUywgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBWaWV3Q1NTKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFZpZXdDU1MgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgcmVzb3VyY2UobmV3IENTU1Jlc291cmNlKGFkZHJlc3MpKVxyXG4gICAgICAgIF0sIFZpZXdDU1MpO1xyXG4gICAgICAgIHJldHVybiBWaWV3Q1NTO1xyXG4gICAgfShDU1NWaWV3RW5naW5lSG9va3MpKTtcclxuICAgIHJldHVybiBWaWV3Q1NTO1xyXG59XG5cbnZhciBBdHRyQmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEF0dHJCaW5kaW5nQmVoYXZpb3IoKSB7XHJcbiAgICB9XHJcbiAgICBBdHRyQmluZGluZ0JlaGF2aW9yLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSkge1xyXG4gICAgICAgIGJpbmRpbmcudGFyZ2V0T2JzZXJ2ZXIgPSBuZXcgRGF0YUF0dHJpYnV0ZU9ic2VydmVyKGJpbmRpbmcudGFyZ2V0LCBiaW5kaW5nLnRhcmdldFByb3BlcnR5KTtcclxuICAgIH07XHJcbiAgICBBdHRyQmluZGluZ0JlaGF2aW9yLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZywgc291cmNlKSB7XHJcbiAgICB9O1xyXG4gICAgQXR0ckJpbmRpbmdCZWhhdmlvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRpbmdCZWhhdmlvcignYXR0cicpXHJcbiAgICBdLCBBdHRyQmluZGluZ0JlaGF2aW9yKTtcclxuICAgIHJldHVybiBBdHRyQmluZGluZ0JlaGF2aW9yO1xyXG59KCkpO1xuXG52YXIgbW9kZUJpbmRpbmdCZWhhdmlvciA9IHtcclxuICAgIGJpbmQ6IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UsIGxvb2t1cEZ1bmN0aW9ucykge1xyXG4gICAgICAgIGJpbmRpbmcub3JpZ2luYWxNb2RlID0gYmluZGluZy5tb2RlO1xyXG4gICAgICAgIGJpbmRpbmcubW9kZSA9IHRoaXMubW9kZTtcclxuICAgIH0sXHJcbiAgICB1bmJpbmQ6IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UpIHtcclxuICAgICAgICBiaW5kaW5nLm1vZGUgPSBiaW5kaW5nLm9yaWdpbmFsTW9kZTtcclxuICAgICAgICBiaW5kaW5nLm9yaWdpbmFsTW9kZSA9IG51bGw7XHJcbiAgICB9XHJcbn07XHJcbnZhciBPbmVUaW1lQmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9uZVRpbWVCaW5kaW5nQmVoYXZpb3IoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gYmluZGluZ01vZGUub25lVGltZTtcclxuICAgIH1cclxuICAgIE9uZVRpbWVCaW5kaW5nQmVoYXZpb3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtaXhpbihtb2RlQmluZGluZ0JlaGF2aW9yKSxcclxuICAgICAgICBiaW5kaW5nQmVoYXZpb3IoJ29uZVRpbWUnKVxyXG4gICAgXSwgT25lVGltZUJpbmRpbmdCZWhhdmlvcik7XHJcbiAgICByZXR1cm4gT25lVGltZUJpbmRpbmdCZWhhdmlvcjtcclxufSgpKTtcclxudmFyIE9uZVdheUJpbmRpbmdCZWhhdmlvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPbmVXYXlCaW5kaW5nQmVoYXZpb3IoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gYmluZGluZ01vZGUudG9WaWV3O1xyXG4gICAgfVxyXG4gICAgT25lV2F5QmluZGluZ0JlaGF2aW9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgbWl4aW4obW9kZUJpbmRpbmdCZWhhdmlvciksXHJcbiAgICAgICAgYmluZGluZ0JlaGF2aW9yKCdvbmVXYXknKVxyXG4gICAgXSwgT25lV2F5QmluZGluZ0JlaGF2aW9yKTtcclxuICAgIHJldHVybiBPbmVXYXlCaW5kaW5nQmVoYXZpb3I7XHJcbn0oKSk7XHJcbnZhciBUb1ZpZXdCaW5kaW5nQmVoYXZpb3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVG9WaWV3QmluZGluZ0JlaGF2aW9yKCkge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IGJpbmRpbmdNb2RlLnRvVmlldztcclxuICAgIH1cclxuICAgIFRvVmlld0JpbmRpbmdCZWhhdmlvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1peGluKG1vZGVCaW5kaW5nQmVoYXZpb3IpLFxyXG4gICAgICAgIGJpbmRpbmdCZWhhdmlvcigndG9WaWV3JylcclxuICAgIF0sIFRvVmlld0JpbmRpbmdCZWhhdmlvcik7XHJcbiAgICByZXR1cm4gVG9WaWV3QmluZGluZ0JlaGF2aW9yO1xyXG59KCkpO1xyXG52YXIgRnJvbVZpZXdCaW5kaW5nQmVoYXZpb3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnJvbVZpZXdCaW5kaW5nQmVoYXZpb3IoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gYmluZGluZ01vZGUuZnJvbVZpZXc7XHJcbiAgICB9XHJcbiAgICBGcm9tVmlld0JpbmRpbmdCZWhhdmlvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIG1peGluKG1vZGVCaW5kaW5nQmVoYXZpb3IpLFxyXG4gICAgICAgIGJpbmRpbmdCZWhhdmlvcignZnJvbVZpZXcnKVxyXG4gICAgXSwgRnJvbVZpZXdCaW5kaW5nQmVoYXZpb3IpO1xyXG4gICAgcmV0dXJuIEZyb21WaWV3QmluZGluZ0JlaGF2aW9yO1xyXG59KCkpO1xyXG52YXIgVHdvV2F5QmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFR3b1dheUJpbmRpbmdCZWhhdmlvcigpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBiaW5kaW5nTW9kZS50d29XYXk7XHJcbiAgICB9XHJcbiAgICBUd29XYXlCaW5kaW5nQmVoYXZpb3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBtaXhpbihtb2RlQmluZGluZ0JlaGF2aW9yKSxcclxuICAgICAgICBiaW5kaW5nQmVoYXZpb3IoJ3R3b1dheScpXHJcbiAgICBdLCBUd29XYXlCaW5kaW5nQmVoYXZpb3IpO1xyXG4gICAgcmV0dXJuIFR3b1dheUJpbmRpbmdCZWhhdmlvcjtcclxufSgpKTtcblxuZnVuY3Rpb24gdGhyb3R0bGUobmV3VmFsdWUpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLnRocm90dGxlU3RhdGU7XHJcbiAgICB2YXIgZWxhcHNlZCA9ICtuZXcgRGF0ZSgpIC0gc3RhdGUubGFzdDtcclxuICAgIGlmIChlbGFwc2VkID49IHN0YXRlLmRlbGF5KSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN0YXRlLnRpbWVvdXRJZCk7XHJcbiAgICAgICAgc3RhdGUudGltZW91dElkID0gbnVsbDtcclxuICAgICAgICBzdGF0ZS5sYXN0ID0gK25ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy50aHJvdHRsZWRNZXRob2QobmV3VmFsdWUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHN0YXRlLm5ld1ZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICBpZiAoc3RhdGUudGltZW91dElkID09PSBudWxsKSB7XHJcbiAgICAgICAgc3RhdGUudGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLnRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0YXRlLmxhc3QgPSArbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgX3RoaXMudGhyb3R0bGVkTWV0aG9kKHN0YXRlLm5ld1ZhbHVlKTtcclxuICAgICAgICB9LCBzdGF0ZS5kZWxheSAtIGVsYXBzZWQpO1xyXG4gICAgfVxyXG59XHJcbnZhciBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvcigpIHtcclxuICAgIH1cclxuICAgIFRocm90dGxlQmluZGluZ0JlaGF2aW9yLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSwgZGVsYXkpIHtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDIwMDsgfVxyXG4gICAgICAgIHZhciBtZXRob2RUb1Rocm90dGxlID0gJ3VwZGF0ZVRhcmdldCc7XHJcbiAgICAgICAgaWYgKGJpbmRpbmcuY2FsbFNvdXJjZSkge1xyXG4gICAgICAgICAgICBtZXRob2RUb1Rocm90dGxlID0gJ2NhbGxTb3VyY2UnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChiaW5kaW5nLnVwZGF0ZVNvdXJjZSAmJiBiaW5kaW5nLm1vZGUgPT09IGJpbmRpbmdNb2RlLnR3b1dheSkge1xyXG4gICAgICAgICAgICBtZXRob2RUb1Rocm90dGxlID0gJ3VwZGF0ZVNvdXJjZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJpbmRpbmcudGhyb3R0bGVkTWV0aG9kID0gYmluZGluZ1ttZXRob2RUb1Rocm90dGxlXTtcclxuICAgICAgICBiaW5kaW5nLnRocm90dGxlZE1ldGhvZC5vcmlnaW5hbE5hbWUgPSBtZXRob2RUb1Rocm90dGxlO1xyXG4gICAgICAgIGJpbmRpbmdbbWV0aG9kVG9UaHJvdHRsZV0gPSB0aHJvdHRsZTtcclxuICAgICAgICBiaW5kaW5nLnRocm90dGxlU3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcclxuICAgICAgICAgICAgbGFzdDogMCxcclxuICAgICAgICAgICAgdGltZW91dElkOiBudWxsXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciBtZXRob2RUb1Jlc3RvcmUgPSBiaW5kaW5nLnRocm90dGxlZE1ldGhvZC5vcmlnaW5hbE5hbWU7XHJcbiAgICAgICAgYmluZGluZ1ttZXRob2RUb1Jlc3RvcmVdID0gYmluZGluZy50aHJvdHRsZWRNZXRob2Q7XHJcbiAgICAgICAgYmluZGluZy50aHJvdHRsZWRNZXRob2QgPSBudWxsO1xyXG4gICAgICAgIGNsZWFyVGltZW91dChiaW5kaW5nLnRocm90dGxlU3RhdGUudGltZW91dElkKTtcclxuICAgICAgICBiaW5kaW5nLnRocm90dGxlU3RhdGUgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIFRocm90dGxlQmluZGluZ0JlaGF2aW9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGluZ0JlaGF2aW9yKCd0aHJvdHRsZScpXHJcbiAgICBdLCBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvcik7XHJcbiAgICByZXR1cm4gVGhyb3R0bGVCaW5kaW5nQmVoYXZpb3I7XHJcbn0oKSk7XG5cbnZhciB1bnNldCA9IHt9O1xyXG5mdW5jdGlvbiBkZWJvdW5jZUNhbGxTb3VyY2UoZXZlbnQpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmRlYm91bmNlU3RhdGU7XHJcbiAgICBjbGVhclRpbWVvdXQoc3RhdGUudGltZW91dElkKTtcclxuICAgIHN0YXRlLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZGVib3VuY2VkTWV0aG9kKGV2ZW50KTsgfSwgc3RhdGUuZGVsYXkpO1xyXG59XHJcbmZ1bmN0aW9uIGRlYm91bmNlQ2FsbChjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmRlYm91bmNlU3RhdGU7XHJcbiAgICBjbGVhclRpbWVvdXQoc3RhdGUudGltZW91dElkKTtcclxuICAgIGlmIChjb250ZXh0ICE9PSBzdGF0ZS5jYWxsQ29udGV4dFRvRGVib3VuY2UpIHtcclxuICAgICAgICBzdGF0ZS5vbGRWYWx1ZSA9IHVuc2V0O1xyXG4gICAgICAgIHRoaXMuZGVib3VuY2VkTWV0aG9kKGNvbnRleHQsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHN0YXRlLm9sZFZhbHVlID09PSB1bnNldCkge1xyXG4gICAgICAgIHN0YXRlLm9sZFZhbHVlID0gb2xkVmFsdWU7XHJcbiAgICB9XHJcbiAgICBzdGF0ZS50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX29sZFZhbHVlID0gc3RhdGUub2xkVmFsdWU7XHJcbiAgICAgICAgc3RhdGUub2xkVmFsdWUgPSB1bnNldDtcclxuICAgICAgICBfdGhpcy5kZWJvdW5jZWRNZXRob2QoY29udGV4dCwgbmV3VmFsdWUsIF9vbGRWYWx1ZSk7XHJcbiAgICB9LCBzdGF0ZS5kZWxheSk7XHJcbn1cclxudmFyIERlYm91bmNlQmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlYm91bmNlQmluZGluZ0JlaGF2aW9yKCkge1xyXG4gICAgfVxyXG4gICAgRGVib3VuY2VCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZywgc291cmNlLCBkZWxheSkge1xyXG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMjAwOyB9XHJcbiAgICAgICAgdmFyIGlzQ2FsbFNvdXJjZSA9IGJpbmRpbmcuY2FsbFNvdXJjZSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBtZXRob2RUb0RlYm91bmNlID0gaXNDYWxsU291cmNlID8gJ2NhbGxTb3VyY2UnIDogJ2NhbGwnO1xyXG4gICAgICAgIHZhciBkZWJvdW5jZXIgPSBpc0NhbGxTb3VyY2UgPyBkZWJvdW5jZUNhbGxTb3VyY2UgOiBkZWJvdW5jZUNhbGw7XHJcbiAgICAgICAgdmFyIG1vZGUgPSBiaW5kaW5nLm1vZGU7XHJcbiAgICAgICAgdmFyIGNhbGxDb250ZXh0VG9EZWJvdW5jZSA9IG1vZGUgPT09IGJpbmRpbmdNb2RlLnR3b1dheSB8fCBtb2RlID09PSBiaW5kaW5nTW9kZS5mcm9tVmlldyA/IHRhcmdldENvbnRleHQgOiBzb3VyY2VDb250ZXh0O1xyXG4gICAgICAgIGJpbmRpbmcuZGVib3VuY2VkTWV0aG9kID0gYmluZGluZ1ttZXRob2RUb0RlYm91bmNlXTtcclxuICAgICAgICBiaW5kaW5nLmRlYm91bmNlZE1ldGhvZC5vcmlnaW5hbE5hbWUgPSBtZXRob2RUb0RlYm91bmNlO1xyXG4gICAgICAgIGJpbmRpbmdbbWV0aG9kVG9EZWJvdW5jZV0gPSBkZWJvdW5jZXI7XHJcbiAgICAgICAgYmluZGluZy5kZWJvdW5jZVN0YXRlID0ge1xyXG4gICAgICAgICAgICBjYWxsQ29udGV4dFRvRGVib3VuY2U6IGNhbGxDb250ZXh0VG9EZWJvdW5jZSxcclxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxyXG4gICAgICAgICAgICB0aW1lb3V0SWQ6IDAsXHJcbiAgICAgICAgICAgIG9sZFZhbHVlOiB1bnNldFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgRGVib3VuY2VCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UpIHtcclxuICAgICAgICB2YXIgbWV0aG9kVG9SZXN0b3JlID0gYmluZGluZy5kZWJvdW5jZWRNZXRob2Qub3JpZ2luYWxOYW1lO1xyXG4gICAgICAgIGJpbmRpbmdbbWV0aG9kVG9SZXN0b3JlXSA9IGJpbmRpbmcuZGVib3VuY2VkTWV0aG9kO1xyXG4gICAgICAgIGJpbmRpbmcuZGVib3VuY2VkTWV0aG9kID0gbnVsbDtcclxuICAgICAgICBjbGVhclRpbWVvdXQoYmluZGluZy5kZWJvdW5jZVN0YXRlLnRpbWVvdXRJZCk7XHJcbiAgICAgICAgYmluZGluZy5kZWJvdW5jZVN0YXRlID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBEZWJvdW5jZUJpbmRpbmdCZWhhdmlvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRpbmdCZWhhdmlvcignZGVib3VuY2UnKVxyXG4gICAgXSwgRGVib3VuY2VCaW5kaW5nQmVoYXZpb3IpO1xyXG4gICAgcmV0dXJuIERlYm91bmNlQmluZGluZ0JlaGF2aW9yO1xyXG59KCkpO1xuXG5mdW5jdGlvbiBmaW5kT3JpZ2luYWxFdmVudFRhcmdldChldmVudCkge1xyXG4gICAgcmV0dXJuIChldmVudC5wYXRoICYmIGV2ZW50LnBhdGhbMF0pIHx8IChldmVudC5kZWVwUGF0aCAmJiBldmVudC5kZWVwUGF0aFswXSkgfHwgZXZlbnQudGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVNlbGZFdmVudChldmVudCkge1xyXG4gICAgdmFyIHRhcmdldCA9IGZpbmRPcmlnaW5hbEV2ZW50VGFyZ2V0KGV2ZW50KTtcclxuICAgIGlmICh0aGlzLnRhcmdldCAhPT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZWxmRXZlbnRDYWxsU291cmNlKGV2ZW50KTtcclxufVxyXG52YXIgU2VsZkJpbmRpbmdCZWhhdmlvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTZWxmQmluZGluZ0JlaGF2aW9yKCkge1xyXG4gICAgfVxyXG4gICAgU2VsZkJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UpIHtcclxuICAgICAgICBpZiAoIWJpbmRpbmcuY2FsbFNvdXJjZSB8fCAhYmluZGluZy50YXJnZXRFdmVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGYgYmluZGluZyBiZWhhdmlvciBvbmx5IHN1cHBvcnRzIGV2ZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiaW5kaW5nLnNlbGZFdmVudENhbGxTb3VyY2UgPSBiaW5kaW5nLmNhbGxTb3VyY2U7XHJcbiAgICAgICAgYmluZGluZy5jYWxsU291cmNlID0gaGFuZGxlU2VsZkV2ZW50O1xyXG4gICAgfTtcclxuICAgIFNlbGZCaW5kaW5nQmVoYXZpb3IucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UpIHtcclxuICAgICAgICBiaW5kaW5nLmNhbGxTb3VyY2UgPSBiaW5kaW5nLnNlbGZFdmVudENhbGxTb3VyY2U7XHJcbiAgICAgICAgYmluZGluZy5zZWxmRXZlbnRDYWxsU291cmNlID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBTZWxmQmluZGluZ0JlaGF2aW9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYmluZGluZ0JlaGF2aW9yKCdzZWxmJylcclxuICAgIF0sIFNlbGZCaW5kaW5nQmVoYXZpb3IpO1xyXG4gICAgcmV0dXJuIFNlbGZCaW5kaW5nQmVoYXZpb3I7XHJcbn0oKSk7XG5cbnZhciBCaW5kaW5nU2lnbmFsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQmluZGluZ1NpZ25hbGVyKCkge1xyXG4gICAgICAgIHRoaXMuc2lnbmFscyA9IHt9O1xyXG4gICAgfVxyXG4gICAgQmluZGluZ1NpZ25hbGVyLnByb3RvdHlwZS5zaWduYWwgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBiaW5kaW5ncyA9IHRoaXMuc2lnbmFsc1tuYW1lXTtcclxuICAgICAgICBpZiAoIWJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGkgPSBiaW5kaW5ncy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICBiaW5kaW5nc1tpXS5jYWxsKHNvdXJjZUNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQmluZGluZ1NpZ25hbGVyO1xyXG59KCkpO1xuXG52YXIgU2lnbmFsQmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNpZ25hbEJpbmRpbmdCZWhhdmlvcihiaW5kaW5nU2lnbmFsZXIpIHtcclxuICAgICAgICB0aGlzLnNpZ25hbHMgPSBiaW5kaW5nU2lnbmFsZXIuc2lnbmFscztcclxuICAgIH1cclxuICAgIFNpZ25hbEJpbmRpbmdCZWhhdmlvci5pbmplY3QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbQmluZGluZ1NpZ25hbGVyXTsgfTtcclxuICAgIFNpZ25hbEJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nLCBzb3VyY2UpIHtcclxuICAgICAgICB2YXIgbmFtZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBuYW1lc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFiaW5kaW5nLnVwZGF0ZVRhcmdldCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgcHJvcGVydHkgYmluZGluZ3MgYW5kIHN0cmluZyBpbnRlcnBvbGF0aW9uIGJpbmRpbmdzIGNhbiBiZSBzaWduYWxlZC4gIFRyaWdnZXIsIGRlbGVnYXRlIGFuZCBjYWxsIGJpbmRpbmdzIGNhbm5vdCBiZSBzaWduYWxlZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNpZ25hbHMgPSB0aGlzLnNpZ25hbHM7XHJcbiAgICAgICAgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gbmFtZXNbMF07XHJcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHNpZ25hbHNbbmFtZV8xXSB8fCAoc2lnbmFsc1tuYW1lXzFdID0gW10pO1xyXG4gICAgICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xyXG4gICAgICAgICAgICBiaW5kaW5nLnNpZ25hbE5hbWUgPSBuYW1lXzE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5hbWVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBuYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lXzIgPSBuYW1lc1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHNpZ25hbHNbbmFtZV8yXSB8fCAoc2lnbmFsc1tuYW1lXzJdID0gW10pO1xyXG4gICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChiaW5kaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiaW5kaW5nLnNpZ25hbE5hbWUgPSBuYW1lcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2lnbmFsIG5hbWUgaXMgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNpZ25hbEJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciBzaWduYWxzID0gdGhpcy5zaWduYWxzO1xyXG4gICAgICAgIHZhciBuYW1lID0gYmluZGluZy5zaWduYWxOYW1lO1xyXG4gICAgICAgIGJpbmRpbmcuc2lnbmFsTmFtZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gbmFtZTtcclxuICAgICAgICAgICAgdmFyIGkgPSBuYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gbmFtZXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBzaWduYWxzW25dO1xyXG4gICAgICAgICAgICAgICAgYmluZGluZ3Muc3BsaWNlKGJpbmRpbmdzLmluZGV4T2YoYmluZGluZyksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBzaWduYWxzW25hbWVdO1xyXG4gICAgICAgICAgICBiaW5kaW5ncy5zcGxpY2UoYmluZGluZ3MuaW5kZXhPZihiaW5kaW5nKSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFNpZ25hbEJpbmRpbmdCZWhhdmlvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIGJpbmRpbmdCZWhhdmlvcignc2lnbmFsJylcclxuICAgIF0sIFNpZ25hbEJpbmRpbmdCZWhhdmlvcik7XHJcbiAgICByZXR1cm4gU2lnbmFsQmluZGluZ0JlaGF2aW9yO1xyXG59KCkpO1xuXG52YXIgZXZlbnROYW1lc1JlcXVpcmVkID0gJ1RoZSB1cGRhdGVUcmlnZ2VyIGJpbmRpbmcgYmVoYXZpb3IgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGV2ZW50IG5hbWUgYXJndW1lbnQ6IGVnIDxpbnB1dCB2YWx1ZS5iaW5kPVwiZmlyc3ROYW1lICYgdXBkYXRlVHJpZ2dlcjpcXCdibHVyXFwnXCI+JztcclxudmFyIG5vdEFwcGxpY2FibGVNZXNzYWdlID0gJ1RoZSB1cGRhdGVUcmlnZ2VyIGJpbmRpbmcgYmVoYXZpb3IgY2FuIG9ubHkgYmUgYXBwbGllZCB0byB0d28td2F5LyBmcm9tLXZpZXcgYmluZGluZ3Mgb24gaW5wdXQvc2VsZWN0IGVsZW1lbnRzLic7XHJcbnZhciBVcGRhdGVUcmlnZ2VyQmluZGluZ0JlaGF2aW9yID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFVwZGF0ZVRyaWdnZXJCaW5kaW5nQmVoYXZpb3IoKSB7XHJcbiAgICB9XHJcbiAgICBVcGRhdGVUcmlnZ2VyQmluZGluZ0JlaGF2aW9yLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBldmVudHNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihldmVudE5hbWVzUmVxdWlyZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYmluZGluZy5tb2RlICE9PSBiaW5kaW5nTW9kZS50d29XYXkgJiYgYmluZGluZy5tb2RlICE9PSBiaW5kaW5nTW9kZS5mcm9tVmlldykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm90QXBwbGljYWJsZU1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGFyZ2V0T2JzZXJ2ZXIgPSBiaW5kaW5nLm9ic2VydmVyTG9jYXRvci5nZXRPYnNlcnZlcihiaW5kaW5nLnRhcmdldCwgYmluZGluZy50YXJnZXRQcm9wZXJ0eSk7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRPYnNlcnZlci5oYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub3RBcHBsaWNhYmxlTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJpbmRpbmcudGFyZ2V0T2JzZXJ2ZXIgPSB0YXJnZXRPYnNlcnZlcjtcclxuICAgICAgICB0YXJnZXRPYnNlcnZlci5vcmlnaW5hbEhhbmRsZXIgPSBiaW5kaW5nLnRhcmdldE9ic2VydmVyLmhhbmRsZXI7XHJcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBuZXcgRXZlbnRTdWJzY3JpYmVyKGV2ZW50cyk7XHJcbiAgICAgICAgdGFyZ2V0T2JzZXJ2ZXIuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG4gICAgVXBkYXRlVHJpZ2dlckJpbmRpbmdCZWhhdmlvci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmcsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRPYnNlcnZlciA9IGJpbmRpbmcudGFyZ2V0T2JzZXJ2ZXI7XHJcbiAgICAgICAgdGFyZ2V0T2JzZXJ2ZXIuaGFuZGxlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGFyZ2V0T2JzZXJ2ZXIuaGFuZGxlciA9IHRhcmdldE9ic2VydmVyLm9yaWdpbmFsSGFuZGxlcjtcclxuICAgICAgICB0YXJnZXRPYnNlcnZlci5vcmlnaW5hbEhhbmRsZXIgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIFVwZGF0ZVRyaWdnZXJCaW5kaW5nQmVoYXZpb3IgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBiaW5kaW5nQmVoYXZpb3IoJ3VwZGF0ZVRyaWdnZXInKVxyXG4gICAgXSwgVXBkYXRlVHJpZ2dlckJpbmRpbmdCZWhhdmlvcik7XHJcbiAgICByZXR1cm4gVXBkYXRlVHJpZ2dlckJpbmRpbmdCZWhhdmlvcjtcclxufSgpKTtcblxuZnVuY3Rpb24gX2NyZWF0ZUR5bmFtaWNFbGVtZW50KF9hKSB7XHJcbiAgICB2YXIgbmFtZSA9IF9hLm5hbWUsIHZpZXdVcmwgPSBfYS52aWV3VXJsLCBiaW5kYWJsZU5hbWVzID0gX2EuYmluZGFibGVOYW1lcywgdXNlU2hhZG93RE9NbW9kZSA9IF9hLnVzZVNoYWRvd0RPTW1vZGU7XHJcbiAgICB2YXIgRHluYW1pY0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIER5bmFtaWNFbGVtZW50KCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBEeW5hbWljRWxlbWVudC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChiaW5kaW5nQ29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLiRwYXJlbnQgPSBiaW5kaW5nQ29udGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIER5bmFtaWNFbGVtZW50ID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnQobmFtZSksXHJcbiAgICAgICAgICAgIHVzZVZpZXcodmlld1VybClcclxuICAgICAgICBdLCBEeW5hbWljRWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIER5bmFtaWNFbGVtZW50O1xyXG4gICAgfSgpKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGJpbmRhYmxlTmFtZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgIGJpbmRhYmxlKGJpbmRhYmxlTmFtZXNbaV0pKER5bmFtaWNFbGVtZW50KTtcclxuICAgIH1cclxuICAgIHN3aXRjaCAodXNlU2hhZG93RE9NbW9kZSkge1xyXG4gICAgICAgIGNhc2UgJ29wZW4nOlxyXG4gICAgICAgICAgICB1c2VTaGFkb3dET00oeyBtb2RlOiAnb3BlbicgfSkoRHluYW1pY0VsZW1lbnQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjbG9zZWQnOlxyXG4gICAgICAgICAgICB1c2VTaGFkb3dET00oeyBtb2RlOiAnY2xvc2VkJyB9KShEeW5hbWljRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJyc6XHJcbiAgICAgICAgICAgIHVzZVNoYWRvd0RPTShEeW5hbWljRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgbnVsbDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZ2V0TG9nZ2VyKCdhdXJlbGlhLWh0bWwtb25seS1lbGVtZW50JylcclxuICAgICAgICAgICAgICAgIC53YXJuKFwiRXhwZWN0ZWQgJ3VzZS1zaGFkb3ctZG9tJyB2YWx1ZSB0byBiZSBcXFwiY2xvc2VcXFwiLCBcXFwib3BlblxcXCIgb3IgXFxcIlxcXCIsIHJlY2VpdmVkIFwiLmNvbmNhdCh1c2VTaGFkb3dET01tb2RlKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIER5bmFtaWNFbGVtZW50O1xyXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnROYW1lKGFkZHJlc3MpIHtcclxuICAgIHJldHVybiAvKFteXFwvXlxcP10rKVxcLmh0bWwvaS5leGVjKGFkZHJlc3MpWzFdLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuZnVuY3Rpb24gY29uZmlndXJlJDEoY29uZmlnKSB7XHJcbiAgICB2YXIgdmlld0VuZ2luZSA9IGNvbmZpZy5jb250YWluZXIuZ2V0KFZpZXdFbmdpbmUpO1xyXG4gICAgdmFyIGxvYWRlciA9IGNvbmZpZy5hdXJlbGlhLmxvYWRlcjtcclxuICAgIHZpZXdFbmdpbmUuYWRkUmVzb3VyY2VQbHVnaW4oJy5odG1sJywge1xyXG4gICAgICAgICdmZXRjaCc6IGZ1bmN0aW9uICh2aWV3VXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkZXIubG9hZFRlbXBsYXRlKHZpZXdVcmwpLnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJ5RW50cnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kYWJsZU5hbWVzID0gcmVnaXN0cnlFbnRyeS50ZW1wbGF0ZS5nZXRBdHRyaWJ1dGUoJ2JpbmRhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlU2hhZG93RE9NbW9kZSA9IHJlZ2lzdHJ5RW50cnkudGVtcGxhdGUuZ2V0QXR0cmlidXRlKCd1c2Utc2hhZG93LWRvbScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBnZXRFbGVtZW50TmFtZSh2aWV3VXJsKTtcclxuICAgICAgICAgICAgICAgIGlmIChiaW5kYWJsZU5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZGFibGVOYW1lcyA9IGJpbmRhYmxlTmFtZXMuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHJpbSgpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RyeUVudHJ5LnRlbXBsYXRlLnJlbW92ZUF0dHJpYnV0ZSgnYmluZGFibGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbmRhYmxlTmFtZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBfYSA9IHt9LCBfYVtuYW1lXSA9IF9jcmVhdGVEeW5hbWljRWxlbWVudCh7IG5hbWU6IG5hbWUsIHZpZXdVcmw6IHZpZXdVcmwsIGJpbmRhYmxlTmFtZXM6IGJpbmRhYmxlTmFtZXMsIHVzZVNoYWRvd0RPTW1vZGU6IHVzZVNoYWRvd0RPTW1vZGUgfSksIF9hO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxuXG5mdW5jdGlvbiBjb25maWd1cmUoY29uZmlnKSB7XHJcbiAgICBpbmplY3RBdXJlbGlhSGlkZVN0eWxlQXRIZWFkKCk7XHJcbiAgICBjb25maWcuZ2xvYmFsUmVzb3VyY2VzKENvbXBvc2UsIElmLCBFbHNlLCBXaXRoLCBSZXBlYXQsIFNob3csIEhpZGUsIFJlcGxhY2VhYmxlLCBGb2N1cywgU2FuaXRpemVIVE1MVmFsdWVDb252ZXJ0ZXIsIE9uZVRpbWVCaW5kaW5nQmVoYXZpb3IsIE9uZVdheUJpbmRpbmdCZWhhdmlvciwgVG9WaWV3QmluZGluZ0JlaGF2aW9yLCBGcm9tVmlld0JpbmRpbmdCZWhhdmlvciwgVHdvV2F5QmluZGluZ0JlaGF2aW9yLCBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvciwgRGVib3VuY2VCaW5kaW5nQmVoYXZpb3IsIFNlbGZCaW5kaW5nQmVoYXZpb3IsIFNpZ25hbEJpbmRpbmdCZWhhdmlvciwgVXBkYXRlVHJpZ2dlckJpbmRpbmdCZWhhdmlvciwgQXR0ckJpbmRpbmdCZWhhdmlvcik7XHJcbiAgICBjb25maWd1cmUkMShjb25maWcpO1xyXG4gICAgdmFyIHZpZXdFbmdpbmUgPSBjb25maWcuY29udGFpbmVyLmdldChWaWV3RW5naW5lKTtcclxuICAgIHZhciBzdHlsZVJlc291cmNlUGx1Z2luID0ge1xyXG4gICAgICAgIGZldGNoOiBmdW5jdGlvbiAoYWRkcmVzcykge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiBfYSA9IHt9LCBfYVthZGRyZXNzXSA9IF9jcmVhdGVDU1NSZXNvdXJjZShhZGRyZXNzKSwgX2E7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFsnLmNzcycsICcubGVzcycsICcuc2FzcycsICcuc2NzcycsICcuc3R5bCddLmZvckVhY2goZnVuY3Rpb24gKGV4dCkgeyByZXR1cm4gdmlld0VuZ2luZS5hZGRSZXNvdXJjZVBsdWdpbihleHQsIHN0eWxlUmVzb3VyY2VQbHVnaW4pOyB9KTtcclxufVxuXG5leHBvcnQgeyBBYnN0cmFjdFJlcGVhdGVyLCBBcnJheVJlcGVhdFN0cmF0ZWd5LCBBdHRyQmluZGluZ0JlaGF2aW9yLCBCaW5kaW5nU2lnbmFsZXIsIENvbXBvc2UsIERlYm91bmNlQmluZGluZ0JlaGF2aW9yLCBFbHNlLCBGb2N1cywgRnJvbVZpZXdCaW5kaW5nQmVoYXZpb3IsIEhUTUxTYW5pdGl6ZXIsIEhpZGUsIElmLCBNYXBSZXBlYXRTdHJhdGVneSwgTnVsbFJlcGVhdFN0cmF0ZWd5LCBOdW1iZXJSZXBlYXRTdHJhdGVneSwgT25lVGltZUJpbmRpbmdCZWhhdmlvciwgT25lV2F5QmluZGluZ0JlaGF2aW9yLCBSZXBlYXQsIFJlcGVhdFN0cmF0ZWd5TG9jYXRvciwgUmVwbGFjZWFibGUsIFNhbml0aXplSFRNTFZhbHVlQ29udmVydGVyLCBTZWxmQmluZGluZ0JlaGF2aW9yLCBTZXRSZXBlYXRTdHJhdGVneSwgU2hvdywgU2lnbmFsQmluZGluZ0JlaGF2aW9yLCBUaHJvdHRsZUJpbmRpbmdCZWhhdmlvciwgVG9WaWV3QmluZGluZ0JlaGF2aW9yLCBUd29XYXlCaW5kaW5nQmVoYXZpb3IsIFVwZGF0ZVRyaWdnZXJCaW5kaW5nQmVoYXZpb3IsIFdpdGgsIGNvbmZpZ3VyZSwgY3JlYXRlRnVsbE92ZXJyaWRlQ29udGV4dCwgZ2V0SXRlbXNTb3VyY2VFeHByZXNzaW9uLCBpc09uZVRpbWUsIHVud3JhcEV4cHJlc3Npb24sIHVwZGF0ZU9uZVRpbWVCaW5kaW5nLCB1cGRhdGVPdmVycmlkZUNvbnRleHQsIHZpZXdzUmVxdWlyZUxpZmVjeWNsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVyZWxpYS10ZW1wbGF0aW5nLXJlc291cmNlcy5qcy5tYXBcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hdXJlbGlhLXRlbXBsYXRpbmctcmVzb3VyY2VzL2Rpc3QvbmF0aXZlLW1vZHVsZXMvYXVyZWxpYS10ZW1wbGF0aW5nLXJlc291cmNlcy5qc1xuLy8gbW9kdWxlIGlkID0gYXVyZWxpYS10ZW1wbGF0aW5nLXJlc291cmNlc1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiLCJpbXBvcnQgeyBSb3V0ZXIsIFJvdXRlTG9hZGVyLCBBcHBSb3V0ZXIgfSBmcm9tICdhdXJlbGlhLXJvdXRlcic7XG5pbXBvcnQgeyBPcmlnaW4gfSBmcm9tICdhdXJlbGlhLW1ldGFkYXRhJztcbmltcG9ydCB7IHJlbGF0aXZlVG9GaWxlIH0gZnJvbSAnYXVyZWxpYS1wYXRoJztcbmltcG9ydCB7IEJlaGF2aW9ySW5zdHJ1Y3Rpb24sIFNoYWRvd0RPTSwgVmlld1Nsb3QsIFZpZXdMb2NhdG9yLCBDb21wb3NpdGlvblRyYW5zYWN0aW9uLCBDb21wb3NpdGlvbkVuZ2luZSwgU3dhcFN0cmF0ZWdpZXMsIGlubGluZVZpZXcsIGN1c3RvbUVsZW1lbnQsIHVzZVZpZXcgfSBmcm9tICdhdXJlbGlhLXRlbXBsYXRpbmcnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVPdmVycmlkZUNvbnRleHQgfSBmcm9tICdhdXJlbGlhLWJpbmRpbmcnO1xuaW1wb3J0IHsgRE9NIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0ICogYXMgTG9nTWFuYWdlciBmcm9tICdhdXJlbGlhLWxvZ2dpbmcnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxuXG52YXIgRW1wdHlMYXlvdXRWaWV3TW9kZWwgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW1wdHlMYXlvdXRWaWV3TW9kZWwoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW1wdHlMYXlvdXRWaWV3TW9kZWw7XHJcbn0oKSk7XHJcbnZhciBSb3V0ZXJWaWV3ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJvdXRlclZpZXcoZWxlbWVudCwgY29udGFpbmVyLCB2aWV3U2xvdCwgcm91dGVyLCB2aWV3TG9jYXRvciwgY29tcG9zaXRpb25UcmFuc2FjdGlvbiwgY29tcG9zaXRpb25FbmdpbmUpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMudmlld1Nsb3QgPSB2aWV3U2xvdDtcclxuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcclxuICAgICAgICB0aGlzLnZpZXdMb2NhdG9yID0gdmlld0xvY2F0b3I7XHJcbiAgICAgICAgdGhpcy5jb21wb3NpdGlvblRyYW5zYWN0aW9uID0gY29tcG9zaXRpb25UcmFuc2FjdGlvbjtcclxuICAgICAgICB0aGlzLmNvbXBvc2l0aW9uRW5naW5lID0gY29tcG9zaXRpb25FbmdpbmU7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIucmVnaXN0ZXJWaWV3UG9ydCh0aGlzLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCduYW1lJykpO1xyXG4gICAgICAgIGlmICghKCdpbml0aWFsQ29tcG9zaXRpb24nIGluIGNvbXBvc2l0aW9uVHJhbnNhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNvbXBvc2l0aW9uVHJhbnNhY3Rpb24uaW5pdGlhbENvbXBvc2l0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jb21wb3NpdGlvblRyYW5zYWN0aW9uTm90aWZpZXIgPSBjb21wb3NpdGlvblRyYW5zYWN0aW9uLmVubGlzdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJvdXRlclZpZXcuaW5qZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBbRE9NLkVsZW1lbnQsIENvbnRhaW5lciwgVmlld1Nsb3QsIFJvdXRlciwgVmlld0xvY2F0b3IsIENvbXBvc2l0aW9uVHJhbnNhY3Rpb24sIENvbXBvc2l0aW9uRW5naW5lXTtcclxuICAgIH07XHJcbiAgICBSb3V0ZXJWaWV3LnByb3RvdHlwZS5jcmVhdGVkID0gZnVuY3Rpb24gKG93bmluZ1ZpZXcpIHtcclxuICAgICAgICB0aGlzLm93bmluZ1ZpZXcgPSBvd25pbmdWaWV3O1xyXG4gICAgfTtcclxuICAgIFJvdXRlclZpZXcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoYmluZGluZ0NvbnRleHQsIG92ZXJyaWRlQ29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnZpZXdNb2RlbCA9IGJpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgIHRoaXMub3ZlcnJpZGVDb250ZXh0ID0gb3ZlcnJpZGVDb250ZXh0O1xyXG4gICAgfTtcclxuICAgIFJvdXRlclZpZXcucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoJHZpZXdQb3J0SW5zdHJ1Y3Rpb24sIHdhaXRUb1N3YXApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB2aWV3UG9ydEluc3RydWN0aW9uID0gJHZpZXdQb3J0SW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHZpZXdQb3J0SW5zdHJ1Y3Rpb24uY29tcG9uZW50O1xyXG4gICAgICAgIHZhciBjaGlsZENvbnRhaW5lciA9IGNvbXBvbmVudC5jaGlsZENvbnRhaW5lcjtcclxuICAgICAgICB2YXIgdmlld01vZGVsID0gY29tcG9uZW50LnZpZXdNb2RlbDtcclxuICAgICAgICB2YXIgdmlld01vZGVsUmVzb3VyY2UgPSBjb21wb25lbnQudmlld01vZGVsUmVzb3VyY2U7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhID0gdmlld01vZGVsUmVzb3VyY2UubWV0YWRhdGE7XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IGNvbXBvbmVudC5yb3V0ZXIuY3VycmVudEluc3RydWN0aW9uLmNvbmZpZztcclxuICAgICAgICB2YXIgdmlld1BvcnRDb25maWcgPSBjb25maWcudmlld1BvcnRzID8gKGNvbmZpZy52aWV3UG9ydHNbdmlld1BvcnRJbnN0cnVjdGlvbi5uYW1lXSB8fCB7fSkgOiB7fTtcclxuICAgICAgICBjaGlsZENvbnRhaW5lci5nZXQoUm91dGVyVmlld0xvY2F0b3IpLl9ub3RpZnkodGhpcyk7XHJcbiAgICAgICAgdmFyIGxheW91dEluc3RydWN0aW9uID0ge1xyXG4gICAgICAgICAgICB2aWV3TW9kZWw6IHZpZXdQb3J0Q29uZmlnLmxheW91dFZpZXdNb2RlbCB8fCBjb25maWcubGF5b3V0Vmlld01vZGVsIHx8IHRoaXMubGF5b3V0Vmlld01vZGVsLFxyXG4gICAgICAgICAgICB2aWV3OiB2aWV3UG9ydENvbmZpZy5sYXlvdXRWaWV3IHx8IGNvbmZpZy5sYXlvdXRWaWV3IHx8IHRoaXMubGF5b3V0VmlldyxcclxuICAgICAgICAgICAgbW9kZWw6IHZpZXdQb3J0Q29uZmlnLmxheW91dE1vZGVsIHx8IGNvbmZpZy5sYXlvdXRNb2RlbCB8fCB0aGlzLmxheW91dE1vZGVsLFxyXG4gICAgICAgICAgICByb3V0ZXI6IHZpZXdQb3J0SW5zdHJ1Y3Rpb24uY29tcG9uZW50LnJvdXRlcixcclxuICAgICAgICAgICAgY2hpbGRDb250YWluZXI6IGNoaWxkQ29udGFpbmVyLFxyXG4gICAgICAgICAgICB2aWV3U2xvdDogdGhpcy52aWV3U2xvdFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHZpZXdTdHJhdGVneSA9IHRoaXMudmlld0xvY2F0b3IuZ2V0Vmlld1N0cmF0ZWd5KGNvbXBvbmVudC52aWV3IHx8IHZpZXdNb2RlbCk7XHJcbiAgICAgICAgaWYgKHZpZXdTdHJhdGVneSAmJiBjb21wb25lbnQudmlldykge1xyXG4gICAgICAgICAgICB2aWV3U3RyYXRlZ3kubWFrZVJlbGF0aXZlVG8oT3JpZ2luLmdldChjb21wb25lbnQucm91dGVyLmNvbnRhaW5lci52aWV3TW9kZWwuY29uc3RydWN0b3IpLm1vZHVsZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhXHJcbiAgICAgICAgICAgIC5sb2FkKGNoaWxkQ29udGFpbmVyLCB2aWV3TW9kZWxSZXNvdXJjZS52YWx1ZSwgbnVsbCwgdmlld1N0cmF0ZWd5LCB0cnVlKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmlld0ZhY3RvcnkpIHtcclxuICAgICAgICAgICAgaWYgKCFfdGhpcy5jb21wb3NpdGlvblRyYW5zYWN0aW9uTm90aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbiA9IF90aGlzLmNvbXBvc2l0aW9uVHJhbnNhY3Rpb24udHJ5Q2FwdHVyZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYXlvdXRJbnN0cnVjdGlvbi52aWV3TW9kZWwgfHwgbGF5b3V0SW5zdHJ1Y3Rpb24udmlldykge1xyXG4gICAgICAgICAgICAgICAgdmlld1BvcnRJbnN0cnVjdGlvbi5sYXlvdXRJbnN0cnVjdGlvbiA9IGxheW91dEluc3RydWN0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2aWV3UG9ydENvbXBvbmVudEJlaGF2aW9ySW5zdHJ1Y3Rpb24gPSBCZWhhdmlvckluc3RydWN0aW9uLmR5bmFtaWMoX3RoaXMuZWxlbWVudCwgdmlld01vZGVsLCB2aWV3RmFjdG9yeSk7XHJcbiAgICAgICAgICAgIHZpZXdQb3J0SW5zdHJ1Y3Rpb24uY29udHJvbGxlciA9IG1ldGFkYXRhLmNyZWF0ZShjaGlsZENvbnRhaW5lciwgdmlld1BvcnRDb21wb25lbnRCZWhhdmlvckluc3RydWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHdhaXRUb1N3YXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnN3YXAodmlld1BvcnRJbnN0cnVjdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUm91dGVyVmlldy5wcm90b3R5cGUuc3dhcCA9IGZ1bmN0aW9uICgkdmlld1BvcnRJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHZpZXdQb3J0SW5zdHJ1Y3Rpb24gPSAkdmlld1BvcnRJbnN0cnVjdGlvbjtcclxuICAgICAgICB2YXIgdmlld1BvcnRDb250cm9sbGVyID0gdmlld1BvcnRJbnN0cnVjdGlvbi5jb250cm9sbGVyO1xyXG4gICAgICAgIHZhciBsYXlvdXRJbnN0cnVjdGlvbiA9IHZpZXdQb3J0SW5zdHJ1Y3Rpb24ubGF5b3V0SW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgdmFyIHByZXZpb3VzVmlldyA9IHRoaXMudmlldztcclxuICAgICAgICB2YXIgd29yayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN3YXBTdHJhdGVneSA9IFN3YXBTdHJhdGVnaWVzW190aGlzLnN3YXBPcmRlcl0gfHwgU3dhcFN0cmF0ZWdpZXMuYWZ0ZXI7XHJcbiAgICAgICAgICAgIHZhciB2aWV3U2xvdCA9IF90aGlzLnZpZXdTbG90O1xyXG4gICAgICAgICAgICBzd2FwU3RyYXRlZ3kodmlld1Nsb3QsIHByZXZpb3VzVmlldywgZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZpZXdTbG90LmFkZChfdGhpcy52aWV3KSk7IH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX25vdGlmeSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWFkeSA9IGZ1bmN0aW9uIChvd25pbmdWaWV3X29yX2xheW91dFZpZXcpIHtcclxuICAgICAgICAgICAgdmlld1BvcnRDb250cm9sbGVyLmF1dG9tYXRlKF90aGlzLm92ZXJyaWRlQ29udGV4dCwgb3duaW5nVmlld19vcl9sYXlvdXRWaWV3KTtcclxuICAgICAgICAgICAgdmFyIHRyYW5zYWN0aW9uT3duZXJTaGlwVG9rZW4gPSBfdGhpcy5jb21wb3NpdGlvblRyYW5zYWN0aW9uT3duZXJzaGlwVG9rZW47XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbk93bmVyU2hpcFRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Pd25lclNoaXBUb2tlblxyXG4gICAgICAgICAgICAgICAgICAgIC53YWl0Rm9yQ29tcG9zaXRpb25Db21wbGV0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbXBvc2l0aW9uVHJhbnNhY3Rpb25Pd25lcnNoaXBUb2tlbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmsoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB3b3JrKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAobGF5b3V0SW5zdHJ1Y3Rpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFsYXlvdXRJbnN0cnVjdGlvbi52aWV3TW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIGxheW91dEluc3RydWN0aW9uLnZpZXdNb2RlbCA9IG5ldyBFbXB0eUxheW91dFZpZXdNb2RlbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvc2l0aW9uRW5naW5lXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlQ29udHJvbGxlcihsYXlvdXRJbnN0cnVjdGlvbilcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChsYXlvdXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF5b3V0VmlldyA9IGxheW91dENvbnRyb2xsZXIudmlldztcclxuICAgICAgICAgICAgICAgIFNoYWRvd0RPTS5kaXN0cmlidXRlVmlldyh2aWV3UG9ydENvbnRyb2xsZXIudmlldywgbGF5b3V0Q29udHJvbGxlci5zbG90cyB8fCBsYXlvdXRWaWV3LnNsb3RzKTtcclxuICAgICAgICAgICAgICAgIGxheW91dENvbnRyb2xsZXIuYXV0b21hdGUoY3JlYXRlT3ZlcnJpZGVDb250ZXh0KGxheW91dEluc3RydWN0aW9uLnZpZXdNb2RlbCksIF90aGlzLm93bmluZ1ZpZXcpO1xyXG4gICAgICAgICAgICAgICAgbGF5b3V0Vmlldy5jaGlsZHJlbi5wdXNoKHZpZXdQb3J0Q29udHJvbGxlci52aWV3KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsYXlvdXRWaWV3IHx8IGxheW91dENvbnRyb2xsZXI7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobmV3Vmlldykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudmlldyA9IG5ld1ZpZXc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZHkobmV3Vmlldyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3UG9ydENvbnRyb2xsZXIudmlldztcclxuICAgICAgICByZXR1cm4gcmVhZHkodGhpcy5vd25pbmdWaWV3KTtcclxuICAgIH07XHJcbiAgICBSb3V0ZXJWaWV3LnByb3RvdHlwZS5fbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub3RpZmllciA9IHRoaXMuY29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyO1xyXG4gICAgICAgIGlmIChub3RpZmllcikge1xyXG4gICAgICAgICAgICBub3RpZmllci5kb25lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9zaXRpb25UcmFuc2FjdGlvbk5vdGlmaWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUm91dGVyVmlldy4kdmlldyA9IG51bGw7XHJcbiAgICBSb3V0ZXJWaWV3LiRyZXNvdXJjZSA9IHtcclxuICAgICAgICBuYW1lOiAncm91dGVyLXZpZXcnLFxyXG4gICAgICAgIGJpbmRhYmxlczogWydzd2FwT3JkZXInLCAnbGF5b3V0VmlldycsICdsYXlvdXRWaWV3TW9kZWwnLCAnbGF5b3V0TW9kZWwnLCAnaW5oZXJpdC1iaW5kaW5nLWNvbnRleHQnXVxyXG4gICAgfTtcclxuICAgIHJldHVybiBSb3V0ZXJWaWV3O1xyXG59KCkpO1xyXG52YXIgUm91dGVyVmlld0xvY2F0b3IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUm91dGVyVmlld0xvY2F0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gX3RoaXMucmVzb2x2ZSA9IHJlc29sdmU7IH0pO1xyXG4gICAgfVxyXG4gICAgUm91dGVyVmlld0xvY2F0b3IucHJvdG90eXBlLmZpbmROZWFyZXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgUm91dGVyVmlld0xvY2F0b3IucHJvdG90eXBlLl9ub3RpZnkgPSBmdW5jdGlvbiAocm91dGVyVmlldykge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZShyb3V0ZXJWaWV3KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUm91dGVyVmlld0xvY2F0b3I7XHJcbn0oKSk7XG5cbnZhciBFbXB0eUNsYXNzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVtcHR5Q2xhc3MoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW1wdHlDbGFzcztcclxufSgpKTtcclxuaW5saW5lVmlldygnPHRlbXBsYXRlPjwvdGVtcGxhdGU+JykoRW1wdHlDbGFzcyk7XHJcbnZhciBUZW1wbGF0aW5nUm91dGVMb2FkZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFRlbXBsYXRpbmdSb3V0ZUxvYWRlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRlbXBsYXRpbmdSb3V0ZUxvYWRlcihjb21wb3NpdGlvbkVuZ2luZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuY29tcG9zaXRpb25FbmdpbmUgPSBjb21wb3NpdGlvbkVuZ2luZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBUZW1wbGF0aW5nUm91dGVMb2FkZXIucHJvdG90eXBlLnJlc29sdmVWaWV3TW9kZWwgPSBmdW5jdGlvbiAocm91dGVyLCBjb25maWcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgdmlld01vZGVsO1xyXG4gICAgICAgICAgICBpZiAoJ21vZHVsZUlkJyBpbiBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2R1bGVJZCA9IGNvbmZpZy5tb2R1bGVJZDtcclxuICAgICAgICAgICAgICAgIGlmIChtb2R1bGVJZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbCA9IEVtcHR5Q2xhc3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVJZCA9IHJlbGF0aXZlVG9GaWxlKG1vZHVsZUlkLCBPcmlnaW4uZ2V0KHJvdXRlci5jb250YWluZXIudmlld01vZGVsLmNvbnN0cnVjdG9yKS5tb2R1bGVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9cXC5odG1sL2kudGVzdChtb2R1bGVJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01vZGVsID0gY3JlYXRlRHluYW1pY0NsYXNzKG1vZHVsZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbCA9IG1vZHVsZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHZpZXdNb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCByb3V0ZSBjb25maWcuIE5vIFwibW9kdWxlSWRcIiBmb3VuZC4nKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGluZ1JvdXRlTG9hZGVyLnByb3RvdHlwZS5jcmVhdGVDaGlsZENvbnRhaW5lciA9IGZ1bmN0aW9uIChyb3V0ZXIpIHtcclxuICAgICAgICB2YXIgY2hpbGRDb250YWluZXIgPSByb3V0ZXIuY29udGFpbmVyLmNyZWF0ZUNoaWxkKCk7XHJcbiAgICAgICAgY2hpbGRDb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24oUm91dGVyVmlld0xvY2F0b3IpO1xyXG4gICAgICAgIGNoaWxkQ29udGFpbmVyLmdldENoaWxkUm91dGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRSb3V0ZXI7XHJcbiAgICAgICAgICAgIGNoaWxkQ29udGFpbmVyLnJlZ2lzdGVySGFuZGxlcihSb3V0ZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoaWxkUm91dGVyIHx8IChjaGlsZFJvdXRlciA9IHJvdXRlci5jcmVhdGVDaGlsZChjaGlsZENvbnRhaW5lcikpOyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkQ29udGFpbmVyLmdldChSb3V0ZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkQ29udGFpbmVyO1xyXG4gICAgfTtcclxuICAgIFRlbXBsYXRpbmdSb3V0ZUxvYWRlci5wcm90b3R5cGUubG9hZFJvdXRlID0gZnVuY3Rpb24gKHJvdXRlciwgY29uZmlnLCBuYXZJbnN0cnVjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgLnJlc29sdmVWaWV3TW9kZWwocm91dGVyLCBjb25maWcpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2aWV3TW9kZWwpIHsgcmV0dXJuIF90aGlzLmNvbXBvc2l0aW9uRW5naW5lLmVuc3VyZVZpZXdNb2RlbCh7XHJcbiAgICAgICAgICAgIHZpZXdNb2RlbDogdmlld01vZGVsLFxyXG4gICAgICAgICAgICBjaGlsZENvbnRhaW5lcjogX3RoaXMuY3JlYXRlQ2hpbGRDb250YWluZXIocm91dGVyKSxcclxuICAgICAgICAgICAgdmlldzogY29uZmlnLnZpZXcgfHwgY29uZmlnLnZpZXdTdHJhdGVneSxcclxuICAgICAgICAgICAgcm91dGVyOiByb3V0ZXJcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgVGVtcGxhdGluZ1JvdXRlTG9hZGVyLmluamVjdCA9IFtDb21wb3NpdGlvbkVuZ2luZV07XHJcbiAgICByZXR1cm4gVGVtcGxhdGluZ1JvdXRlTG9hZGVyO1xyXG59KFJvdXRlTG9hZGVyKSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUR5bmFtaWNDbGFzcyhtb2R1bGVJZCkge1xyXG4gICAgdmFyIG5hbWUgPSAvKFteXFwvXlxcP10rKVxcLmh0bWwvaS5leGVjKG1vZHVsZUlkKVsxXTtcclxuICAgIHZhciBEeW5hbWljQ2xhc3MgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIER5bmFtaWNDbGFzcygpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgRHluYW1pY0NsYXNzLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGJpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudCA9IGJpbmRpbmdDb250ZXh0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIER5bmFtaWNDbGFzcztcclxuICAgIH0oKSk7XHJcbiAgICBjdXN0b21FbGVtZW50KG5hbWUpKER5bmFtaWNDbGFzcyk7XHJcbiAgICB1c2VWaWV3KG1vZHVsZUlkKShEeW5hbWljQ2xhc3MpO1xyXG4gICAgcmV0dXJuIER5bmFtaWNDbGFzcztcclxufVxuXG52YXIgbG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoJ3JvdXRlLWhyZWYnKTtcclxudmFyIFJvdXRlSHJlZiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSb3V0ZUhyZWYocm91dGVyLCBlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZSA9ICdocmVmJztcclxuICAgIH1cclxuICAgIFJvdXRlSHJlZi5pbmplY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtSb3V0ZXIsIERPTS5FbGVtZW50XTtcclxuICAgIH07XHJcbiAgICBSb3V0ZUhyZWYucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzQ2hhbmdlKCk7XHJcbiAgICB9O1xyXG4gICAgUm91dGVIcmVmLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIFJvdXRlSHJlZi5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJldmlvdXMpIHtcclxuICAgICAgICBpZiAocHJldmlvdXMpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcmV2aW91cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NDaGFuZ2UoKTtcclxuICAgIH07XHJcbiAgICBSb3V0ZUhyZWYucHJvdG90eXBlLnByb2Nlc3NDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZXJcclxuICAgICAgICAgICAgLmVuc3VyZUNvbmZpZ3VyZWQoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3RoaXMuZWxlbWVudDtcclxuICAgICAgICAgICAgdmFyIGhyZWYgPSBfdGhpcy5yb3V0ZXIuZ2VuZXJhdGUoX3RoaXMucm91dGUsIF90aGlzLnBhcmFtcyk7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmF1LmNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXUuY29udHJvbGxlci52aWV3TW9kZWxbX3RoaXMuYXR0cmlidXRlXSA9IGhyZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShfdGhpcy5hdHRyaWJ1dGUsIGhyZWYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihyZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJvdXRlSHJlZi4kcmVzb3VyY2UgPSB7XHJcbiAgICAgICAgdHlwZTogJ2F0dHJpYnV0ZScsXHJcbiAgICAgICAgbmFtZTogJ3JvdXRlLWhyZWYnLFxyXG4gICAgICAgIGJpbmRhYmxlczogW1xyXG4gICAgICAgICAgICB7IG5hbWU6ICdyb3V0ZScsIGNoYW5nZUhhbmRsZXI6ICdwcm9jZXNzQ2hhbmdlJywgcHJpbWFyeVByb3BlcnR5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ3BhcmFtcycsIGNoYW5nZUhhbmRsZXI6ICdwcm9jZXNzQ2hhbmdlJyB9LFxyXG4gICAgICAgICAgICAnYXR0cmlidXRlJ1xyXG4gICAgICAgIF1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUm91dGVIcmVmO1xyXG59KCkpO1xuXG5mdW5jdGlvbiBjb25maWd1cmUoY29uZmlnKSB7XHJcbiAgICBjb25maWdcclxuICAgICAgICAuc2luZ2xldG9uKFJvdXRlTG9hZGVyLCBUZW1wbGF0aW5nUm91dGVMb2FkZXIpXHJcbiAgICAgICAgLnNpbmdsZXRvbihSb3V0ZXIsIEFwcFJvdXRlcilcclxuICAgICAgICAuZ2xvYmFsUmVzb3VyY2VzKFJvdXRlclZpZXcsIFJvdXRlSHJlZik7XHJcbiAgICBjb25maWcuY29udGFpbmVyLnJlZ2lzdGVyQWxpYXMoUm91dGVyLCBBcHBSb3V0ZXIpO1xyXG59XG5cbmV4cG9ydCB7IFJvdXRlSHJlZiwgUm91dGVyVmlldywgUm91dGVyVmlld0xvY2F0b3IsIFRlbXBsYXRpbmdSb3V0ZUxvYWRlciwgY29uZmlndXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXJlbGlhLXRlbXBsYXRpbmctcm91dGVyLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F1cmVsaWEtdGVtcGxhdGluZy1yb3V0ZXIvZGlzdC9uYXRpdmUtbW9kdWxlcy9hdXJlbGlhLXRlbXBsYXRpbmctcm91dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSBhdXJlbGlhLXRlbXBsYXRpbmctcm91dGVyXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUM3TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDNXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ24xSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQzlrTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMzSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDcm9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDelNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQzNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9yRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQ3h4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMvOERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Iiwic291cmNlUm9vdCI6IiJ9